.. index:: pair: class; cv::ConjGradSolver
.. _doxid-df/d8a/classcv_1_1_conj_grad_solver:

class cv::ConjGradSolver
========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class is used to perform the non-linear non-constrained minimization of a function with known gradient,. :ref:`More...<details-df/d8a/classcv_1_1_conj_grad_solver>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <optim.hpp>
	
	class ConjGradSolver: public :ref:`cv::MinProblemSolver<doxid-d0/d39/classcv_1_1_min_problem_solver>`
	{
	public:
		// methods
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<ConjGradSolver>
		:ref:`create<doxid-df/d8a/classcv_1_1_conj_grad_solver_1ad64e8d003cc3a6682b4fa7ab18c0c0e9>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`MinProblemSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>& f = :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ConjGradSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>(),
			:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` termcrit = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::MAX_ITER<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a56ca2bc5cd06345060a1c1c66a8fc06e>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 5000, 0.000001)
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// classes
	
		class :ref:`Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`;

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>
		:ref:`getFunction<doxid-d0/d39/classcv_1_1_min_problem_solver_1aa21b828e74653fb760f021c27d1f498a>`() const = 0;
	
		virtual
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
		:ref:`getTermCriteria<doxid-d0/d39/classcv_1_1_min_problem_solver_1aacdc1d10d144990d0aad163f0239efb4>`() const = 0;
	
		virtual
		double
		:ref:`minimize<doxid-d0/d39/classcv_1_1_min_problem_solver_1ade85ab8dceca1ee4974f62b758fa90af>`(:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` x) = 0;
	
		virtual
		void
		:ref:`setFunction<doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>`(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>& f) = 0;
	
		virtual
		void
		:ref:`setTermCriteria<doxid-d0/d39/classcv_1_1_min_problem_solver_1aad56ae718e6cde978cac28e6ae1d58e7>`(const :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& termcrit) = 0;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-df/d8a/classcv_1_1_conj_grad_solver:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class is used to perform the non-linear non-constrained minimization of a function with known gradient,.

defined on an *n* -dimensional Euclidean space, using the **Nonlinear Conjugate Gradient method**. The implementation was done based on the beautifully clear explanatory article [An Introduction to the Conjugate Gradient Method Without the Agonizing Pain](`http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf <http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf>`__) by Jonathan Richard Shewchuk. The method can be seen as an adaptation of a standard Conjugate Gradient method (see, for example `http://en.wikipedia.org/wiki/Conjugate_gradient_method <http://en.wikipedia.org/wiki/Conjugate_gradient_method>`__) for numerically solving the systems of linear equations.

It should be noted, that this method, although deterministic, is rather a heuristic method and therefore may converge to a local minima, not necessary a global one. What is even more disastrous, most of its behaviour is ruled by gradient, therefore it essentially cannot distinguish between local minima and maxima. Therefore, if it starts sufficiently near to the local maximum, it may converge to it. Another obvious restriction is that it should be possible to compute the gradient of a function at any point, thus it is preferable to have analytic expression for gradient and computational burden should be born by the user.

The latter responsibility is accompilished via the getGradient method of a :ref:`MinProblemSolver::Function <doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>` interface (which represents function being optimized). This method takes point a point in *n* -dimensional space (first argument represents the array of coordinates of that point) and comput its gradient (it should be stored in the second argument as an array).

class :ref:`ConjGradSolver <doxid-df/d8a/classcv_1_1_conj_grad_solver>` thus does not add any new methods to the basic :ref:`MinProblemSolver <doxid-d0/d39/classcv_1_1_min_problem_solver>` interface.

term criteria should meet following condition:

.. ref-code-block:: cpp

	termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0
	// or
	termcrit.type == TermCriteria::MAX_ITER) && termcrit.maxCount > 0

Methods
-------

.. index:: pair: function; create
.. _doxid-df/d8a/classcv_1_1_conj_grad_solver_1ad64e8d003cc3a6682b4fa7ab18c0c0e9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<ConjGradSolver>
	create(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`MinProblemSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>& f = :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ConjGradSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>(),
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` termcrit = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::MAX_ITER<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a56ca2bc5cd06345060a1c1c66a8fc06e>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 5000, 0.000001)
		)

This function returns the reference to the ready-to-use :ref:`ConjGradSolver <doxid-df/d8a/classcv_1_1_conj_grad_solver>` object.

All the parameters are optional, so this procedure can be called even without parameters at all. In this case, the default values will be used. As default value for terminal criteria are the only sensible ones, :ref:`MinProblemSolver::setFunction() <doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>` should be called upon the obtained object, if the function was not given to :ref:`create() <doxid-df/d8a/classcv_1_1_conj_grad_solver_1ad64e8d003cc3a6682b4fa7ab18c0c0e9>`. Otherwise, the two ways (submit it to :ref:`create() <doxid-df/d8a/classcv_1_1_conj_grad_solver_1ad64e8d003cc3a6682b4fa7ab18c0c0e9>` or miss it out and call the :ref:`MinProblemSolver::setFunction() <doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>`) are absolutely equivalent (and will drop the same errors in the same way, should invalid input be detected).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- f

		- Pointer to the function that will be minimized, similarly to the one you submit via :ref:`MinProblemSolver::setFunction <doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>`.

	*
		- termcrit

		- Terminal criteria to the algorithm, similarly to the one you submit via :ref:`MinProblemSolver::setTermCriteria <doxid-d0/d39/classcv_1_1_min_problem_solver_1aad56ae718e6cde978cac28e6ae1d58e7>`.

