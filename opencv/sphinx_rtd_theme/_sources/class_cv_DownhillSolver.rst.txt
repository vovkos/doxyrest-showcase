.. index:: pair: class; cv::DownhillSolver
.. _doxid-df/dac/classcv_1_1_downhill_solver:

class cv::DownhillSolver
========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class is used to perform the non-linear non-constrained minimization of a function,. :ref:`More...<details-df/dac/classcv_1_1_downhill_solver>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <optim.hpp>
	
	class DownhillSolver: public :ref:`cv::MinProblemSolver<doxid-d0/d39/classcv_1_1_min_problem_solver>`
	{
	public:
		// methods
	
		virtual
		void
		:ref:`getInitStep<doxid-df/dac/classcv_1_1_downhill_solver_1a7e16f43c3e2c536628d2d6366a188a41>`(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` step) const = 0;
	
		virtual
		void
		:ref:`setInitStep<doxid-df/dac/classcv_1_1_downhill_solver_1ab8038b328aee43b07760a346cebdc5a6>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` step) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<DownhillSolver>
		:ref:`create<doxid-df/dac/classcv_1_1_downhill_solver_1a9ef15380f5843cd4ccd9b4f3308ce0de>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`MinProblemSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>& f = :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`MinProblemSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>(),
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` initStep = :ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`<double>(1, 1, 0.0),
			:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` termcrit = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::MAX_ITER<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a56ca2bc5cd06345060a1c1c66a8fc06e>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 5000, 0.000001)
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// classes
	
		class :ref:`Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`;

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>
		:ref:`getFunction<doxid-d0/d39/classcv_1_1_min_problem_solver_1aa21b828e74653fb760f021c27d1f498a>`() const = 0;
	
		virtual
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
		:ref:`getTermCriteria<doxid-d0/d39/classcv_1_1_min_problem_solver_1aacdc1d10d144990d0aad163f0239efb4>`() const = 0;
	
		virtual
		double
		:ref:`minimize<doxid-d0/d39/classcv_1_1_min_problem_solver_1ade85ab8dceca1ee4974f62b758fa90af>`(:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` x) = 0;
	
		virtual
		void
		:ref:`setFunction<doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>`(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>& f) = 0;
	
		virtual
		void
		:ref:`setTermCriteria<doxid-d0/d39/classcv_1_1_min_problem_solver_1aad56ae718e6cde978cac28e6ae1d58e7>`(const :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& termcrit) = 0;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-df/dac/classcv_1_1_downhill_solver:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class is used to perform the non-linear non-constrained minimization of a function,.

defined on an ``n`` -dimensional Euclidean space, using the **Nelder-Mead method**, also known as downhill simplex method\*\*. The basic idea about the method can be obtained from `http://en.wikipedia.org/wiki/Nelder-Mead_method <http://en.wikipedia.org/wiki/Nelder-Mead_method>`__.

It should be noted, that this method, although deterministic, is rather a heuristic and therefore may converge to a local minima, not necessary a global one. It is iterative optimization technique, which at each step uses an information about the values of a function evaluated only at ``n+1`` points, arranged as a *simplex* in ``n`` -dimensional space (hence the second name of the method). At each step new point is chosen to evaluate function at, obtained value is compared with previous ones and based on this information simplex changes it's shape , slowly moving to the local minimum. Thus this method is using *only* function values to make decision, on contrary to, say, Nonlinear Conjugate Gradient method (which is also implemented in optim).

:ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>` stops when the number of function evaluations done exceeds termcrit.maxCount, when the function values at the vertices of simplex are within termcrit.epsilon range or simplex becomes so small that it can enclosed in a box with termcrit.epsilon sides, whatever comes first, for some defined by user positive integer termcrit.maxCount and positive non-integer termcrit.epsilon.

:ref:`DownhillSolver <doxid-df/dac/classcv_1_1_downhill_solver>` is a derivative of the abstract interface :ref:`cv::MinProblemSolver <doxid-d0/d39/classcv_1_1_min_problem_solver>`, which in turn is derived from the :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>` interface and is used to encapsulate the functionality, common to all non-linear optimization algorithms in the optim module.

term criteria should meet following condition:

.. ref-code-block:: cpp

	termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0

Methods
-------

.. index:: pair: function; getInitStep
.. _doxid-df/dac/classcv_1_1_downhill_solver_1a7e16f43c3e2c536628d2d6366a188a41:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	getInitStep(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` step) const = 0

Returns the initial step that will be used in downhill simplex algorithm.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- step

		- Initial step that will be used in algorithm. Note, that although corresponding setter accepts column-vectors as well as row-vectors, this method will return a row-vector.



.. rubric:: See also:

:ref:`DownhillSolver::setInitStep <doxid-df/dac/classcv_1_1_downhill_solver_1ab8038b328aee43b07760a346cebdc5a6>`

.. index:: pair: function; setInitStep
.. _doxid-df/dac/classcv_1_1_downhill_solver_1ab8038b328aee43b07760a346cebdc5a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setInitStep(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` step) = 0

Sets the initial step that will be used in downhill simplex algorithm.

Step, together with initial point (givin in :ref:`DownhillSolver::minimize <doxid-d0/d39/classcv_1_1_min_problem_solver_1ade85ab8dceca1ee4974f62b758fa90af>`) are two ``n`` -dimensional vectors that are used to determine the shape of initial simplex. Roughly said, initial point determines the position of a simplex (it will become simplex's centroid), while step determines the spread (size in each dimension) of a simplex. To be more precise, if :math:`s,x_0\in\mathbb{R}^n` are the initial step and initial point respectively, the vertices of a simplex will be: :math:`v_0:=x_0-\frac{1}{2} s` and :math:`v_i:=x_0+s_i` for :math:`i=1,2,\dots,n` where :math:`s_i` denotes projections of the initial step of *n* -th coordinate (the result of projection is treated to be vector given by :math:`s_i:=e_i\cdot\left<e_i\cdot s\right>`, where :math:`e_i` form canonical basis)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- step

		- Initial step that will be used in algorithm. Roughly said, it determines the spread (size in each dimension) of an initial simplex.

.. index:: pair: function; create
.. _doxid-df/dac/classcv_1_1_downhill_solver_1a9ef15380f5843cd4ccd9b4f3308ce0de:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<DownhillSolver>
	create(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`MinProblemSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>& f = :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`MinProblemSolver::Function<doxid-da/da2/classcv_1_1_min_problem_solver_1_1_function>`>(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` initStep = :ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`<double>(1, 1, 0.0),
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` termcrit = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::MAX_ITER<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a56ca2bc5cd06345060a1c1c66a8fc06e>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 5000, 0.000001)
		)

This function returns the reference to the ready-to-use :ref:`DownhillSolver <doxid-df/dac/classcv_1_1_downhill_solver>` object.

All the parameters are optional, so this procedure can be called even without parameters at all. In this case, the default values will be used. As default value for terminal criteria are the only sensible ones, :ref:`MinProblemSolver::setFunction() <doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>` and :ref:`DownhillSolver::setInitStep() <doxid-df/dac/classcv_1_1_downhill_solver_1ab8038b328aee43b07760a346cebdc5a6>` should be called upon the obtained object, if the respective parameters were not given to :ref:`create() <doxid-df/dac/classcv_1_1_downhill_solver_1a9ef15380f5843cd4ccd9b4f3308ce0de>`. Otherwise, the two ways (give parameters to createDownhillSolver() or miss them out and call the :ref:`MinProblemSolver::setFunction() <doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>` and :ref:`DownhillSolver::setInitStep() <doxid-df/dac/classcv_1_1_downhill_solver_1ab8038b328aee43b07760a346cebdc5a6>`) are absolutely equivalent (and will drop the same errors in the same way, should invalid input be detected).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- f

		- Pointer to the function that will be minimized, similarly to the one you submit via :ref:`MinProblemSolver::setFunction <doxid-d0/d39/classcv_1_1_min_problem_solver_1a22632a6392d2e159a8e01c2ed697cbe0>`.

	*
		- initStep

		- Initial step, that will be used to construct the initial simplex, similarly to the one you submit via MinProblemSolver::setInitStep.

	*
		- termcrit

		- Terminal criteria to the algorithm, similarly to the one you submit via :ref:`MinProblemSolver::setTermCriteria <doxid-d0/d39/classcv_1_1_min_problem_solver_1aad56ae718e6cde978cac28e6ae1d58e7>`.

