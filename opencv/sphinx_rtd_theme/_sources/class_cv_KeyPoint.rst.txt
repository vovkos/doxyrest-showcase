.. index:: pair: class; cv::KeyPoint
.. _doxid-de/df1/classcv_1_1_key_point:

class cv::KeyPoint
==================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Data structure for salient point detectors. :ref:`More...<details-de/df1/classcv_1_1_key_point>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <types.hpp>
	
	class KeyPoint
	{
	public:
		// fields
	
		float :ref:`angle<doxid-de/df1/classcv_1_1_key_point_1a4484e94502486930e94e7391adf9d215>`;
		int :ref:`class_id<doxid-de/df1/classcv_1_1_key_point_1aea339bc868102430087b659cd0709c11>`;
		int :ref:`octave<doxid-de/df1/classcv_1_1_key_point_1aee152750aa98ea54a48196a937197095>`;
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` :ref:`pt<doxid-de/df1/classcv_1_1_key_point_1ae6b87d798d3e181a472b08fa33883abe>`;
		float :ref:`response<doxid-de/df1/classcv_1_1_key_point_1a1f163ac418c281042e28895b20514360>`;
		float :ref:`size<doxid-de/df1/classcv_1_1_key_point_1a308006c9f963547a8cff61548ddd2ef2>`;

		// construction
	
		:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point_1a507d41b54805e9ee5042b922e68e4372>`();
	
		:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point_1a8ce2d246f9dbd4ce3f1539bf40be9533>`(
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` _pt,
			float _size,
			float _angle = -1,
			float _response = 0,
			int _octave = 0,
			int _class_id = -1
			);
	
		:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point_1a2990cc1848eeb189cac9709f04c8f4d3>`(
			float x,
			float y,
			float _size,
			float _angle = -1,
			float _response = 0,
			int _octave = 0,
			int _class_id = -1
			);

		// methods
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:target:`hash<doxid-de/df1/classcv_1_1_key_point_1ac90165a05ac1ffc86a2282299acad922>`() const;
	
		static
		void
		:ref:`convert<doxid-de/df1/classcv_1_1_key_point_1acfcc8e0dd1a634a7583686e18d372237>`(
			const std::vector<KeyPoint>& keypoints,
			std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& points2f,
			const std::vector<int>& keypointIndexes = std::vector<int>()
			);
	
		static
		void
		:ref:`convert<doxid-de/df1/classcv_1_1_key_point_1ab6a67a0ab17d65a1b28502eba424bfde>`(
			const std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& points2f,
			std::vector<KeyPoint>& keypoints,
			float size = 1,
			float response = 1,
			int octave = 0,
			int class_id = -1
			);
	
		static
		float
		:ref:`overlap<doxid-de/df1/classcv_1_1_key_point_1a6a56a625fb5fb0df7c63c69ce7713360>`(
			const KeyPoint& kp1,
			const KeyPoint& kp2
			);
	};
.. _details-de/df1/classcv_1_1_key_point:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Data structure for salient point detectors.

The class instance stores a keypoint, i.e. a point feature found by one of many available keypoint detectors, such as Harris corner detector, :ref:`cv::FAST <doxid-d5/d51/group__features2d__main_1ga816d870cbdca71c6790c71bdf17df099>`, cv::StarDetector, cv::SURF, cv::SIFT, cv::LDetector etc.

The keypoint is characterized by the 2D position, scale (proportional to the diameter of the neighborhood that needs to be taken into account), orientation and some other parameters. The keypoint neighborhood is then analyzed by another algorithm that builds a descriptor (usually represented as a feature vector). The keypoints representing the same object in different images can then be matched using cv::KDTree or another method.

Fields
------

.. index:: pair: variable; angle
.. _doxid-de/df1/classcv_1_1_key_point_1a4484e94502486930e94e7391adf9d215:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float angle

computed orientation of the keypoint (-1 if not applicable); it's in [0,360) degrees and measured relative to image coordinate system, ie in clockwise.

.. index:: pair: variable; class_id
.. _doxid-de/df1/classcv_1_1_key_point_1aea339bc868102430087b659cd0709c11:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int class_id

object class (if the keypoints need to be clustered by an object they belong to)

.. index:: pair: variable; octave
.. _doxid-de/df1/classcv_1_1_key_point_1aee152750aa98ea54a48196a937197095:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int octave

octave (pyramid layer) from which the keypoint has been extracted

.. index:: pair: variable; pt
.. _doxid-de/df1/classcv_1_1_key_point_1ae6b87d798d3e181a472b08fa33883abe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt

coordinates of the keypoints

.. index:: pair: variable; response
.. _doxid-de/df1/classcv_1_1_key_point_1a1f163ac418c281042e28895b20514360:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float response

the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling

.. index:: pair: variable; size
.. _doxid-de/df1/classcv_1_1_key_point_1a308006c9f963547a8cff61548ddd2ef2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float size

diameter of the meaningful keypoint neighborhood

Construction
------------

.. index:: pair: function; KeyPoint
.. _doxid-de/df1/classcv_1_1_key_point_1a507d41b54805e9ee5042b922e68e4372:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	KeyPoint()

the default constructor

.. index:: pair: function; KeyPoint
.. _doxid-de/df1/classcv_1_1_key_point_1a8ce2d246f9dbd4ce3f1539bf40be9533:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	KeyPoint(
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` _pt,
		float _size,
		float _angle = -1,
		float _response = 0,
		int _octave = 0,
		int _class_id = -1
		)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- _pt

		- x & y coordinates of the keypoint

	*
		- _size

		- keypoint diameter

	*
		- _angle

		- keypoint orientation

	*
		- _response

		- keypoint detector response on the keypoint (that is, strength of the keypoint)

	*
		- _octave

		- pyramid octave in which the keypoint has been detected

	*
		- _class_id

		- object id

.. index:: pair: function; KeyPoint
.. _doxid-de/df1/classcv_1_1_key_point_1a2990cc1848eeb189cac9709f04c8f4d3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	KeyPoint(
		float x,
		float y,
		float _size,
		float _angle = -1,
		float _response = 0,
		int _octave = 0,
		int _class_id = -1
		)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- x-coordinate of the keypoint

	*
		- y

		- y-coordinate of the keypoint

	*
		- _size

		- keypoint diameter

	*
		- _angle

		- keypoint orientation

	*
		- _response

		- keypoint detector response on the keypoint (that is, strength of the keypoint)

	*
		- _octave

		- pyramid octave in which the keypoint has been detected

	*
		- _class_id

		- object id

Methods
-------

.. index:: pair: function; convert
.. _doxid-de/df1/classcv_1_1_key_point_1acfcc8e0dd1a634a7583686e18d372237:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	convert(
		const std::vector<KeyPoint>& keypoints,
		std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& points2f,
		const std::vector<int>& keypointIndexes = std::vector<int>()
		)

This method converts vector of keypoints to vector of points or the reverse, where each keypoint is assigned the same size and the same orientation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- keypoints

		- Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB

	*
		- points2f

		- Array of (x,y) coordinates of each keypoint

	*
		- keypointIndexes

		- Array of indexes of keypoints to be converted to points. (Acts like a mask to convert only specified keypoints)

.. index:: pair: function; convert
.. _doxid-de/df1/classcv_1_1_key_point_1ab6a67a0ab17d65a1b28502eba424bfde:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	convert(
		const std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& points2f,
		std::vector<KeyPoint>& keypoints,
		float size = 1,
		float response = 1,
		int octave = 0,
		int class_id = -1
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points2f

		- Array of (x,y) coordinates of each keypoint

	*
		- keypoints

		- Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB

	*
		- size

		- keypoint diameter

	*
		- response

		- keypoint detector response on the keypoint (that is, strength of the keypoint)

	*
		- octave

		- pyramid octave in which the keypoint has been detected

	*
		- class_id

		- object id

.. index:: pair: function; overlap
.. _doxid-de/df1/classcv_1_1_key_point_1a6a56a625fb5fb0df7c63c69ce7713360:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	float
	overlap(
		const KeyPoint& kp1,
		const KeyPoint& kp2
		)

This method computes overlap for pair of keypoints. Overlap is the ratio between area of keypoint regions' intersection and area of keypoint regions' union (considering keypoint region as circle). If they don't overlap, we get zero. If they coincide at same location with same size, we get 1.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- kp1

		- First keypoint

	*
		- kp2

		- Second keypoint

