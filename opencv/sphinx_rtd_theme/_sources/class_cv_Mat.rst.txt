.. index:: pair: class; cv::Mat
.. _doxid-db/de6/classcv_1_1_mat:

class cv::Mat
=============

.. toctree::
	:hidden:

Overview
~~~~~~~~

n-dimensional dense array class :ref:`More...<details-db/de6/classcv_1_1_mat>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mat.hpp>
	
	class Mat
	{
	public:
		// enums
	
		enum
		{
		    :target:`MAGIC_VAL<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a2082a2faa4b65dedcc5b84433c97f817>`       = 0x42FF0000,
		    :target:`AUTO_STEP<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a1c147538fd896f4f9abce9eaea9727e3>`       = 0,
		    :target:`CONTINUOUS_FLAG<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a3a50403178ba15a9617f5ff341418cf9>` = CV_MAT_CONT_FLAG,
		    :target:`SUBMATRIX_FLAG<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a1db725f4a7efd16a41581b4fc54e7aad>`  = CV_SUBMAT_FLAG,
		};
	
		enum
		{
		    :target:`MAGIC_MASK<doxid-db/de6/classcv_1_1_mat_1a87050bff8776162f834f850b86081a57a1b2031796886cd80edd90640bc17fb50>` = 0xFFFF0000,
		    :target:`TYPE_MASK<doxid-db/de6/classcv_1_1_mat_1a87050bff8776162f834f850b86081a57a03b3e6a1defa1189b67c9f3d70b7c448>`  = 0x00000FFF,
		    :target:`DEPTH_MASK<doxid-db/de6/classcv_1_1_mat_1a87050bff8776162f834f850b86081a57a1454580da17d20c8ec5917170dc3da3a>` = 7,
		};

		// fields
	
		:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`* :ref:`allocator<doxid-db/de6/classcv_1_1_mat_1a4d2eb7a536cd5a0f18808b6112111d6a>`;
		int :target:`cols<doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>`;
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* :ref:`data<doxid-db/de6/classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564>`;
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* :target:`dataend<doxid-db/de6/classcv_1_1_mat_1ae756e84c94cbcf4c152ed0e67edb71ca>`;
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* :target:`datalimit<doxid-db/de6/classcv_1_1_mat_1a21a0a0eb9814f0093452601fcbdc8a46>`;
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* :ref:`datastart<doxid-db/de6/classcv_1_1_mat_1aeda6d607bfc629a95f59e7b538832172>`;
		int :ref:`dims<doxid-db/de6/classcv_1_1_mat_1a39cf614aa52567e9a945cd2609bd767b>`;
		int :ref:`flags<doxid-db/de6/classcv_1_1_mat_1af9333f06c84f115fda4cdf3af18c2ad0>`;
		int :ref:`rows<doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`;
		:ref:`MatSize<doxid-d3/d31/structcv_1_1_mat_size>` :target:`size<doxid-db/de6/classcv_1_1_mat_1a146f8e8dda07d1365a575ab83d9828d1>`;
		:ref:`MatStep<doxid-dc/d72/structcv_1_1_mat_step>` :target:`step<doxid-db/de6/classcv_1_1_mat_1ab4b0843e64328eb2a026b5b9ede726fe>`;
		:ref:`UMatData<doxid-dd/d13/structcv_1_1_u_mat_data>`* :ref:`u<doxid-db/de6/classcv_1_1_mat_1a2742469fe595e1b9036f60d752d08461>`;

		// construction
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc>`();
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a2ec3402f7d165ca34c7fd6e8498a62ca>`(
			int rows,
			int cols,
			int type
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a75a97b1e4e55f380c172af58048a7cde>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a3620c370690b5ca4d40c767be6fb4ceb>`(
			int rows,
			int cols,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a286371a6196eaaaf0b86e158590460b7>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a156df5a1326dd5c30b187b0e721a5f57>`(
			int ndims,
			const int* sizes,
			int type
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a6adc4d64db5379bcbb713e71c9292f6e>`(
			const std::vector<int>& sizes,
			int type
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1afbf34be80b7443123b2a032a67c3c4e3>`(
			int ndims,
			const int* sizes,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1ad20a78b5501fc39543a240142a40e234>`(
			const std::vector<int>& sizes,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a294eaf8a95d2f9c7be19ff594d06278e>`(const Mat& m);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a51615ebf17a64c968df0bf49b4de6a3a>`(
			int rows,
			int cols,
			int type,
			void* data,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` step = :ref:`AUTO_STEP<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a1c147538fd896f4f9abce9eaea9727e3>`
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a9fa74fb14362d87cb183453d2441948f>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type,
			void* data,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` step = :ref:`AUTO_STEP<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a1c147538fd896f4f9abce9eaea9727e3>`
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a5fafc033e089143062fd31015b5d0f40>`(
			int ndims,
			const int* sizes,
			int type,
			void* data,
			const :ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* steps = 0
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a922de793eabcec705b3579c5f95a643e>`(
			const std::vector<int>& sizes,
			int type,
			void* data,
			const :ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* steps = 0
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a92a3e9e5911a2eb0cf0950a0a9670c76>`(
			const Mat& m,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& rowRange,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& colRange = :ref:`Range::all<doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`()
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1aa7ec97373406215f2d4bc72cc1d27036>`(
			const Mat& m,
			const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1afde22a742fc73c0a150a9002310ac2eb>`(
			const Mat& m,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`* ranges
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1aa6e903a6c762478692791a33d233019b>`(
			const Mat& m,
			const std::vector<:ref:`Range<doxid-d7/d65/classcv_1_1_range>`>& ranges
			);
	
		template <typename _Tp>
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a23b182c4ffd46abe38f460c1480ae887>`(
			const std::vector<_Tp>& vec,
			bool copyData = false
			);
	
		template <
			typename _Tp,
			int n
			>
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a507e01fb48b34a3e5c45f9f5b00725e8>`(
			const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<_Tp, n>& vec,
			bool copyData = true
			);
	
		template <
			typename _Tp,
			int m,
			int n
			>
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a37068a8d9acc7cc5af817eb82b2aa83b>`(
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& mtx,
			bool copyData = true
			);
	
		template <typename _Tp>
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a224477889ddc7424aaab1b76e7682ea2>`(
			const :ref:`Point_<doxid-d9/d87/classcv_1_1_point__>`<_Tp>& pt,
			bool copyData = true
			);
	
		template <typename _Tp>
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a7d72610ed5aed9117eb7933a97670309>`(
			const :ref:`Point3_<doxid-d4/d29/classcv_1_1_point3__>`<_Tp>& pt,
			bool copyData = true
			);
	
		template <typename _Tp>
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1a23957ae2fed348c67952c0d69c873972>`(const :ref:`MatCommaInitializer_<doxid-d7/dfc/classcv_1_1_mat_comma_initializer__>`<_Tp>& commaInitializer);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat_1aa82eca82664985c81c7912b04549370d>`(const :ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`& m);

		// methods
	
		void
		:ref:`addref<doxid-db/de6/classcv_1_1_mat_1a9d3794250e3dc39714f980b4d0d45864>`();
	
		Mat&
		:ref:`adjustROI<doxid-db/de6/classcv_1_1_mat_1a2fece3507ee7e1284deee6da99e76b9b>`(
			int dtop,
			int dbottom,
			int dleft,
			int dright
			);
	
		void
		:ref:`assignTo<doxid-db/de6/classcv_1_1_mat_1aa8b3b4d7b9876a4726740b75daa98ddb>`(
			Mat& m,
			int type = -1
			) const;
	
		template <typename _Tp>
		_Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`(int i0 = 0);
	
		template <typename _Tp>
		const _Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a330d9adb78976b6efd4116c940924294>`(int i0 = 0) const;
	
		template <typename _Tp>
		_Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1ac40425b84f60b39fd35e03814122661f>`(
			int row,
			int col
			);
	
		template <typename _Tp>
		const _Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a5db6b18954e334048cb35752f49c6f8c>`(
			int row,
			int col
			) const;
	
		template <typename _Tp>
		_Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a305829ed5c0ecfef7b44db18953048e8>`(
			int i0,
			int i1,
			int i2
			);
	
		template <typename _Tp>
		const _Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a59c6c2d9db1cfba76d75addeeb4e6a84>`(
			int i0,
			int i1,
			int i2
			) const;
	
		template <typename _Tp>
		_Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a474bd5cdcf986672cfdc304f6be1cf64>`(const int* idx);
	
		template <typename _Tp>
		const _Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a2cbbb16670ae4d9aa747f19c24305213>`(const int* idx) const;
	
		template <
			typename _Tp,
			int n
			>
		_Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a9ec1aadc17ab8c8f8334d521719c7732>`(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx);
	
		template <
			typename _Tp,
			int n
			>
		const _Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a15c649a94cf2e06240b32b025231301f>`(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx) const;
	
		template <typename _Tp>
		_Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a23cd599a27c59bae64b0c40ad645ea49>`(:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt);
	
		template <typename _Tp>
		const _Tp&
		:ref:`at<doxid-db/de6/classcv_1_1_mat_1a87d0b2e01b0f8686957398ecfb168a6d>`(:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt) const;
	
		template <typename _Tp>
		:ref:`MatIterator_<doxid-da/d1f/classcv_1_1_mat_iterator__>`<_Tp>
		:ref:`begin<doxid-db/de6/classcv_1_1_mat_1a33ee3bc402827f587a5ad64b568d6986>`();
	
		template <typename _Tp>
		:ref:`MatConstIterator_<doxid-db/dbf/classcv_1_1_mat_const_iterator__>`<_Tp>
		:target:`begin<doxid-db/de6/classcv_1_1_mat_1aef8f88bc1f72757b0f2ddb3041611c73>`() const;
	
		int
		:ref:`channels<doxid-db/de6/classcv_1_1_mat_1aa11336b9ac538e0475d840657ce164be>`() const;
	
		int
		:ref:`checkVector<doxid-db/de6/classcv_1_1_mat_1a167a8e0a3a3d86e84b70e33483af4466>`(
			int elemChannels,
			int depth = -1,
			bool requireContinuous = true
			) const;
	
		Mat
		:ref:`clone<doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`() const;
	
		Mat
		:ref:`col<doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`(int x) const;
	
		Mat
		:ref:`colRange<doxid-db/de6/classcv_1_1_mat_1aadc8f9210fe4dec50513746c246fa8d9>`(
			int startcol,
			int endcol
			) const;
	
		Mat
		:ref:`colRange<doxid-db/de6/classcv_1_1_mat_1acccb63e44eba6ba81ead99881bd1997e>`(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& r) const;
	
		void
		:ref:`convertTo<doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`(
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
			int rtype,
			double alpha = 1,
			double beta = 0
			) const;
	
		void
		:ref:`copySize<doxid-db/de6/classcv_1_1_mat_1a39fd9880fc55b7a0993bcfff88061ac4>`(const Mat& m);
	
		void
		:ref:`copyTo<doxid-db/de6/classcv_1_1_mat_1a33fd5d125b4c302b0c9aa86980791a77>`(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m) const;
	
		void
		:ref:`copyTo<doxid-db/de6/classcv_1_1_mat_1a626fe5f96d02525e2604d2ad46dd574f>`(
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask
			) const;
	
		void
		:ref:`create<doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>`(
			int rows,
			int cols,
			int type
			);
	
		void
		:ref:`create<doxid-db/de6/classcv_1_1_mat_1a48409946d0e1bebb40fe765e18ec5eea>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		void
		:ref:`create<doxid-db/de6/classcv_1_1_mat_1aee53524ac61fa2ba441c4f29c3aca93f>`(
			int ndims,
			const int* sizes,
			int type
			);
	
		void
		:ref:`create<doxid-db/de6/classcv_1_1_mat_1a84f35d3923a92251631329eed66d2a12>`(
			const std::vector<int>& sizes,
			int type
			);
	
		Mat
		:ref:`cross<doxid-db/de6/classcv_1_1_mat_1a708b761e0d15b7b8db4c8e8c95a7abe9>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m) const;
	
		void
		:ref:`deallocate<doxid-db/de6/classcv_1_1_mat_1ac6e9cdf9b450e360f005978b4e981b1a>`();
	
		int
		:ref:`depth<doxid-db/de6/classcv_1_1_mat_1a8da9f853b6f3a29d738572fd1ffc44c0>`() const;
	
		Mat
		:ref:`diag<doxid-db/de6/classcv_1_1_mat_1a024cc0510a4c61c7f266d4ab9fe13d7a>`(int d = 0) const;
	
		double
		:ref:`dot<doxid-db/de6/classcv_1_1_mat_1a0f683eab191eeece33dfc64ae299a9cb>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`elemSize<doxid-db/de6/classcv_1_1_mat_1aba7a5ef00b22b70668fba575005dfe55>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`elemSize1<doxid-db/de6/classcv_1_1_mat_1a9acde8f32d4b294558fb406bc05171bc>`() const;
	
		bool
		:ref:`empty<doxid-db/de6/classcv_1_1_mat_1abbec3525a852e77998aba034813fded4>`() const;
	
		template <typename _Tp>
		:ref:`MatIterator_<doxid-da/d1f/classcv_1_1_mat_iterator__>`<_Tp>
		:ref:`end<doxid-db/de6/classcv_1_1_mat_1a9dd628eeccedea6e181ca54d41830a62>`();
	
		template <typename _Tp>
		:ref:`MatConstIterator_<doxid-db/dbf/classcv_1_1_mat_const_iterator__>`<_Tp>
		:target:`end<doxid-db/de6/classcv_1_1_mat_1a092f54359c99e42729715024fc662182>`() const;
	
		template <
			typename _Tp,
			typename Functor
			>
		void
		:ref:`forEach<doxid-db/de6/classcv_1_1_mat_1a952ef1a85d70a510240cb645a90efc0d>`(const Functor& operation);
	
		template <
			typename _Tp,
			typename Functor
			>
		void
		:ref:`forEach<doxid-db/de6/classcv_1_1_mat_1afcee31e71fd6991148fd3bb619971e2b>`(const Functor& operation) const;
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`
		:ref:`getUMat<doxid-db/de6/classcv_1_1_mat_1a8676ddda9951ec3766efe0265d808a71>`(
			int accessFlags,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			) const;
	
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`inv<doxid-db/de6/classcv_1_1_mat_1a039eb3c6740a850696a12519a4b8bfc6>`(int method = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`) const;
	
		bool
		:ref:`isContinuous<doxid-db/de6/classcv_1_1_mat_1aa90cea495029c7d1ee0a41361ccecdf3>`() const;
	
		bool
		:ref:`isSubmatrix<doxid-db/de6/classcv_1_1_mat_1ab34367822008627e80e144d7bba3bd70>`() const;
	
		void
		:ref:`locateROI<doxid-db/de6/classcv_1_1_mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`& wholeSize,
			:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& ofs
			) const;
	
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`mul<doxid-db/de6/classcv_1_1_mat_1a385c09827713dc3e6d713bfad8460706>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m,
			double scale = 1
			) const;
	
		template <
			typename _Tp,
			int m,
			int n
			>
		:target:`operator Matx< _Tp, m, n ><doxid-db/de6/classcv_1_1_mat_1a75b1b5424cf014f00d8f06ba1818a5d8>`() const;
	
		template <typename _Tp>
		:target:`operator std::vector< _Tp ><doxid-db/de6/classcv_1_1_mat_1a5d043937e7a4cad632397a9dd8dfee2e>`() const;
	
		template <
			typename _Tp,
			int n
			>
		:target:`operator Vec< _Tp, n ><doxid-db/de6/classcv_1_1_mat_1ae4766cf75071f4e4db698c4120abe57b>`() const;
	
		Mat
		:ref:`operator()<doxid-db/de6/classcv_1_1_mat_1ad543b6bd296ae1247032c750af4718e1>`(
			:ref:`Range<doxid-d7/d65/classcv_1_1_range>` rowRange,
			:ref:`Range<doxid-d7/d65/classcv_1_1_range>` colRange
			) const;
	
		Mat
		:ref:`operator()<doxid-db/de6/classcv_1_1_mat_1a4272fce43d7405603fbb5e5f52580e57>`(const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi) const;
	
		Mat
		:ref:`operator()<doxid-db/de6/classcv_1_1_mat_1aee56475f834069b1fad3877c0747aaeb>`(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`* ranges) const;
	
		Mat
		:ref:`operator()<doxid-db/de6/classcv_1_1_mat_1aa9bf4fcbb6e854a6db7b7254a205fac9>`(const std::vector<:ref:`Range<doxid-d7/d65/classcv_1_1_range>`>& ranges) const;
	
		Mat&
		:ref:`operator=<doxid-db/de6/classcv_1_1_mat_1aed1f81fe7efaacc2bd95149cdfa34302>`(const Mat& m);
	
		Mat&
		:ref:`operator=<doxid-db/de6/classcv_1_1_mat_1a2a0798475170fb3a23b5bc63686de334>`(const :ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`& expr);
	
		Mat&
		:ref:`operator=<doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50>`(const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s);
	
		void
		:ref:`pop_back<doxid-db/de6/classcv_1_1_mat_1a88bbb01901fdfe3f1d0592c592e8757c>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nelems = 1);
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a13acd320291229615ef15f96ff1ff738>`(int i0 = 0);
	
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1af13f821918f452657f53bc3f750323cb>`(int i0 = 0) const;
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1af774caab4a38c6f7890f3254ad71eccf>`(
			int row,
			int col
			);
	
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1abcfcc1798528b49495e1263eab31127d>`(
			int row,
			int col
			) const;
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1ad2bc0c6a23243540e16607868c17be92>`(
			int i0,
			int i1,
			int i2
			);
	
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1abfb233ffa8b26a78c36e733f61da2a3e>`(
			int i0,
			int i1,
			int i2
			) const;
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1ab0e3de187bb27c384269b243e8789ba9>`(const int* idx);
	
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a3ef72b9ebc9581796ed68382df8fb064>`(const int* idx) const;
	
		template <int n>
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a7ce1d8cc9a83ae7cab79766d0eb6c0a8>`(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx);
	
		template <int n>
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a9ea1a1bfbbb2393a4e162230dccbe1f0>`(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx) const;
	
		template <typename _Tp>
		_Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a5a9ffc908ac90604f36a8b6a1038747d>`(int i0 = 0);
	
		template <typename _Tp>
		const _Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a6a6b3696440fe48751bfe60fe2a729f3>`(int i0 = 0) const;
	
		template <typename _Tp>
		_Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a6f4278ede80e7a9fe55d8b03710e2343>`(
			int row,
			int col
			);
	
		template <typename _Tp>
		const _Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1abda2b96aa438a808b43425040a7da81a>`(
			int row,
			int col
			) const;
	
		template <typename _Tp>
		_Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a2bf43f93c5cb610b657bd6e0e091c062>`(
			int i0,
			int i1,
			int i2
			);
	
		template <typename _Tp>
		const _Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a476f18d2b8d99748005150b24752512d>`(
			int i0,
			int i1,
			int i2
			) const;
	
		template <typename _Tp>
		_Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a7cb2719706bcae72d26dbc9b2fdc02e6>`(const int* idx);
	
		template <typename _Tp>
		const _Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1ac30da0a78cd38a72e8902f52660e2543>`(const int* idx) const;
	
		template <
			typename _Tp,
			int n
			>
		_Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a36ab9a1de78fd00a4f9acf3c8a5d4d05>`(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx);
	
		template <
			typename _Tp,
			int n
			>
		const _Tp*
		:ref:`ptr<doxid-db/de6/classcv_1_1_mat_1a15cac608c7a27fb961a81b9409aaa7e8>`(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx) const;
	
		template <typename _Tp>
		void
		:ref:`push_back<doxid-db/de6/classcv_1_1_mat_1af4bd5c2cb936dd363816d867aab22a61>`(const _Tp& elem);
	
		template <typename _Tp>
		void
		:ref:`push_back<doxid-db/de6/classcv_1_1_mat_1a1cfeb3a75570697426971403fc1ddb0d>`(const :ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`<_Tp>& elem);
	
		void
		:ref:`push_back<doxid-db/de6/classcv_1_1_mat_1a3676bae1741459eda3771e8653357c53>`(const Mat& m);
	
		void
		:ref:`push_back_<doxid-db/de6/classcv_1_1_mat_1a57c658e2a97dda24fef1be2e625da914>`(const void* elem);
	
		void
		:ref:`release<doxid-db/de6/classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e>`();
	
		void
		:ref:`reserve<doxid-db/de6/classcv_1_1_mat_1a0706ed6c42e288926c5ad415b976bbe2>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz);
	
		void
		:ref:`reserveBuffer<doxid-db/de6/classcv_1_1_mat_1a923eead22fe7f0c48aa000158df920f3>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz);
	
		Mat
		:ref:`reshape<doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8>`(
			int cn,
			int rows = 0
			) const;
	
		Mat
		:ref:`reshape<doxid-db/de6/classcv_1_1_mat_1a50e606fe51f53b896b66051634a018fb>`(
			int cn,
			int newndims,
			const int* newsz
			) const;
	
		Mat
		:ref:`reshape<doxid-db/de6/classcv_1_1_mat_1ab2e41a510891e548f744832cf9b8ab89>`(
			int cn,
			const std::vector<int>& newshape
			) const;
	
		void
		:ref:`resize<doxid-db/de6/classcv_1_1_mat_1ad0127b138acfcc2dcd5dafc51175b309>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz);
	
		void
		:ref:`resize<doxid-db/de6/classcv_1_1_mat_1abdbf4852beb3af95977fa289f6c7034c>`(
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		Mat
		:ref:`row<doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>`(int y) const;
	
		Mat
		:ref:`rowRange<doxid-db/de6/classcv_1_1_mat_1aa6542193430356ad631a9beabc624107>`(
			int startrow,
			int endrow
			) const;
	
		Mat
		:ref:`rowRange<doxid-db/de6/classcv_1_1_mat_1a6f5b8257ea38a26295944e9a69caf7e7>`(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& r) const;
	
		Mat&
		:ref:`setTo<doxid-db/de6/classcv_1_1_mat_1a0440e2a164c0b0d8462fb1e487be9876>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` value,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			);
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`step1<doxid-db/de6/classcv_1_1_mat_1a0066c8eee40c1706395b1e57f00e0857>`(int i = 0) const;
	
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`t<doxid-db/de6/classcv_1_1_mat_1aaa428c60ccb6d8ea5de18f63dfac8e11>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`total<doxid-db/de6/classcv_1_1_mat_1aa4d317d43fb0cba9c2503f3c61b866c8>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`total<doxid-db/de6/classcv_1_1_mat_1a5c506fc8b2cf52375e0d8be26aae0df4>`(
			int startDim,
			int endDim = INT_MAX
			) const;
	
		int
		:ref:`type<doxid-db/de6/classcv_1_1_mat_1af2d2652e552d7de635988f18a84b53e5>`() const;
	
		static
		Mat
		:ref:`diag<doxid-db/de6/classcv_1_1_mat_1a0f81856dbcb93eae6113947edb3ea068>`(const Mat& d);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`eye<doxid-db/de6/classcv_1_1_mat_1a2cf9b9acde7a9852542bbc20ef851ed2>`(
			int rows,
			int cols,
			int type
			);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`eye<doxid-db/de6/classcv_1_1_mat_1aab87b56e1dc370ffe4afb735b6a1e5c9>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		static
		:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`*
		:target:`getDefaultAllocator<doxid-db/de6/classcv_1_1_mat_1a8aee95197c1ad458b37539bf9943ea80>`();
	
		static
		:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`*
		:ref:`getStdAllocator<doxid-db/de6/classcv_1_1_mat_1a8d5dda7d818009547d71a086d3d755a7>`();
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`ones<doxid-db/de6/classcv_1_1_mat_1a69ae0402d116fc9c71908d8508dc2f09>`(
			int rows,
			int cols,
			int type
			);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`ones<doxid-db/de6/classcv_1_1_mat_1afc9c2c0b17ecd00932bc5fbc72f9bce0>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`ones<doxid-db/de6/classcv_1_1_mat_1a6ed33f15d7bf0172efb62d61b3751284>`(
			int ndims,
			const int* sz,
			int type
			);
	
		static
		void
		:target:`setDefaultAllocator<doxid-db/de6/classcv_1_1_mat_1a536a771cbad0b8360091e0315ebfc524>`(:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`* allocator);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`zeros<doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`(
			int rows,
			int cols,
			int type
			);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`zeros<doxid-db/de6/classcv_1_1_mat_1a095db10924bc801644a29074a755b6e9>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		static
		:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
		:ref:`zeros<doxid-db/de6/classcv_1_1_mat_1a961cf7d4f82253d93bb5b8ff54522087>`(
			int ndims,
			const int* sz,
			int type
			);

	protected:
		// methods
	
		template <
			typename _Tp,
			typename Functor
			>
		void
		:target:`forEach_impl<doxid-db/de0/group__core__utils_1gaa9eb8c7cba44b791827d0cd685206273>`(const Functor& operation);
	};

	// direct descendants

	template <typename _Tp>
	class :ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`;
.. _details-db/de6/classcv_1_1_mat:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

n-dimensional dense array class

The class :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` represents an n-dimensional dense numerical single-channel or multi-channel array. It can be used to store real or complex-valued vectors and matrices, grayscale or color images, voxel volumes, vector fields, point clouds, tensors, histograms (though, very high-dimensional histograms may be better stored in a :ref:`SparseMat <doxid-d5/d29/classcv_1_1_sparse_mat>`). The data layout of the array ``M`` is defined by the array ``M.step[]``, so that the address of element :math:`(i_0,...,i_{M.dims-1})`, where :math:`0\leq i_k<M.size[k]`, is computed as:

.. math::

	addr(M_{i_0,...,i_{M.dims-1}}) = M.data + M.step[0]*i_0 + M.step[1]*i_1 + ... + M.step[M.dims-1]*i_{M.dims-1}

In case of a 2-dimensional array, the above formula is reduced to:

.. math::

	addr(M_{i,j}) = M.data + M.step[0]*i + M.step[1]*j

Note that ``M.step[i] >= M.step[i+1]`` (in fact, ``M.step[i] >= M.step[i+1]*M.size[i+1]``). This means that 2-dimensional matrices are stored row-by-row, 3-dimensional matrices are stored plane-by-plane, and so on. M.step[M.dims-1] is minimal and always equal to the element size M.elemSize() .

So, the data layout in :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` is fully compatible with :ref:`CvMat <doxid-d6/dda/struct_cv_mat>`, :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`, and :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` types from OpenCV 1.x. It is also compatible with the majority of dense array types from the standard toolkits and SDKs, such as Numpy (ndarray), Win32 (independent device bitmaps), and others, that is, with any array that uses *steps* (or *strides*) to compute the position of a pixel. Due to this compatibility, it is possible to make a :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` header for user-allocated data and process it in-place using OpenCV functions.

There are many different ways to create a :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` object. The most popular options are listed below:

* Use the create(nrows, ncols, type) method or the similar Mat(nrows, ncols, type[, fillValue]) constructor. A new array of the specified size and type is allocated. type has the same meaning as in the cvCreateMat method. For example, CV_8UC1 means a 8-bit single-channel array, CV_32FC2 means a 2-channel (complex) floating-point array, and so on.
  
  .. ref-code-block:: cpp
  
  	// make a 7x7 complex matrix filled with 1+3j.
  	Mat M(7,7,CV_32FC2,Scalar(1,3));
  	// and now turn M to a 100x60 15-channel 8-bit matrix.
  	// The old content will be deallocated
  	M.create(100,60,CV_8UC(15));
  
  As noted in the introduction to this chapter, :ref:`create() <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>` allocates only a new array when the shape or type of the current array are different from the specified ones.

* Create a multi-dimensional array:
  
  .. ref-code-block:: cpp
  
  	// create a 100x100x100 8-bit array
  	int sz[] = {100, 100, 100};
  	Mat bigCube(3, sz, CV_8U, Scalar::all(0));
  
  It passes the number of dimensions =1 to the :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` constructor but the created array will be 2-dimensional with the number of columns set to 1. So, :ref:`Mat::dims <doxid-db/de6/classcv_1_1_mat_1a39cf614aa52567e9a945cd2609bd767b>` is always >= 2 (can also be 0 when the array is empty).

* Use a copy constructor or assignment operator where there can be an array or expression on the right side (see below). As noted in the introduction, the array assignment is an O(1) operation because it only copies the header and increases the reference counter. The :ref:`Mat::clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>` method can be used to get a full (deep) copy of the array when you need it.

* Construct a header for a part of another array. It can be a single row, single column, several rows, several columns, rectangular region in the array (called a *minor* in algebra) or a diagonal. Such operations are also O(1) because the new header references the same data. You can actually modify a part of the array using this feature, for example:
  
  .. ref-code-block:: cpp
  
  	// add the 5-th row, multiplied by 3 to the 3rd row
  	M.row(3) = M.row(3) + M.row(5)*3;
  	// now copy the 7-th column to the 1-st column
  	// M.col(1) = M.col(7); // this will not work
  	Mat M1 = M.col(1);
  	M.col(7).copyTo(M1);
  	// create a new 320x240 image
  	Mat img(Size(320,240),CV_8UC3);
  	// select a ROI
  	Mat roi(img, Rect(10,10,100,100));
  	// fill the ROI with (0,255,0) (which is green in RGB space);
  	// the original 320x240 image will be modified
  	roi = Scalar(0,255,0);
  
  Due to the additional datastart and dataend members, it is possible to compute a relative sub-array position in the main *container* array using :ref:`locateROI() <doxid-db/de6/classcv_1_1_mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96>` :
  
  .. ref-code-block:: cpp
  
  	Mat A = Mat::eye(10, 10, CV_32S);
  	// extracts A columns, 1 (inclusive) to 3 (exclusive).
  	Mat B = A(Range::all(), Range(1, 3));
  	// extracts B rows, 5 (inclusive) to 9 (exclusive).
  	// that is, C \~ A(Range(5, 9), Range(1, 3))
  	Mat C = B(Range(5, 9), Range::all());
  	Size size; Point ofs;
  	C.locateROI(size, ofs);
  	// size will be (width=10,height=10) and the ofs will be (x=1, y=5)
  
  As in case of whole matrices, if you need a deep copy, use the ``:ref:`clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>``` method of the extracted sub-matrices.

* Make a header for user-allocated data. It can be useful to do the following:
  
  #. Process "foreign" data using OpenCV (for example, when you implement a DirectShow\* filter or a processing module for gstreamer, and so on). For example:
     
     .. ref-code-block:: cpp
     
     	void process_video_frame(const unsigned char* pixels,
     	                         int width, int height, int step)
     	{
     	    Mat img(height, width, CV_8UC3, pixels, step);
     	    GaussianBlur(img, img, Size(7,7), 1.5, 1.5);
     	}
  
  #. Quickly initialize small matrices and/or get a super-fast element access.
     
     .. ref-code-block:: cpp
     
     	double m[3][3] = {{a, b, c}, {d, e, f}, {g, h, i}};
     	Mat M = Mat(3, 3, CV_64F, m).inv();
  
  Partial yet very common cases of this *user-allocated data* case are conversions from :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` and :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` to :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`. For this purpose, there is function :ref:`cv::cvarrToMat <doxid-d8/dd7/group__core__c__glue_1gafa8ade391d84ed9278c336fd0a58f4e1>` taking pointers to :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` or :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` and the optional flag indicating whether to copy the data or not.
  
  .. ref-code-block:: cpp
  
  	Ptr<IplImage> iplimg(:ref:`cvLoadImage <doxid-da/d0a/group__imgcodecs__c_1ga93b9ddb9fbd8978d27f5a19c6751edcf>`(imagename.c_str())); // Ptr<T> is safe ref-counting pointer class
  	if(!iplimg)
  	{
  	    fprintf(stderr, "Can not load image %s\n", imagename.c_str());
  	    return -1;
  	}
  	:ref:`Mat <doxid-db/de6/classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc>` img = :ref:`cv::cvarrToMat <doxid-d8/dd7/group__core__c__glue_1gafa8ade391d84ed9278c336fd0a58f4e1>`(iplimg); // cv::Mat replaces the CvMat and IplImage, but it's easy to convert
  	// between the old and the new data structures (by default, only the header
  	// is converted, while the data is shared)

* Use MATLAB-style array initializers, :ref:`zeros() <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`, :ref:`ones() <doxid-db/de6/classcv_1_1_mat_1a69ae0402d116fc9c71908d8508dc2f09>`, :ref:`eye() <doxid-db/de6/classcv_1_1_mat_1a2cf9b9acde7a9852542bbc20ef851ed2>`, for example:
  
  .. ref-code-block:: cpp
  
  	// create a double-precision identity matrix and add it to M.
  	M += Mat::eye(M.rows, M.cols, CV_64F);

* Use a comma-separated initializer:
  
  .. ref-code-block:: cpp
  
  	// create a 3x3 double-precision identity matrix
  	Mat M = (Mat_<double>(3,3) << 1, 0, 0, 0, 1, 0, 0, 0, 1);
  
  With this approach, you first call a constructor of the :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` class with the proper parameters, and then you just put ``<< operator`` followed by comma-separated values that can be constants, variables, expressions, and so on. Also, note the extra parentheses required to avoid compilation errors.

Once the array is created, it is automatically managed via a reference-counting mechanism. If the array header is built on top of user-allocated data, you should handle the data by yourself. The array data is deallocated when no one points to it. If you want to release the data pointed by a array header before the array destructor is called, use :ref:`Mat::release() <doxid-db/de6/classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e>`.

The next important thing to learn about the array class is element access. This manual already described how to compute an address of each array element. Normally, you are not required to use the formula directly in the code. If you know the array element type (which can be retrieved using the method :ref:`Mat::type() <doxid-db/de6/classcv_1_1_mat_1af2d2652e552d7de635988f18a84b53e5>`), you can access the element :math:`M_{ij}` of a 2-dimensional array as:

.. ref-code-block:: cpp

	M.at<double>(i,j) += 1.f;

assuming that ``M`` is a double-precision floating-point array. There are several variants of the method at for a different number of dimensions.

If you need to process a whole row of a 2D array, the most efficient way is to get the pointer to the row first, and then just use the plain C operator [] :

.. ref-code-block:: cpp

	// compute sum of positive matrix elements
	// (assuming that M is a double-precision matrix)
	double sum=0;
	for(int i = 0; i < M.rows; i++)
	{
	    const double* Mi = M.ptr<double>(i);
	    for(int j = 0; j < M.cols; j++)
	        sum += std::max(Mi[j], 0.);
	}

Some operations, like the one above, do not actually depend on the array shape. They just process elements of an array one by one (or elements from multiple arrays that have the same coordinates, for example, array addition). Such operations are called *element-wise*. It makes sense to check whether all the input/output arrays are continuous, namely, have no gaps at the end of each row. If yes, process them as a long single row:

.. ref-code-block:: cpp

	// compute the sum of positive matrix elements, optimized variant
	double sum=0;
	int cols = M.cols, rows = M.rows;
	if(M.isContinuous())
	{
	    cols *= rows;
	    rows = 1;
	}
	for(int i = 0; i < rows; i++)
	{
	    const double* Mi = M.ptr<double>(i);
	    for(int j = 0; j < cols; j++)
	        sum += std::max(Mi[j], 0.);
	}

In case of the continuous matrix, the outer loop body is executed just once. So, the overhead is smaller, which is especially noticeable in case of small matrices.

Finally, there are STL-style iterators that are smart enough to skip gaps between successive rows:

.. ref-code-block:: cpp

	// compute sum of positive matrix elements, iterator-based variant
	double sum=0;
	MatConstIterator_<double> it = M.begin<double>(), it_end = M.end<double>();
	for(; it != it_end; ++it)
	    sum += std::max(*it, 0.);

The matrix iterators are random-access iterators, so they can be passed to any STL algorithm, including :ref:`std::sort() <doxid-d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f>`.

Matrix Expressions and arithmetic see :ref:`MatExpr <doxid-d9/ddc/classcv_1_1_mat_expr>`

Fields
------

.. index:: pair: variable; allocator
.. _doxid-db/de6/classcv_1_1_mat_1a4d2eb7a536cd5a0f18808b6112111d6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`* allocator

custom allocator

.. index:: pair: variable; data
.. _doxid-db/de6/classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* data

pointer to the data

.. index:: pair: variable; datastart
.. _doxid-db/de6/classcv_1_1_mat_1aeda6d607bfc629a95f59e7b538832172:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* datastart

helper fields used in locateROI and adjustROI

.. index:: pair: variable; dims
.. _doxid-db/de6/classcv_1_1_mat_1a39cf614aa52567e9a945cd2609bd767b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int dims

the matrix dimensionality, >= 2

.. index:: pair: variable; flags
.. _doxid-db/de6/classcv_1_1_mat_1af9333f06c84f115fda4cdf3af18c2ad0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int flags

includes several bit-fields:

* the magic signature

* continuity flag

* depth

* number of channels

.. index:: pair: variable; rows
.. _doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int rows

the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions

.. index:: pair: variable; u
.. _doxid-db/de6/classcv_1_1_mat_1a2742469fe595e1b9036f60d752d08461:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`UMatData<doxid-dd/d13/structcv_1_1_u_mat_data>`* u

interaction with :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`

Construction
------------

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat()

These are various constructors that form a matrix. As noted in the AutomaticAllocation, often the default constructor is enough, and the proper matrix will be allocated by an OpenCV function. The constructed matrix can further be assigned to another matrix or matrix expression or can be allocated with :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>`. In the former case, the old content is de-referenced.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a2ec3402f7d165ca34c7fd6e8498a62ca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		int rows,
		int cols,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows in a 2D array.

	*
		- cols

		- Number of columns in a 2D array.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a75a97b1e4e55f380c172af58048a7cde:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- 2D array size: Size(cols, rows) . In the :ref:`Size() <doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` constructor, the number of rows and the number of columns go in the reverse order.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a3620c370690b5ca4d40c767be6fb4ceb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		int rows,
		int cols,
		int type,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows in a 2D array.

	*
		- cols

		- Number of columns in a 2D array.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- s

		- An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator :ref:`Mat::operator=(const Scalar& value) <doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a286371a6196eaaaf0b86e158590460b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- 2D array size: Size(cols, rows) . In the :ref:`Size() <doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` constructor, the number of rows and the number of columns go in the reverse order.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- s

		- An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator :ref:`Mat::operator=(const Scalar& value) <doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a156df5a1326dd5c30b187b0e721a5f57:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		int ndims,
		const int* sizes,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ndims

		- Array dimensionality.

	*
		- sizes

		- Array of integers specifying an n-dimensional array shape.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a6adc4d64db5379bcbb713e71c9292f6e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const std::vector<int>& sizes,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sizes

		- Array of integers specifying an n-dimensional array shape.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1afbf34be80b7443123b2a032a67c3c4e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		int ndims,
		const int* sizes,
		int type,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ndims

		- Array dimensionality.

	*
		- sizes

		- Array of integers specifying an n-dimensional array shape.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- s

		- An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator :ref:`Mat::operator=(const Scalar& value) <doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1ad20a78b5501fc39543a240142a40e234:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const std::vector<int>& sizes,
		int type,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sizes

		- Array of integers specifying an n-dimensional array shape.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- s

		- An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator :ref:`Mat::operator=(const Scalar& value) <doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a294eaf8a95d2f9c7be19ff594d06278e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(const Mat& m)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use :ref:`Mat::clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a51615ebf17a64c968df0bf49b4de6a3a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		int rows,
		int cols,
		int type,
		void* data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` step = :ref:`AUTO_STEP<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a1c147538fd896f4f9abce9eaea9727e3>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows in a 2D array.

	*
		- cols

		- Number of columns in a 2D array.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- data

		- Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.

	*
		- step

		- Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any. If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols\*elemSize(). See :ref:`Mat::elemSize <doxid-db/de6/classcv_1_1_mat_1aba7a5ef00b22b70668fba575005dfe55>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a9fa74fb14362d87cb183453d2441948f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type,
		void* data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` step = :ref:`AUTO_STEP<doxid-db/de6/classcv_1_1_mat_1acb0821facd341e5c9c94a22f6ca6acb8a1c147538fd896f4f9abce9eaea9727e3>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- 2D array size: Size(cols, rows) . In the :ref:`Size() <doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` constructor, the number of rows and the number of columns go in the reverse order.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- data

		- Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.

	*
		- step

		- Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any. If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols\*elemSize(). See :ref:`Mat::elemSize <doxid-db/de6/classcv_1_1_mat_1aba7a5ef00b22b70668fba575005dfe55>`.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a5fafc033e089143062fd31015b5d0f40:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		int ndims,
		const int* sizes,
		int type,
		void* data,
		const :ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* steps = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ndims

		- Array dimensionality.

	*
		- sizes

		- Array of integers specifying an n-dimensional array shape.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- data

		- Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.

	*
		- steps

		- Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). If not specified, the matrix is assumed to be continuous.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a922de793eabcec705b3579c5f95a643e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const std::vector<int>& sizes,
		int type,
		void* data,
		const :ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* steps = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sizes

		- Array of integers specifying an n-dimensional array shape.

	*
		- type

		- Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or :ref:`CV_8UC(n) <doxid-d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394>`, ..., :ref:`CV_64FC(n) <doxid-d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244>` to create multi-channel (up to CV_CN_MAX channels) matrices.

	*
		- data

		- Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it.

	*
		- steps

		- Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). If not specified, the matrix is assumed to be continuous.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a92a3e9e5911a2eb0cf0950a0a9670c76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const Mat& m,
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& rowRange,
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& colRange = :ref:`Range::all<doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use :ref:`Mat::clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`.

	*
		- rowRange

		- :ref:`Range <doxid-d7/d65/classcv_1_1_range>` of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. Use :ref:`Range::all() <doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>` to take all the rows.

	*
		- colRange

		- :ref:`Range <doxid-d7/d65/classcv_1_1_range>` of the m columns to take. Use :ref:`Range::all() <doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>` to take all the columns.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1aa7ec97373406215f2d4bc72cc1d27036:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const Mat& m,
		const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use :ref:`Mat::clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`.

	*
		- roi

		- Region of interest.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1afde22a742fc73c0a150a9002310ac2eb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const Mat& m,
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`* ranges
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use :ref:`Mat::clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`.

	*
		- ranges

		- Array of selected ranges of m along each dimensionality.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1aa6e903a6c762478692791a33d233019b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(
		const Mat& m,
		const std::vector<:ref:`Range<doxid-d7/d65/classcv_1_1_range>`>& ranges
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use :ref:`Mat::clone() <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`.

	*
		- ranges

		- Array of selected ranges of m along each dimensionality.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a23b182c4ffd46abe38f460c1480ae887:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	Mat(
		const std::vector<_Tp>& vec,
		bool copyData = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vec

		- STL vector whose elements form the matrix. The matrix has a single column and the number of rows equal to the number of vector elements. Type of the matrix matches the type of vector elements. The constructor can handle arbitrary types, for which there is a properly declared :ref:`DataType <doxid-da/da2/classcv_1_1_data_type>`. This means that the vector elements must be primitive numbers or uni-type numerical tuples of numbers. Mixed-type structures are not supported. The corresponding constructor is explicit. Since STL vectors are not automatically converted to :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` instances, you should write Mat(vec) explicitly. Unless you copy the data into the matrix ( copyData=true ), no new elements will be added to the vector because it can potentially yield vector data reallocation, and, thus, the matrix data pointer will be invalid.

	*
		- copyData

		- Flag to specify whether the underlying data of the STL vector should be copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, the allocated buffer is managed using :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` reference counting mechanism. While the data is shared, the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a507e01fb48b34a3e5c45f9f5b00725e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	Mat(
		const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<_Tp, n>& vec,
		bool copyData = true
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a37068a8d9acc7cc5af817eb82b2aa83b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int m,
		int n
		>
	Mat(
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& mtx,
		bool copyData = true
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a224477889ddc7424aaab1b76e7682ea2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	Mat(
		const :ref:`Point_<doxid-d9/d87/classcv_1_1_point__>`<_Tp>& pt,
		bool copyData = true
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a7d72610ed5aed9117eb7933a97670309:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	Mat(
		const :ref:`Point3_<doxid-d4/d29/classcv_1_1_point3__>`<_Tp>& pt,
		bool copyData = true
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1a23957ae2fed348c67952c0d69c873972:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	Mat(const :ref:`MatCommaInitializer_<doxid-d7/dfc/classcv_1_1_mat_comma_initializer__>`<_Tp>& commaInitializer)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; Mat
.. _doxid-db/de6/classcv_1_1_mat_1aa82eca82664985c81c7912b04549370d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat(const :ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`& m)

download data from GpuMat

Methods
-------

.. index:: pair: function; addref
.. _doxid-db/de6/classcv_1_1_mat_1a9d3794250e3dc39714f980b4d0d45864:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	addref()

Increments the reference counter.

The method increments the reference counter associated with the matrix data. If the matrix header points to an external data set (see :ref:`Mat::Mat <doxid-db/de6/classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc>`), the reference counter is NULL, and the method has no effect in this case. Normally, to avoid memory leaks, the method should not be called explicitly. It is called implicitly by the matrix assignment operator. The reference counter increment is an atomic operation on the platforms that support it. Thus, it is safe to operate on the same matrices asynchronously in different threads.

.. index:: pair: function; adjustROI
.. _doxid-db/de6/classcv_1_1_mat_1a2fece3507ee7e1284deee6da99e76b9b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat&
	adjustROI(
		int dtop,
		int dbottom,
		int dleft,
		int dright
		)

Adjusts a submatrix size and position within the parent matrix.

The method is complimentary to :ref:`Mat::locateROI <doxid-db/de6/classcv_1_1_mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96>`. The typical use of these functions is to determine the submatrix position within the parent matrix and then shift the position somehow. Typically, it can be required for filtering operations when pixels outside of the ROI should be taken into account. When all the method parameters are positive, the ROI needs to grow in all directions by the specified amount, for example:

.. ref-code-block:: cpp

	A.adjustROI(2, 2, 2, 2);

In this example, the matrix size is increased by 4 elements in each direction. The matrix is shifted by 2 elements to the left and 2 elements up, which brings in all the necessary pixels for the filtering with the 5x5 kernel.

adjustROI forces the adjusted ROI to be inside of the parent matrix that is boundaries of the adjusted ROI are constrained by boundaries of the parent matrix. For example, if the submatrix A is located in the first row of a parent matrix and you called A.adjustROI(2, 2, 2, 2) then A will not be increased in the upward direction.

The function is used internally by the OpenCV filtering functions, like filter2D , morphological operations, and so on.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dtop

		- Shift of the top submatrix boundary upwards.

	*
		- dbottom

		- Shift of the bottom submatrix boundary downwards.

	*
		- dleft

		- Shift of the left submatrix boundary to the left.

	*
		- dright

		- Shift of the right submatrix boundary to the right.



.. rubric:: See also:

:ref:`copyMakeBorder <doxid-d2/de8/group__core__array_1ga2ac1049c2c3dd25c2b41bffe17658a36>`

.. index:: pair: function; assignTo
.. _doxid-db/de6/classcv_1_1_mat_1aa8b3b4d7b9876a4726740b75daa98ddb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	assignTo(
		Mat& m,
		int type = -1
		) const

Provides a functional form of convertTo.

This is an internally used method called by the :ref:`MatrixExpressions <doxid-d9/ddc/classcv_1_1_mat_expr_1MatrixExpressions>` engine.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Destination array.

	*
		- type

		- Desired destination array depth (or -1 if it should be the same as the source type).

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	at(int i0 = 0)

Returns a reference to the specified array element.

The template methods return a reference to the specified array element. For the sake of higher performance, the index range checks are only performed in the Debug configuration.

Note that the variants with a single index (i) can be used to access elements of single-row or single-column 2-dimensional arrays. That is, if, for example, A is a 1 x N floating-point matrix and B is an M x 1 integer matrix, you can simply write ``A.at<float>(k+4)`` and ``B.at<int>(2*i+1)`` instead of ``A.at<float>(0,k+4)`` and ``B.at<int>(2*i+1,0)``, respectively.

The example below initializes a Hilbert matrix:

.. ref-code-block:: cpp

	Mat H(100, 100, CV_64F);
	for(int i = 0; i < H.rows; i++)
	    for(int j = 0; j < H.cols; j++)
	        H.at<double>(i,j)=1./(i+j+1);

Keep in mind that the size identifier used in the at operator cannot be chosen at random. It depends on the image from which you are trying to retrieve the data. The table below gives a better insight in this:

* If matrix is of type ``CV_8U`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<uchar>(y,x)``.

* If matrix is of type ``CV_8S`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<schar>(y,x)``.

* If matrix is of type ``CV_16U`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<ushort>(y,x)``.

* If matrix is of type ``CV_16S`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<short>(y,x)``.

* If matrix is of type ``CV_32S`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<int>(y,x)``.

* If matrix is of type ``CV_32F`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(y,x)``.

* If matrix is of type ``CV_64F`` then use ``:ref:`Mat.at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<double>(y,x)``.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- i0

		- Index along the dimension 0

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a330d9adb78976b6efd4116c940924294:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp&
	at(int i0 = 0) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- i0

		- Index along the dimension 0

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1ac40425b84f60b39fd35e03814122661f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	at(
		int row,
		int col
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- row

		- Index along the dimension 0

	*
		- col

		- Index along the dimension 1

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a5db6b18954e334048cb35752f49c6f8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp&
	at(
		int row,
		int col
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- row

		- Index along the dimension 0

	*
		- col

		- Index along the dimension 1

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a305829ed5c0ecfef7b44db18953048e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	at(
		int i0,
		int i1,
		int i2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- i0

		- Index along the dimension 0

	*
		- i1

		- Index along the dimension 1

	*
		- i2

		- Index along the dimension 2

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a59c6c2d9db1cfba76d75addeeb4e6a84:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp&
	at(
		int i0,
		int i1,
		int i2
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- i0

		- Index along the dimension 0

	*
		- i1

		- Index along the dimension 1

	*
		- i2

		- Index along the dimension 2

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a474bd5cdcf986672cfdc304f6be1cf64:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	at(const int* idx)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- idx

		- Array of :ref:`Mat::dims <doxid-db/de6/classcv_1_1_mat_1a39cf614aa52567e9a945cd2609bd767b>` indices.

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a2cbbb16670ae4d9aa747f19c24305213:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp&
	at(const int* idx) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- idx

		- Array of :ref:`Mat::dims <doxid-db/de6/classcv_1_1_mat_1a39cf614aa52567e9a945cd2609bd767b>` indices.

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a9ec1aadc17ab8c8f8334d521719c7732:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	_Tp&
	at(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a15c649a94cf2e06240b32b025231301f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	const _Tp&
	at(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a23cd599a27c59bae64b0c40ad645ea49:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	at(:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. special versions for 2D arrays (especially convenient for referencing image pixels)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pt

		- Element position specified as Point(j,i) .

.. index:: pair: function; at
.. _doxid-db/de6/classcv_1_1_mat_1a87d0b2e01b0f8686957398ecfb168a6d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp&
	at(:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. special versions for 2D arrays (especially convenient for referencing image pixels)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pt

		- Element position specified as Point(j,i) .

.. index:: pair: function; begin
.. _doxid-db/de6/classcv_1_1_mat_1a33ee3bc402827f587a5ad64b568d6986:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`MatIterator_<doxid-da/d1f/classcv_1_1_mat_iterator__>`<_Tp>
	begin()

Returns the matrix iterator and sets it to the first matrix element.

The methods return the matrix read-only or read-write iterators. The use of matrix iterators is very similar to the use of bi-directional STL iterators. In the example below, the alpha blending function is rewritten using the matrix iterators:

.. ref-code-block:: cpp

	template<typename T>
	void alphaBlendRGBA(const Mat& src1, const Mat& src2, Mat& dst)
	{
	    typedef Vec<T, 4> VT;
	
	    const float alpha_scale = (float)std::numeric_limits<T>::max(),
	                inv_scale = 1.f/alpha_scale;
	
	    CV_Assert( src1.type() == src2.type() &&
	               src1.type() == DataType<VT>::type &&
	               src1.size() == src2.size());
	    Size size = src1.size();
	    dst.create(size, src1.type());
	
	    MatConstIterator_<VT> it1 = src1.begin<VT>(), it1_end = src1.end<VT>();
	    MatConstIterator_<VT> it2 = src2.begin<VT>();
	    MatIterator_<VT> dst_it = dst.begin<VT>();
	
	    for( ; it1 != it1_end; ++it1, ++it2, ++dst_it )
	    {
	        VT pix1 = *it1, pix2 = *it2;
	        float alpha = pix1[3]*inv_scale, beta = pix2[3]*inv_scale;
	        *dst_it = VT(saturate_cast<T>(pix1[0]*alpha + pix2[0]*beta),
	                     saturate_cast<T>(pix1[1]*alpha + pix2[1]*beta),
	                     saturate_cast<T>(pix1[2]*alpha + pix2[2]*beta),
	                     saturate_cast<T>((1 - (1-alpha)*(1-beta))*alpha_scale));
	    }
	}

.. index:: pair: function; channels
.. _doxid-db/de6/classcv_1_1_mat_1aa11336b9ac538e0475d840657ce164be:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	channels() const

Returns the number of matrix channels.

The method returns the number of matrix channels.

.. index:: pair: function; checkVector
.. _doxid-db/de6/classcv_1_1_mat_1a167a8e0a3a3d86e84b70e33483af4466:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	checkVector(
		int elemChannels,
		int depth = -1,
		bool requireContinuous = true
		) const

returns N if the matrix is 1-channel (N x ptdim) or ptdim-channel (1 x N) or (N x 1); negative number otherwise

.. index:: pair: function; clone
.. _doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	clone() const

Creates a full copy of the array and the underlying data.

The method creates a full copy of the array. The original step[] is not taken into account. So, the array copy is a continuous array occupying :ref:`total() <doxid-db/de6/classcv_1_1_mat_1aa4d317d43fb0cba9c2503f3c61b866c8>` \*elemSize() bytes.

.. index:: pair: function; col
.. _doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	col(int x) const

Creates a matrix header for the specified matrix column.

The method makes a new header for the specified matrix column and returns it. This is an O(1) operation, regardless of the matrix size. The underlying data of the new matrix is shared with the original matrix. See also the :ref:`Mat::row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>` description.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- A 0-based column index.

.. index:: pair: function; colRange
.. _doxid-db/de6/classcv_1_1_mat_1aadc8f9210fe4dec50513746c246fa8d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	colRange(
		int startcol,
		int endcol
		) const

Creates a matrix header for the specified column span.

The method makes a new header for the specified column span of the matrix. Similarly to :ref:`Mat::row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>` and :ref:`Mat::col <doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`, this is an O(1) operation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- startcol

		- An inclusive 0-based start index of the column span.

	*
		- endcol

		- An exclusive 0-based ending index of the column span.

.. index:: pair: function; colRange
.. _doxid-db/de6/classcv_1_1_mat_1acccb63e44eba6ba81ead99881bd1997e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	colRange(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& r) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- r

		- :ref:`Range <doxid-d7/d65/classcv_1_1_range>` structure containing both the start and the end indices.

.. index:: pair: function; convertTo
.. _doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	convertTo(
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
		int rtype,
		double alpha = 1,
		double beta = 0
		) const

Converts an array to another data type with optional scaling.

The method converts source pixel values to the target data type. saturate_cast<> is applied at the end to avoid possible overflows:

.. math::

	m(x,y) = saturate \_ cast<rType>( \alpha (*this)(x,y) + \beta )



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- output matrix; if it does not have a proper size or type before the operation, it is reallocated.

	*
		- rtype

		- desired output matrix type or, rather, the depth since the number of channels are the same as the input has; if rtype is negative, the output matrix will have the same type as the input.

	*
		- alpha

		- optional scale factor.

	*
		- beta

		- optional delta added to the scaled values.

.. index:: pair: function; copySize
.. _doxid-db/de6/classcv_1_1_mat_1a39fd9880fc55b7a0993bcfff88061ac4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copySize(const Mat& m)

internal use function; properly re-allocates _size, _step arrays

.. index:: pair: function; copyTo
.. _doxid-db/de6/classcv_1_1_mat_1a33fd5d125b4c302b0c9aa86980791a77:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m) const

Copies the matrix to another one.

The method copies the matrix data to another matrix. Before copying the data, the method invokes :

.. ref-code-block:: cpp

	m.create(this->size(), this->type());

so that the destination matrix is reallocated if needed. While m.copyTo(m); works flawlessly, the function does not handle the case of a partial overlap between the source and the destination matrices.

When the operation mask is specified, if the :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>` call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.

.. index:: pair: function; copyTo
.. _doxid-db/de6/classcv_1_1_mat_1a626fe5f96d02525e2604d2ad46dd574f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.

	*
		- mask

		- Operation mask. Its non-zero elements indicate which matrix elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels.

.. index:: pair: function; create
.. _doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		int rows,
		int cols,
		int type
		)

Allocates new array data if needed.

This is one of the key :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` methods. Most new-style OpenCV functions and methods that produce arrays call this method for each output array. The method uses the following algorithm:

#. If the current array shape and the type match the new ones, return immediately. Otherwise, de-reference the previous data by calling :ref:`Mat::release <doxid-db/de6/classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e>`.

#. Initialize the new header.

#. Allocate the new data of :ref:`total() <doxid-db/de6/classcv_1_1_mat_1aa4d317d43fb0cba9c2503f3c61b866c8>` \*elemSize() bytes.

#. Allocate the new, associated with the data, reference counter and set it to 1.

Such a scheme makes the memory management robust and efficient at the same time and helps avoid extra typing for you. This means that usually there is no need to explicitly allocate output arrays. That is, instead of writing:

.. ref-code-block:: cpp

	Mat color;
	...
	Mat gray(color.rows, color.cols, color.depth());
	cvtColor(color, gray, COLOR_BGR2GRAY);

you can simply write:

.. ref-code-block:: cpp

	Mat color;
	...
	Mat gray;
	cvtColor(color, gray, COLOR_BGR2GRAY);

because cvtColor, as well as the most of OpenCV functions, calls :ref:`Mat::create() <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>` for the output array internally.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- New number of rows.

	*
		- cols

		- New number of columns.

	*
		- type

		- New matrix type.

.. index:: pair: function; create
.. _doxid-db/de6/classcv_1_1_mat_1a48409946d0e1bebb40fe765e18ec5eea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- Alternative new matrix size specification: Size(cols, rows)

	*
		- type

		- New matrix type.

.. index:: pair: function; create
.. _doxid-db/de6/classcv_1_1_mat_1aee53524ac61fa2ba441c4f29c3aca93f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		int ndims,
		const int* sizes,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ndims

		- New array dimensionality.

	*
		- sizes

		- Array of integers specifying a new array shape.

	*
		- type

		- New matrix type.

.. index:: pair: function; create
.. _doxid-db/de6/classcv_1_1_mat_1a84f35d3923a92251631329eed66d2a12:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		const std::vector<int>& sizes,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sizes

		- Array of integers specifying a new array shape.

	*
		- type

		- New matrix type.

.. index:: pair: function; cross
.. _doxid-db/de6/classcv_1_1_mat_1a708b761e0d15b7b8db4c8e8c95a7abe9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	cross(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m) const

Computes a cross-product of two 3-element vectors.

The method computes a cross-product of two 3-element vectors. The vectors must be 3-element floating-point vectors of the same shape and size. The result is another 3-element vector of the same shape and type as operands.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Another cross-product operand.

.. index:: pair: function; deallocate
.. _doxid-db/de6/classcv_1_1_mat_1ac6e9cdf9b450e360f005978b4e981b1a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	deallocate()

deallocates the matrix data

.. index:: pair: function; depth
.. _doxid-db/de6/classcv_1_1_mat_1a8da9f853b6f3a29d738572fd1ffc44c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	depth() const

Returns the depth of a matrix element.

The method returns the identifier of the matrix element depth (the type of each individual channel). For example, for a 16-bit signed element array, the method returns CV_16S . A complete list of matrix types contains the following values:

* CV_8U - 8-bit unsigned integers ( 0..255 )

* CV_8S - 8-bit signed integers ( -128..127 )

* CV_16U - 16-bit unsigned integers ( 0..65535 )

* CV_16S - 16-bit signed integers ( -32768..32767 )

* CV_32S - 32-bit signed integers ( -2147483648..2147483647 )

* CV_32F - 32-bit floating-point numbers ( -FLT_MAX..FLT_MAX, INF, NAN )

* CV_64F - 64-bit floating-point numbers ( -DBL_MAX..DBL_MAX, INF, NAN )

.. index:: pair: function; diag
.. _doxid-db/de6/classcv_1_1_mat_1a024cc0510a4c61c7f266d4ab9fe13d7a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	diag(int d = 0) const

Extracts a diagonal from a matrix.

The method makes a new header for the specified matrix diagonal. The new matrix is represented as a single-column matrix. Similarly to :ref:`Mat::row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>` and :ref:`Mat::col <doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`, this is an O(1) operation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- d

		- 
		  index of the diagonal, with the following values:
		  
		  * ``d=0`` is the main diagonal.
		  
		  * ``d<0`` is a diagonal from the lower half. For example, d=-1 means the diagonal is set immediately below the main one.
		  
		  * ``d>0`` is a diagonal from the upper half. For example, d=1 means the diagonal is set immediately above the main one. For example:
		    
		    .. ref-code-block:: cpp
		    
		    	Mat m = (Mat_<int>(3,3) <<
		    	            1,2,3,
		    	            4,5,6,
		    	            7,8,9);
		    	Mat d0 = m.diag(0);
		    	Mat d1 = m.diag(1);
		    	Mat d_1 = m.diag(-1);
		    
		    The resulting matrices are
		    
		    .. ref-code-block:: cpp
		    
		    	d0 =
		    	  [1;
		    	   5;
		    	   9]
		    	d1 =
		    	  [2;
		    	   6]
		    	d_1 =
		    	  [4;
		    	   8]

.. index:: pair: function; dot
.. _doxid-db/de6/classcv_1_1_mat_1a0f683eab191eeece33dfc64ae299a9cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	dot(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m) const

Computes a dot-product of two vectors.

The method computes a dot-product of two matrices. If the matrices are not single-column or single-row vectors, the top-to-bottom left-to-right scan ordering is used to treat them as 1D vectors. The vectors must have the same size and type. If the matrices have more than one channel, the dot products from all the channels are summed together.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- another dot-product operand.

.. index:: pair: function; elemSize
.. _doxid-db/de6/classcv_1_1_mat_1aba7a5ef00b22b70668fba575005dfe55:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	elemSize() const

Returns the matrix element size in bytes.

The method returns the matrix element size in bytes. For example, if the matrix type is CV_16SC3 , the method returns 3\*sizeof(short) or 6.

.. index:: pair: function; elemSize1
.. _doxid-db/de6/classcv_1_1_mat_1a9acde8f32d4b294558fb406bc05171bc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	elemSize1() const

Returns the size of each matrix element channel in bytes.

The method returns the matrix element channel size in bytes, that is, it ignores the number of channels. For example, if the matrix type is CV_16SC3 , the method returns sizeof(short) or 2.

.. index:: pair: function; empty
.. _doxid-db/de6/classcv_1_1_mat_1abbec3525a852e77998aba034813fded4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	empty() const

Returns true if the array has no elements.

The method returns true if :ref:`Mat::total() <doxid-db/de6/classcv_1_1_mat_1aa4d317d43fb0cba9c2503f3c61b866c8>` is 0 or if :ref:`Mat::data <doxid-db/de6/classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564>` is NULL. Because of :ref:`pop_back() <doxid-db/de6/classcv_1_1_mat_1a88bbb01901fdfe3f1d0592c592e8757c>` and :ref:`resize() <doxid-db/de6/classcv_1_1_mat_1ad0127b138acfcc2dcd5dafc51175b309>` methods ``M.total() == 0`` does not imply that ``M.data == NULL``.

.. index:: pair: function; end
.. _doxid-db/de6/classcv_1_1_mat_1a9dd628eeccedea6e181ca54d41830a62:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`MatIterator_<doxid-da/d1f/classcv_1_1_mat_iterator__>`<_Tp>
	end()

Returns the matrix iterator and sets it to the after-last matrix element.

The methods return the matrix read-only or read-write iterators, set to the point following the last matrix element.

.. index:: pair: function; forEach
.. _doxid-db/de6/classcv_1_1_mat_1a952ef1a85d70a510240cb645a90efc0d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		typename Functor
		>
	void
	forEach(const Functor& operation)

Runs the given functor over all matrix elements in parallel.

The operation passed as argument has to be a function pointer, a function object or a lambda(C++11).

Example 1. All of the operations below put 0xFF the first channel of all matrix elements:

.. ref-code-block:: cpp

	Mat image(1920, 1080, CV_8UC3);
	typedef cv::Point3_<uint8_t> Pixel;
	
	// first. raw pointer access.
	for (int r = 0; r < image.rows; ++r) {
	    Pixel* ptr = image.ptr<Pixel>(r, 0);
	    const Pixel* ptr_end = ptr + image.cols;
	    for (; ptr != ptr_end; ++ptr) {
	        ptr->x = 255;
	    }
	}
	
	// Using MatIterator. (Simple but there are a Iterator's overhead)
	for (Pixel &p : cv::Mat_<Pixel>(image)) {
	    p.x = 255;
	}
	
	// Parallel execution with function object.
	struct Operator {
	    void operator ()(Pixel &pixel, const int * position) {
	        pixel.x = 255;
	    }
	};
	image.forEach<Pixel>(Operator());
	
	// Parallel execution using C++11 lambda.
	image.forEach<Pixel>([](Pixel &p, const int * position) -> void {
	    p.x = 255;
	});

Example 2. Using the pixel's position:

.. ref-code-block:: cpp

	// Creating 3D matrix (255 x 255 x 255) typed uint8_t
	// and initialize all elements by the value which equals elements position.
	// i.e. pixels (x,y,z) = (1,2,3) is (b,g,r) = (1,2,3).
	
	int sizes[] = { 255, 255, 255 };
	typedef cv::Point3_<uint8_t> Pixel;
	
	Mat_<Pixel> image = Mat::zeros(3, sizes, CV_8UC3);
	
	image.forEach<Pixel>([&](Pixel& pixel, const int position[]) -> void {
	    pixel.x = position[0];
	    pixel.y = position[1];
	    pixel.z = position[2];
	});

.. index:: pair: function; forEach
.. _doxid-db/de6/classcv_1_1_mat_1afcee31e71fd6991148fd3bb619971e2b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		typename Functor
		>
	void
	forEach(const Functor& operation) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; getUMat
.. _doxid-db/de6/classcv_1_1_mat_1a8676ddda9951ec3766efe0265d808a71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`
	getUMat(
		int accessFlags,
		:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
		) const

retrieve :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` from :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

.. index:: pair: function; inv
.. _doxid-db/de6/classcv_1_1_mat_1a039eb3c6740a850696a12519a4b8bfc6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	inv(int method = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`) const

Inverses a matrix.

The method performs a matrix inversion by means of matrix expressions. This means that a temporary matrix inversion object is returned by the method and can be used further as a part of more complex matrix expressions or can be assigned to a matrix.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- method

		- Matrix inversion method. One of :ref:`cv::DecompTypes <doxid-d2/de8/group__core__array_1gaaf9ea5dcc392d5ae04eacb9920b9674c>`

.. index:: pair: function; isContinuous
.. _doxid-db/de6/classcv_1_1_mat_1aa90cea495029c7d1ee0a41361ccecdf3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	isContinuous() const

Reports whether the matrix is continuous or not.

The method returns true if the matrix elements are stored continuously without gaps at the end of each row. Otherwise, it returns false. Obviously, 1x1 or 1xN matrices are always continuous. Matrices created with :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>` are always continuous. But if you extract a part of the matrix using :ref:`Mat::col <doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`, :ref:`Mat::diag <doxid-db/de6/classcv_1_1_mat_1a024cc0510a4c61c7f266d4ab9fe13d7a>`, and so on, or constructed a matrix header for externally allocated data, such matrices may no longer have this property.

The continuity flag is stored as a bit in the :ref:`Mat::flags <doxid-db/de6/classcv_1_1_mat_1af9333f06c84f115fda4cdf3af18c2ad0>` field and is computed automatically when you construct a matrix header. Thus, the continuity check is a very fast operation, though theoretically it could be done as follows:

.. ref-code-block:: cpp

	// alternative implementation of Mat::isContinuous()
	bool myCheckMatContinuity(const Mat& m)
	{
	    //return (m.flags & Mat::CONTINUOUS_FLAG) != 0;
	    return m.rows == 1 || m.step == m.cols*m.elemSize();
	}

The method is used in quite a few of OpenCV functions. The point is that element-wise operations (such as arithmetic and logical operations, math functions, alpha blending, color space transformations, and others) do not depend on the image geometry. Thus, if all the input and output arrays are continuous, the functions can process them as very long single-row vectors. The example below illustrates how an alpha-blending function can be implemented:

.. ref-code-block:: cpp

	template<typename T>
	void alphaBlendRGBA(const Mat& src1, const Mat& src2, Mat& dst)
	{
	    const float alpha_scale = (float)std::numeric_limits<T>::max(),
	                inv_scale = 1.f/alpha_scale;
	
	    CV_Assert( src1.type() == src2.type() &&
	               src1.type() == CV_MAKETYPE(DataType<T>::depth, 4) &&
	               src1.size() == src2.size());
	    Size size = src1.size();
	    dst.create(size, src1.type());
	
	    // here is the idiom: check the arrays for continuity and,
	    // if this is the case,
	    // treat the arrays as 1D vectors
	    if( src1.isContinuous() && src2.isContinuous() && dst.isContinuous() )
	    {
	        size.width *= size.height;
	        size.height = 1;
	    }
	    size.width *= 4;
	
	    for( int i = 0; i < size.height; i++ )
	    {
	        // when the arrays are continuous,
	        // the outer loop is executed only once
	        const T* ptr1 = src1.ptr<T>(i);
	        const T* ptr2 = src2.ptr<T>(i);
	        T* dptr = dst.ptr<T>(i);
	
	        for( int j = 0; j < size.width; j += 4 )
	        {
	            float alpha = ptr1[j+3]*inv_scale, beta = ptr2[j+3]*inv_scale;
	            dptr[j] = saturate_cast<T>(ptr1[j]*alpha + ptr2[j]*beta);
	            dptr[j+1] = saturate_cast<T>(ptr1[j+1]*alpha + ptr2[j+1]*beta);
	            dptr[j+2] = saturate_cast<T>(ptr1[j+2]*alpha + ptr2[j+2]*beta);
	            dptr[j+3] = saturate_cast<T>((1 - (1-alpha)*(1-beta))*alpha_scale);
	        }
	    }
	}

This approach, while being very simple, can boost the performance of a simple element-operation by 10-20 percents, especially if the image is rather small and the operation is quite simple.

Another OpenCV idiom in this function, a call of :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>` for the destination array, that allocates the destination array unless it already has the proper size and type. And while the newly allocated arrays are always continuous, you still need to check the destination array because :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>` does not always allocate a new matrix.

.. index:: pair: function; isSubmatrix
.. _doxid-db/de6/classcv_1_1_mat_1ab34367822008627e80e144d7bba3bd70:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	isSubmatrix() const

returns true if the matrix is a submatrix of another matrix

.. index:: pair: function; locateROI
.. _doxid-db/de6/classcv_1_1_mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	locateROI(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`& wholeSize,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& ofs
		) const

Locates the matrix header within a parent matrix.

After you extracted a submatrix from a matrix using :ref:`Mat::row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>`, :ref:`Mat::col <doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`, :ref:`Mat::rowRange <doxid-db/de6/classcv_1_1_mat_1aa6542193430356ad631a9beabc624107>`, :ref:`Mat::colRange <doxid-db/de6/classcv_1_1_mat_1aadc8f9210fe4dec50513746c246fa8d9>`, and others, the resultant submatrix points just to the part of the original big matrix. However, each submatrix contains information (represented by datastart and dataend fields) that helps reconstruct the original matrix size and the position of the extracted submatrix within the original matrix. The method locateROI does exactly that.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- wholeSize

		- Output parameter that contains the size of the whole matrix containing *this* as a part.

	*
		- ofs

		- Output parameter that contains an offset of *this* inside the whole matrix.

.. index:: pair: function; mul
.. _doxid-db/de6/classcv_1_1_mat_1a385c09827713dc3e6d713bfad8460706:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	mul(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m,
		double scale = 1
		) const

Performs an element-wise multiplication or division of the two matrices.

The method returns a temporary object encoding per-element array multiplication, with optional scale. Note that this is not a matrix multiplication that corresponds to a simpler "\\*" operator.

Example:

.. ref-code-block:: cpp

	Mat C = A.mul(5/B); // equivalent to divide(A, B, C, 5)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Another array of the same type and the same size as \*this, or a matrix expression.

	*
		- scale

		- Optional scale factor.

.. index:: pair: function; operator()
.. _doxid-db/de6/classcv_1_1_mat_1ad543b6bd296ae1247032c750af4718e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	operator()(
		:ref:`Range<doxid-d7/d65/classcv_1_1_range>` rowRange,
		:ref:`Range<doxid-d7/d65/classcv_1_1_range>` colRange
		) const

Extracts a rectangular submatrix.

The operators make a new header for the specified sub-array of \*this . They are the most generalized forms of :ref:`Mat::row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>`, :ref:`Mat::col <doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`, :ref:`Mat::rowRange <doxid-db/de6/classcv_1_1_mat_1aa6542193430356ad631a9beabc624107>`, and :ref:`Mat::colRange <doxid-db/de6/classcv_1_1_mat_1aadc8f9210fe4dec50513746c246fa8d9>`. For example, ``A(Range(0, 10), :ref:`Range::all() <doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`)`` is equivalent to ``A.rowRange(0, 10)``. Similarly to all of the above, the operators are O(1) operations, that is, no matrix data is copied.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rowRange

		- Start and end row of the extracted submatrix. The upper boundary is not included. To select all the rows, use :ref:`Range::all() <doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`.

	*
		- colRange

		- Start and end column of the extracted submatrix. The upper boundary is not included. To select all the columns, use :ref:`Range::all() <doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`.

.. index:: pair: function; operator()
.. _doxid-db/de6/classcv_1_1_mat_1a4272fce43d7405603fbb5e5f52580e57:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	operator()(const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- roi

		- Extracted submatrix specified as a rectangle.

.. index:: pair: function; operator()
.. _doxid-db/de6/classcv_1_1_mat_1aee56475f834069b1fad3877c0747aaeb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	operator()(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`* ranges) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ranges

		- Array of selected ranges along each array dimension.

.. index:: pair: function; operator()
.. _doxid-db/de6/classcv_1_1_mat_1aa9bf4fcbb6e854a6db7b7254a205fac9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	operator()(const std::vector<:ref:`Range<doxid-d7/d65/classcv_1_1_range>`>& ranges) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ranges

		- Array of selected ranges along each array dimension.

.. index:: pair: function; operator=
.. _doxid-db/de6/classcv_1_1_mat_1aed1f81fe7efaacc2bd95149cdfa34302:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat&
	operator=(const Mat& m)

assignment operators

These are available assignment operators. Since they all are very different, make sure to read the operator parameters description.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Assigned, right-hand-side matrix. Matrix assignment is an O(1) operation. This means that no data is copied but the data is shared and the reference counter, if any, is incremented. Before assigning new data, the old data is de-referenced via :ref:`Mat::release <doxid-db/de6/classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e>`.

.. index:: pair: function; operator=
.. _doxid-db/de6/classcv_1_1_mat_1a2a0798475170fb3a23b5bc63686de334:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat&
	operator=(const :ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`& expr)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- expr

		- Assigned matrix expression object. As opposite to the first form of the assignment operation, the second form can reuse already allocated matrix if it has the right size and type to fit the matrix expression result. It is automatically handled by the real function that the matrix expressions is expanded to. For example, C=A+B is expanded to add(A, B, C), and add takes care of automatic C reallocation.

.. index:: pair: function; operator=
.. _doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat&
	operator=(const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s)

Sets all or some of the array elements to the specified value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- s

		- Assigned scalar converted to the actual array type.

.. index:: pair: function; pop_back
.. _doxid-db/de6/classcv_1_1_mat_1a88bbb01901fdfe3f1d0592c592e8757c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	pop_back(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nelems = 1)

Removes elements from the bottom of the matrix.

The method removes one or more rows from the bottom of the matrix.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- nelems

		- Number of removed rows. If it is greater than the total number of rows, an exception is thrown.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a13acd320291229615ef15f96ff1ff738:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(int i0 = 0)

Returns a pointer to the specified matrix row.

The methods return ``uchar*`` or typed pointer to the specified matrix row. See the sample in :ref:`Mat::isContinuous <doxid-db/de6/classcv_1_1_mat_1aa90cea495029c7d1ee0a41361ccecdf3>` to know how to use these methods.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- i0

		- A 0-based row index.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1af13f821918f452657f53bc3f750323cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(int i0 = 0) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1af774caab4a38c6f7890f3254ad71eccf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int row,
		int col
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- row

		- Index along the dimension 0

	*
		- col

		- Index along the dimension 1

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1abcfcc1798528b49495e1263eab31127d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int row,
		int col
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- row

		- Index along the dimension 0

	*
		- col

		- Index along the dimension 1

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1ad2bc0c6a23243540e16607868c17be92:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int i0,
		int i1,
		int i2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1abfb233ffa8b26a78c36e733f61da2a3e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int i0,
		int i1,
		int i2
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1ab0e3de187bb27c384269b243e8789ba9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(const int* idx)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a3ef72b9ebc9581796ed68382df8fb064:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(const int* idx) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a7ce1d8cc9a83ae7cab79766d0eb6c0a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a9ea1a1bfbbb2393a4e162230dccbe1f0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a5a9ffc908ac90604f36a8b6a1038747d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp*
	ptr(int i0 = 0)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a6a6b3696440fe48751bfe60fe2a729f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	ptr(int i0 = 0) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a6f4278ede80e7a9fe55d8b03710e2343:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp*
	ptr(
		int row,
		int col
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- row

		- Index along the dimension 0

	*
		- col

		- Index along the dimension 1

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1abda2b96aa438a808b43425040a7da81a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	ptr(
		int row,
		int col
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- row

		- Index along the dimension 0

	*
		- col

		- Index along the dimension 1

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a2bf43f93c5cb610b657bd6e0e091c062:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp*
	ptr(
		int i0,
		int i1,
		int i2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a476f18d2b8d99748005150b24752512d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	ptr(
		int i0,
		int i1,
		int i2
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a7cb2719706bcae72d26dbc9b2fdc02e6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp*
	ptr(const int* idx)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1ac30da0a78cd38a72e8902f52660e2543:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	ptr(const int* idx) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a36ab9a1de78fd00a4f9acf3c8a5d4d05:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	_Tp*
	ptr(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; ptr
.. _doxid-db/de6/classcv_1_1_mat_1a15cac608c7a27fb961a81b9409aaa7e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	const _Tp*
	ptr(const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<int, n>& idx) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; push_back
.. _doxid-db/de6/classcv_1_1_mat_1af4bd5c2cb936dd363816d867aab22a61:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	void
	push_back(const _Tp& elem)

Adds elements to the bottom of the matrix.

The methods add one or more elements to the bottom of the matrix. They emulate the corresponding method of the STL vector class. When elem is :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`, its type and the number of columns must be the same as in the container matrix.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- elem

		- Added element(s).

.. index:: pair: function; push_back
.. _doxid-db/de6/classcv_1_1_mat_1a1cfeb3a75570697426971403fc1ddb0d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	void
	push_back(const :ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`<_Tp>& elem)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- elem

		- Added element(s).

.. index:: pair: function; push_back
.. _doxid-db/de6/classcv_1_1_mat_1a3676bae1741459eda3771e8653357c53:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	push_back(const Mat& m)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Added line(s).

.. index:: pair: function; push_back_
.. _doxid-db/de6/classcv_1_1_mat_1a57c658e2a97dda24fef1be2e625da914:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	push_back_(const void* elem)

internal function

.. index:: pair: function; release
.. _doxid-db/de6/classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	release()

Decrements the reference counter and deallocates the matrix if needed.

The method decrements the reference counter associated with the matrix data. When the reference counter reaches 0, the matrix data is deallocated and the data and the reference counter pointers are set to NULL's. If the matrix header points to an external data set (see :ref:`Mat::Mat <doxid-db/de6/classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc>`), the reference counter is NULL, and the method has no effect in this case.

This method can be called manually to force the matrix data deallocation. But since this method is automatically called in the destructor, or by any other method that changes the data pointer, it is usually not needed. The reference counter decrement and check for 0 is an atomic operation on the platforms that support it. Thus, it is safe to operate on the same matrices asynchronously in different threads.

.. index:: pair: function; reserve
.. _doxid-db/de6/classcv_1_1_mat_1a0706ed6c42e288926c5ad415b976bbe2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	reserve(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz)

Reserves space for the certain number of rows.

The method reserves space for sz rows. If the matrix already has enough space to store sz rows, nothing happens. If the matrix is reallocated, the first :ref:`Mat::rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>` rows are preserved. The method emulates the corresponding method of the STL vector class.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sz

		- Number of rows.

.. index:: pair: function; reserveBuffer
.. _doxid-db/de6/classcv_1_1_mat_1a923eead22fe7f0c48aa000158df920f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	reserveBuffer(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz)

Reserves space for the certain number of bytes.

The method reserves space for sz bytes. If the matrix already has enough space to store sz bytes, nothing happens. If matrix has to be reallocated its previous content could be lost.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sz

		- Number of bytes.

.. index:: pair: function; reshape
.. _doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	reshape(
		int cn,
		int rows = 0
		) const

Changes the shape and/or the number of channels of a 2D matrix without copying the data.

The method makes a new matrix header for \*this elements. The new matrix may have a different size and/or different number of channels. Any combination is possible if:

* No extra elements are included into the new matrix and no elements are excluded. Consequently, the product rows\*cols\*channels() must stay the same after the transformation.

* No data is copied. That is, this is an O(1) operation. Consequently, if you change the number of rows, or the operation changes the indices of elements row in some other way, the matrix must be continuous. See :ref:`Mat::isContinuous <doxid-db/de6/classcv_1_1_mat_1aa90cea495029c7d1ee0a41361ccecdf3>`.

For example, if there is a set of 3D points stored as an STL vector, and you want to represent the points as a 3xN matrix, do the following:

.. ref-code-block:: cpp

	std::vector<Point3f> vec;
	...
	Mat pointMat = Mat(vec). // convert vector to Mat, O(1) operation
	                  reshape(1). // make Nx3 1-channel matrix out of Nx1 3-channel.
	                              // Also, an O(1) operation
	                     t(); // finally, transpose the Nx3 matrix.
	                          // This involves copying all the elements



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- cn

		- New number of channels. If the parameter is 0, the number of channels remains the same.

	*
		- rows

		- New number of rows. If the parameter is 0, the number of rows remains the same.

.. index:: pair: function; reshape
.. _doxid-db/de6/classcv_1_1_mat_1a50e606fe51f53b896b66051634a018fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	reshape(
		int cn,
		int newndims,
		const int* newsz
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; reshape
.. _doxid-db/de6/classcv_1_1_mat_1ab2e41a510891e548f744832cf9b8ab89:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	reshape(
		int cn,
		const std::vector<int>& newshape
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; resize
.. _doxid-db/de6/classcv_1_1_mat_1ad0127b138acfcc2dcd5dafc51175b309:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	resize(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz)

Changes the number of matrix rows.

The methods change the number of matrix rows. If the matrix is reallocated, the first min(Mat::rows, sz) rows are preserved. The methods emulate the corresponding methods of the STL vector class.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sz

		- New number of rows.

.. index:: pair: function; resize
.. _doxid-db/de6/classcv_1_1_mat_1abdbf4852beb3af95977fa289f6c7034c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	resize(
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sz

		- New number of rows.

	*
		- s

		- Value assigned to the newly added elements.

.. index:: pair: function; row
.. _doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	row(int y) const

Creates a matrix header for the specified matrix row.

The method makes a new header for the specified matrix row and returns it. This is an O(1) operation, regardless of the matrix size. The underlying data of the new matrix is shared with the original matrix. Here is the example of one of the classical basic matrix processing operations, axpy, used by LU and many other algorithms:

.. ref-code-block:: cpp

	inline void matrix_axpy(Mat& A, int i, int j, double alpha)
	{
	    A.row(i) += A.row(j)*alpha;
	}

In the current implementation, the following code does not work as expected:

.. ref-code-block:: cpp

	Mat A;
	...
	A.row(i) = A.row(j); // will not work

This happens because A.row(i) forms a temporary header that is further assigned to another header. Remember that each of these operations is O(1), that is, no data is copied. Thus, the above assignment is not true if you may have expected the j-th row to be copied to the i-th row. To achieve that, you should either turn this simple assignment into an expression or use the :ref:`Mat::copyTo <doxid-db/de6/classcv_1_1_mat_1a33fd5d125b4c302b0c9aa86980791a77>` method:

.. ref-code-block:: cpp

	Mat A;
	...
	// works, but looks a bit obscure.
	A.row(i) = A.row(j) + 0;
	// this is a bit longer, but the recommended method.
	A.row(j).copyTo(A.row(i));



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- y

		- A 0-based row index.

.. index:: pair: function; rowRange
.. _doxid-db/de6/classcv_1_1_mat_1aa6542193430356ad631a9beabc624107:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	rowRange(
		int startrow,
		int endrow
		) const

Creates a matrix header for the specified row span.

The method makes a new header for the specified row span of the matrix. Similarly to :ref:`Mat::row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>` and :ref:`Mat::col <doxid-db/de6/classcv_1_1_mat_1a23df02a07ffbfa4aa59c19bc003919fe>`, this is an O(1) operation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- startrow

		- An inclusive 0-based start index of the row span.

	*
		- endrow

		- An exclusive 0-based ending index of the row span.

.. index:: pair: function; rowRange
.. _doxid-db/de6/classcv_1_1_mat_1a6f5b8257ea38a26295944e9a69caf7e7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat
	rowRange(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& r) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- r

		- :ref:`Range <doxid-d7/d65/classcv_1_1_range>` structure containing both the start and the end indices.

.. index:: pair: function; setTo
.. _doxid-db/de6/classcv_1_1_mat_1a0440e2a164c0b0d8462fb1e487be9876:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mat&
	setTo(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` value,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Sets all or some of the array elements to the specified value.

This is an advanced variant of the :ref:`Mat::operator=(const Scalar& s) <doxid-db/de6/classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50>` operator.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- value

		- Assigned scalar converted to the actual array type.

	*
		- mask

		- Operation mask of the same size as \*this.

.. index:: pair: function; step1
.. _doxid-db/de6/classcv_1_1_mat_1a0066c8eee40c1706395b1e57f00e0857:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	step1(int i = 0) const

Returns a normalized step.

The method returns a matrix step divided by :ref:`Mat::elemSize1() <doxid-db/de6/classcv_1_1_mat_1a9acde8f32d4b294558fb406bc05171bc>`. It can be useful to quickly access an arbitrary matrix element.

.. index:: pair: function; t
.. _doxid-db/de6/classcv_1_1_mat_1aaa428c60ccb6d8ea5de18f63dfac8e11:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	t() const

Transposes a matrix.

The method performs matrix transposition by means of matrix expressions. It does not perform the actual transposition but returns a temporary matrix transposition object that can be further used as a part of more complex matrix expressions or can be assigned to a matrix:

.. ref-code-block:: cpp

	Mat A1 = A + Mat::eye(A.size(), A.type())*lambda;
	Mat C = A1.t()*A1; // compute (A + lambda*I)^t * (A + lamda*I)

.. index:: pair: function; total
.. _doxid-db/de6/classcv_1_1_mat_1aa4d317d43fb0cba9c2503f3c61b866c8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	total() const

Returns the total number of array elements.

The method returns the number of array elements (a number of pixels if the array represents an image).

.. index:: pair: function; total
.. _doxid-db/de6/classcv_1_1_mat_1a5c506fc8b2cf52375e0d8be26aae0df4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	total(
		int startDim,
		int endDim = INT_MAX
		) const

Returns the total number of array elements.

The method returns the number of elements within a certain sub-array slice with startDim <= dim < endDim

.. index:: pair: function; type
.. _doxid-db/de6/classcv_1_1_mat_1af2d2652e552d7de635988f18a84b53e5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	type() const

Returns the type of a matrix element.

The method returns a matrix element type. This is an identifier compatible with the :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` type system, like CV_16SC3 or 16-bit signed 3-channel array, and so on.

.. index:: pair: function; diag
.. _doxid-db/de6/classcv_1_1_mat_1a0f81856dbcb93eae6113947edb3ea068:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	Mat
	diag(const Mat& d)

creates a diagonal matrix

The method creates a square diagonal matrix from specified main diagonal.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- d

		- One-dimensional matrix that represents the main diagonal.

.. index:: pair: function; eye
.. _doxid-db/de6/classcv_1_1_mat_1a2cf9b9acde7a9852542bbc20ef851ed2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	eye(
		int rows,
		int cols,
		int type
		)

Returns an identity matrix of the specified size and type.

The method returns a Matlab-style identity matrix initializer, similarly to :ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`. Similarly to :ref:`Mat::ones <doxid-db/de6/classcv_1_1_mat_1a69ae0402d116fc9c71908d8508dc2f09>`, you can use a scale operation to create a scaled identity matrix efficiently:

.. ref-code-block:: cpp

	// make a 4x4 diagonal matrix with 0.1's on the diagonal.
	Mat A = Mat::eye(4, 4, CV_32F)*0.1;



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows.

	*
		- cols

		- Number of columns.

	*
		- type

		- Created matrix type.

.. index:: pair: function; eye
.. _doxid-db/de6/classcv_1_1_mat_1aab87b56e1dc370ffe4afb735b6a1e5c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	eye(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- Alternative matrix size specification as Size(cols, rows) .

	*
		- type

		- Created matrix type.

.. index:: pair: function; getStdAllocator
.. _doxid-db/de6/classcv_1_1_mat_1a8d5dda7d818009547d71a086d3d755a7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`*
	getStdAllocator()

and the standard allocator

.. index:: pair: function; ones
.. _doxid-db/de6/classcv_1_1_mat_1a69ae0402d116fc9c71908d8508dc2f09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	ones(
		int rows,
		int cols,
		int type
		)

Returns an array of all 1's of the specified size and type.

The method returns a Matlab-style 1's array initializer, similarly to :ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`. Note that using this method you can initialize an array with an arbitrary value, using the following Matlab idiom:

.. ref-code-block:: cpp

	Mat A = Mat::ones(100, 100, CV_8U)*3; // make 100x100 matrix filled with 3.

The above operation does not form a 100x100 matrix of 1's and then multiply it by 3. Instead, it just remembers the scale factor (3 in this case) and use it when actually invoking the matrix initializer.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows.

	*
		- cols

		- Number of columns.

	*
		- type

		- Created matrix type.

.. index:: pair: function; ones
.. _doxid-db/de6/classcv_1_1_mat_1afc9c2c0b17ecd00932bc5fbc72f9bce0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	ones(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- Alternative to the matrix size specification Size(cols, rows) .

	*
		- type

		- Created matrix type.

.. index:: pair: function; ones
.. _doxid-db/de6/classcv_1_1_mat_1a6ed33f15d7bf0172efb62d61b3751284:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	ones(
		int ndims,
		const int* sz,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ndims

		- Array dimensionality.

	*
		- sz

		- Array of integers specifying the array shape.

	*
		- type

		- Created matrix type.

.. index:: pair: function; zeros
.. _doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	zeros(
		int rows,
		int cols,
		int type
		)

Returns a zero array of the specified size and type.

The method returns a Matlab-style zero array initializer. It can be used to quickly form a constant array as a function parameter, part of a matrix expression, or as a matrix initializer. :

.. ref-code-block:: cpp

	Mat A;
	A = Mat::zeros(3, 3, CV_32F);

In the example above, a new matrix is allocated only if A is not a 3x3 floating-point matrix. Otherwise, the existing matrix A is filled with zeros.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows.

	*
		- cols

		- Number of columns.

	*
		- type

		- Created matrix type.

.. index:: pair: function; zeros
.. _doxid-db/de6/classcv_1_1_mat_1a095db10924bc801644a29074a755b6e9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	zeros(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- Alternative to the matrix size specification Size(cols, rows) .

	*
		- type

		- Created matrix type.

.. index:: pair: function; zeros
.. _doxid-db/de6/classcv_1_1_mat_1a961cf7d4f82253d93bb5b8ff54522087:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`
	zeros(
		int ndims,
		const int* sz,
		int type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ndims

		- Array dimensionality.

	*
		- sz

		- Array of integers specifying the array shape.

	*
		- type

		- Created matrix type.

