.. index:: pair: class; cv::MatExpr
.. _doxid-d9/ddc/classcv_1_1_mat_expr:

class cv::MatExpr
=================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Matrix expression representation. :ref:`More...<details-d9/ddc/classcv_1_1_mat_expr>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mat.hpp>
	
	class MatExpr
	{
	public:
		// fields
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`a<doxid-d9/ddc/classcv_1_1_mat_expr_1afedc79d4d837bced7282ef1023e72299>`;
		double :target:`alpha<doxid-d9/ddc/classcv_1_1_mat_expr_1ad15093b928c0af84cc1e88179ef4d638>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`b<doxid-d9/ddc/classcv_1_1_mat_expr_1a78ec9f0784b9ff6e5942381081df13d4>`;
		double :target:`beta<doxid-d9/ddc/classcv_1_1_mat_expr_1a367ac73c079dc071d68a20404bfd4b21>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`c<doxid-d9/ddc/classcv_1_1_mat_expr_1a5f728e830807710bf3cc18b428057d8e>`;
		int :target:`flags<doxid-d9/ddc/classcv_1_1_mat_expr_1a039a50c85f8475f06e3aecb9fb9b0f0c>`;
		const :ref:`MatOp<doxid-da/d07/classcv_1_1_mat_op>`* :target:`op<doxid-d9/ddc/classcv_1_1_mat_expr_1a98f8a4a0853cb5ac6b147238f3d4ad1f>`;
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` :target:`s<doxid-d9/ddc/classcv_1_1_mat_expr_1a41e897e2deb89c8caa169194f87c2a73>`;

		// construction
	
		:target:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr_1a667e294461d09da9a1b1760d33adbbc8>`();
		:target:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr_1a18f051615e9350438ef369c9dca01e6a>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);
	
		:target:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr_1ae38c3e856d93e7cffb9f14c894a76c17>`(
			const :ref:`MatOp<doxid-da/d07/classcv_1_1_mat_op>`* _op,
			int _flags,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& _a = :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`(),
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& _b = :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`(),
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& _c = :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`(),
			double _alpha = 1,
			double _beta = 1,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& _s = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`()
			);

		// methods
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1a366cabf9cd5b9a9fb0e313570c5b3cac>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1a93d7d34c3f0b5dbc5d6171d0a0094f28>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1aefc08124af851c90433c85f39fb63a7e>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1a503c5fe1e1f66590b35969fc28ba1af7>`(
			const MatExpr& e,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1ab866e1c69c03008f2f9c0d923c4dc861>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1a65604e00ecb411bef65e3c668a4bdf63>`(
			const MatExpr& e,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1ac9b4c182fe91d94500d290beb8098345>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator+<doxid-d9/ddc/classcv_1_1_mat_expr_1a4f77f0a2048840246c7f219c5a06f2ff>`(
			const MatExpr& e1,
			const MatExpr& e2
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1ae07cd7b4ce3474dbdb1a264e2f6e7b0d>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1ad424f126a496afadafb4b6c67a1ce174>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1a6ed1d63630a0498bae02e4a71e757342>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1a268e1ccaa369123adf2215756e3fae6a>`(
			const MatExpr& e,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1ad7a022ce69ea48d8d9110cb79ab27b6a>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1ab851dfc040860bcf008d19e4a5926b83>`(
			const MatExpr& e,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1a0d1940f6e797fb5f8092db30db875bdf>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1a881069f5bff2833f6319cf2e7769fdbe>`(
			const MatExpr& e1,
			const MatExpr& e2
			);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1a22ebbe4ce388179e64afe917fa369003>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);
	
		MatExpr
		:target:`operator-<doxid-d9/ddc/classcv_1_1_mat_expr_1a09f773558b48e56dfa061179599e11d0>`(const MatExpr& e);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1ac66fa81bbfc418c535a7f9f49a900554>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1a7f68410debc724a5be5235977b902be5>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1a7994c3ff3973cc56aac839dc8683ba51>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1a951bede696efc7ad39b2326c257cb9b5>`(
			const MatExpr& e,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1ae3d5b4a180f62f30b5874243af312ebb>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1a54d49dc23f7a659f61ec5401b9c48d05>`(
			const MatExpr& e,
			double s
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1aaac1439d54057753cddc9330f8f56ea6>`(
			double s,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator*<doxid-d9/ddc/classcv_1_1_mat_expr_1a2eb63d9f7b2d398c8714239114ff2b4e>`(
			const MatExpr& e1,
			const MatExpr& e2
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1a4fd7c94c36187ae1dd810e5e1cb98506>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1a9f4860191ebc911882258adb3ed81220>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1a7d490d89368ae09a8034d3ef145f1b75>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1a6f76b7cbb9b728896ffb90522796a1c7>`(
			const MatExpr& e,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1a27472a7b10eb061860f2d44e91ce2016>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1aa27acc5fc0baa71648720825da8d7c8d>`(
			const MatExpr& e,
			double s
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1af1c42ad483f7b6947e17db0c508c4292>`(
			double s,
			const MatExpr& e
			);
	
		MatExpr
		:target:`operator/<doxid-d9/ddc/classcv_1_1_mat_expr_1a296be1bafb9c82f8fd4ec55ea5f3ef81>`(
			const MatExpr& e1,
			const MatExpr& e2
			);
	
		MatExpr
		:target:`operator<<doxid-d9/ddc/classcv_1_1_mat_expr_1a8dbe9fe15d257dbb1a566dd5b752b718>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator<<doxid-d9/ddc/classcv_1_1_mat_expr_1a200c6a55801095458ffba28d0bc2051f>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator<<doxid-d9/ddc/classcv_1_1_mat_expr_1a027193236c695aef28e54acf23cad5ca>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator<=<doxid-d9/ddc/classcv_1_1_mat_expr_1a630e58dd233abf6b6ff3393be67454c0>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator<=<doxid-d9/ddc/classcv_1_1_mat_expr_1abeea3d9de568017193b26eea645c98f3>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator<=<doxid-d9/ddc/classcv_1_1_mat_expr_1a21b436ed46cb4ec5a3628576a10190fe>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator==<doxid-d9/ddc/classcv_1_1_mat_expr_1a0f25efd0c1f254692fc60bda5f4c3353>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator==<doxid-d9/ddc/classcv_1_1_mat_expr_1a5516de530ce49cf1fdbfcedbc13fa64d>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator==<doxid-d9/ddc/classcv_1_1_mat_expr_1a2c23e8205bea3a64497638fe270e3a83>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator!=<doxid-d9/ddc/classcv_1_1_mat_expr_1a89ee700214e5c588fc9c2f16dc5f0814>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator!=<doxid-d9/ddc/classcv_1_1_mat_expr_1a0c7b11e74936908ee2fb47e4eb9c5e18>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator!=<doxid-d9/ddc/classcv_1_1_mat_expr_1a25f71801b3fb6ab5395c2dbcc9cc60ad>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator>=<doxid-d9/ddc/classcv_1_1_mat_expr_1a39f3eecb2debd3e05e155d8769597994>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator>=<doxid-d9/ddc/classcv_1_1_mat_expr_1a908e8895c1daab24e5e8be7b9adddf12>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator>=<doxid-d9/ddc/classcv_1_1_mat_expr_1ae5acab862f659f77658f59c723791d2d>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator><doxid-d9/ddc/classcv_1_1_mat_expr_1a85401ad9773e0afda99ae87137f26b6d>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator><doxid-d9/ddc/classcv_1_1_mat_expr_1ae14822d723b02a44dcc6b9dc66b9d2d6>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`operator><doxid-d9/ddc/classcv_1_1_mat_expr_1affc3d68c3891df1237e9a9bd96856c8c>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator&<doxid-d9/ddc/classcv_1_1_mat_expr_1ad5ca0810ca85918075da95a79d9a97f7>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator&<doxid-d9/ddc/classcv_1_1_mat_expr_1ac2374f3eaff03e88ed89e166a68d2ae0>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator&<doxid-d9/ddc/classcv_1_1_mat_expr_1a2a9d86f1b3e1c8840fbcdaedc357c3dc>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator|<doxid-d9/ddc/classcv_1_1_mat_expr_1a8938333ac6cc65c2cc4a21071b22df56>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator|<doxid-d9/ddc/classcv_1_1_mat_expr_1aeac05ffd3d5c1d6c803e46a5ed380a95>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator|<doxid-d9/ddc/classcv_1_1_mat_expr_1a27c1238f43dfbf691c3da8b9bcbe8622>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator^<doxid-d9/ddc/classcv_1_1_mat_expr_1a9afbc19e8756efdbc92e17d096540ce5>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`operator^<doxid-d9/ddc/classcv_1_1_mat_expr_1abc36e16ecd042df954771a99068a6c49>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s
			);
	
		MatExpr
		:target:`operator^<doxid-d9/ddc/classcv_1_1_mat_expr_1a9867b0d5e11c2fef494b71e51d21da1b>`(
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`operator~<doxid-d9/ddc/classcv_1_1_mat_expr_1a69ba8f5d451de974d9aa514cdbbb1120>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);
	
		MatExpr
		:target:`min<doxid-d9/ddc/classcv_1_1_mat_expr_1ac22d7d32f1ec91fd106760a98a6f4731>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`min<doxid-d9/ddc/classcv_1_1_mat_expr_1aafbfd6a44196ca5f40bcea5136548c22>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`min<doxid-d9/ddc/classcv_1_1_mat_expr_1a865832a7380156566594f039d4ff0ff6>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:target:`max<doxid-d9/ddc/classcv_1_1_mat_expr_1a6dff8b6e9105b6d817b493e7be157c90>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& b
			);
	
		MatExpr
		:target:`max<doxid-d9/ddc/classcv_1_1_mat_expr_1a0326ec178e9d4ca09c54b6b488fb8021>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a,
			double s
			);
	
		MatExpr
		:target:`max<doxid-d9/ddc/classcv_1_1_mat_expr_1a4a2fa0a37cba3f21b576ae4084757fba>`(
			double s,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& a
			);
	
		MatExpr
		:ref:`abs<doxid-d9/ddc/classcv_1_1_mat_expr_1a30843fc6c148a00f5d300a7f43f3fbdc>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);
	
		MatExpr
		:ref:`abs<doxid-d9/ddc/classcv_1_1_mat_expr_1a13f0c960fd6b3372aff880bc45bdb602>`(const MatExpr& e);
	
		MatExpr
		:target:`col<doxid-d9/ddc/classcv_1_1_mat_expr_1ae4aa2d04c89fa48df8d07913d897d7f9>`(int x) const;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`cross<doxid-d9/ddc/classcv_1_1_mat_expr_1a8bf0a7608d14009f0e946f35b813ccaa>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m) const;
	
		MatExpr
		:target:`diag<doxid-d9/ddc/classcv_1_1_mat_expr_1a1ca4c30675b372904812b6ca389b0fc0>`(int d = 0) const;
	
		double
		:target:`dot<doxid-d9/ddc/classcv_1_1_mat_expr_1a2e20e53ae2e09a0f0575d9f3987067c1>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m) const;
	
		MatExpr
		:target:`inv<doxid-d9/ddc/classcv_1_1_mat_expr_1a6b6f538841a37416d5461f919f5e7bf6>`(int method = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`) const;
	
		MatExpr
		:target:`mul<doxid-d9/ddc/classcv_1_1_mat_expr_1a0e80cbf0fa6ed1187294697ab2b674ca>`(
			const MatExpr& e,
			double scale = 1
			) const;
	
		MatExpr
		:target:`mul<doxid-d9/ddc/classcv_1_1_mat_expr_1a3be890f1c079879bbd106050972f24ea>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
			double scale = 1
			) const;
	
		:target:`operator Mat<doxid-d9/ddc/classcv_1_1_mat_expr_1a14b681f8faccc92f32053ee037f22462>`() const;
	
		template <typename _Tp>
		:target:`operator Mat_< _Tp ><doxid-d9/ddc/classcv_1_1_mat_expr_1a437838df79578365571e2253cb14ed18>`() const;
	
		MatExpr
		:target:`operator()<doxid-d9/ddc/classcv_1_1_mat_expr_1a6bceaa05f2fea4c73bc95f4b9e7d09bf>`(
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& rowRange,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& colRange
			) const;
	
		MatExpr
		:target:`operator()<doxid-d9/ddc/classcv_1_1_mat_expr_1ae3d4aa0cf6b40c5829c6377a54101068>`(const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi) const;
	
		MatExpr
		:target:`row<doxid-d9/ddc/classcv_1_1_mat_expr_1ac3d30cfb0af133632c2f0593767b9690>`(int y) const;
	
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`size<doxid-d9/ddc/classcv_1_1_mat_expr_1a8b5fcf3cec72903e2692e5c71e1c283b>`() const;
	
		MatExpr
		:target:`t<doxid-d9/ddc/classcv_1_1_mat_expr_1af69e70f213b05e51527b80f8e5f2d08f>`() const;
	
		int
		:target:`type<doxid-d9/ddc/classcv_1_1_mat_expr_1a65fb8ae8f21a136edfe6da122c5466fb>`() const;
	};
.. _details-d9/ddc/classcv_1_1_mat_expr:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Matrix expression representation.

:target:`doxid-d9/ddc/classcv_1_1_mat_expr_1matrixexpressions` This is a list of implemented matrix operations that can be combined in arbitrary complex expressions (here A, B stand for matrices (:ref:`Mat <doxid-db/de6/classcv_1_1_mat>`), s for a scalar ( Scalar ), alpha for a real-valued scalar ( double )):

* Addition, subtraction, negation: ``A+B``, ``A-B``, ``A+s``, ``A-s``, ``s+A``, ``s-A``, ``-A``

* Scaling: ``A*alpha``

* Per-element multiplication and division: ``A.mul(B)``, ``A/B``, ``alpha/A``

* Matrix multiplication: ``A*B``

* Transposition: ``A.t()`` (means A T)

* Matrix inversion and pseudo-inversion, solving linear systems and least-squares problems: ``A.inv([method]) (~ A<sup>-1</sup>)``, ``A.inv([method])*B (~ X: AX=B)``

* Comparison: ``A cmpop B``, ``A cmpop alpha``, ``alpha cmpop A``, where *cmpop* is one of ``>``, ``>=``, ``==``, ``!=``, ``<=``, ``<``. The result of comparison is an 8-bit single channel mask whose elements are set to 255 (if the particular element or pair of elements satisfy the condition) or 0.

* Bitwise logical operations: ``A logicop B``, ``A logicop s``, ``s logicop A``, ``~A``, where *logicop* is one of ``&``, ``|``, ``^``.

* Element-wise minimum and maximum: ``min(A, B)``, ``min(A, alpha)``, ``max(A, B)``, ``max(A, alpha)``

* Element-wise absolute value: ``abs(A)``

* Cross-product, dot-product: ``A.cross(B)``, ``A.dot(B)``

* Any function of matrix or matrices and scalars that returns a matrix or a scalar, such as norm, mean, sum, countNonZero, trace, determinant, repeat, and others.

* Matrix initializers (:ref:`Mat::eye() <doxid-db/de6/classcv_1_1_mat_1a2cf9b9acde7a9852542bbc20ef851ed2>`, :ref:`Mat::zeros() <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`, :ref:`Mat::ones() <doxid-db/de6/classcv_1_1_mat_1a69ae0402d116fc9c71908d8508dc2f09>`), matrix comma-separated initializers, matrix constructors and operators that extract sub-matrices (see :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` description).

* Mat\_<destination_type>() constructors to cast the result to the proper type. Comma-separated initializers and probably some other operations may require additional explicit Mat() or Mat\_<T>() constructor calls to resolve a possible ambiguity.
  
  Here are examples of matrix expressions:
  
  .. ref-code-block:: cpp
  
  	// compute pseudo-inverse of A, equivalent to A.inv(DECOMP_SVD)
  	SVD svd(A);
  	Mat pinvA = svd.vt.t()*Mat::diag(1./svd.w)*svd.u.t();
  	
  	// compute the new vector of parameters in the Levenberg-Marquardt algorithm
  	x -= (A.t()*A + lambda*Mat::eye(A.cols,A.cols,A.type())).inv(DECOMP_CHOLESKY)*(A.t()*err);
  	
  	// sharpen image using "unsharp mask" algorithm
  	Mat blurred; double sigma = 1, threshold = 5, amount = 1;
  	GaussianBlur(img, blurred, Size(), sigma, sigma);
  	Mat lowContrastMask = abs(img - blurred) < threshold;
  	Mat sharpened = img*(1+amount) + blurred*(-amount);
  	img.copyTo(sharpened, lowContrastMask);

Methods
-------

.. index:: pair: function; abs
.. _doxid-d9/ddc/classcv_1_1_mat_expr_1a30843fc6c148a00f5d300a7f43f3fbdc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MatExpr
	abs(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m)

Calculates an absolute value of each matrix element.

abs is a meta-function that is expanded to one of absdiff or convertScaleAbs forms:

* C = abs(A-B) is equivalent to ``absdiff(A, B, C)``

* C = abs(A) is equivalent to ``absdiff(A, Scalar::all(0), C)``

* C = ``:ref:`Mat_ <doxid-d9/de0/classcv_1_1_mat__>`<:ref:`Vec <doxid-db/d93/classcv_1_1_vec>`<uchar,n> >(abs(A*alpha + beta))`` is equivalent to ``convertScaleAbs(A, C, alpha, beta)``

The output matrix has the same size and the same type as the input one except for the last case, where C is depth=CV_8U .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- matrix.



.. rubric:: See also:

:ref:`MatrixExpressions <doxid-d9/ddc/classcv_1_1_mat_expr_1MatrixExpressions>`, :ref:`absdiff <doxid-d2/de8/group__core__array_1ga6fef31bc8c4071cbc114a758a2b79c14>`, :ref:`convertScaleAbs <doxid-d2/de8/group__core__array_1ga3460e9c9f37b563ab9dd550c4d8c4e7d>`

.. index:: pair: function; abs
.. _doxid-d9/ddc/classcv_1_1_mat_expr_1a13f0c960fd6b3372aff880bc45bdb602:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MatExpr
	abs(const MatExpr& e)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- e

		- matrix expression.

