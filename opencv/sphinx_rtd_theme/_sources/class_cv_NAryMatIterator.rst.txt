.. index:: pair: class; cv::NAryMatIterator
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator:

class cv::NAryMatIterator
=========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

n-ary multi-dimensional array iterator. :ref:`More...<details-d1/ddb/classcv_1_1_n_ary_mat_iterator>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mat.hpp>
	
	class NAryMatIterator
	{
	public:
		// fields
	
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** :ref:`arrays<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a001ac5692124eefacd223ab4c26a430f>`;
		int :ref:`narrays<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1aefb7ee05b467bfd4623b5a85bfb81066>`;
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` :ref:`nplanes<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a94ba374a7e5a004d19060a522893e09d>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* :ref:`planes<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1add8eb6b9303aeed6dccd8a57809b6260>`;
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** :ref:`ptrs<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1ab7c6aeaca3c95077786f894a549f48eb>`;
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` :ref:`size<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a42ec820537c8749494a65784dbb44261>`;

		// construction
	
		:ref:`NAryMatIterator<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1ade2ae0a6205c67696666441ea85d1eea>`();
	
		:ref:`NAryMatIterator<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1aa0a0a7e2c68c1de614e73c7fcaa63f2f>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays,
			:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** ptrs,
			int narrays = -1
			);
	
		:ref:`NAryMatIterator<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1acbc0100414fe60ab212553a67dd788b6>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays,
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* planes,
			int narrays = -1
			);

		// methods
	
		void
		:ref:`init<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1acbe9be31cecb11ea14fcf4b0fafe6f3d>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays,
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* planes,
			:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** ptrs,
			int narrays = -1
			);
	
		NAryMatIterator&
		:ref:`operator++<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a3e686d47da475b75c9b8ec11723bb2f3>`();
	
		NAryMatIterator
		:ref:`operator++<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a260701f031521ebeac69bcc35c02a0d9>`(int);

	protected:
		// fields
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` :target:`idx<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a81dead7447791c3ca2833aebce555bca>`;
		int :target:`iterdepth<doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a12f058bd6c7ea7e2b87c65eaa3054e0e>`;
	};
.. _details-d1/ddb/classcv_1_1_n_ary_mat_iterator:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

n-ary multi-dimensional array iterator.

Use the class to implement unary, binary, and, generally, n-ary element-wise operations on multi-dimensional arrays. Some of the arguments of an n-ary function may be continuous arrays, some may be not. It is possible to use conventional MatIterator 's for each array but incrementing all of the iterators after each small operations may be a big overhead. In this case consider using :ref:`NAryMatIterator <doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator>` to iterate through several matrices simultaneously as long as they have the same geometry (dimensionality and all the dimension sizes are the same). On each iteration ``it.planes[0]``, ``it.planes[1]``,... will be the slices of the corresponding matrices.

The example below illustrates how you can compute a normalized and threshold 3D color histogram:

.. ref-code-block:: cpp

	void computeNormalizedColorHist(const Mat& image, Mat& hist, int N, double minProb)
	{
	    const int histSize[] = {N, N, N};
	
	    // make sure that the histogram has a proper size and type
	    hist.create(3, histSize, CV_32F);
	
	    // and clear it
	    hist = Scalar(0);
	
	    // the loop below assumes that the image
	    // is a 8-bit 3-channel. check it.
	    CV_Assert(image.type() == CV_8UC3);
	    MatConstIterator_<Vec3b> it = image.begin<Vec3b>(),
	                             it_end = image.end<Vec3b>();
	    for( ; it != it_end; ++it )
	    {
	        const Vec3b& pix = *it;
	        hist.at<float>(pix[0]*N/256, pix[1]*N/256, pix[2]*N/256) += 1.f;
	    }
	
	    minProb *= image.rows*image.cols;
	
	    // initialize iterator (the style is different from STL).
	    // after initialization the iterator will contain
	    // the number of slices or planes the iterator will go through.
	    // it simultaneously increments iterators for several matrices
	    // supplied as a null terminated list of pointers
	    const Mat* arrays[] = {&hist, 0};
	    Mat planes[1];
	    NAryMatIterator itNAry(arrays, planes, 1);
	    double s = 0;
	    // iterate through the matrix. on each iteration
	    // itNAry.planes[i] (of type Mat) will be set to the current plane
	    // of the i-th n-dim matrix passed to the iterator constructor.
	    for(int p = 0; p < itNAry.nplanes; p++, ++itNAry)
	    {
	        threshold(itNAry.planes[0], itNAry.planes[0], minProb, 0, THRESH_TOZERO);
	        s += sum(itNAry.planes[0])[0];
	    }
	
	    s = 1./s;
	    itNAry = NAryMatIterator(arrays, planes, 1);
	    for(int p = 0; p < itNAry.nplanes; p++, ++itNAry)
	        itNAry.planes[0] *= s;
	}

Fields
------

.. index:: pair: variable; arrays
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a001ac5692124eefacd223ab4c26a430f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays

the iterated arrays

.. index:: pair: variable; narrays
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1aefb7ee05b467bfd4623b5a85bfb81066:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int narrays

the number of arrays

.. index:: pair: variable; nplanes
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a94ba374a7e5a004d19060a522893e09d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nplanes

the number of hyper-planes that the iterator steps through

.. index:: pair: variable; planes
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1add8eb6b9303aeed6dccd8a57809b6260:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* planes

the current planes

.. index:: pair: variable; ptrs
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1ab7c6aeaca3c95077786f894a549f48eb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** ptrs

data pointers

.. index:: pair: variable; size
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a42ec820537c8749494a65784dbb44261:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size

the size of each segment (in elements)

Construction
------------

.. index:: pair: function; NAryMatIterator
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1ade2ae0a6205c67696666441ea85d1eea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NAryMatIterator()

the default constructor

.. index:: pair: function; NAryMatIterator
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1aa0a0a7e2c68c1de614e73c7fcaa63f2f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NAryMatIterator(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** ptrs,
		int narrays = -1
		)

the full constructor taking arbitrary number of n-dim matrices

.. index:: pair: function; NAryMatIterator
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1acbc0100414fe60ab212553a67dd788b6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NAryMatIterator(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* planes,
		int narrays = -1
		)

the full constructor taking arbitrary number of n-dim matrices

Methods
-------

.. index:: pair: function; init
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1acbe9be31cecb11ea14fcf4b0fafe6f3d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	init(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`** arrays,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* planes,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** ptrs,
		int narrays = -1
		)

the separate iterator initialization method

.. index:: pair: function; operator++
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a3e686d47da475b75c9b8ec11723bb2f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NAryMatIterator&
	operator++()

proceeds to the next plane of every iterated matrix

.. index:: pair: function; operator++
.. _doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator_1a260701f031521ebeac69bcc35c02a0d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NAryMatIterator
	operator++(int)

proceeds to the next plane of every iterated matrix (postfix increment operator)

