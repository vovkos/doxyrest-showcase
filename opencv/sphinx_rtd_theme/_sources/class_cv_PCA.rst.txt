.. index:: pair: class; cv::PCA
.. _doxid-d3/d39/classcv_1_1_p_c_a:

class cv::PCA
=============

.. toctree::
	:hidden:

	enum_cv_PCA_Flags.rst

Overview
~~~~~~~~

Principal Component Analysis. :ref:`More...<details-d3/d39/classcv_1_1_p_c_a>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <core.hpp>
	
	class PCA
	{
	public:
		// enums
	
		enum :ref:`Flags<doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50>`;

		// fields
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`eigenvalues<doxid-d3/d39/classcv_1_1_p_c_a_1a1c9d34c02df49120474a4a366b971303>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`eigenvectors<doxid-d3/d39/classcv_1_1_p_c_a_1a8fed85cf5f9d8bb9b17f031398cb74a0>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`mean<doxid-d3/d39/classcv_1_1_p_c_a_1a1bca9d1cc7808b7d08b2a046ee92cd11>`;

		// construction
	
		:ref:`PCA<doxid-d3/d39/classcv_1_1_p_c_a_1a50ad1a87273a258055a331d5a4c63ce4>`();
	
		:ref:`PCA<doxid-d3/d39/classcv_1_1_p_c_a_1a5a7400a3dd169deb4111231a61bc2575>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
			int flags,
			int maxComponents = 0
			);
	
		:ref:`PCA<doxid-d3/d39/classcv_1_1_p_c_a_1af44683b857883856418187f24d8d19a2>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
			int flags,
			double retainedVariance
			);

		// methods
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`backProject<doxid-d3/d39/classcv_1_1_p_c_a_1a5f84cfbdb25b9833cc1bfb5bd484ea79>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec) const;
	
		void
		:ref:`backProject<doxid-d3/d39/classcv_1_1_p_c_a_1a3b2dae725800de973be1135e92b1686a>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
			) const;
	
		PCA&
		:ref:`operator()<doxid-d3/d39/classcv_1_1_p_c_a_1a26e76331a68988144a403649c6b8af5c>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
			int flags,
			int maxComponents = 0
			);
	
		PCA&
		:ref:`operator()<doxid-d3/d39/classcv_1_1_p_c_a_1aff68797b34e6edb162b0f5d1819b2e9f>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
			int flags,
			double retainedVariance
			);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`project<doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec) const;
	
		void
		:ref:`project<doxid-d3/d39/classcv_1_1_p_c_a_1a0d02b263028cdf5267229f334020c632>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
			) const;
	
		void
		:ref:`read<doxid-d3/d39/classcv_1_1_p_c_a_1aa41a4bdd788b67e7e83de8c096f30816>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		void
		:ref:`write<doxid-d3/d39/classcv_1_1_p_c_a_1a8be99fa476731ff5429c241e9a92a57b>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	};
.. _details-d3/d39/classcv_1_1_p_c_a:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Principal Component Analysis.

The class is used to calculate a special basis for a set of vectors. The basis will consist of eigenvectors of the covariance matrix calculated from the input set of vectors. The class PCA can also transform vectors to/from the new coordinate space defined by the basis. Usually, in this new coordinate system, each vector from the original set (and any linear combination of such vectors) can be quite accurately approximated by taking its first few components, corresponding to the eigenvectors of the largest eigenvalues of the covariance matrix. Geometrically it means that you calculate a projection of the vector to a subspace formed by a few eigenvectors corresponding to the dominant eigenvalues of the covariance matrix. And usually such a projection is very close to the original vector. So, you can represent the original vector from a high-dimensional space with a much shorter vector consisting of the projected vector's coordinates in the subspace. Such a transformation is also known as Karhunen-Loeve Transform, or KLT. See `http://en.wikipedia.org/wiki/Principal_component_analysis <http://en.wikipedia.org/wiki/Principal_component_analysis>`__

The sample below is the function that takes two matrices. The first function stores a set of vectors (a row per vector) that is used to calculate :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>`. The second function stores another "test" set of vectors (a row per vector). First, these vectors are compressed with :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>`, then reconstructed back, and then the reconstruction error norm is computed and printed for each vector. :

.. ref-code-block:: cpp

	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	
	:ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` compressPCA(const :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`& pcaset, int maxComponents,
	                const :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`& testset, :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`& compressed)
	{
	    :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` pca(pcaset, // pass the data
	            :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`(), // we do not have a pre-computed mean vector,
	                   // so let the PCA engine to compute it
	            :ref:`PCA::DATA_AS_ROW <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50a159399e962048f705645483ca16e9fd6>`, // indicate that the vectors
	                                // are stored as matrix rows
	                                // (use PCA::DATA_AS_COL if the vectors are
	                                // the matrix columns)
	            maxComponents // specify, how many principal components to retain
	            );
	    // if there is no test data, just return the computed basis, ready-to-use
	    if( !testset.:ref:`data <doxid-db/de6/classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564>` )
	        return pca;
	    :ref:`CV_Assert <doxid-db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b>`( testset.:ref:`cols <doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>` == pcaset.:ref:`cols <doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>` );
	
	    compressed.:ref:`create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>`(testset.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`, maxComponents, testset.:ref:`type <doxid-db/de6/classcv_1_1_mat_1af2d2652e552d7de635988f18a84b53e5>`());
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` reconstructed;
	    for( int i = 0; i < testset.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`; i++ )
	    {
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` vec = testset.:ref:`row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>`(i), coeffs = compressed.:ref:`row <doxid-db/de6/classcv_1_1_mat_1a4b22e1c23af7a7f2eef8fa478cfa7434>`(i), reconstructed;
	        // compress the vector, the result will be stored
	        // in the i-th row of the output matrix
	        pca.project(vec, coeffs);
	        // and then reconstruct it
	        pca.backProject(coeffs, reconstructed);
	        // and measure the error
	        printf("%d. diff = %g\n", i, :ref:`norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>`(vec, reconstructed, :ref:`NORM_L2 <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`));
	    }
	    return pca;
	}



.. rubric:: See also:

:ref:`calcCovarMatrix <doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>`, :ref:`mulTransposed <doxid-d2/de8/group__core__array_1gadc4e49f8f7a155044e3be1b9e3b270ab>`, :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>`, :ref:`dft <doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>`, :ref:`dct <doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>`

Fields
------

.. index:: pair: variable; eigenvalues
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a1c9d34c02df49120474a4a366b971303:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` eigenvalues

eigenvalues of the covariation matrix

.. index:: pair: variable; eigenvectors
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a8fed85cf5f9d8bb9b17f031398cb74a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` eigenvectors

eigenvectors of the covariation matrix

.. index:: pair: variable; mean
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a1bca9d1cc7808b7d08b2a046ee92cd11:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` mean

mean value subtracted before the projection and added after the back projection

Construction
------------

.. index:: pair: function; PCA
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a50ad1a87273a258055a331d5a4c63ce4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PCA()

default constructor

The default constructor initializes an empty PCA structure. The other constructors initialize the structure and call :ref:`PCA::operator()() <doxid-d3/d39/classcv_1_1_p_c_a_1a26e76331a68988144a403649c6b8af5c>`.

.. index:: pair: function; PCA
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a5a7400a3dd169deb4111231a61bc2575:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PCA(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		int flags,
		int maxComponents = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- input samples stored as matrix rows or matrix columns.

	*
		- mean

		- optional mean value; if the matrix is empty (``:ref:`noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>```), the mean is computed from the data.

	*
		- flags

		- operation flags; currently the parameter is only used to specify the data layout (:ref:`PCA::Flags <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50>`)

	*
		- maxComponents

		- maximum number of components that PCA should retain; by default, all the components are retained.

.. index:: pair: function; PCA
.. _doxid-d3/d39/classcv_1_1_p_c_a_1af44683b857883856418187f24d8d19a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PCA(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		int flags,
		double retainedVariance
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- input samples stored as matrix rows or matrix columns.

	*
		- mean

		- optional mean value; if the matrix is empty (:ref:`noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`), the mean is computed from the data.

	*
		- flags

		- operation flags; currently the parameter is only used to specify the data layout (:ref:`PCA::Flags <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50>`)

	*
		- retainedVariance

		- Percentage of variance that :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` should retain. Using this parameter will let the :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` decided how many components to retain but it will always keep at least 2.

Methods
-------

.. index:: pair: function; backProject
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a5f84cfbdb25b9833cc1bfb5bd484ea79:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	backProject(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec) const

Reconstructs vectors from their PC projections.

The methods are inverse operations to :ref:`PCA::project <doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41>`. They take PC coordinates of projected vectors and reconstruct the original vectors. Unless all the principal components have been retained, the reconstructed vectors are different from the originals. But typically, the difference is small if the number of components is large enough (but still much smaller than the original vector dimensionality). As a result, :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` is used.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vec

		- coordinates of the vectors in the principal component subspace, the layout and size are the same as of :ref:`PCA::project <doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41>` output vectors.

.. index:: pair: function; backProject
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a3b2dae725800de973be1135e92b1686a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	backProject(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vec

		- coordinates of the vectors in the principal component subspace, the layout and size are the same as of :ref:`PCA::project <doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41>` output vectors.

	*
		- result

		- reconstructed vectors; the layout and size are the same as of :ref:`PCA::project <doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41>` input vectors.

.. index:: pair: function; operator()
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a26e76331a68988144a403649c6b8af5c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PCA&
	operator()(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		int flags,
		int maxComponents = 0
		)

performs PCA

The operator performs PCA of the supplied dataset. It is safe to reuse the same :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` structure for multiple datasets. That is, if the structure has been previously used with another dataset, the existing internal data is reclaimed and the new :ref:`eigenvalues <doxid-d3/d39/classcv_1_1_p_c_a_1a1c9d34c02df49120474a4a366b971303>`, :ref:`eigenvectors <doxid-d3/d39/classcv_1_1_p_c_a_1a8fed85cf5f9d8bb9b17f031398cb74a0>` and :ref:`mean <doxid-d3/d39/classcv_1_1_p_c_a_1a1bca9d1cc7808b7d08b2a046ee92cd11>` are allocated and computed.

The computed :ref:`eigenvalues <doxid-d3/d39/classcv_1_1_p_c_a_1a1c9d34c02df49120474a4a366b971303>` are sorted from the largest to the smallest and the corresponding :ref:`eigenvectors <doxid-d3/d39/classcv_1_1_p_c_a_1a8fed85cf5f9d8bb9b17f031398cb74a0>` are stored as eigenvectors rows.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- input samples stored as the matrix rows or as the matrix columns.

	*
		- mean

		- optional mean value; if the matrix is empty (:ref:`noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`), the mean is computed from the data.

	*
		- flags

		- operation flags; currently the parameter is only used to specify the data layout. (Flags)

	*
		- maxComponents

		- maximum number of components that :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` should retain; by default, all the components are retained.

.. index:: pair: function; operator()
.. _doxid-d3/d39/classcv_1_1_p_c_a_1aff68797b34e6edb162b0f5d1819b2e9f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PCA&
	operator()(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		int flags,
		double retainedVariance
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- input samples stored as the matrix rows or as the matrix columns.

	*
		- mean

		- optional mean value; if the matrix is empty (:ref:`noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`), the mean is computed from the data.

	*
		- flags

		- operation flags; currently the parameter is only used to specify the data layout. (:ref:`PCA::Flags <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50>`)

	*
		- retainedVariance

		- Percentage of variance that PCA should retain. Using this parameter will let the PCA decided how many components to retain but it will always keep at least 2.

.. index:: pair: function; project
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	project(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec) const

Projects vector(s) to the principal component subspace.

The methods project one or more vectors to the principal component subspace, where each vector projection is represented by coefficients in the principal component basis. The first form of the method returns the matrix that the second form writes to the result. So the first form can be used as a part of expression while the second form can be more efficient in a processing loop.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vec

		- input vector(s); must have the same dimensionality and the same layout as the input data used at PCA phase, that is, if DATA_AS_ROW are specified, then ``vec.cols==data.cols`` (vector dimensionality) and ``vec.rows`` is the number of vectors to project, and the same is true for the :ref:`PCA::DATA_AS_COL <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50a2c52b7c4c9721a3e04a1d6699e738093>` case.

.. index:: pair: function; project
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a0d02b263028cdf5267229f334020c632:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	project(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vec,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vec

		- input vector(s); must have the same dimensionality and the same layout as the input data used at :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` phase, that is, if DATA_AS_ROW are specified, then ``vec.cols==data.cols`` (vector dimensionality) and ``vec.rows`` is the number of vectors to project, and the same is true for the :ref:`PCA::DATA_AS_COL <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50a2c52b7c4c9721a3e04a1d6699e738093>` case.

	*
		- result

		- output vectors; in case of :ref:`PCA::DATA_AS_COL <doxid-d3/d39/classcv_1_1_p_c_a_1ae8a94a2add0555b0414e85c08ff67f50a2c52b7c4c9721a3e04a1d6699e738093>`, the output matrix has as many columns as the number of input vectors, this means that ``result.cols==vec.cols`` and the number of rows match the number of principal components (for example, ``maxComponents`` parameter passed to the constructor).

.. index:: pair: function; read
.. _doxid-d3/d39/classcv_1_1_p_c_a_1aa41a4bdd788b67e7e83de8c096f30816:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	read(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn)

load :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` objects

Loads :ref:`eigenvalues <doxid-d3/d39/classcv_1_1_p_c_a_1a1c9d34c02df49120474a4a366b971303>` :ref:`eigenvectors <doxid-d3/d39/classcv_1_1_p_c_a_1a8fed85cf5f9d8bb9b17f031398cb74a0>` and :ref:`mean <doxid-d3/d39/classcv_1_1_p_c_a_1a1bca9d1cc7808b7d08b2a046ee92cd11>` from specified :ref:`FileNode <doxid-dc/d21/classcv_1_1_file_node>`

.. index:: pair: function; write
.. _doxid-d3/d39/classcv_1_1_p_c_a_1a8be99fa476731ff5429c241e9a92a57b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	write(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const

write :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>` objects

Writes :ref:`eigenvalues <doxid-d3/d39/classcv_1_1_p_c_a_1a1c9d34c02df49120474a4a366b971303>` :ref:`eigenvectors <doxid-d3/d39/classcv_1_1_p_c_a_1a8fed85cf5f9d8bb9b17f031398cb74a0>` and :ref:`mean <doxid-d3/d39/classcv_1_1_p_c_a_1a1bca9d1cc7808b7d08b2a046ee92cd11>` to specified :ref:`FileStorage <doxid-d9/df9/classcv_1_1_file_storage>`

