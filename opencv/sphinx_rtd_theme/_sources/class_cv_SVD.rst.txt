.. index:: pair: class; cv::SVD
.. _doxid-d6/d55/classcv_1_1_s_v_d:

class cv::SVD
=============

.. toctree::
	:hidden:

	enum_cv_SVD_Flags.rst

Overview
~~~~~~~~

Singular Value Decomposition. :ref:`More...<details-d6/d55/classcv_1_1_s_v_d>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <core.hpp>
	
	class SVD
	{
	public:
		// enums
	
		enum :ref:`Flags<doxid-d6/d55/classcv_1_1_s_v_d_1a4700f5207e66cdd9924bf64e34911832>`;

		// fields
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`u<doxid-d6/d55/classcv_1_1_s_v_d_1ab528f446054b6605a7ecc7a36fb5848f>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`vt<doxid-d6/d55/classcv_1_1_s_v_d_1ab1971bad7d11ee9be67e23651fc0241c>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`w<doxid-d6/d55/classcv_1_1_s_v_d_1a38a2acb70d78dc8bd3d4f4dfe36791f5>`;

		// construction
	
		:ref:`SVD<doxid-d6/d55/classcv_1_1_s_v_d_1a3830f50d56ac2ff7b979e6f7f8991e36>`();
	
		:ref:`SVD<doxid-d6/d55/classcv_1_1_s_v_d_1a54cb96aef54978a3617cb2a2169b689a>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
			int flags = 0
			);

		// methods
	
		void
		:ref:`backSubst<doxid-d6/d55/classcv_1_1_s_v_d_1a9d50bc1c641fdeff7543197d5a4f3b3d>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rhs,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
			) const;
	
		SVD&
		:ref:`operator()<doxid-d6/d55/classcv_1_1_s_v_d_1ad9ade269f8234b171413e4ff639a3128>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
			int flags = 0
			);
	
		static
		void
		:ref:`backSubst<doxid-d6/d55/classcv_1_1_s_v_d_1a7c28935c9999977dbe34285d13d43190>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` w,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` u,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vt,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rhs,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
			);
	
		template <
			typename _Tp,
			int m,
			int n,
			int nm,
			int nb
			>
		static
		void
		:ref:`backSubst<doxid-d6/d55/classcv_1_1_s_v_d_1ae398d073d71188ed3e18ef27801b43b8>`(
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, nm, 1>& w,
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, nm>& u,
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, n, nm>& vt,
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, nb>& rhs,
			:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, n, nb>& dst
			);
	
		static
		void
		:ref:`compute<doxid-d6/d55/classcv_1_1_s_v_d_1a76f0b2044df458160292045a3d3714c6>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` w,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` u,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` vt,
			int flags = 0
			);
	
		static
		void
		:ref:`compute<doxid-d6/d55/classcv_1_1_s_v_d_1aac85e0fc50c1e3c9716bb35dd7b9bcd2>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` w,
			int flags = 0
			);
	
		template <
			typename _Tp,
			int m,
			int n,
			int nm
			>
		static
		void
		:ref:`compute<doxid-d6/d55/classcv_1_1_s_v_d_1a75e78203f975321abae4127dc4ee10df>`(
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& a,
			:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, nm, 1>& w,
			:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, nm>& u,
			:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, n, nm>& vt
			);
	
		template <
			typename _Tp,
			int m,
			int n,
			int nm
			>
		static
		void
		:ref:`compute<doxid-d6/d55/classcv_1_1_s_v_d_1a6a8081ff2e54fc43a7a844c2df58476c>`(
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& a,
			:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, nm, 1>& w
			);
	
		static
		void
		:ref:`solveZ<doxid-d6/d55/classcv_1_1_s_v_d_1ab255cd24a882ab993fb2f7377ef2774a>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
			);
	};
.. _details-d6/d55/classcv_1_1_s_v_d:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Singular Value Decomposition.

Class for computing Singular Value Decomposition of a floating-point matrix. The Singular Value Decomposition is used to solve least-square problems, under-determined linear systems, invert matrices, compute condition numbers, and so on.

If you want to compute a condition number of a matrix or an absolute value of its determinant, you do not need ``u`` and ``vt``. You can pass flags= :ref:`SVD::NO_UV <doxid-d6/d55/classcv_1_1_s_v_d_1a4700f5207e66cdd9924bf64e34911832a7c0ed04881ebe47a7efbd21f165ab295>` \|... . Another flag :ref:`SVD::FULL_UV <doxid-d6/d55/classcv_1_1_s_v_d_1a4700f5207e66cdd9924bf64e34911832a312212af9fa27d5560981e24f845434a>` indicates that full-size u and vt must be computed, which is not necessary most of the time.



.. rubric:: See also:

:ref:`invert <doxid-d2/de8/group__core__array_1gad278044679d4ecf20f7622cc151aaaa2>`, :ref:`solve <doxid-d2/de8/group__core__array_1ga12b43690dbd31fed96f213eefead2373>`, :ref:`eigen <doxid-d2/de8/group__core__array_1ga9fa0d58657f60eaa6c71f6fbb40456e3>`, :ref:`determinant <doxid-dc/d84/group__core__basic_1ga06b8ec936c3cbc9502d76c7818053b41>`

Construction
------------

.. index:: pair: function; SVD
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a3830f50d56ac2ff7b979e6f7f8991e36:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SVD()

the default constructor

initializes an empty :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` structure

.. index:: pair: function; SVD
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a54cb96aef54978a3617cb2a2169b689a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SVD(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		int flags = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. initializes an empty :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` structure and then calls SVD::operator()



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- decomposed matrix.

	*
		- flags

		- operation flags (:ref:`SVD::Flags <doxid-d6/d55/classcv_1_1_s_v_d_1a4700f5207e66cdd9924bf64e34911832>`)

Methods
-------

.. index:: pair: function; backSubst
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a9d50bc1c641fdeff7543197d5a4f3b3d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	backSubst(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rhs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		) const

performs a singular value back substitution.

The method calculates a back substitution for the specified right-hand side:

.. math::

	\texttt{x} = \texttt{vt} ^T \cdot diag( \texttt{w} )^{-1} \cdot \texttt{u} ^T \cdot \texttt{rhs} \sim \texttt{A} ^{-1} \cdot \texttt{rhs}

Using this technique you can either get a very accurate solution of the convenient linear system, or the best (in the least-squares terms) pseudo-solution of an overdetermined linear system.

Explicit :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` with the further back substitution only makes sense if you need to solve many linear systems with the same left-hand side (for example, src ). If all you need is to solve a single system (possibly with multiple rhs immediately available), simply call solve add pass DECOMP_SVD there. It does absolutely the same thing.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rhs

		- right-hand side of a linear system (u\*w\*v')\*dst = rhs to be solved, where A has been previously decomposed.

	*
		- dst

		- found solution of the system.

.. index:: pair: function; operator()
.. _doxid-d6/d55/classcv_1_1_s_v_d_1ad9ade269f8234b171413e4ff639a3128:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SVD&
	operator()(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		int flags = 0
		)

the operator that performs :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>`. The previously allocated u, w and vt are released.

The operator performs the singular value decomposition of the supplied matrix. The u, ``vt``, and the vector of singular values w are stored in the structure. The same :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` structure can be reused many times with different matrices. Each time, if needed, the previous u, ``vt``, and w are reclaimed and the new matrices are created, which is all handled by :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- decomposed matrix.

	*
		- flags

		- operation flags (:ref:`SVD::Flags <doxid-d6/d55/classcv_1_1_s_v_d_1a4700f5207e66cdd9924bf64e34911832>`)

.. index:: pair: function; backSubst
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a7c28935c9999977dbe34285d13d43190:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	backSubst(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` w,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` u,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vt,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rhs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

performs back substitution

.. index:: pair: function; backSubst
.. _doxid-d6/d55/classcv_1_1_s_v_d_1ae398d073d71188ed3e18ef27801b43b8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int m,
		int n,
		int nm,
		int nb
		>
	static
	void
	backSubst(
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, nm, 1>& w,
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, nm>& u,
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, n, nm>& vt,
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, nb>& rhs,
		:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, n, nb>& dst
		)

Todo document

.. index:: pair: function; compute
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a76f0b2044df458160292045a3d3714c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	compute(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` w,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` u,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` vt,
		int flags = 0
		)

decomposes matrix and stores the results to user-provided matrices

The methods/functions perform :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` of matrix. Unlike :ref:`SVD::SVD <doxid-d6/d55/classcv_1_1_s_v_d_1a3830f50d56ac2ff7b979e6f7f8991e36>` constructor and SVD::operator(), they store the results to the user-provided matrices:

.. ref-code-block:: cpp

	Mat A, :ref:`w <doxid-d6/d55/classcv_1_1_s_v_d_1a38a2acb70d78dc8bd3d4f4dfe36791f5>`, :ref:`u <doxid-d6/d55/classcv_1_1_s_v_d_1ab528f446054b6605a7ecc7a36fb5848f>`, :ref:`vt <doxid-d6/d55/classcv_1_1_s_v_d_1ab1971bad7d11ee9be67e23651fc0241c>`;
	:ref:`SVD::compute <doxid-d6/d55/classcv_1_1_s_v_d_1a76f0b2044df458160292045a3d3714c6>`(A, w, u, vt);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- decomposed matrix

	*
		- w

		- calculated singular values

	*
		- u

		- calculated left singular vectors

	*
		- vt

		- transposed matrix of right singular values

	*
		- flags

		- operation flags - see :ref:`SVD::SVD <doxid-d6/d55/classcv_1_1_s_v_d_1a3830f50d56ac2ff7b979e6f7f8991e36>`.

.. index:: pair: function; compute
.. _doxid-d6/d55/classcv_1_1_s_v_d_1aac85e0fc50c1e3c9716bb35dd7b9bcd2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	compute(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` w,
		int flags = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. computes singular values of a matrix



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- decomposed matrix

	*
		- w

		- calculated singular values

	*
		- flags

		- operation flags - see :ref:`SVD::Flags <doxid-d6/d55/classcv_1_1_s_v_d_1a4700f5207e66cdd9924bf64e34911832>`.

.. index:: pair: function; compute
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a75e78203f975321abae4127dc4ee10df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int m,
		int n,
		int nm
		>
	static
	void
	compute(
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& a,
		:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, nm, 1>& w,
		:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, nm>& u,
		:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, n, nm>& vt
		)

Todo document

.. index:: pair: function; compute
.. _doxid-d6/d55/classcv_1_1_s_v_d_1a6a8081ff2e54fc43a7a844c2df58476c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int m,
		int n,
		int nm
		>
	static
	void
	compute(
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& a,
		:ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, nm, 1>& w
		)

Todo document

.. index:: pair: function; solveZ
.. _doxid-d6/d55/classcv_1_1_s_v_d_1ab255cd24a882ab993fb2f7377ef2774a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	solveZ(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

solves an under-determined singular linear system

The method finds a unit-length solution x of a singular linear system A\*x = 0. Depending on the rank of A, there can be no solutions, a single solution or an infinite number of solutions. In general, the algorithm solves the following problem:

.. math::

	dst = \arg \min _{x: \| x \| =1} \| src \cdot x \|



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- left-hand-side matrix.

	*
		- dst

		- found solution.

