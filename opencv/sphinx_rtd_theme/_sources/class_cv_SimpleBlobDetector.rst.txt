.. index:: pair: class; cv::SimpleBlobDetector
.. _doxid-df/d17/classcv_1_1_simple_blob_detector:

class cv::SimpleBlobDetector
============================

.. toctree::
	:hidden:

	struct_cv_SimpleBlobDetector_Params.rst

Overview
~~~~~~~~

Class for extracting blobs from an image. : :ref:`More...<details-df/d17/classcv_1_1_simple_blob_detector>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <features2d.hpp>
	
	class SimpleBlobDetector: public :ref:`cv::Feature2D<doxid-d9/d9f/classcv_1_1_feature2_d>`
	{
	public:
		// structs
	
		struct :ref:`Params<doxid-d1/dbc/structcv_1_1_simple_blob_detector_1_1_params>`;

		// methods
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<SimpleBlobDetector>
		:target:`create<doxid-df/d17/classcv_1_1_simple_blob_detector_1a1d7a06c8b8749207a978e42cd8d0cdf6>`(const :ref:`SimpleBlobDetector::Params<doxid-d1/dbc/structcv_1_1_simple_blob_detector_1_1_params>`& parameters = :ref:`SimpleBlobDetector::Params<doxid-d1/dbc/structcv_1_1_simple_blob_detector_1_1_params>`());
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`compute<doxid-d9/d9f/classcv_1_1_feature2_d_1ab3cce8d56f4fc5e1d530b5931e1e8dc0>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			std::vector<:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point>`>& keypoints,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` descriptors
			);
	
		virtual
		void
		:ref:`compute<doxid-d9/d9f/classcv_1_1_feature2_d_1ad18e1027ffc8d9cffbb2d59c1d05b89e>`(
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
			std::vector<std::vector<:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point>`>>& keypoints,
			:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` descriptors
			);
	
		virtual
		int
		:ref:`defaultNorm<doxid-d9/d9f/classcv_1_1_feature2_d_1a90e93108d3d7ffdf21889a2f1aa1faa8>`() const;
	
		virtual
		int
		:ref:`descriptorSize<doxid-d9/d9f/classcv_1_1_feature2_d_1ae9e03d8657032baa5ecc1368e5adc7a7>`() const;
	
		virtual
		int
		:ref:`descriptorType<doxid-d9/d9f/classcv_1_1_feature2_d_1a54e6b0fa61e69398f3cff77800e142cb>`() const;
	
		virtual
		void
		:ref:`detect<doxid-d9/d9f/classcv_1_1_feature2_d_1aa4e9a7082ec61ebc108806704fbd7887>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			std::vector<:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point>`>& keypoints,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			);
	
		virtual
		void
		:ref:`detect<doxid-d9/d9f/classcv_1_1_feature2_d_1a5968e9bc8497a8eb845272b9442559f3>`(
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
			std::vector<std::vector<:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point>`>>& keypoints,
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` masks = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			);
	
		virtual
		void
		:ref:`detectAndCompute<doxid-d9/d9f/classcv_1_1_feature2_d_1a8be0d1c20b08eb867184b8d74c15a677>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask,
			std::vector<:ref:`KeyPoint<doxid-de/df1/classcv_1_1_key_point>`>& keypoints,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` descriptors,
			bool useProvidedKeypoints = false
			);
	
		virtual
		bool
		:ref:`empty<doxid-d9/d9f/classcv_1_1_feature2_d_1aabec316e9fafcc3aed009a218f72ab98>`() const;
	
		void
		:ref:`read<doxid-d9/d9f/classcv_1_1_feature2_d_1a84382d745ea4b4fee70ed2e665ad1b61>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& fileName);
	
		virtual
		void
		:ref:`read<doxid-d9/d9f/classcv_1_1_feature2_d_1ab9610bbe138ab61a539d9bf5e381f013>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		void
		:ref:`write<doxid-d9/d9f/classcv_1_1_feature2_d_1a856b4bc1303a7ee8fcec452c7c62f969>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& fileName) const;
	
		virtual
		void
		:ref:`write<doxid-d9/d9f/classcv_1_1_feature2_d_1a1e43c4dc376abd5cf5ff435531e6d736>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-df/d17/classcv_1_1_simple_blob_detector:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Class for extracting blobs from an image. :

The class implements a simple algorithm for extracting blobs from an image:

#. Convert the source image to binary images by applying thresholding with several thresholds from minThreshold (inclusive) to maxThreshold (exclusive) with distance thresholdStep between neighboring thresholds.

#. Extract connected components from every binary image by findContours and calculate their centers.

#. Group centers from several binary images by their coordinates. Close centers form one group that corresponds to one blob, which is controlled by the minDistBetweenBlobs parameter.

#. From the groups, estimate final centers of blobs and their radiuses and return as locations and sizes of keypoints.

This class performs several filtrations of returned blobs. You should set filterBy\* to true/false to turn on/off corresponding filtration. Available filtrations:

* **By color**. This filter compares the intensity of a binary image at the center of a blob to blobColor. If they differ, the blob is filtered out. Use blobColor = 0 to extract dark blobs and blobColor = 255 to extract light blobs.

* **By area**. Extracted blobs have an area between minArea (inclusive) and maxArea (exclusive).

* **By circularity**. Extracted blobs have circularity (:math:`\frac{4*\pi*Area}{perimeter * perimeter}`) between minCircularity (inclusive) and maxCircularity (exclusive).

* **By ratio of the minimum inertia to maximum inertia**. Extracted blobs have this ratio between minInertiaRatio (inclusive) and maxInertiaRatio (exclusive).

* **By convexity**. Extracted blobs have convexity (area / area of blob convex hull) between minConvexity (inclusive) and maxConvexity (exclusive).

Default values of parameters are tuned to extract dark circular blobs.

