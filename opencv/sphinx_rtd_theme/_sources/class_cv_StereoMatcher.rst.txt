.. index:: pair: class; cv::StereoMatcher
.. _doxid-dd/ddc/classcv_1_1_stereo_matcher:

class cv::StereoMatcher
=======================

.. toctree::
	:hidden:

Overview
~~~~~~~~

The base class for stereo correspondence algorithms. :ref:`More...<details-dd/ddc/classcv_1_1_stereo_matcher>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <calib3d.hpp>
	
	class StereoMatcher: public :ref:`cv::Algorithm<doxid-d1/d41/classcv_1_1_algorithm>`
	{
	public:
		// enums
	
		enum
		{
		    :target:`DISP_SHIFT<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa6aadf3b0bd4503bde2531592e5f90e0b>` = 4,
		    :target:`DISP_SCALE<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa5b4b128a781d8002c3bc2640912295a4>` = (1 <<DISP_SHIFT),
		};

		// methods
	
		virtual
		void
		:ref:`compute<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` left,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` right,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity
			) = 0;
	
		virtual
		int
		:target:`getBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a9ab4290840ac7a9270af455f74b30b98>`() const = 0;
	
		virtual
		int
		:target:`getDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a0ca2c2ab88e7ecac58720134867ea072>`() const = 0;
	
		virtual
		int
		:target:`getMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abd790d22519d3c0d4fcb8e3210d11b13>`() const = 0;
	
		virtual
		int
		:target:`getNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab3a3d5f5a49f77be0b965557e17d9fdd>`() const = 0;
	
		virtual
		int
		:target:`getSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1afb686d0de4551e86306f10509632fa24>`() const = 0;
	
		virtual
		int
		:target:`getSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a1be922bd3111d427fd2ddc8448537c35>`() const = 0;
	
		virtual
		void
		:target:`setBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a38814e8a33d59f4eb5db33de04fe8c34>`(int blockSize) = 0;
	
		virtual
		void
		:target:`setDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1aede8620506ff7f27d106fff25777514d>`(int disp12MaxDiff) = 0;
	
		virtual
		void
		:target:`setMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ae67a506bfe7fbd37444b6713aea1c0ad>`(int minDisparity) = 0;
	
		virtual
		void
		:target:`setNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abacfe4e5760e86b48d0c19bd4106c2fc>`(int numDisparities) = 0;
	
		virtual
		void
		:target:`setSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a3c9106923f87592b98bf53e90bcba020>`(int speckleRange) = 0;
	
		virtual
		void
		:target:`setSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ad21033d76ad7cdf36a5c8bb6cd946d43>`(int speckleWindowSize) = 0;
	};

	// direct descendants

	class :ref:`StereoBeliefPropagation<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation>`;
	class :ref:`StereoBM<doxid-d1/db9/classcv_1_1_stereo_b_m>`;
	class :ref:`StereoSGBM<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-dd/ddc/classcv_1_1_stereo_matcher:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The base class for stereo correspondence algorithms.

Methods
-------

.. index:: pair: function; compute
.. _doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	compute(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` left,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` right,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity
		) = 0

Computes disparity map for the specified stereo pair.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- left

		- Left 8-bit single-channel image.

	*
		- right

		- Right image of the same size and the same type as the left one.

	*
		- disparity

		- Output disparity map. It has the same size as the input images. Some algorithms, like :ref:`StereoBM <doxid-d1/db9/classcv_1_1_stereo_b_m>` or :ref:`StereoSGBM <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>` compute 16-bit fixed-point disparity map (where each disparity value has 4 fractional bits), whereas other algorithms output 32-bit floating-point disparity map.

