.. index:: pair: class; cv::Subdiv2D
.. _doxid-d1/d53/classcv_1_1_subdiv2_d:

class cv::Subdiv2D
==================

.. toctree::
	:hidden:

	struct_cv_Subdiv2D_QuadEdge.rst
	struct_cv_Subdiv2D_Vertex.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <imgproc.hpp>
	
	class Subdiv2D
	{
	public:
		// enums
	
		enum
		{
		    :ref:`PTLOC_ERROR<doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6a250bb6debdc855cc6bc204454f516d3b>`        = -2,
		    :ref:`PTLOC_OUTSIDE_RECT<doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6a79867dca35f0d88ad21969460b533ae1>` = -1,
		    :ref:`PTLOC_INSIDE<doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6ae417a0101ccdd133278862bc7e6dcea0>`       = 0,
		    :ref:`PTLOC_VERTEX<doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6ac78fcef37382840c75b46eb06af11350>`       = 1,
		    :ref:`PTLOC_ON_EDGE<doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6adce5c8dff4cd9e6c2e0060dbc9a6f3b6>`      = 2,
		};
	
		enum
		{
		    :target:`NEXT_AROUND_ORG<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaa1d308c0e060caef6de00b11b47deb9a3>`   = 0x00,
		    :target:`NEXT_AROUND_DST<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaa31ae7ad167e8746aeffdcac86b1a5c23>`   = 0x22,
		    :target:`PREV_AROUND_ORG<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaa8170778bb0286aa463cae5232446008f>`   = 0x11,
		    :target:`PREV_AROUND_DST<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaa2256b56cf701d279a673dca2de0f1f96>`   = 0x33,
		    :target:`NEXT_AROUND_LEFT<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaa0eab55483704d776e469c752413fe520>`  = 0x13,
		    :target:`NEXT_AROUND_RIGHT<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaa74879efdc668e34b819e068a4f608d6d>` = 0x31,
		    :target:`PREV_AROUND_LEFT<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaacd1befba98e8c2956602923ac2e32f8f>`  = 0x20,
		    :target:`PREV_AROUND_RIGHT<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6bfea5251002a3e425192e81bc51febaae1d0ccf41e7cc6eadb9a26925fc25b18>` = 0x02,
		};

		// structs
	
		struct :ref:`QuadEdge<doxid-dc/dce/structcv_1_1_subdiv2_d_1_1_quad_edge>`;
		struct :ref:`Vertex<doxid-d8/dbd/structcv_1_1_subdiv2_d_1_1_vertex>`;

		// construction
	
		:ref:`Subdiv2D<doxid-d1/d53/classcv_1_1_subdiv2_d_1aed58be264a17cdbe712b6a35036d13cb>`();
		:ref:`Subdiv2D<doxid-d1/d53/classcv_1_1_subdiv2_d_1aa9ae8faa2f7a78428b115407bfc3df9e>`(:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rect);

		// methods
	
		int
		:ref:`edgeDst<doxid-d1/d53/classcv_1_1_subdiv2_d_1aee192f95bf19c74619641496c457586d>`(
			int edge,
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`* dstpt = 0
			) const;
	
		int
		:ref:`edgeOrg<doxid-d1/d53/classcv_1_1_subdiv2_d_1a5563e3cae0a9b95df63e72f0c12f9389>`(
			int edge,
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`* orgpt = 0
			) const;
	
		int
		:ref:`findNearest<doxid-d1/d53/classcv_1_1_subdiv2_d_1a3ec256af000e129e08eb5f269ccdeb0f>`(
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`* nearestPt = 0
			);
	
		int
		:ref:`getEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1af73f08576709bad7a36f8f8e5fc43c84>`(
			int edge,
			int nextEdgeType
			) const;
	
		void
		:ref:`getEdgeList<doxid-d1/d53/classcv_1_1_subdiv2_d_1ab527c11e9938eed53cf9c790afa9416d>`(std::vector<:ref:`Vec4f<doxid-dc/d84/group__core__basic_1ga4f29b2178d21a471ee688b14d66d6567>`>& edgeList) const;
	
		void
		:ref:`getLeadingEdgeList<doxid-d1/d53/classcv_1_1_subdiv2_d_1a2d02a1d66ef7f8f267beb549cb2823f1>`(std::vector<int>& leadingEdgeList) const;
	
		void
		:ref:`getTriangleList<doxid-d1/d53/classcv_1_1_subdiv2_d_1a26bfe32209bc8ae9ecc53e93da01e466>`(std::vector<:ref:`Vec6f<doxid-dc/d84/group__core__basic_1ga74b819dd94c6a8c6f3d8cc39aeaa4992>`>& triangleList) const;
	
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`
		:ref:`getVertex<doxid-d1/d53/classcv_1_1_subdiv2_d_1a5297daca30f90d1e6d0cc5a75ba76351>`(
			int vertex,
			int* firstEdge = 0
			) const;
	
		void
		:ref:`getVoronoiFacetList<doxid-d1/d53/classcv_1_1_subdiv2_d_1a3a9e080423475be056a79da4c04741ea>`(
			const std::vector<int>& idx,
			std::vector<std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>>& facetList,
			std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& facetCenters
			);
	
		void
		:ref:`initDelaunay<doxid-d1/d53/classcv_1_1_subdiv2_d_1ae4a3d65e798c46fd6ce64370f24b0287>`(:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rect);
	
		int
		:ref:`insert<doxid-d1/d53/classcv_1_1_subdiv2_d_1a18a6c9999210d769538297d843c613f2>`(:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt);
	
		void
		:ref:`insert<doxid-d1/d53/classcv_1_1_subdiv2_d_1a37223a499032ef57364f1372ad0c9c2e>`(const std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& ptvec);
	
		int
		:ref:`locate<doxid-d1/d53/classcv_1_1_subdiv2_d_1aec8f1fd5a802f62faa97520b465897d7>`(
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
			int& edge,
			int& vertex
			);
	
		int
		:ref:`nextEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1a36ebf478e2546615c2db457106393acb>`(int edge) const;
	
		int
		:ref:`rotateEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1aa1179507f651b67c22e06517fbc6a145>`(
			int edge,
			int rotate
			) const;
	
		int
		:target:`symEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1aabbb10b8d5b0311b7e22040fc0db56b4>`(int edge) const;

	protected:
		// fields
	
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` :ref:`bottomRight<doxid-d1/d53/classcv_1_1_subdiv2_d_1ab3c3970a65dfa0b4e020e101a9fdae7f>`;
		int :target:`freePoint<doxid-d1/d53/classcv_1_1_subdiv2_d_1a961a50c070ec1db71efcadb6a9a95cff>`;
		int :target:`freeQEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1a6253d11fc0bcd400221d1735f8c1d283>`;
		std::vector<:ref:`QuadEdge<doxid-dc/dce/structcv_1_1_subdiv2_d_1_1_quad_edge>`> :ref:`qedges<doxid-d1/d53/classcv_1_1_subdiv2_d_1ad3f646a7263fc902b6ed9ec15c9b3b51>`;
		int :target:`recentEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1a80cd8452cf0a0eb8fab9a6875a1bbd0f>`;
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` :ref:`topLeft<doxid-d1/d53/classcv_1_1_subdiv2_d_1a324326659a263ceaa22b1c4f712ef820>`;
		bool :target:`validGeometry<doxid-d1/d53/classcv_1_1_subdiv2_d_1a98184e52f16c9b6ab80102bf29e910ec>`;
		std::vector<:ref:`Vertex<doxid-d8/dbd/structcv_1_1_subdiv2_d_1_1_vertex>`> :ref:`vtx<doxid-d1/d53/classcv_1_1_subdiv2_d_1aebc53cc84655eb0eb8420e26457c6b34>`;

		// methods
	
		void
		:target:`calcVoronoi<doxid-d1/d53/classcv_1_1_subdiv2_d_1a08dc6b05f6fae0314aba9c2e197371ce>`();
	
		void
		:target:`checkSubdiv<doxid-d1/d53/classcv_1_1_subdiv2_d_1a2be088a8a411fc4dd232f18f7f88e736>`() const;
	
		void
		:target:`clearVoronoi<doxid-d1/d53/classcv_1_1_subdiv2_d_1ae3a27a930a710466051547b80dd64ef1>`();
	
		int
		:target:`connectEdges<doxid-d1/d53/classcv_1_1_subdiv2_d_1a3490a3d952aa7ef951a3bdb9bce3688c>`(
			int edgeA,
			int edgeB
			);
	
		void
		:target:`deleteEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1aab7fdb247262a8ffb638e745c9faed06>`(int edge);
	
		void
		:target:`deletePoint<doxid-d1/d53/classcv_1_1_subdiv2_d_1a78dfd541b7d8eb856b360189ac1a3912>`(int vtx);
	
		int
		:target:`isRightOf<doxid-d1/d53/classcv_1_1_subdiv2_d_1a3330f72eb0ace8a8b6faa43c3f606fdd>`(
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
			int edge
			) const;
	
		int
		:target:`newEdge<doxid-d1/d53/classcv_1_1_subdiv2_d_1a2ccf33004b2db5407e238d2077d725be>`();
	
		int
		:target:`newPoint<doxid-d1/d53/classcv_1_1_subdiv2_d_1ac88046997ef2bf96d72fafa3633bc0ca>`(
			:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
			bool isvirtual,
			int firstEdge = 0
			);
	
		void
		:target:`setEdgePoints<doxid-d1/d53/classcv_1_1_subdiv2_d_1adc6ca8745fd0d7a28a38c31deb0b1342>`(
			int edge,
			int orgPt,
			int dstPt
			);
	
		void
		:target:`splice<doxid-d1/d53/classcv_1_1_subdiv2_d_1a2fe50f31cf743a71040ad740b7d1609c>`(
			int edgeA,
			int edgeB
			);
	
		void
		:target:`swapEdges<doxid-d1/d53/classcv_1_1_subdiv2_d_1a1e1fb5d4dceadb03ac61c678cf1afb7f>`(int edge);
	};
.. _details-d1/d53/classcv_1_1_subdiv2_d:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Enum Values
-----------

.. index:: pair: enumvalue; PTLOC_ERROR
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6a250bb6debdc855cc6bc204454f516d3b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PTLOC_ERROR

Point location error.

.. index:: pair: enumvalue; PTLOC_OUTSIDE_RECT
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6a79867dca35f0d88ad21969460b533ae1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PTLOC_OUTSIDE_RECT

Point outside the subdivision bounding rect.

.. index:: pair: enumvalue; PTLOC_INSIDE
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6ae417a0101ccdd133278862bc7e6dcea0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PTLOC_INSIDE

Point inside some facet.

.. index:: pair: enumvalue; PTLOC_VERTEX
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6ac78fcef37382840c75b46eb06af11350:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PTLOC_VERTEX

Point coincides with one of the subdivision vertices.

.. index:: pair: enumvalue; PTLOC_ON_EDGE
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a9d66c727ec2f5d264bb9e3b61bbe4ce6adce5c8dff4cd9e6c2e0060dbc9a6f3b6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	PTLOC_ON_EDGE

Point on some edge.

Fields
------

.. index:: pair: variable; bottomRight
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1ab3c3970a65dfa0b4e020e101a9fdae7f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` bottomRight

Bottom right corner of the bounding rect.

.. index:: pair: variable; qedges
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1ad3f646a7263fc902b6ed9ec15c9b3b51:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::vector<:ref:`QuadEdge<doxid-dc/dce/structcv_1_1_subdiv2_d_1_1_quad_edge>`> qedges

All of the edges.

.. index:: pair: variable; topLeft
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a324326659a263ceaa22b1c4f712ef820:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` topLeft

Top left corner of the bounding rect.

.. index:: pair: variable; vtx
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1aebc53cc84655eb0eb8420e26457c6b34:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::vector<:ref:`Vertex<doxid-d8/dbd/structcv_1_1_subdiv2_d_1_1_vertex>`> vtx

All of the vertices.

Construction
------------

.. index:: pair: function; Subdiv2D
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1aed58be264a17cdbe712b6a35036d13cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Subdiv2D()

creates an empty :ref:`Subdiv2D <doxid-d1/d53/classcv_1_1_subdiv2_d>` object. To create a new empty Delaunay subdivision you need to use the :ref:`initDelaunay() <doxid-d1/d53/classcv_1_1_subdiv2_d_1ae4a3d65e798c46fd6ce64370f24b0287>` function.

.. index:: pair: function; Subdiv2D
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1aa9ae8faa2f7a78428b115407bfc3df9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Subdiv2D(:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rect)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

The function creates an empty Delaunay subdivision where 2D points can be added using the function :ref:`insert() <doxid-d1/d53/classcv_1_1_subdiv2_d_1a18a6c9999210d769538297d843c613f2>`. All of the points to be added must be within the specified rectangle, otherwise a runtime error is raised.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rect

		- – Rectangle that includes all of the 2D points that are to be added to the subdivision.

Methods
-------

.. index:: pair: function; edgeDst
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1aee192f95bf19c74619641496c457586d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	edgeDst(
		int edge,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`* dstpt = 0
		) const

Returns the edge destination.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- edge

		- – Subdivision edge ID.

	*
		- dstpt

		- – Output vertex location.



.. rubric:: Returns:

vertex ID.

.. index:: pair: function; edgeOrg
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a5563e3cae0a9b95df63e72f0c12f9389:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	edgeOrg(
		int edge,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`* orgpt = 0
		) const

Returns the edge origin.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- edge

		- – Subdivision edge ID.

	*
		- orgpt

		- – Output vertex location.



.. rubric:: Returns:

vertex ID.

.. index:: pair: function; findNearest
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a3ec256af000e129e08eb5f269ccdeb0f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	findNearest(
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`* nearestPt = 0
		)

Finds the subdivision vertex closest to the given point.

The function is another function that locates the input point within the subdivision. It finds the subdivision vertex that is the closest to the input point. It is not necessarily one of vertices of the facet containing the input point, though the facet (located using :ref:`locate() <doxid-d1/d53/classcv_1_1_subdiv2_d_1aec8f1fd5a802f62faa97520b465897d7>`) is used as a starting point.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pt

		- – Input point.

	*
		- nearestPt

		- – Output subdivision vertex point.



.. rubric:: Returns:

vertex ID.

.. index:: pair: function; getEdge
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1af73f08576709bad7a36f8f8e5fc43c84:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	getEdge(
		int edge,
		int nextEdgeType
		) const

Returns one of the edges related to the given edge.

.. image:: quadedge.png
	:alt: sample output



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- edge

		- – Subdivision edge ID.

	*
		- nextEdgeType

		- 
		  - Parameter specifying which of the related edges to return. The following values are possible:
		  
		  * NEXT_AROUND_ORG next around the edge origin ( eOnext on the picture below if e is the input edge)
		  
		  * NEXT_AROUND_DST next around the edge vertex ( eDnext )
		  
		  * PREV_AROUND_ORG previous around the edge origin (reversed eRnext )
		  
		  * PREV_AROUND_DST previous around the edge destination (reversed eLnext )
		  
		  * NEXT_AROUND_LEFT next around the left facet ( eLnext )
		  
		  * NEXT_AROUND_RIGHT next around the right facet ( eRnext )
		  
		  * PREV_AROUND_LEFT previous around the left facet (reversed eOnext )
		  
		  * PREV_AROUND_RIGHT previous around the right facet (reversed eDnext )



.. rubric:: Returns:

edge ID related to the input edge.

.. index:: pair: function; getEdgeList
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1ab527c11e9938eed53cf9c790afa9416d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	getEdgeList(std::vector<:ref:`Vec4f<doxid-dc/d84/group__core__basic_1ga4f29b2178d21a471ee688b14d66d6567>`>& edgeList) const

Returns a list of all edges.

The function gives each edge as a 4 numbers vector, where each two are one of the edge vertices. i.e. org_x = v[0], org_y = v[1], dst_x = v[2], dst_y = v[3].



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- edgeList

		- – Output vector.

.. index:: pair: function; getLeadingEdgeList
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a2d02a1d66ef7f8f267beb549cb2823f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	getLeadingEdgeList(std::vector<int>& leadingEdgeList) const

Returns a list of the leading edge ID connected to each triangle.

The function gives one edge ID for each triangle.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- leadingEdgeList

		- – Output vector.

.. index:: pair: function; getTriangleList
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a26bfe32209bc8ae9ecc53e93da01e466:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	getTriangleList(std::vector<:ref:`Vec6f<doxid-dc/d84/group__core__basic_1ga74b819dd94c6a8c6f3d8cc39aeaa4992>`>& triangleList) const

Returns a list of all triangles.

The function gives each triangle as a 6 numbers vector, where each two are one of the triangle vertices. i.e. p1_x = v[0], p1_y = v[1], p2_x = v[2], p2_y = v[3], p3_x = v[4], p3_y = v[5].



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- triangleList

		- – Output vector.

.. index:: pair: function; getVertex
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a5297daca30f90d1e6d0cc5a75ba76351:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`
	getVertex(
		int vertex,
		int* firstEdge = 0
		) const

Returns vertex location from vertex ID.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vertex

		- – vertex ID.

	*
		- firstEdge

		- – Optional. The first edge ID which is connected to the vertex.



.. rubric:: Returns:

vertex (x,y)

.. index:: pair: function; getVoronoiFacetList
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a3a9e080423475be056a79da4c04741ea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	getVoronoiFacetList(
		const std::vector<int>& idx,
		std::vector<std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>>& facetList,
		std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& facetCenters
		)

Returns a list of all Voroni facets.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- idx

		- – Vector of vertices IDs to consider. For all vertices you can pass empty vector.

	*
		- facetList

		- – Output vector of the Voroni facets.

	*
		- facetCenters

		- – Output vector of the Voroni facets center points.

.. index:: pair: function; initDelaunay
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1ae4a3d65e798c46fd6ce64370f24b0287:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	initDelaunay(:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rect)

Creates a new empty Delaunay subdivision.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rect

		- – Rectangle that includes all of the 2D points that are to be added to the subdivision.

.. index:: pair: function; insert
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a18a6c9999210d769538297d843c613f2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	insert(:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt)

Insert a single point into a Delaunay triangulation.

The function inserts a single point into a subdivision and modifies the subdivision topology appropriately. If a point with the same coordinates exists already, no new point is added. If the point is outside of the triangulation specified rect a runtime error is raised.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pt

		- – Point to insert.



.. rubric:: Returns:

the ID of the point.

.. index:: pair: function; insert
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a37223a499032ef57364f1372ad0c9c2e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	insert(const std::vector<:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`>& ptvec)

Insert multiple points into a Delaunay triangulation.

The function inserts a vector of points into a subdivision and modifies the subdivision topology appropriately.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptvec

		- – Points to insert.

.. index:: pair: function; locate
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1aec8f1fd5a802f62faa97520b465897d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	locate(
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
		int& edge,
		int& vertex
		)

Returns the location of a point within a Delaunay triangulation.

The function locates the input point within the subdivision and gives one of the triangle edges or vertices.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pt

		- – Point to locate.

	*
		- edge

		- – Output edge that the point belongs to or is located to the right of it.

	*
		- vertex

		- – Optional output vertex the input point coincides with.



.. rubric:: Returns:

an integer which specify one of the following five cases for point location:

* The point falls into some facet. The function returns PTLOC_INSIDE and edge will contain one of edges of the facet.

* The point falls onto the edge. The function returns PTLOC_ON_EDGE and edge will contain this edge.

* The point coincides with one of the subdivision vertices. The function returns PTLOC_VERTEX and vertex will contain a pointer to the vertex.

* The point is outside the subdivision reference rectangle. The function returns PTLOC_OUTSIDE_RECT and no pointers are filled.

* One of input arguments is invalid. A runtime error is raised or, if silent or “parent” error processing mode is selected, CV_PTLOC_ERROR is returned.

.. index:: pair: function; nextEdge
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1a36ebf478e2546615c2db457106393acb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	nextEdge(int edge) const

Returns next edge around the edge origin.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- edge

		- – Subdivision edge ID.



.. rubric:: Returns:

an integer which is next edge ID around the edge origin: eOnext on the picture above if e is the input edge).

.. index:: pair: function; rotateEdge
.. _doxid-d1/d53/classcv_1_1_subdiv2_d_1aa1179507f651b67c22e06517fbc6a145:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	rotateEdge(
		int edge,
		int rotate
		) const

Returns another edge of the same quad-edge.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- edge

		- – Subdivision edge ID.

	*
		- rotate

		- 
		  - Parameter specifying which of the edges of the same quad-edge as the input one to return. The following values are possible:
		  
		  * 0 - the input edge ( e on the picture below if e is the input edge)
		  
		  * 1 - the rotated edge ( eRot )
		  
		  * 2 - the reversed edge (reversed e (in green))
		  
		  * 3 - the reversed rotated edge (reversed eRot (in green))



.. rubric:: Returns:

one of the edges ID of the same quad-edge as the input edge.

