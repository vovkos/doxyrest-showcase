.. index:: pair: class; cv::cuda::OpticalFlowDual_TVL1
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1:

class cv::cuda::OpticalFlowDual_TVL1
====================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method. :ref:`More...<details-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <cudaoptflow.hpp>
	
	class OpticalFlowDual_TVL1: public :ref:`cv::cuda::DenseOpticalFlow<doxid-d8/d5b/classcv_1_1cuda_1_1_dense_optical_flow>`
	{
	public:
		// methods
	
		virtual
		double
		:ref:`getEpsilon<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a71aa8b4757e6c3041ed6f1993fb11e63>`() const = 0;
	
		virtual
		double
		:ref:`getGamma<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ad56609052ef83bda9507b01e0bc02e8d>`() const = 0;
	
		virtual
		double
		:ref:`getLambda<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a674707cf0f4974881c5c8f6195926462>`() const = 0;
	
		virtual
		int
		:ref:`getNumIterations<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1aa2b02f73aebe9cb55aa3465be3f2ab31>`() const = 0;
	
		virtual
		int
		:ref:`getNumScales<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1aed34f4f126cb59a86bcd539528c07a32>`() const = 0;
	
		virtual
		int
		:ref:`getNumWarps<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a852134a0c714e2fc4bd373676179026a>`() const = 0;
	
		virtual
		double
		:target:`getScaleStep<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a6499272b6129e386954b422e3c8b1b60>`() const = 0;
	
		virtual
		double
		:ref:`getTau<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a8c0e421bdeb3ac26aa1adcf37684232e>`() const = 0;
	
		virtual
		double
		:ref:`getTheta<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a0f484a1d6a5a75f0a516d142c91f682d>`() const = 0;
	
		virtual
		bool
		:target:`getUseInitialFlow<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a1dae4f295c5b83030b541d04e3a02f26>`() const = 0;
	
		virtual
		void
		:target:`setEpsilon<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ae58efcc59c522c98f218a69b1fc2414d>`(double epsilon) = 0;
	
		virtual
		void
		:target:`setGamma<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ac52c588112632661ee6d17d14254f2ca>`(double gamma) = 0;
	
		virtual
		void
		:target:`setLambda<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a41f3031da66ac69d44ef491ad9bc4417>`(double lambda) = 0;
	
		virtual
		void
		:target:`setNumIterations<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ad30156f4e11110edc9601bf4768945ca>`(int iterations) = 0;
	
		virtual
		void
		:target:`setNumScales<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ad5e5e4fb4c6ab96e520cce317ec19da1>`(int nscales) = 0;
	
		virtual
		void
		:target:`setNumWarps<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a970b9e7ca756cc36ac706ebebf5995f0>`(int warps) = 0;
	
		virtual
		void
		:target:`setScaleStep<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ad9a69e01db9833117a50365976b2f803>`(double scaleStep) = 0;
	
		virtual
		void
		:target:`setTau<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ae06f0c80c4250311b730341c5d622f78>`(double tau) = 0;
	
		virtual
		void
		:target:`setTheta<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1adcad8d9aeda533fcd49bba4fec924327>`(double theta) = 0;
	
		virtual
		void
		:target:`setUseInitialFlow<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a1a7c86120ebf59622b17bd5e02b358a6>`(bool useInitialFlow) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<OpticalFlowDual_TVL1>
		:target:`create<doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1af630800c27534d7d0df7c7a335207c64>`(
			double tau = 0.25,
			double lambda = 0.15,
			double theta = 0.3,
			int nscales = 5,
			int warps = 5,
			double epsilon = 0.01,
			int iterations = 300,
			double scaleStep = 0.8,
			double gamma = 0.0,
			bool useInitialFlow = false
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`calc<doxid-d8/d5b/classcv_1_1cuda_1_1_dense_optical_flow_1a2cf6b216dccee0060c2ff0e4ba090f1c>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` I0,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` I1,
			:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` flow,
			:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
			) = 0;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method.



.. rubric:: See also:

C. Zach, T. Pock and H. Bischof, "A Duality Based Approach for Realtime TV-L1 Optical Flow".

Javier Sanchez, Enric Meinhardt-Llopis and Gabriele Facciolo. "TV-L1 Optical Flow Estimation".

Methods
-------

.. index:: pair: function; getEpsilon
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a71aa8b4757e6c3041ed6f1993fb11e63:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getEpsilon() const = 0

Stopping criterion threshold used in the numerical scheme, which is a trade-off between precision and running time. A small value will yield more accurate solutions at the expense of a slower convergence.

.. index:: pair: function; getGamma
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1ad56609052ef83bda9507b01e0bc02e8d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getGamma() const = 0

Weight parameter for (u - v)^2, tightness parameter. It serves as a link between the attachment and the regularization terms. In theory, it should have a small value in order to maintain both parts in correspondence. The method is stable for a large range of values of this parameter.

.. index:: pair: function; getLambda
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a674707cf0f4974881c5c8f6195926462:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getLambda() const = 0

Weight parameter for the data term, attachment parameter. This is the most relevant parameter, which determines the smoothness of the output. The smaller this parameter is, the smoother the solutions we obtain. It depends on the range of motions of the images, so its value should be adapted to each image sequence.

.. index:: pair: function; getNumIterations
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1aa2b02f73aebe9cb55aa3465be3f2ab31:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getNumIterations() const = 0

Stopping criterion iterations number used in the numerical scheme.

.. index:: pair: function; getNumScales
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1aed34f4f126cb59a86bcd539528c07a32:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getNumScales() const = 0

Number of scales used to create the pyramid of images.

.. index:: pair: function; getNumWarps
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a852134a0c714e2fc4bd373676179026a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getNumWarps() const = 0

Number of warpings per scale. Represents the number of times that I1(x+u0) and grad( I1(x+u0) ) are computed per scale. This is a parameter that assures the stability of the method. It also affects the running time, so it is a compromise between speed and accuracy.

.. index:: pair: function; getTau
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a8c0e421bdeb3ac26aa1adcf37684232e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getTau() const = 0

Time step of the numerical scheme.

.. index:: pair: function; getTheta
.. _doxid-d5/d80/classcv_1_1cuda_1_1_optical_flow_dual___t_v_l1_1a0f484a1d6a5a75f0a516d142c91f682d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getTheta() const = 0

parameter used for motion estimation. It adds a variable allowing for illumination variations Set this parameter to 1. if you have varying illumination. See: Chambolle et al, A First-Order Primal-Dual :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>` for Convex Problems with Applications to Imaging Journal of Mathematical imaging and vision, may 2011 Vol 40 issue 1, pp 120-145

