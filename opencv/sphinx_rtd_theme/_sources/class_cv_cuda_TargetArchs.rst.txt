.. index:: pair: class; cv::cuda::TargetArchs
.. _doxid-da/d23/classcv_1_1cuda_1_1_target_archs:

class cv::cuda::TargetArchs
===========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Class providing a set of static methods to check what NVIDIA\* card architecture the CUDA module was built for. :ref:`More...<details-da/d23/classcv_1_1cuda_1_1_target_archs>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <cuda.hpp>
	
	class TargetArchs
	{
	public:
		// methods
	
		static
		bool
		:ref:`builtWith<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1a228153530879a3330507db98984b8eff>`(:ref:`FeatureSet<doxid-d8/d40/group__cudacore__init_1ga776cf8e0301b18e19be4782754274fe0>` feature_set);
	
		static
		bool
		:ref:`has<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1a92318c6f6c8c00014a2b96bfec73b807>`(
			int major,
			int minor
			);
	
		static
		bool
		:target:`hasBin<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1acd8bdf9a176c8cef258e705fa334cc00>`(
			int major,
			int minor
			);
	
		static
		bool
		:target:`hasEqualOrGreater<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1abfd5b40917f200ac637b6f091e288871>`(
			int major,
			int minor
			);
	
		static
		bool
		:target:`hasEqualOrGreaterBin<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1a20a9357cc148b2c7935552884b7bd3e7>`(
			int major,
			int minor
			);
	
		static
		bool
		:target:`hasEqualOrGreaterPtx<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1ad50f7b7f5b3f47a3be6cd24ded8c0f16>`(
			int major,
			int minor
			);
	
		static
		bool
		:target:`hasEqualOrLessPtx<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1ae38dbffa90484e0adaa17d08c6a344c2>`(
			int major,
			int minor
			);
	
		static
		bool
		:target:`hasPtx<doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1ab6cdd49244468febdde5d550ad160a2e>`(
			int major,
			int minor
			);
	};
.. _details-da/d23/classcv_1_1cuda_1_1_target_archs:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Class providing a set of static methods to check what NVIDIA\* card architecture the CUDA module was built for.

According to the CUDA C Programming Guide Version 3.2: "PTX code produced for some specific compute
capability can always be compiled to binary code of greater or equal compute capability".

Methods
-------

.. index:: pair: function; builtWith
.. _doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1a228153530879a3330507db98984b8eff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	bool
	builtWith(:ref:`FeatureSet<doxid-d8/d40/group__cudacore__init_1ga776cf8e0301b18e19be4782754274fe0>` feature_set)

The following method checks whether the module was built with the support of the given feature:



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- feature_set

		- Features to be checked. See :ocvcuda::FeatureSet.

.. index:: pair: function; has
.. _doxid-da/d23/classcv_1_1cuda_1_1_target_archs_1a92318c6f6c8c00014a2b96bfec73b807:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	bool
	has(
		int major,
		int minor
		)

There is a set of methods to check whether the module contains intermediate (PTX) or binary CUDA code for the given architecture(s):



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- major

		- Major compute capability version.

	*
		- minor

		- Minor compute capability version.

