.. index:: pair: class; cv::detail::AffineBestOf2NearestMatcher
.. _doxid-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher:

class cv::detail::AffineBestOf2NearestMatcher
=============================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Features matcher similar to :ref:`cv::detail::BestOf2NearestMatcher <doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher>` which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf. :ref:`More...<details-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <matchers.hpp>
	
	class AffineBestOf2NearestMatcher: public :ref:`cv::detail::BestOf2NearestMatcher<doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher>`
	{
	public:
		// construction
	
		:ref:`AffineBestOf2NearestMatcher<doxid-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher_1a1fbaa911cd123dc828e4b49617a38ecd>`(
			bool full_affine = false,
			bool try_use_gpu = false,
			float match_conf = 0.3f,
			int num_matches_thresh1 = 6
			);

	protected:
		// fields
	
		bool :target:`full_affine_<doxid-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher_1a3f40f14058ad648e529ec1c2952d9519>`;

		// methods
	
		virtual
		void
		:ref:`match<doxid-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher_1ae309ab813b8869db6e520541d2f7661d>`(
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features1,
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features2,
			:ref:`MatchesInfo<doxid-d2/d99/structcv_1_1detail_1_1_matches_info>`& matches_info
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`collectGarbage<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher_1a8520ff70e51e0bb138891ce410abf6e4>`();
	
		bool
		:ref:`isThreadSafe<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher_1a0bcd4038054223f4cda9f6c3eb7e7c11>`() const;
	
		void
		:ref:`operator()<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher_1a5d5793f2f71bae1cb72acc3e95d069df>`(
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features1,
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features2,
			:ref:`MatchesInfo<doxid-d2/d99/structcv_1_1detail_1_1_matches_info>`& matches_info
			);
	
		void
		:ref:`operator()<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher_1a2df19558a646700d9543841cafae4bc2>`(
			const std::vector<:ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`>& features,
			std::vector<:ref:`MatchesInfo<doxid-d2/d99/structcv_1_1detail_1_1_matches_info>`>& pairwise_matches,
			const :ref:`cv::UMat<doxid-d8/d82/classcv_1_1_u_mat>`& mask = :ref:`cv::UMat<doxid-d8/d82/classcv_1_1_u_mat>`()
			);
	
		virtual
		void
		:ref:`collectGarbage<doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher_1a333bdd073ad0ea67b67230408813f365>`();

	protected:
		// fields
	
		bool :ref:`is_thread_safe_<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher_1ae3b24af101c26164a5a253b7d1c37dda>`;
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`FeaturesMatcher<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher>`> :ref:`impl_<doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher_1a9e6b74e94d69e18705e961fe753c45c4>`;
		int :ref:`num_matches_thresh1_<doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher_1a9feea2b5ac622dcacf9eba2f5a27dafd>`;
		int :ref:`num_matches_thresh2_<doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher_1ad1395b7d534b402b215519b6e9ac8bd9>`;

		// methods
	
		virtual
		void
		:ref:`match<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher_1a22005bcc8bf637398b2a325121b44bb1>`(
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features1,
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features2,
			:ref:`MatchesInfo<doxid-d2/d99/structcv_1_1detail_1_1_matches_info>`& matches_info
			) = 0;
	
		virtual
		void
		:ref:`match<doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher_1a427ee6f0c9a75766b535e721d3e395df>`(
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features1,
			const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features2,
			:ref:`MatchesInfo<doxid-d2/d99/structcv_1_1detail_1_1_matches_info>`& matches_info
			);

.. _details-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Features matcher similar to :ref:`cv::detail::BestOf2NearestMatcher <doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher>` which finds two best matches for each feature and leaves the best one only if the ratio between descriptor distances is greater than the threshold match_conf.

Unlike :ref:`cv::detail::BestOf2NearestMatcher <doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher>` this matcher uses affine transformation (affine trasformation estimate will be placed in matches_info).



.. rubric:: See also:

:ref:`cv::detail::FeaturesMatcher <doxid-d2/da0/classcv_1_1detail_1_1_features_matcher>` :ref:`cv::detail::BestOf2NearestMatcher <doxid-d1/d16/classcv_1_1detail_1_1_best_of2_nearest_matcher>`

Construction
------------

.. index:: pair: function; AffineBestOf2NearestMatcher
.. _doxid-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher_1a1fbaa911cd123dc828e4b49617a38ecd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	AffineBestOf2NearestMatcher(
		bool full_affine = false,
		bool try_use_gpu = false,
		float match_conf = 0.3f,
		int num_matches_thresh1 = 6
		)

Constructs a "best of 2 nearest" matcher that expects affine trasformation between images.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- full_affine

		- whether to use full affine transformation with 6 degress of freedom or reduced transformation with 4 degrees of freedom using only rotation, translation and uniform scaling

	*
		- try_use_gpu

		- Should try to use GPU or not

	*
		- match_conf

		- Match distances ration threshold

	*
		- num_matches_thresh1

		- Minimum number of matches required for the 2D affine transform estimation used in the inliers classification step



.. rubric:: See also:

:ref:`cv::estimateAffine2D <doxid-d9/d0c/group__calib3d_1ga27865b1d26bac9ce91efaee83e94d4dd>` :ref:`cv::estimateAffinePartial2D <doxid-d9/d0c/group__calib3d_1gad767faff73e9cbd8b9d92b955b50062d>`

Methods
-------

.. index:: pair: function; match
.. _doxid-d3/dc2/classcv_1_1detail_1_1_affine_best_of2_nearest_matcher_1ae309ab813b8869db6e520541d2f7661d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	match(
		const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features1,
		const :ref:`ImageFeatures<doxid-d4/dbe/structcv_1_1detail_1_1_image_features>`& features2,
		:ref:`MatchesInfo<doxid-d2/d99/structcv_1_1detail_1_1_matches_info>`& matches_info
		)

This method must implement matching logic in order to make the wrappers detail::FeaturesMatcher::operator()\_ work.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- features1

		- first image features

	*
		- features2

		- second image features

	*
		- matches_info

		- found matches

