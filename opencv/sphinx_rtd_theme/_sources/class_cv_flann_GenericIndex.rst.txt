.. index:: pair: class; cv::flann::GenericIndex
.. _doxid-dd/dde/classcv_1_1flann_1_1_generic_index:

template class cv::flann::GenericIndex
======================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built. :ref:`More...<details-dd/dde/classcv_1_1flann_1_1_generic_index>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <flann.hpp>
	
	template <typename Distance>
	class GenericIndex
	{
	public:
		// typedefs
	
		typedef Distance::ResultType :target:`DistanceType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a4b7623b6f2ebc7c1dc406460cd0cee02>`;
		typedef Distance::ElementType :target:`ElementType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a02a5a5a197e139b8969c505c9a6c9859>`;

		// construction
	
		:ref:`GenericIndex<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a8fff14185f9f3d2f2311b528f65b146c>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& features,
			const :::ref:`cvflann::IndexParams<doxid-dc/d8c/namespacecvflann_1ad55c74ae3144004b728d68382edbca45>`& params,
			Distance distance = Distance()
			);

		// methods
	
		const :::ref:`cvflann::IndexParams<doxid-dc/d8c/namespacecvflann_1ad55c74ae3144004b728d68382edbca45>`*
		:target:`getIndexParameters<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a8fdf8adea7926821b6b3b834a9896c68>`();
	
		:::ref:`cvflann::IndexParams<doxid-dc/d8c/namespacecvflann_1ad55c74ae3144004b728d68382edbca45>`
		:target:`getParameters<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a99472345811cf94c9084b907487f0a08>`();
	
		void
		:ref:`knnSearch<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a50c3ce570adfb7b19c7cda4a320a3d9e>`(
			const std::vector<:ref:`ElementType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a02a5a5a197e139b8969c505c9a6c9859>`>& query,
			std::vector<int>& indices,
			std::vector<:ref:`DistanceType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a4b7623b6f2ebc7c1dc406460cd0cee02>`>& dists,
			int knn,
			const :::ref:`cvflann::SearchParams<doxid-d1/d18/structcvflann_1_1_search_params>`& params
			);
	
		void
		:target:`knnSearch<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a32640ad9c77e4ff85a1a8ac399b13e53>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& queries,
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& indices,
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& dists,
			int knn,
			const :::ref:`cvflann::SearchParams<doxid-d1/d18/structcvflann_1_1_search_params>`& params
			);
	
		int
		:target:`radiusSearch<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1abd40ca52fdc5e0dd3d82445cc71a478b>`(
			const std::vector<:ref:`ElementType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a02a5a5a197e139b8969c505c9a6c9859>`>& query,
			std::vector<int>& indices,
			std::vector<:ref:`DistanceType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a4b7623b6f2ebc7c1dc406460cd0cee02>`>& dists,
			:ref:`DistanceType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a4b7623b6f2ebc7c1dc406460cd0cee02>` radius,
			const :::ref:`cvflann::SearchParams<doxid-d1/d18/structcvflann_1_1_search_params>`& params
			);
	
		int
		:target:`radiusSearch<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1afc05dd06931731c9d5260b42f62072d6>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& query,
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& indices,
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& dists,
			:ref:`DistanceType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a4b7623b6f2ebc7c1dc406460cd0cee02>` radius,
			const :::ref:`cvflann::SearchParams<doxid-d1/d18/structcvflann_1_1_search_params>`& params
			);
	
		void
		:target:`save<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a42cc01f395c948fd9c7cb57fb7793671>`(:ref:`String<doxid-dc/d0e/classcv_1_1_string>` filename);
	
		int
		:target:`size<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1affe04ca85a1e20d655ad972ba9b3d72a>`() const;
	
		int
		:target:`veclen<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a51e8e412d2743612d626d4280ad9483d>`() const;
	};
.. _details-dd/dde/classcv_1_1flann_1_1_generic_index:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The FLANN nearest neighbor index class. This class is templated with the type of elements for which the index is built.

Construction
------------

.. index:: pair: function; GenericIndex
.. _doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a8fff14185f9f3d2f2311b528f65b146c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	GenericIndex(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& features,
		const :::ref:`cvflann::IndexParams<doxid-dc/d8c/namespacecvflann_1ad55c74ae3144004b728d68382edbca45>`& params,
		Distance distance = Distance()
		)

Constructs a nearest neighbor search index for a given dataset.

* :ref:`LinearIndexParams <doxid-d4/db9/structcv_1_1flann_1_1_linear_index_params>` When passing an object of this type, the index will perform a linear, brute-force search. :
  
  .. ref-code-block:: cpp
  
  	struct LinearIndexParams : public IndexParams
  	{
  	};

* :ref:`KDTreeIndexParams <doxid-db/db8/structcv_1_1flann_1_1_k_d_tree_index_params>` When passing an object of this type the index constructed will consist of a set of randomized kd-trees which will be searched in parallel. :
  
  .. ref-code-block:: cpp
  
  	struct KDTreeIndexParams : public IndexParams
  	{
  	    KDTreeIndexParams( int trees = 4 );
  	};

* :ref:`KMeansIndexParams <doxid-db/da7/structcv_1_1flann_1_1_k_means_index_params>` When passing an object of this type the index constructed will be a hierarchical k-means tree. :
  
  .. ref-code-block:: cpp
  
  	struct KMeansIndexParams : public IndexParams
  	{
  	    KMeansIndexParams(
  	        int branching = 32,
  	        int iterations = 11,
  	        flann_centers_init_t centers_init = CENTERS_RANDOM,
  	        float cb_index = 0.2 );
  	};

* :ref:`CompositeIndexParams <doxid-d2/d9c/structcv_1_1flann_1_1_composite_index_params>` When using a parameters object of this type the index created combines the randomized kd-trees and the hierarchical k-means tree. :
  
  .. ref-code-block:: cpp
  
  	struct CompositeIndexParams : public IndexParams
  	{
  	    CompositeIndexParams(
  	        int trees = 4,
  	        int branching = 32,
  	        int iterations = 11,
  	        flann_centers_init_t centers_init = CENTERS_RANDOM,
  	        float cb_index = 0.2 );
  	};

* :ref:`LshIndexParams <doxid-d7/d40/structcv_1_1flann_1_1_lsh_index_params>` When using a parameters object of this type the index created uses multi-probe LSH (by Multi-Probe LSH: Efficient Indexing for High-Dimensional Similarity Search by Qin Lv, William Josephson, Zhe Wang, Moses Charikar, Kai Li., Proceedings of the 33rd International Conference on Very Large Data Bases (VLDB). Vienna, Austria. September 2007) :
  
  .. ref-code-block:: cpp
  
  	struct LshIndexParams : public IndexParams
  	{
  	    LshIndexParams(
  	        unsigned int table_number,
  	        unsigned int key_size,
  	        unsigned int multi_probe_level );
  	};

* :ref:`AutotunedIndexParams <doxid-dd/dae/structcv_1_1flann_1_1_autotuned_index_params>` When passing an object of this type the index created is automatically tuned to offer the best performance, by choosing the optimal index type (randomized kd-trees, hierarchical kmeans, linear) and parameters for the dataset provided. :
  
  .. ref-code-block:: cpp
  
  	struct AutotunedIndexParams : public IndexParams
  	{
  	    AutotunedIndexParams(
  	        float target_precision = 0.9,
  	        float build_weight = 0.01,
  	        float memory_weight = 0,
  	        float sample_fraction = 0.1 );
  	};

* :ref:`SavedIndexParams <doxid-d6/da2/structcv_1_1flann_1_1_saved_index_params>` This object type is used for loading a previously saved index from the disk. :
  
  .. ref-code-block:: cpp
  
  	struct SavedIndexParams : public IndexParams
  	{
  	    SavedIndexParams( String filename );
  	};



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- features

		- Matrix of containing the features(points) to index. The size of the matrix is num_features x feature_dimensionality and the data type of the elements in the matrix must coincide with the type of the index.

	*
		- params

		- Structure containing the index parameters. The type of index that will be constructed depends on the type of this parameter. See the description.

	*
		- distance

		- The method constructs a fast search structure from a set of features using the specified algorithm with specified parameters, as defined by params. params is a reference to one of the following class :ref:`IndexParams <doxid-d4/db1/structcv_1_1flann_1_1_index_params>` descendants:

Methods
-------

.. index:: pair: function; knnSearch
.. _doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a50c3ce570adfb7b19c7cda4a320a3d9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	knnSearch(
		const std::vector<:ref:`ElementType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a02a5a5a197e139b8969c505c9a6c9859>`>& query,
		std::vector<int>& indices,
		std::vector<:ref:`DistanceType<doxid-dd/dde/classcv_1_1flann_1_1_generic_index_1a4b7623b6f2ebc7c1dc406460cd0cee02>`>& dists,
		int knn,
		const :::ref:`cvflann::SearchParams<doxid-d1/d18/structcvflann_1_1_search_params>`& params
		)

Performs a K-nearest neighbor search for a given query point using the index.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- query

		- The query point

	*
		- indices

		- Vector that will contain the indices of the K-nearest neighbors found. It must have at least knn size.

	*
		- dists

		- Vector that will contain the distances to the K-nearest neighbors found. It must have at least knn size.

	*
		- knn

		- Number of nearest neighbors to search for.

	*
		- params

		- :ref:`SearchParams <doxid-d0/db8/structcv_1_1flann_1_1_search_params>`

