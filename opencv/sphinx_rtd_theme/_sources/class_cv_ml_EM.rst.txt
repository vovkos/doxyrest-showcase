.. index:: pair: class; cv::ml::EM
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m:

class cv::ml::EM
================

.. toctree::
	:hidden:

	enum_cv_ml_EM_Types.rst

Overview
~~~~~~~~

The class implements the Expectation Maximization algorithm. :ref:`More...<details-dc/db9/classcv_1_1ml_1_1_e_m>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ml.hpp>
	
	class EM: public :ref:`cv::ml::StatModel<doxid-d9/d36/classcv_1_1ml_1_1_stat_model>`
	{
	public:
		// enums
	
		enum
		{
		    :target:`DEFAULT_NCLUSTERS<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1aaf56a33974100f84480d002fec6a0881a19593ad7143e258ab5f7cb0174f3403a>` =5,
		    :target:`DEFAULT_MAX_ITERS<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1aaf56a33974100f84480d002fec6a0881a1e62e599654778422db115bccb56c40a>` =100,
		};
	
		enum
		{
		    :target:`START_E_STEP<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ab54569ed096ee4f6960afd6e49297337abade5584fe2152c34ea1ee175691f98c>`    =1,
		    :target:`START_M_STEP<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ab54569ed096ee4f6960afd6e49297337a628d2a6f1e5bb6dd0dd1847345d968d2>`    =2,
		    :target:`START_AUTO_STEP<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ab54569ed096ee4f6960afd6e49297337a5d4e8becb341736fc233b0dc1918ac94>` =0,
		};
	
		enum :ref:`Types<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ad993005b665024ea3c067c4cccd4e898>`;

		// methods
	
		virtual
		int
		:ref:`getClustersNumber<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ae914b688d7546847e4919ac4e005a0fe>`() const = 0;
	
		virtual
		int
		:ref:`getCovarianceMatrixType<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ae30ad8cb14ec43c524ca8086ac0f9e5f>`() const = 0;
	
		virtual
		void
		:ref:`getCovs<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a223e28d9c8a2447d6afca6a10dd608c1>`(std::vector<:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`>& covs) const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getMeans<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1acec62dd55c06711c81d741c2d96603d1>`() const = 0;
	
		virtual
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
		:ref:`getTermCriteria<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a80d9ab289b98dfc51f033fd2227bef3e>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getWeights<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1af235d6061a5414ebf6defddf7cc070e1>`() const = 0;
	
		virtual
		float
		:ref:`predict<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a51fce3f8f67acd4f52aeff85e1733c79>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			int flags = 0
			) const = 0;
	
		virtual
		:ref:`Vec2d<doxid-dc/d84/group__core__basic_1gaf20d857c2077c986d3b303e3d58bbc54>`
		:ref:`predict2<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a2ea7da92a75bc7a7d665c241f547b9b9>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sample,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs
			) const = 0;
	
		virtual
		void
		:ref:`setClustersNumber<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a069ee46c360ed183d5eb96b8b8261d8a>`(int val) = 0;
	
		virtual
		void
		:ref:`setCovarianceMatrixType<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a8b383c62697eac9a972931674790f6cd>`(int val) = 0;
	
		virtual
		void
		:ref:`setTermCriteria<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ab516e6f125bd4ebc976306e956320313>`(const :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& val) = 0;
	
		virtual
		bool
		:ref:`trainE<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a2d02b45a574d51a72263e9c53cdc4f09>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` means0,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` covs0 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` weights0 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` logLikelihoods = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			) = 0;
	
		virtual
		bool
		:ref:`trainEM<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a5a6a7badbc0c85a8c9fa50a41bf1bcd2>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` logLikelihoods = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			) = 0;
	
		virtual
		bool
		:ref:`trainM<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ac21fbae3a09972de0a0a1cb4c2c434d0>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` probs0,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` logLikelihoods = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<EM>
		:ref:`create<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a7725c8beba696cfcb6889cd5494101a4>`();
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<EM>
		:ref:`load<doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a90eec814e087b4d8c3ff9e92f8069f6a>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum :ref:`Flags<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af1ea864e1c19796e6264ebb3950c0b9a>`;

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		float
		:ref:`calcError<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aa6a71b1ee5b7fa0b07b55e77106cda13>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			bool test,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` resp
			) const;
	
		virtual
		bool
		:ref:`empty<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a398fed53d9312b923e34aefd42f70e17>`() const;
	
		virtual
		int
		:ref:`getVarCount<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a783b92c436c7a2978e2d4bbb3cfb6e0c>`() const = 0;
	
		virtual
		bool
		:ref:`isClassifier<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1121a835feedefdcdb8624966567aec6>`() const = 0;
	
		virtual
		bool
		:ref:`isTrained<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aab380b59eb30b50254ef1b804774c4d8>`() const = 0;
	
		virtual
		float
		:ref:`predict<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1a7e49e1febd10392452727498771bc1>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			int flags = 0
			) const = 0;
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& trainData,
			int flags = 0
			);
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aeb25a75f438864fb25af182fb4b1b96f>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			int layout,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af93a21ea5866cd305936a03742f69af8>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			int flags = 0
			);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-dc/db9/classcv_1_1ml_1_1_e_m:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The class implements the Expectation Maximization algorithm.



.. rubric:: See also:

:ref:`Expectation Maximization <doxid-dc/dd6/ml_intro_1ml_intro_em>`

Methods
-------

.. index:: pair: function; getClustersNumber
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ae914b688d7546847e4919ac4e005a0fe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getClustersNumber() const = 0

The number of mixture components in the Gaussian mixture model. Default value of the parameter is :ref:`EM::DEFAULT_NCLUSTERS <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1aaf56a33974100f84480d002fec6a0881a19593ad7143e258ab5f7cb0174f3403a>` =5. Some of EM implementation could determine the optimal number of mixtures within a specified value range, but that is not the case in ML yet.



.. rubric:: See also:

:ref:`setClustersNumber <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a069ee46c360ed183d5eb96b8b8261d8a>`

.. index:: pair: function; getCovarianceMatrixType
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ae30ad8cb14ec43c524ca8086ac0f9e5f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getCovarianceMatrixType() const = 0

Constraint on covariance matrices which defines type of matrices. See :ref:`EM::Types <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ad993005b665024ea3c067c4cccd4e898>`.



.. rubric:: See also:

:ref:`setCovarianceMatrixType <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a8b383c62697eac9a972931674790f6cd>`

.. index:: pair: function; getCovs
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a223e28d9c8a2447d6afca6a10dd608c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	getCovs(std::vector<:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`>& covs) const = 0

Returns covariation matrices.

Returns vector of covariation matrices. Number of matrices is the number of gaussian mixtures, each matrix is a square floating-point matrix NxN, where N is the space dimensionality.

.. index:: pair: function; getMeans
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1acec62dd55c06711c81d741c2d96603d1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getMeans() const = 0

Returns the cluster centers (means of the Gaussian mixture)

Returns matrix with the number of rows equal to the number of mixtures and number of columns equal to the space dimensionality.

.. index:: pair: function; getTermCriteria
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a80d9ab289b98dfc51f033fd2227bef3e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
	getTermCriteria() const = 0

The termination criteria of the EM algorithm. The EM algorithm can be terminated by the number of iterations termCrit.maxCount (number of M-steps) or when relative change of likelihood logarithm is less than termCrit.epsilon. Default maximum number of iterations is :ref:`EM::DEFAULT_MAX_ITERS <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1aaf56a33974100f84480d002fec6a0881a1e62e599654778422db115bccb56c40a>` =100.



.. rubric:: See also:

:ref:`setTermCriteria <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ab516e6f125bd4ebc976306e956320313>`

.. index:: pair: function; getWeights
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1af235d6061a5414ebf6defddf7cc070e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getWeights() const = 0

Returns weights of the mixtures.

Returns vector with the number of elements equal to the number of mixtures.

.. index:: pair: function; predict
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a51fce3f8f67acd4f52aeff85e1733c79:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	float
	predict(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int flags = 0
		) const = 0

Returns posterior probabilities for the provided samples.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- The input samples, floating-point matrix

	*
		- results

		- The optional output :math:`nSamples \times nClusters` matrix of results. It contains posterior probabilities for each sample from the input

	*
		- flags

		- This parameter will be ignored

.. index:: pair: function; predict2
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a2ea7da92a75bc7a7d665c241f547b9b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Vec2d<doxid-dc/d84/group__core__basic_1gaf20d857c2077c986d3b303e3d58bbc54>`
	predict2(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sample,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs
		) const = 0

Returns a likelihood logarithm value and an index of the most probable mixture component for the given sample.

The method returns a two-element double vector. Zero element is a likelihood logarithm value for the sample. First element is an index of the most probable mixture component for the given sample.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sample

		- A sample for classification. It should be a one-channel matrix of :math:`1 \times dims` or :math:`dims \times 1` size.

	*
		- probs

		- Optional output matrix that contains posterior probabilities of each component given the sample. It has :math:`1 \times nclusters` size and CV_64FC1 type.

.. index:: pair: function; setClustersNumber
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a069ee46c360ed183d5eb96b8b8261d8a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setClustersNumber(int val) = 0



.. rubric:: See also:

:ref:`getClustersNumber <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ae914b688d7546847e4919ac4e005a0fe>`

.. index:: pair: function; setCovarianceMatrixType
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a8b383c62697eac9a972931674790f6cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setCovarianceMatrixType(int val) = 0



.. rubric:: See also:

:ref:`getCovarianceMatrixType <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ae30ad8cb14ec43c524ca8086ac0f9e5f>`

.. index:: pair: function; setTermCriteria
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ab516e6f125bd4ebc976306e956320313:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setTermCriteria(const :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& val) = 0



.. rubric:: See also:

:ref:`getTermCriteria <doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a80d9ab289b98dfc51f033fd2227bef3e>`

.. index:: pair: function; trainE
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a2d02b45a574d51a72263e9c53cdc4f09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	trainE(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` means0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` covs0 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` weights0 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` logLikelihoods = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		) = 0

Estimate the Gaussian mixture parameters from a samples set.

This variation starts with Expectation step. You need to provide initial means :math:`a_k` of mixture components. Optionally you can pass initial weights :math:`\pi_k` and covariance matrices :math:`S_k` of mixture components.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- Samples from which the Gaussian mixture model will be estimated. It should be a one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing.

	*
		- means0

		- Initial means :math:`a_k` of mixture components. It is a one-channel matrix of :math:`nclusters \times dims` size. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing.

	*
		- covs0

		- The vector of initial covariance matrices :math:`S_k` of mixture components. Each of covariance matrices is a one-channel matrix of :math:`dims \times dims` size. If the matrices do not have CV_64F type they will be converted to the inner matrices of such type for the further computing.

	*
		- weights0

		- Initial weights :math:`\pi_k` of mixture components. It should be a one-channel floating-point matrix with :math:`1 \times nclusters` or :math:`nclusters \times 1` size.

	*
		- logLikelihoods

		- The optional output matrix that contains a likelihood logarithm value for each sample. It has :math:`nsamples \times 1` size and CV_64FC1 type.

	*
		- labels

		- The optional output "class label" for each sample: :math:`\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N` (indices of the most probable mixture component for each sample). It has :math:`nsamples \times 1` size and CV_32SC1 type.

	*
		- probs

		- The optional output matrix that contains posterior probabilities of each Gaussian mixture component given the each sample. It has :math:`nsamples \times nclusters` size and CV_64FC1 type.

.. index:: pair: function; trainEM
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a5a6a7badbc0c85a8c9fa50a41bf1bcd2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	trainEM(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` logLikelihoods = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		) = 0

Estimate the Gaussian mixture parameters from a samples set.

This variation starts with Expectation step. Initial values of the model parameters will be estimated by the k-means algorithm.

Unlike many of the ML models, EM is an unsupervised learning algorithm and it does not take responses (class labels or function values) as input. Instead, it computes the *Maximum Likelihood Estimate* of the Gaussian mixture parameters from an input sample set, stores all the parameters inside the structure: :math:`p_{i,k}` in probs, :math:`a_k` in means , :math:`S_k` in covs[k], :math:`\pi_k` in weights , and optionally computes the output "class label" for each sample: :math:`\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N` (indices of the most probable mixture component for each sample).

The trained model can be used further for prediction, just like any other classifier. The trained model is similar to the :ref:`NormalBayesClassifier <doxid-d0/df9/classcv_1_1ml_1_1_normal_bayes_classifier>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- Samples from which the Gaussian mixture model will be estimated. It should be a one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing.

	*
		- logLikelihoods

		- The optional output matrix that contains a likelihood logarithm value for each sample. It has :math:`nsamples \times 1` size and CV_64FC1 type.

	*
		- labels

		- The optional output "class label" for each sample: :math:`\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N` (indices of the most probable mixture component for each sample). It has :math:`nsamples \times 1` size and CV_32SC1 type.

	*
		- probs

		- The optional output matrix that contains posterior probabilities of each Gaussian mixture component given the each sample. It has :math:`nsamples \times nclusters` size and CV_64FC1 type.

.. index:: pair: function; trainM
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1ac21fbae3a09972de0a0a1cb4c2c434d0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	trainM(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` probs0,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` logLikelihoods = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` probs = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		) = 0

Estimate the Gaussian mixture parameters from a samples set.

This variation starts with Maximization step. You need to provide initial probabilities :math:`p_{i,k}` to use this option.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- Samples from which the Gaussian mixture model will be estimated. It should be a one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type it will be converted to the inner matrix of such type for the further computing.

	*
		- probs0

		- 

	*
		- logLikelihoods

		- The optional output matrix that contains a likelihood logarithm value for each sample. It has :math:`nsamples \times 1` size and CV_64FC1 type.

	*
		- labels

		- The optional output "class label" for each sample: :math:`\texttt{labels}_i=\texttt{arg max}_k(p_{i,k}), i=1..N` (indices of the most probable mixture component for each sample). It has :math:`nsamples \times 1` size and CV_32SC1 type.

	*
		- probs

		- The optional output matrix that contains posterior probabilities of each Gaussian mixture component given the each sample. It has :math:`nsamples \times nclusters` size and CV_64FC1 type.

.. index:: pair: function; create
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a7725c8beba696cfcb6889cd5494101a4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<EM>
	create()

Creates empty EM model. The model should be trained then using StatModel::train(traindata, flags) method. Alternatively, you can use one of the :ref:`EM::train <doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>` \* methods or load it from file using :ref:`Algorithm::load <doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>` <:ref:`EM <doxid-dc/db9/classcv_1_1ml_1_1_e_m>`>(filename).

.. index:: pair: function; load
.. _doxid-dc/db9/classcv_1_1ml_1_1_e_m_1a90eec814e087b4d8c3ff9e92f8069f6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<EM>
	load(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
		)

Loads and creates a serialized :ref:`EM <doxid-dc/db9/classcv_1_1ml_1_1_e_m>` from a file.

Use :ref:`EM::save <doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>` to serialize and store an :ref:`EM <doxid-dc/db9/classcv_1_1ml_1_1_e_m>` to disk. Load the :ref:`EM <doxid-dc/db9/classcv_1_1ml_1_1_e_m>` from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filepath

		- path to serialized :ref:`EM <doxid-dc/db9/classcv_1_1ml_1_1_e_m>`

	*
		- nodeName

		- name of node containing the classifier

