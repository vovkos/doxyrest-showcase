.. index:: pair: class; cv::ml::RTrees
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees:

class cv::ml::RTrees
====================

.. toctree::
	:hidden:

Overview
~~~~~~~~

The class implements the random forest predictor. :ref:`More...<details-d4/d41/classcv_1_1ml_1_1_r_trees>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ml.hpp>
	
	class RTrees: public :ref:`cv::ml::DTrees<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees>`
	{
	public:
		// methods
	
		virtual
		int
		:ref:`getActiveVarCount<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a554add5828e11b7310d3198eaac4875c>`() const = 0;
	
		virtual
		bool
		:ref:`getCalculateVarImportance<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a06dea562cb88239dac29932b301252a9>`() const = 0;
	
		virtual
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
		:ref:`getTermCriteria<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a4f833672045ab3be645ca0cba0fc7a89>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getVarImportance<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1afc0c6f0c53e11d04ec1d1e176b3ba07f>`() const = 0;
	
		void
		:ref:`getVotes<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a46cd96dee4738c07899067344efe2956>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results,
			int flags
			) const;
	
		virtual
		void
		:ref:`setActiveVarCount<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a54beb36a90fbc804d5337a8b74933d09>`(int val) = 0;
	
		virtual
		void
		:ref:`setCalculateVarImportance<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a9f034bb1cb935f54a66b8b711daa5ee0>`(bool val) = 0;
	
		virtual
		void
		:ref:`setTermCriteria<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a6fb8be4c0c490a5b9ff870adce1a0f20>`(const :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& val) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<RTrees>
		:ref:`create<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a39dae109b823a296bb7077d99970e664>`();
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<RTrees>
		:ref:`load<doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1adada11573469e5df2e05da93e8239704>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum :ref:`Flags<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af1ea864e1c19796e6264ebb3950c0b9a>`;
		enum :ref:`Flags<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a7afa5cd2289fb88989c0ab1b8b5d8ac2>`;

		// classes
	
		class :ref:`Node<doxid-db/d35/classcv_1_1ml_1_1_d_trees_1_1_node>`;
		class :ref:`Split<doxid-df/d74/classcv_1_1ml_1_1_d_trees_1_1_split>`;

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		float
		:ref:`calcError<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aa6a71b1ee5b7fa0b07b55e77106cda13>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			bool test,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` resp
			) const;
	
		virtual
		bool
		:ref:`empty<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a398fed53d9312b923e34aefd42f70e17>`() const;
	
		virtual
		int
		:ref:`getVarCount<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a783b92c436c7a2978e2d4bbb3cfb6e0c>`() const = 0;
	
		virtual
		bool
		:ref:`isClassifier<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1121a835feedefdcdb8624966567aec6>`() const = 0;
	
		virtual
		bool
		:ref:`isTrained<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aab380b59eb30b50254ef1b804774c4d8>`() const = 0;
	
		virtual
		float
		:ref:`predict<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1a7e49e1febd10392452727498771bc1>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			int flags = 0
			) const = 0;
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& trainData,
			int flags = 0
			);
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aeb25a75f438864fb25af182fb4b1b96f>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			int layout,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af93a21ea5866cd305936a03742f69af8>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			int flags = 0
			);
	
		virtual
		int
		:ref:`getCVFolds<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abfced3f2d3bf13b39c94e4a3fecc4309>`() const = 0;
	
		virtual
		int
		:ref:`getMaxCategories<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ad7dea805ae861c26fdd0b79eb34b3c24>`() const = 0;
	
		virtual
		int
		:ref:`getMaxDepth<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ac41b80cb9e2ea0d477425052f9692104>`() const = 0;
	
		virtual
		int
		:ref:`getMinSampleCount<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a277c2ccecfa7fc65d1d474b56450e126>`() const = 0;
	
		virtual
		const std::vector<:ref:`Node<doxid-db/d35/classcv_1_1ml_1_1_d_trees_1_1_node>`>&
		:ref:`getNodes<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ae4ffa17349a0094c5cded6e92042ffc2>`() const = 0;
	
		virtual
		:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getPriors<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a152badc1f5a4963ef9d43d7e7395bd3b>`() const = 0;
	
		virtual
		float
		:ref:`getRegressionAccuracy<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab7ec8342deddac53ebbb92145c992db7>`() const = 0;
	
		virtual
		const std::vector<int>&
		:ref:`getRoots<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1af99b15e5769c614bb1f1e16330b6fa4f>`() const = 0;
	
		virtual
		const std::vector<:ref:`Split<doxid-df/d74/classcv_1_1ml_1_1_d_trees_1_1_split>`>&
		:ref:`getSplits<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a23bd587736aa6c658966025cfff3f4a3>`() const = 0;
	
		virtual
		const std::vector<int>&
		:ref:`getSubsets<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab4edebdd513c1937dfa8f444931f6a7a>`() const = 0;
	
		virtual
		bool
		:ref:`getTruncatePrunedTree<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a905b23962a6c393a87b79bcc086cc6c2>`() const = 0;
	
		virtual
		bool
		:ref:`getUse1SERule<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a5d8bd6934507c56905f93b5b8c7d1584>`() const = 0;
	
		virtual
		bool
		:ref:`getUseSurrogates<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a566708bb8841067f146afae81b6219f4>`() const = 0;
	
		virtual
		void
		:ref:`setCVFolds<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a082ed33b1dd2101152dd33bdc2847404>`(int val) = 0;
	
		virtual
		void
		:ref:`setMaxCategories<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6d1571c10e5d72f8df7f102b916d704f>`(int val) = 0;
	
		virtual
		void
		:ref:`setMaxDepth<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab2192b5631da2d30eaaebdb12015f477>`(int val) = 0;
	
		virtual
		void
		:ref:`setMinSampleCount<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abe34fc6e9a172b9e334abcca94e28fb6>`(int val) = 0;
	
		virtual
		void
		:ref:`setPriors<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a66756433f31db77a5511fc3f85403bd9>`(const :ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`& val) = 0;
	
		virtual
		void
		:ref:`setRegressionAccuracy<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a936a3b56ccc5684f279dfd76bbea0247>`(float val) = 0;
	
		virtual
		void
		:ref:`setTruncatePrunedTree<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6f2663a08abc3e872bd3f3a53a84615c>`(bool val) = 0;
	
		virtual
		void
		:ref:`setUse1SERule<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a08089831f9a07e0ce6a5e5faccdf31f6>`(bool val) = 0;
	
		virtual
		void
		:ref:`setUseSurrogates<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a33d8fec217d423609a9f29a0a787111c>`(bool val) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`DTrees<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees>`>
		:ref:`create<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1aa0ae71ed85f63d2ea809402c0f19d602>`();
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`DTrees<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees>`>
		:ref:`load<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a9a13c065058afce14367ca44739fb4df>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d4/d41/classcv_1_1ml_1_1_r_trees:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The class implements the random forest predictor.



.. rubric:: See also:

:ref:`Random Trees <doxid-dc/dd6/ml_intro_1ml_intro_rtrees>`

Methods
-------

.. index:: pair: function; getActiveVarCount
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a554add5828e11b7310d3198eaac4875c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getActiveVarCount() const = 0

The size of the randomly selected subset of features at each tree node and that are used to find the best split(s). If you set it to 0 then the size will be set to the square root of the total number of features. Default value is 0.



.. rubric:: See also:

:ref:`setActiveVarCount <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a54beb36a90fbc804d5337a8b74933d09>`

.. index:: pair: function; getCalculateVarImportance
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a06dea562cb88239dac29932b301252a9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	getCalculateVarImportance() const = 0

If true then variable importance will be calculated and then it can be retrieved by :ref:`RTrees::getVarImportance <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1afc0c6f0c53e11d04ec1d1e176b3ba07f>`. Default value is false.



.. rubric:: See also:

:ref:`setCalculateVarImportance <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a9f034bb1cb935f54a66b8b711daa5ee0>`

.. index:: pair: function; getTermCriteria
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a4f833672045ab3be645ca0cba0fc7a89:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
	getTermCriteria() const = 0

The termination criteria that specifies when the training algorithm stops. Either when the specified number of trees is trained and added to the ensemble or when sufficient accuracy (measured as OOB error) is achieved. Typically the more trees you have the better the accuracy. However, the improvement in accuracy generally diminishes and asymptotes pass a certain number of trees. Also to keep in mind, the number of tree increases the prediction time linearly. Default value is :ref:`TermCriteria <doxid-df/d8a/classcv_1_1_term_criteria>` (TermCriteria::MAX_ITERS + :ref:`TermCriteria::EPS <doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 50, 0.1)



.. rubric:: See also:

:ref:`setTermCriteria <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a6fb8be4c0c490a5b9ff870adce1a0f20>`

.. index:: pair: function; getVarImportance
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1afc0c6f0c53e11d04ec1d1e176b3ba07f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getVarImportance() const = 0

Returns the variable importance array. The method returns the variable importance vector, computed at the training stage when CalculateVarImportance is set to true. If this flag was set to false, the empty matrix is returned.

.. index:: pair: function; getVotes
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a46cd96dee4738c07899067344efe2956:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	getVotes(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results,
		int flags
		) const

Returns the result of each individual tree in the forest. In case the model is a regression problem, the method will return each of the trees' results for each of the sample cases. If the model is a classifier, it will return a :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` with samples + 1 rows, where the first row gives the class number and the following rows return the votes each class had for each sample.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- Array containg the samples for which votes will be calculated.

	*
		- results

		- Array where the result of the calculation will be written.

	*
		- flags

		- Flags for defining the type of :ref:`RTrees <doxid-d4/d41/classcv_1_1ml_1_1_r_trees>`.

.. index:: pair: function; setActiveVarCount
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a54beb36a90fbc804d5337a8b74933d09:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setActiveVarCount(int val) = 0



.. rubric:: See also:

:ref:`getActiveVarCount <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a554add5828e11b7310d3198eaac4875c>`

.. index:: pair: function; setCalculateVarImportance
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a9f034bb1cb935f54a66b8b711daa5ee0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setCalculateVarImportance(bool val) = 0



.. rubric:: See also:

:ref:`getCalculateVarImportance <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a06dea562cb88239dac29932b301252a9>`

.. index:: pair: function; setTermCriteria
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a6fb8be4c0c490a5b9ff870adce1a0f20:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setTermCriteria(const :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& val) = 0



.. rubric:: See also:

:ref:`getTermCriteria <doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a4f833672045ab3be645ca0cba0fc7a89>`

.. index:: pair: function; create
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1a39dae109b823a296bb7077d99970e664:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<RTrees>
	create()

Creates the empty model. Use :ref:`StatModel::train <doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>` to train the model, :ref:`StatModel::train <doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>` to create and train the model, :ref:`Algorithm::load <doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>` to load the pre-trained model.

.. index:: pair: function; load
.. _doxid-d4/d41/classcv_1_1ml_1_1_r_trees_1adada11573469e5df2e05da93e8239704:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<RTrees>
	load(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
		)

Loads and creates a serialized RTree from a file.

Use RTree::save to serialize and store an RTree to disk. Load the RTree from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filepath

		- path to serialized RTree

	*
		- nodeName

		- name of node containing the classifier

