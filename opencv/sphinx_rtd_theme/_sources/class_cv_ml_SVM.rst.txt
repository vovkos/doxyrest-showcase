.. index:: pair: class; cv::ml::SVM
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m:

class cv::ml::SVM
=================

.. toctree::
	:hidden:

	enum_cv_ml_SVM_KernelTypes.rst
	enum_cv_ml_SVM_ParamTypes.rst
	enum_cv_ml_SVM_Types.rst
	class_cv_ml_SVM_Kernel.rst

Overview
~~~~~~~~

Support Vector Machines. :ref:`More...<details-da/d05/classcv_1_1ml_1_1_s_v_m>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ml.hpp>
	
	class SVM: public :ref:`cv::ml::StatModel<doxid-d9/d36/classcv_1_1ml_1_1_stat_model>`
	{
	public:
		// enums
	
		enum :ref:`KernelTypes<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56>`;
		enum :ref:`ParamTypes<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3>`;
		enum :ref:`Types<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44f>`;

		// classes
	
		class :ref:`Kernel<doxid-d2/d30/classcv_1_1ml_1_1_s_v_m_1_1_kernel>`;

		// methods
	
		virtual
		double
		:ref:`getC<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a77d9a35898cae44ac9071c4b35bc96a8>`() const = 0;
	
		virtual
		:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getClassWeights<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1abca95c581c70bf46625d1b6fda723ea7>`() const = 0;
	
		virtual
		double
		:ref:`getCoef0<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a87ca59782f9bd71db63602fa439a791e>`() const = 0;
	
		virtual
		double
		:ref:`getDecisionFunction<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a63ebdd598b0c30942130ed4768f2836e>`(
			int i,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` alpha,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` svidx
			) const = 0;
	
		virtual
		double
		:ref:`getDegree<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a0e8b98786b1a14925cb571cf17b858e8>`() const = 0;
	
		virtual
		double
		:ref:`getGamma<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a5af1a2ed6d9c0c9e4eae6b749ae61439>`() const = 0;
	
		virtual
		int
		:ref:`getKernelType<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2aa20328f134790adfdd186526e32c46>`() const = 0;
	
		virtual
		double
		:ref:`getNu<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ad1f4a836048fd63bb2509e9eb70a520b>`() const = 0;
	
		virtual
		double
		:ref:`getP<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a3672572f111c14f7fd0d392db1709413>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getSupportVectors<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2c3fb4b3c80b8fce0b8654f103339300>`() const = 0;
	
		virtual
		:ref:`cv::TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
		:ref:`getTermCriteria<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a11a5f5186656d7a45f7d70b85ad75e54>`() const = 0;
	
		virtual
		int
		:ref:`getType<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a65c5ef227073493731ae8133bf372586>`() const = 0;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getUncompressedSupportVectors<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab7dc5b5cfb55e0452a96e69ae1f1d3c8>`() const;
	
		virtual
		void
		:ref:`setC<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1af9f543ef011db0ded375bb6f68984142>`(double val) = 0;
	
		virtual
		void
		:ref:`setClassWeights<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9cb80c3df6c2626b9836eaa0e0c58bf0>`(const :ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`& val) = 0;
	
		virtual
		void
		:ref:`setCoef0<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1af0cd3684aabfacbd6749d8649d5971ed>`(double val) = 0;
	
		virtual
		void
		:ref:`setCustomKernel<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a16a3ddfd7bad030268f024f5a6c561f1>`(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Kernel<doxid-d2/d30/classcv_1_1ml_1_1_s_v_m_1_1_kernel>`>& _kernel) = 0;
	
		virtual
		void
		:ref:`setDegree<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a756297055239fa33536c09b0f5721494>`(double val) = 0;
	
		virtual
		void
		:ref:`setGamma<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a1e15d72e1bbba64a9650ea65910135e7>`(double val) = 0;
	
		virtual
		void
		:ref:`setKernel<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ad6f4f45983d06817b9782978ca0f6f6f>`(int kernelType) = 0;
	
		virtual
		void
		:ref:`setNu<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aa19ae35bcf07f52a4009ceeca583b113>`(double val) = 0;
	
		virtual
		void
		:ref:`setP<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aed346ecd8b15379717053254ae067d96>`(double val) = 0;
	
		virtual
		void
		:ref:`setTermCriteria<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6a86483c5518c332fedf6ec381a1daa7>`(const :ref:`cv::TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& val) = 0;
	
		virtual
		void
		:ref:`setType<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a0dd2c2aea178a3c9136eda6443d5bb7b>`(int val) = 0;
	
		virtual
		bool
		:ref:`trainAuto<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a533d3d3f950fed3f75be0d8692eeff58>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			int kFold = 10,
			:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` Cgrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`C<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a8eafc49ef685613b37e1b96351fd2bd1>`),
			:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` gammaGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`GAMMA<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a9b81805a0cd06dc59c354b0ad6fc9e9a>`),
			:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` pGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`P<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae14aa4668daf05a4ea6918b10806acd5>`),
			:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` nuGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`NU<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae0c1409f55f0158101fcc5e07f095605>`),
			:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` coeffGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`COEF<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae7112825b482d70cf5f04bc571f86e57>`),
			:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` degreeGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`DEGREE<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a61a897bf6519f4be834ce379a1543869>`),
			bool balanced = false
			) = 0;
	
		bool
		:ref:`trainAuto<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a106ab31b5f70613b6fb66f96d6bc5d53>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			int layout,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses,
			int kFold = 10,
			:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> Cgrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::C<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a8eafc49ef685613b37e1b96351fd2bd1>`),
			:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> gammaGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::GAMMA<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a9b81805a0cd06dc59c354b0ad6fc9e9a>`),
			:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> pGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::P<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae14aa4668daf05a4ea6918b10806acd5>`),
			:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> nuGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::NU<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae0c1409f55f0158101fcc5e07f095605>`),
			:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> coeffGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::COEF<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae7112825b482d70cf5f04bc571f86e57>`),
			:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> degreeGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::DEGREE<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a61a897bf6519f4be834ce379a1543869>`),
			bool balanced = false
			);
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<SVM>
		:ref:`create<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2fe8b5bf897c34b8e911397b42e2cb44>`();
	
		static
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`
		:ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(int param_id);
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`>
		:ref:`getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(int param_id);
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<SVM>
		:ref:`load<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a7b05db6110aec2246f2b31363937539c>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum :ref:`Flags<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af1ea864e1c19796e6264ebb3950c0b9a>`;

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		float
		:ref:`calcError<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aa6a71b1ee5b7fa0b07b55e77106cda13>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			bool test,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` resp
			) const;
	
		virtual
		bool
		:ref:`empty<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a398fed53d9312b923e34aefd42f70e17>`() const;
	
		virtual
		int
		:ref:`getVarCount<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a783b92c436c7a2978e2d4bbb3cfb6e0c>`() const = 0;
	
		virtual
		bool
		:ref:`isClassifier<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1121a835feedefdcdb8624966567aec6>`() const = 0;
	
		virtual
		bool
		:ref:`isTrained<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aab380b59eb30b50254ef1b804774c4d8>`() const = 0;
	
		virtual
		float
		:ref:`predict<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1a7e49e1febd10392452727498771bc1>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			int flags = 0
			) const = 0;
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& trainData,
			int flags = 0
			);
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aeb25a75f438864fb25af182fb4b1b96f>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			int layout,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af93a21ea5866cd305936a03742f69af8>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			int flags = 0
			);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-da/d05/classcv_1_1ml_1_1_s_v_m:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Support Vector Machines.



.. rubric:: See also:

:ref:`Support Vector Machines <doxid-dc/dd6/ml_intro_1ml_intro_svm>`

Methods
-------

.. index:: pair: function; getC
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a77d9a35898cae44ac9071c4b35bc96a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getC() const = 0

Parameter *C* of a SVM optimization problem. For :ref:`SVM::C_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa18157ccaec6a252b901cff6de285d608>`, :ref:`SVM::EPS_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fac6fd17721f6a7b5c10f3ae48b78ed944>` or :ref:`SVM::NU_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa5b4b7e4b189d47be1765b3c6b19f6c80>`. Default value is 0.



.. rubric:: See also:

:ref:`setC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1af9f543ef011db0ded375bb6f68984142>`

.. index:: pair: function; getClassWeights
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1abca95c581c70bf46625d1b6fda723ea7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
	getClassWeights() const = 0

Optional weights in the :ref:`SVM::C_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa18157ccaec6a252b901cff6de285d608>` problem, assigned to particular classes. They are multiplied by *C* so the parameter *C* of class *i* becomes ``classWeights(i) * C``. Thus these weights affect the misclassification penalty for different classes. The larger weight, the larger penalty on misclassification of data from the corresponding class. Default value is empty :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.



.. rubric:: See also:

:ref:`setClassWeights <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9cb80c3df6c2626b9836eaa0e0c58bf0>`

.. index:: pair: function; getCoef0
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a87ca59782f9bd71db63602fa439a791e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getCoef0() const = 0

Parameter *coef0* of a kernel function. For :ref:`SVM::POLY <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56a5fa32d793cd5f5d0bf64f55bb94a3f2e>` or :ref:`SVM::SIGMOID <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56ac40981025a9b8f3c1cd35cb015aac5cc>`. Default value is 0.



.. rubric:: See also:

:ref:`setCoef0 <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1af0cd3684aabfacbd6749d8649d5971ed>`

.. index:: pair: function; getDecisionFunction
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a63ebdd598b0c30942130ed4768f2836e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getDecisionFunction(
		int i,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` alpha,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` svidx
		) const = 0

Retrieves the decision function.

The method returns rho parameter of the decision function, a scalar subtracted from the weighted sum of kernel responses.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- i

		- the index of the decision function. If the problem solved is regression, 1-class or 2-class classification, then there will be just one decision function and the index should always be 0. Otherwise, in the case of N-class classification, there will be :math:`N(N-1)/2` decision functions.

	*
		- alpha

		- the optional output vector for weights, corresponding to different support vectors. In the case of linear SVM all the alpha's will be 1's.

	*
		- svidx

		- the optional output vector of indices of support vectors within the matrix of support vectors (which can be retrieved by :ref:`SVM::getSupportVectors <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2c3fb4b3c80b8fce0b8654f103339300>`). In the case of linear SVM each decision function consists of a single "compressed" support vector.

.. index:: pair: function; getDegree
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a0e8b98786b1a14925cb571cf17b858e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getDegree() const = 0

Parameter *degree* of a kernel function. For :ref:`SVM::POLY <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56a5fa32d793cd5f5d0bf64f55bb94a3f2e>`. Default value is 0.



.. rubric:: See also:

:ref:`setDegree <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a756297055239fa33536c09b0f5721494>`

.. index:: pair: function; getGamma
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a5af1a2ed6d9c0c9e4eae6b749ae61439:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getGamma() const = 0

Parameter :math:`\gamma` of a kernel function. For :ref:`SVM::POLY <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56a5fa32d793cd5f5d0bf64f55bb94a3f2e>`, :ref:`SVM::RBF <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56a8e1f51ebeabd14cbd622f0f945831d4c>`, :ref:`SVM::SIGMOID <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56ac40981025a9b8f3c1cd35cb015aac5cc>` or :ref:`SVM::CHI2 <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56a66a909b8add6114fde309d24483bcf82>`. Default value is 1.



.. rubric:: See also:

:ref:`setGamma <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a1e15d72e1bbba64a9650ea65910135e7>`

.. index:: pair: function; getKernelType
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2aa20328f134790adfdd186526e32c46:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getKernelType() const = 0

Type of a SVM kernel. See :ref:`SVM::KernelTypes <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56>`. Default value is :ref:`SVM::RBF <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56a8e1f51ebeabd14cbd622f0f945831d4c>`.

.. index:: pair: function; getNu
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ad1f4a836048fd63bb2509e9eb70a520b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getNu() const = 0

Parameter :math:`\nu` of a SVM optimization problem. For :ref:`SVM::NU_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa50c44a78c88f3cde09599fba4347134d>`, :ref:`SVM::ONE_CLASS <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa6951543a0c14a17a7e16d212b1e7dcaf>` or :ref:`SVM::NU_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa5b4b7e4b189d47be1765b3c6b19f6c80>`. Default value is 0.



.. rubric:: See also:

:ref:`setNu <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aa19ae35bcf07f52a4009ceeca583b113>`

.. index:: pair: function; getP
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a3672572f111c14f7fd0d392db1709413:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	double
	getP() const = 0

Parameter :math:`\epsilon` of a SVM optimization problem. For :ref:`SVM::EPS_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fac6fd17721f6a7b5c10f3ae48b78ed944>`. Default value is 0.



.. rubric:: See also:

:ref:`setP <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aed346ecd8b15379717053254ae067d96>`

.. index:: pair: function; getSupportVectors
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2c3fb4b3c80b8fce0b8654f103339300:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getSupportVectors() const = 0

Retrieves all the support vectors.

The method returns all the support vectors as a floating-point matrix, where support vectors are stored as matrix rows.

.. index:: pair: function; getTermCriteria
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a11a5f5186656d7a45f7d70b85ad75e54:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`cv::TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`
	getTermCriteria() const = 0

Termination criteria of the iterative SVM training procedure which solves a partial case of constrained quadratic optimization problem. You can specify tolerance and/or the maximum number of iterations. Default value is ``:ref:`TermCriteria <doxid-df/d8a/classcv_1_1_term_criteria>`( :ref:`TermCriteria::MAX_ITER <doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a56ca2bc5cd06345060a1c1c66a8fc06e>` + :ref:`TermCriteria::EPS <doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 1000, FLT_EPSILON )``;



.. rubric:: See also:

:ref:`setTermCriteria <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6a86483c5518c332fedf6ec381a1daa7>`

.. index:: pair: function; getType
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a65c5ef227073493731ae8133bf372586:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getType() const = 0

Type of a SVM formulation. See :ref:`SVM::Types <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44f>`. Default value is :ref:`SVM::C_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa18157ccaec6a252b901cff6de285d608>`.



.. rubric:: See also:

:ref:`setType <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a0dd2c2aea178a3c9136eda6443d5bb7b>`

.. index:: pair: function; getUncompressedSupportVectors
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab7dc5b5cfb55e0452a96e69ae1f1d3c8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getUncompressedSupportVectors() const

Retrieves all the uncompressed support vectors of a linear SVM.

The method returns all the uncompressed support vectors of a linear SVM that the compressed support vector, used for prediction, was derived from. They are returned in a floating-point matrix, where the support vectors are stored as matrix rows.

.. index:: pair: function; setC
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1af9f543ef011db0ded375bb6f68984142:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setC(double val) = 0



.. rubric:: See also:

:ref:`getC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a77d9a35898cae44ac9071c4b35bc96a8>`

.. index:: pair: function; setClassWeights
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9cb80c3df6c2626b9836eaa0e0c58bf0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setClassWeights(const :ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`& val) = 0



.. rubric:: See also:

:ref:`getClassWeights <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1abca95c581c70bf46625d1b6fda723ea7>`

.. index:: pair: function; setCoef0
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1af0cd3684aabfacbd6749d8649d5971ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setCoef0(double val) = 0



.. rubric:: See also:

:ref:`getCoef0 <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a87ca59782f9bd71db63602fa439a791e>`

.. index:: pair: function; setCustomKernel
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a16a3ddfd7bad030268f024f5a6c561f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setCustomKernel(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Kernel<doxid-d2/d30/classcv_1_1ml_1_1_s_v_m_1_1_kernel>`>& _kernel) = 0

Initialize with custom kernel. See :ref:`SVM::Kernel <doxid-d2/d30/classcv_1_1ml_1_1_s_v_m_1_1_kernel>` class for implementation details

.. index:: pair: function; setDegree
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a756297055239fa33536c09b0f5721494:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setDegree(double val) = 0



.. rubric:: See also:

:ref:`getDegree <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a0e8b98786b1a14925cb571cf17b858e8>`

.. index:: pair: function; setGamma
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a1e15d72e1bbba64a9650ea65910135e7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setGamma(double val) = 0



.. rubric:: See also:

:ref:`getGamma <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a5af1a2ed6d9c0c9e4eae6b749ae61439>`

.. index:: pair: function; setKernel
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ad6f4f45983d06817b9782978ca0f6f6f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setKernel(int kernelType) = 0

Initialize with one of predefined kernels. See :ref:`SVM::KernelTypes <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aad7f1aaccced3c33bb256640910a0e56>`.

.. index:: pair: function; setNu
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aa19ae35bcf07f52a4009ceeca583b113:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setNu(double val) = 0



.. rubric:: See also:

:ref:`getNu <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ad1f4a836048fd63bb2509e9eb70a520b>`

.. index:: pair: function; setP
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1aed346ecd8b15379717053254ae067d96:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setP(double val) = 0



.. rubric:: See also:

:ref:`getP <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a3672572f111c14f7fd0d392db1709413>`

.. index:: pair: function; setTermCriteria
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6a86483c5518c332fedf6ec381a1daa7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setTermCriteria(const :ref:`cv::TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`& val) = 0



.. rubric:: See also:

:ref:`getTermCriteria <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a11a5f5186656d7a45f7d70b85ad75e54>`

.. index:: pair: function; setType
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a0dd2c2aea178a3c9136eda6443d5bb7b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setType(int val) = 0



.. rubric:: See also:

:ref:`getType <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a65c5ef227073493731ae8133bf372586>`

.. index:: pair: function; trainAuto
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a533d3d3f950fed3f75be0d8692eeff58:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	trainAuto(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
		int kFold = 10,
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` Cgrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`C<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a8eafc49ef685613b37e1b96351fd2bd1>`),
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` gammaGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`GAMMA<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a9b81805a0cd06dc59c354b0ad6fc9e9a>`),
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` pGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`P<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae14aa4668daf05a4ea6918b10806acd5>`),
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` nuGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`NU<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae0c1409f55f0158101fcc5e07f095605>`),
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` coeffGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`COEF<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae7112825b482d70cf5f04bc571f86e57>`),
		:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>` degreeGrid = :ref:`getDefaultGrid<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`(:ref:`DEGREE<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a61a897bf6519f4be834ce379a1543869>`),
		bool balanced = false
		) = 0

Trains an SVM with optimal parameters.

The method trains the SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree. Parameters are considered optimal when the cross-validation estimate of the test set error is minimal.

If there is no need to optimize a parameter, the corresponding grid step should be set to any value less than or equal to 1. For example, to avoid optimization in gamma, set ``gammaGrid.step = 0``, ``gammaGrid.minVal``, ``gamma_grid.maxVal`` as arbitrary numbers. In this case, the value ``Gamma`` is taken for gamma.

And, finally, if the optimization in a parameter is required but the corresponding grid is unknown, you may call the function :ref:`SVM::getDefaultGrid <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>`. To generate a grid, for example, for gamma, call ``SVM::getDefaultGrid(SVM::GAMMA)``.

This function works for the classification (:ref:`SVM::C_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa18157ccaec6a252b901cff6de285d608>` or :ref:`SVM::NU_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa50c44a78c88f3cde09599fba4347134d>`) as well as for the regression (:ref:`SVM::EPS_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fac6fd17721f6a7b5c10f3ae48b78ed944>` or :ref:`SVM::NU_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa5b4b7e4b189d47be1765b3c6b19f6c80>`). If it is :ref:`SVM::ONE_CLASS <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa6951543a0c14a17a7e16d212b1e7dcaf>`, no optimization is made and the usual SVM with parameters specified in params is executed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- data

		- the training data that can be constructed using :ref:`TrainData::create <doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a5e0c052f9aadce1f75cddbdbbf9c4f4d>` or :ref:`TrainData::loadFromCSV <doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab3264a32194126ff8d6821e76018cde3>`.

	*
		- kFold

		- Cross-validation parameter. The training set is divided into kFold subsets. One subset is used to test the model, the others form the train set. So, the SVM algorithm is executed kFold times.

	*
		- Cgrid

		- grid for C

	*
		- gammaGrid

		- grid for gamma

	*
		- pGrid

		- grid for p

	*
		- nuGrid

		- grid for nu

	*
		- coeffGrid

		- grid for coeff

	*
		- degreeGrid

		- grid for degree

	*
		- balanced

		- If true and the problem is 2-class classification then the method creates more balanced cross-validation subsets that is proportions between classes in subsets are close to such proportion in the whole train dataset.

.. index:: pair: function; trainAuto
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a106ab31b5f70613b6fb66f96d6bc5d53:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	trainAuto(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		int layout,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses,
		int kFold = 10,
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> Cgrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::C<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a8eafc49ef685613b37e1b96351fd2bd1>`),
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> gammaGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::GAMMA<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a9b81805a0cd06dc59c354b0ad6fc9e9a>`),
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> pGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::P<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae14aa4668daf05a4ea6918b10806acd5>`),
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> nuGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::NU<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae0c1409f55f0158101fcc5e07f095605>`),
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> coeffGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::COEF<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3ae7112825b482d70cf5f04bc571f86e57>`),
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`> degreeGrid = :ref:`SVM::getDefaultGridPtr<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02>`(:ref:`SVM::DEGREE<doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3a61a897bf6519f4be834ce379a1543869>`),
		bool balanced = false
		)

Trains an SVM with optimal parameters.

The method trains the SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree. Parameters are considered optimal when the cross-validation estimate of the test set error is minimal.

This function only makes use of :ref:`SVM::getDefaultGrid <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633>` for parameter optimization and thus only offers rudimentary parameter options.

This function works for the classification (:ref:`SVM::C_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa18157ccaec6a252b901cff6de285d608>` or :ref:`SVM::NU_SVC <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa50c44a78c88f3cde09599fba4347134d>`) as well as for the regression (:ref:`SVM::EPS_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fac6fd17721f6a7b5c10f3ae48b78ed944>` or :ref:`SVM::NU_SVR <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa5b4b7e4b189d47be1765b3c6b19f6c80>`). If it is :ref:`SVM::ONE_CLASS <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1ab4b93a4c42bbe213ffd9fb3832c6c44fa6951543a0c14a17a7e16d212b1e7dcaf>`, no optimization is made and the usual SVM with parameters specified in params is executed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- training samples

	*
		- layout

		- See :ref:`ml::SampleTypes <doxid-dd/ded/group__ml_1ga9c57a2b823008dda53d2c7f7059a8710>`.

	*
		- responses

		- vector of responses associated with the training samples.

	*
		- kFold

		- Cross-validation parameter. The training set is divided into kFold subsets. One subset is used to test the model, the others form the train set. So, the SVM algorithm is

	*
		- Cgrid

		- grid for C

	*
		- gammaGrid

		- grid for gamma

	*
		- pGrid

		- grid for p

	*
		- nuGrid

		- grid for nu

	*
		- coeffGrid

		- grid for coeff

	*
		- degreeGrid

		- grid for degree

	*
		- balanced

		- If true and the problem is 2-class classification then the method creates more balanced cross-validation subsets that is proportions between classes in subsets are close to such proportion in the whole train dataset.

.. index:: pair: function; create
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a2fe8b5bf897c34b8e911397b42e2cb44:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<SVM>
	create()

Creates empty model. Use :ref:`StatModel::train <doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>` to train the model. Since SVM has several parameters, you may want to find the best parameters for your problem, it can be done with :ref:`SVM::trainAuto <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a533d3d3f950fed3f75be0d8692eeff58>`.

.. index:: pair: function; getDefaultGrid
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a6b2f6c05fc049ef837999d51486aa633:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`
	getDefaultGrid(int param_id)

Generates a grid for SVM parameters.

The function generates a grid for the specified parameter of the SVM algorithm. The grid may be passed to the function :ref:`SVM::trainAuto <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a533d3d3f950fed3f75be0d8692eeff58>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- param_id

		- SVM parameters IDs that must be one of the :ref:`SVM::ParamTypes <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3>`. The grid is generated for the parameter with this ID.

.. index:: pair: function; getDefaultGridPtr
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a9290154cae38e7441b2d51b00d66fa02:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`ParamGrid<doxid-d0/deb/classcv_1_1ml_1_1_param_grid>`>
	getDefaultGridPtr(int param_id)

Generates a grid for SVM parameters.

The function generates a grid pointer for the specified parameter of the SVM algorithm. The grid may be passed to the function :ref:`SVM::trainAuto <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a533d3d3f950fed3f75be0d8692eeff58>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- param_id

		- SVM parameters IDs that must be one of the :ref:`SVM::ParamTypes <doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a32d2e8d21aaa4f58cdf9c27c102becf3>`. The grid is generated for the parameter with this ID.

.. index:: pair: function; load
.. _doxid-da/d05/classcv_1_1ml_1_1_s_v_m_1a7b05db6110aec2246f2b31363937539c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<SVM>
	load(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath)

Loads and creates a serialized svm from a file.

Use :ref:`SVM::save <doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>` to serialize and store an :ref:`SVM <doxid-da/d05/classcv_1_1ml_1_1_s_v_m>` to disk. Load the :ref:`SVM <doxid-da/d05/classcv_1_1ml_1_1_s_v_m>` from this file again, by calling this function with the path to the file.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filepath

		- path to serialized svm

