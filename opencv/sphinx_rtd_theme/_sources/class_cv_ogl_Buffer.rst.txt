.. index:: pair: class; cv::ogl::Buffer
.. _doxid-d5/de0/classcv_1_1ogl_1_1_buffer:

class cv::ogl::Buffer
=====================

.. toctree::
	:hidden:

	enum_cv_ogl_Buffer_Access.rst
	enum_cv_ogl_Buffer_Target.rst

Overview
~~~~~~~~

Smart pointer for OpenGL buffer object with reference counting. :ref:`More...<details-d5/de0/classcv_1_1ogl_1_1_buffer>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <opengl.hpp>
	
	class Buffer
	{
	public:
		// enums
	
		enum :ref:`Access<doxid-d2/d3c/group__core__opengl_1ga6b2a295dc840db8b6728db2f3a439d6e>`;
		enum :ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`;

		// construction
	
		:ref:`Buffer<doxid-d2/d3c/group__core__opengl_1gaf53dfd844f101cc0ba752bf6791890ac>`();
	
		:ref:`Buffer<doxid-d2/d3c/group__core__opengl_1ga94a62127a1690d9d2244463c88b0c200>`(
			int arows,
			int acols,
			int atype,
			unsigned int abufId,
			bool autoRelease = false
			);
	
		:ref:`Buffer<doxid-d2/d3c/group__core__opengl_1ga1598ae7fd0b6f35dee834b8cc6b0e73e>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` asize,
			int atype,
			unsigned int abufId,
			bool autoRelease = false
			);
	
		:ref:`Buffer<doxid-d2/d3c/group__core__opengl_1gafb20e60d0a89372f7403c04fcb5444ba>`(
			int arows,
			int acols,
			int atype,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);
	
		:ref:`Buffer<doxid-d2/d3c/group__core__opengl_1gaf981734a0b35b9bebf48b1edb65291b8>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` asize,
			int atype,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);
	
		:ref:`Buffer<doxid-d2/d3c/group__core__opengl_1ga7fce522179bc8984c50a3c8b3de3554c>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` arr,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);

		// methods
	
		void
		:ref:`bind<doxid-d2/d3c/group__core__opengl_1ga40fd03c02f051f780f518acb6cd9b407>`(:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target) const;
	
		unsigned int
		:ref:`bufId<doxid-d2/d3c/group__core__opengl_1gade340daf96dbd0649ae55d75d2572b01>`() const;
	
		int
		:target:`channels<doxid-d2/d3c/group__core__opengl_1gad124040681b94e05fc9030b087f49ab1>`() const;
	
		Buffer
		:ref:`clone<doxid-d2/d3c/group__core__opengl_1gaa0c8b81f03de2d386bce302ccd9bd431>`(
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			) const;
	
		int
		:target:`cols<doxid-d2/d3c/group__core__opengl_1ga66fc0bec98329378bdc5303654da5238>`() const;
	
		void
		:ref:`copyFrom<doxid-d2/d3c/group__core__opengl_1gadac4c20b821703eba30e68e3bba511a4>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` arr,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);
	
		void
		:ref:`copyFrom<doxid-d2/d3c/group__core__opengl_1gae9a8b9910ae4f914faa7ad740e3d084f>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` arr,
			:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);
	
		void
		:ref:`copyTo<doxid-d2/d3c/group__core__opengl_1ga3aab3acc565ead059f4da0efb943db0a>`(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` arr) const;
	
		void
		:ref:`copyTo<doxid-d2/d3c/group__core__opengl_1ga563a63b77bd1c01b1bed7ea7740391c1>`(
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` arr,
			:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream
			) const;
	
		void
		:ref:`create<doxid-d2/d3c/group__core__opengl_1ga1b9eb33a14f929c8554b4444198a1550>`(
			int arows,
			int acols,
			int atype,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);
	
		void
		:ref:`create<doxid-d2/d3c/group__core__opengl_1ga1ff29b1f3609d41cc350e5d407ddb9b1>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` asize,
			int atype,
			:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
			bool autoRelease = false
			);
	
		int
		:target:`depth<doxid-d2/d3c/group__core__opengl_1ga4e9be9d9d7a99d1c12d1469ab7c35eee>`() const;
	
		int
		:target:`elemSize<doxid-d2/d3c/group__core__opengl_1ga7865fed445e49726896502f25d77ca6c>`() const;
	
		int
		:target:`elemSize1<doxid-d2/d3c/group__core__opengl_1ga71e4454b2b0d3e1b4f29c958ab90f28d>`() const;
	
		bool
		:target:`empty<doxid-d2/d3c/group__core__opengl_1ga72643c086e437ab3b9f45483ab9efb1d>`() const;
	
		:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`
		:ref:`mapDevice<doxid-d2/d3c/group__core__opengl_1ga57864bec2d9dbef4edf25ea018db71d9>`();
	
		:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`
		:ref:`mapDevice<doxid-d2/d3c/group__core__opengl_1gabde1b6c518abefeee7cf878b066c65fb>`(:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream);
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`mapHost<doxid-d2/d3c/group__core__opengl_1ga3e14b8b56c501c5c90c79aca9c744d18>`(:ref:`Access<doxid-d2/d3c/group__core__opengl_1ga6b2a295dc840db8b6728db2f3a439d6e>` access);
	
		void
		:ref:`release<doxid-d2/d3c/group__core__opengl_1gaae8efb43bb0ece5deffc68308bb70b53>`();
	
		int
		:target:`rows<doxid-d2/d3c/group__core__opengl_1gaa4545b1d1ae73330ea6c84d42cf8b459>`() const;
	
		void
		:ref:`setAutoRelease<doxid-d2/d3c/group__core__opengl_1gaff9abd9111dfb14686a788eaaa94770a>`(bool flag);
	
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`size<doxid-d2/d3c/group__core__opengl_1gaf627f6025672dcd3f054667da63f6ae1>`() const;
	
		int
		:target:`type<doxid-d2/d3c/group__core__opengl_1gacdbc4c711bfbf0c8be705398e4ca583e>`() const;
	
		void
		:target:`unmapDevice<doxid-d2/d3c/group__core__opengl_1ga8cf37f57379ac901a5dd661c47f074bb>`();
	
		void
		:ref:`unmapDevice<doxid-d2/d3c/group__core__opengl_1ga34f6eaf46283eed7e6e9d780419b772d>`(:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream);
	
		void
		:ref:`unmapHost<doxid-d2/d3c/group__core__opengl_1ga86c5bdbf910b69d20773ac1228c2daf9>`();
	
		static
		void
		:ref:`unbind<doxid-d2/d3c/group__core__opengl_1ga89b3599430d2e7938997a8911b1d9408>`(:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target);
	};
.. _details-d5/de0/classcv_1_1ogl_1_1_buffer:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Smart pointer for OpenGL buffer object with reference counting.

:ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` Objects are OpenGL objects that store an array of unformatted memory allocated by the OpenGL context. These can be used to store vertex data, pixel data retrieved from images or the framebuffer, and a variety of other things.

:ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` has interface similar with :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` interface and represents 2D array memory.

:ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` supports memory transfers between host and device and also can be mapped to CUDA memory.

Construction
------------

.. index:: pair: function; Buffer
.. _doxid-d2/d3c/group__core__opengl_1gaf53dfd844f101cc0ba752bf6791890ac:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer()

The constructors.

Creates empty :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object, creates :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object from existed buffer ( abufId parameter), allocates memory for :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object or copies from host/device memory.

.. index:: pair: function; Buffer
.. _doxid-d2/d3c/group__core__opengl_1ga94a62127a1690d9d2244463c88b0c200:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer(
		int arows,
		int acols,
		int atype,
		unsigned int abufId,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arows

		- Number of rows in a 2D array.

	*
		- acols

		- Number of columns in a 2D array.

	*
		- atype

		- Array type ( CV_8UC1, ..., CV_64FC4 ). See :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` for details.

	*
		- abufId

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object name.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; Buffer
.. _doxid-d2/d3c/group__core__opengl_1ga1598ae7fd0b6f35dee834b8cc6b0e73e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` asize,
		int atype,
		unsigned int abufId,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- asize

		- 2D array size.

	*
		- atype

		- Array type ( CV_8UC1, ..., CV_64FC4 ). See :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` for details.

	*
		- abufId

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object name.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; Buffer
.. _doxid-d2/d3c/group__core__opengl_1gafb20e60d0a89372f7403c04fcb5444ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer(
		int arows,
		int acols,
		int atype,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arows

		- Number of rows in a 2D array.

	*
		- acols

		- Number of columns in a 2D array.

	*
		- atype

		- Array type ( CV_8UC1, ..., CV_64FC4 ). See :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` for details.

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; Buffer
.. _doxid-d2/d3c/group__core__opengl_1gaf981734a0b35b9bebf48b1edb65291b8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` asize,
		int atype,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- asize

		- 2D array size.

	*
		- atype

		- Array type ( CV_8UC1, ..., CV_64FC4 ). See :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` for details.

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; Buffer
.. _doxid-d2/d3c/group__core__opengl_1ga7fce522179bc8984c50a3c8b3de3554c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` arr,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array (host or device memory, it can be :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`, :ref:`cuda::GpuMat <doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>` or std::vector ).

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

Methods
-------

.. index:: pair: function; bind
.. _doxid-d2/d3c/group__core__opengl_1ga40fd03c02f051f780f518acb6cd9b407:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	bind(:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target) const

Binds OpenGL buffer to the specified buffer binding point.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- Binding point. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

.. index:: pair: function; bufId
.. _doxid-d2/d3c/group__core__opengl_1gade340daf96dbd0649ae55d75d2572b01:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned int
	bufId() const

get OpenGL opject id

.. index:: pair: function; clone
.. _doxid-d2/d3c/group__core__opengl_1gaa0c8b81f03de2d386bce302ccd9bd431:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Buffer
	clone(
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		) const

Creates a full copy of the buffer object and the underlying data.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage for destination buffer.

	*
		- autoRelease

		- Auto release mode for destination buffer.

.. index:: pair: function; copyFrom
.. _doxid-d2/d3c/group__core__opengl_1gadac4c20b821703eba30e68e3bba511a4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyFrom(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` arr,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

Copies from host/device memory to OpenGL buffer.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array (host or device memory, it can be :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`, :ref:`cuda::GpuMat <doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>` or std::vector ).

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; copyFrom
.. _doxid-d2/d3c/group__core__opengl_1gae9a8b9910ae4f914faa7ad740e3d084f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyFrom(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` arr,
		:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; copyTo
.. _doxid-d2/d3c/group__core__opengl_1ga3aab3acc565ead059f4da0efb943db0a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` arr) const

Copies from OpenGL buffer to host/device memory or another OpenGL buffer object.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Destination array (host or device memory, can be :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`, :ref:`cuda::GpuMat <doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`, std::vector or :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`).

.. index:: pair: function; copyTo
.. _doxid-d2/d3c/group__core__opengl_1ga563a63b77bd1c01b1bed7ea7740391c1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` arr,
		:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream
		) const

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; create
.. _doxid-d2/d3c/group__core__opengl_1ga1b9eb33a14f929c8554b4444198a1550:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		int arows,
		int acols,
		int atype,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

Allocates memory for :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arows

		- Number of rows in a 2D array.

	*
		- acols

		- Number of columns in a 2D array.

	*
		- atype

		- Array type ( CV_8UC1, ..., CV_64FC4 ). See :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` for details.

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; create
.. _doxid-d2/d3c/group__core__opengl_1ga1ff29b1f3609d41cc350e5d407ddb9b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` asize,
		int atype,
		:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target = :ref:`ARRAY_BUFFER<doxid-d2/d3c/group__core__opengl_1gga830568a629457171cb07918537ec66bea62a4126c42da95e41facc4f84475f44a>`,
		bool autoRelease = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- asize

		- 2D array size.

	*
		- atype

		- Array type ( CV_8UC1, ..., CV_64FC4 ). See :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` for details.

	*
		- target

		- :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` usage. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

	*
		- autoRelease

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; mapDevice
.. _doxid-d2/d3c/group__core__opengl_1ga57864bec2d9dbef4edf25ea018db71d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`
	mapDevice()

map to device memory (blocking)

.. index:: pair: function; mapDevice
.. _doxid-d2/d3c/group__core__opengl_1gabde1b6c518abefeee7cf878b066c65fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`
	mapDevice(:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream)

Maps OpenGL buffer to CUDA device memory.

This operatation doesn't copy data. Several buffer objects can be mapped to CUDA memory at a time.

A mapped data store must be unmapped with :ref:`ogl::Buffer::unmapDevice <doxid-d2/d3c/group__core__opengl_1ga8cf37f57379ac901a5dd661c47f074bb>` before its buffer object is used.

.. index:: pair: function; mapHost
.. _doxid-d2/d3c/group__core__opengl_1ga3e14b8b56c501c5c90c79aca9c744d18:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	mapHost(:ref:`Access<doxid-d2/d3c/group__core__opengl_1ga6b2a295dc840db8b6728db2f3a439d6e>` access)

Maps OpenGL buffer to host memory.

mapHost maps to the client's address space the entire data store of the buffer object. The data can then be directly read and/or written relative to the returned pointer, depending on the specified access policy.

A mapped data store must be unmapped with :ref:`ogl::Buffer::unmapHost <doxid-d2/d3c/group__core__opengl_1ga86c5bdbf910b69d20773ac1228c2daf9>` before its buffer object is used.

This operation can lead to memory transfers between host and device.

Only one buffer object can be mapped at a time.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- access

		- Access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be :ref:`ogl::Buffer::READ_ONLY <doxid-d2/d3c/group__core__opengl_1gga6b2a295dc840db8b6728db2f3a439d6eaf1748d7175ce87c2b5b2be550bb7d4e6>`, :ref:`ogl::Buffer::WRITE_ONLY <doxid-d2/d3c/group__core__opengl_1gga6b2a295dc840db8b6728db2f3a439d6eadca1f60cf44ecc42163b5f03318abb77>` or :ref:`ogl::Buffer::READ_WRITE <doxid-d2/d3c/group__core__opengl_1gga6b2a295dc840db8b6728db2f3a439d6eaf254a35e198177eff9ecb1992ecf3e26>`.

.. index:: pair: function; release
.. _doxid-d2/d3c/group__core__opengl_1gaae8efb43bb0ece5deffc68308bb70b53:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	release()

Decrements the reference counter and destroys the buffer object if needed.

The function will call setAutoRelease(true) .

.. index:: pair: function; setAutoRelease
.. _doxid-d2/d3c/group__core__opengl_1gaff9abd9111dfb14686a788eaaa94770a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	setAutoRelease(bool flag)

Sets auto release mode.

The lifetime of the OpenGL object is tied to the lifetime of the context. If OpenGL context was bound to a window it could be released at any time (user can close a window). If object's destructor is called after destruction of the context it will cause an error. Thus :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` doesn't destroy OpenGL object in destructor by default (all OpenGL resources will be released with OpenGL context). This function can force :ref:`ogl::Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` destructor to destroy OpenGL object.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- flag

		- Auto release mode (if true, release will be called in object's destructor).

.. index:: pair: function; unmapDevice
.. _doxid-d2/d3c/group__core__opengl_1ga34f6eaf46283eed7e6e9d780419b772d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	unmapDevice(:ref:`cuda::Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream)

Unmaps OpenGL buffer.

.. index:: pair: function; unmapHost
.. _doxid-d2/d3c/group__core__opengl_1ga86c5bdbf910b69d20773ac1228c2daf9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	unmapHost()

Unmaps OpenGL buffer.

.. index:: pair: function; unbind
.. _doxid-d2/d3c/group__core__opengl_1ga89b3599430d2e7938997a8911b1d9408:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	unbind(:ref:`Target<doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>` target)

Unbind any buffers from the specified binding point.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- Binding point. See :ref:`cv::ogl::Buffer::Target <doxid-d2/d3c/group__core__opengl_1ga830568a629457171cb07918537ec66be>`.

