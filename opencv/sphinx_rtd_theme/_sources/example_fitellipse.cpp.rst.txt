.. index:: pair: example; fitellipse.cpp
.. _doxid-de/dc7/fitellipse_8cpp-example:

fitellipse.cpp
==============

An example using the fitEllipse technique

.. ref-code-block:: cpp

	/********************************************************************************
	*
	*
	*  This program is demonstration for ellipse fitting. Program finds
	*  contours and approximate it by ellipses.
	*
	*  Trackbar specify threshold parametr.
	*
	*  White lines is contours. Red lines is fitting ellipses.
	*
	*
	*  Autor:  Denis Burenkov.
	*
	*
	*
	********************************************************************************/
	#include "opencv2/imgproc.hpp"
	#include "opencv2/imgcodecs.hpp"
	#include "opencv2/highgui.hpp"
	#include <iostream>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	
	static void help()
	{
	    cout <<
	        "\nThis program is demonstration for ellipse fitting. The program finds\n"
	        "contours and approximate it by ellipses.\n"
	        "Call:\n"
	        "./fitellipse [image_name -- Default ../data/stuff.jpg]\n" << endl;
	}
	
	int sliderPos = 70;
	
	:ref:`Mat <doxid-db/de6/classcv_1_1_mat>` image;
	
	void processImage(int, void*);
	
	int main( int argc, char** argv )
	{
	    :ref:`cv::CommandLineParser <doxid-da/dd8/classcv_1_1_command_line_parser>` parser(argc, argv,
	        "{help h||}{@image|../data/stuff.jpg|}"
	    );
	    if (parser.has("help"))
	    {
	        help();
	        return 0;
	    }
	    string filename = parser.get<string>("@image");
	    image = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`(filename, 0);
	    if( image.empty() )
	    {
	        cout << "Couldn't open image " << filename << "\n";
	        return 0;
	    }
	
	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("source", image);
	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("result", 1);
	
	    // Create toolbars. HighGUI use.
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`( "threshold", "result", &sliderPos, 255, processImage );
	    processImage(0, 0);
	
	    // Wait for a key stroke; the same function arranges events processing
	    :ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`();
	    return 0;
	}
	
	// Define trackbar callback functon. This function find contours,
	// draw it and approximate it by ellipses.
	void processImage(int /*h*/, void*)
	{
	    vector<vector<Point> > contours;
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` bimage = image >= sliderPos;
	
	    :ref:`findContours <doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`(bimage, contours, :ref:`RETR_LIST <doxid-d3/dc0/group__imgproc__shape_1gga819779b9857cc2f8601e6526a3a5bc71a48b9c2cb1056f775ae50bb68288b875e>`, :ref:`CHAIN_APPROX_NONE <doxid-d3/dc0/group__imgproc__shape_1gga4303f45752694956374734a03c54d5ffaf7d9a3582d021d5dadcb0e37201a62f8>`);
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` cimage = :ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`(bimage.:ref:`size <doxid-db/de6/classcv_1_1_mat_1a146f8e8dda07d1365a575ab83d9828d1>`(), :ref:`CV_8UC3 <doxid-d1/d1b/group__core__hal__interface_1ga88c4cd9de76f678f33928ef1e3f96047>`);
	
	    for(size_t i = 0; i < contours.size(); i++)
	    {
	        size_t count = contours[i].size();
	        if( count < 6 )
	            continue;
	
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` pointsf;
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`(contours[i]).:ref:`convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`(pointsf, :ref:`CV_32F <doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`);
	        :ref:`RotatedRect <doxid-d5/d1f/classcv_1_1_rotated_rect>` box = :ref:`fitEllipse <doxid-d3/dc0/group__imgproc__shape_1gaf259efaad93098103d6c27b9e4900ffa>`(pointsf);
	
	        if( :ref:`MAX <doxid-db/de0/group__core__utils_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f>`(box.:ref:`size <doxid-d5/d1f/classcv_1_1_rotated_rect_1a68ac6414ed3233245175e2c4f3b2bbfb>`.:ref:`width <doxid-dd/da0/classcv_1_1_size___1abfe0367b32c407ddccf5ddf92667c73d>`, box.:ref:`size <doxid-d5/d1f/classcv_1_1_rotated_rect_1a68ac6414ed3233245175e2c4f3b2bbfb>`.:ref:`height <doxid-dd/da0/classcv_1_1_size___1a1d289dce6b5d8006a54f3ee0259fc545>`) > :ref:`MIN <doxid-db/de0/group__core__utils_1ga3acffbd305ee72dcd4593c0d8af64a4f>`(box.:ref:`size <doxid-d5/d1f/classcv_1_1_rotated_rect_1a68ac6414ed3233245175e2c4f3b2bbfb>`.:ref:`width <doxid-dd/da0/classcv_1_1_size___1abfe0367b32c407ddccf5ddf92667c73d>`, box.:ref:`size <doxid-d5/d1f/classcv_1_1_rotated_rect_1a68ac6414ed3233245175e2c4f3b2bbfb>`.:ref:`height <doxid-dd/da0/classcv_1_1_size___1a1d289dce6b5d8006a54f3ee0259fc545>`)*30 )
	            continue;
	        :ref:`drawContours <doxid-d6/d6e/group__imgproc__draw_1ga746c0625f1781f1ffc9056259103edbc>`(cimage, contours, (int)i, :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255), 1, 8);
	
	        :ref:`ellipse <doxid-d6/d6e/group__imgproc__draw_1ga28b2267d35786f5f890ca167236cbc69>`(cimage, box, :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(0,0,255), 1, :ref:`LINE_AA <doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a85fdabe5335c9e6656563dfd7c94fb4f>`);
	        :ref:`ellipse <doxid-d6/d6e/group__imgproc__draw_1ga28b2267d35786f5f890ca167236cbc69>`(cimage, box.:ref:`center <doxid-d5/d1f/classcv_1_1_rotated_rect_1a60d492fbe1e457e2cdeac5160ed81422>`, box.:ref:`size <doxid-d5/d1f/classcv_1_1_rotated_rect_1a68ac6414ed3233245175e2c4f3b2bbfb>`*0.5f, box.:ref:`angle <doxid-d5/d1f/classcv_1_1_rotated_rect_1a6bd95a46f9ab83a4f384a4d4845e6332>`, 0, 360, Scalar(0,255,255), 1, :ref:`LINE_AA <doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a85fdabe5335c9e6656563dfd7c94fb4f>`);
	        Point2f vtx[4];
	        box.:ref:`points <doxid-d5/d1f/classcv_1_1_rotated_rect_1a69d648b086f26dbce0029facae9bfb2d>`(vtx);
	        for( int j = 0; j < 4; j++ )
	            :ref:`line <doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2>`(cimage, vtx[j], vtx[(j+1)%4], :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(0,255,0), 1, :ref:`LINE_AA <doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a85fdabe5335c9e6656563dfd7c94fb4f>`);
	    }
	
	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("result", cimage);
	}
