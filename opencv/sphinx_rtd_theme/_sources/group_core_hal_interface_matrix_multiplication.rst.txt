.. index:: pair: group; Matrix multiplication
.. _doxid-d2/dab/group__core__hal__interface__matrix__multiplication:

Matrix multiplication
=====================

.. toctree::
	:hidden:

The function performs generalized matrix multiplication similar to the gemm functions in BLAS level 3: :math:`D = \alpha*AB+\beta*C`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- pointer to input :math:`M\times N` matrix :math:`A` or :math:`A^T` stored in row major order.

	*
		- src1_step

		- number of bytes between two consequent rows of matrix :math:`A` or :math:`A^T`.

	*
		- src2

		- pointer to input :math:`N\times K` matrix :math:`B` or :math:`B^T` stored in row major order.

	*
		- src2_step

		- number of bytes between two consequent rows of matrix :math:`B` or :math:`B^T`.

	*
		- alpha

		- :math:`\alpha` multiplier before :math:`AB`

	*
		- src3

		- pointer to input :math:`M\times K` matrix :math:`C` or :math:`C^T` stored in row major order.

	*
		- src3_step

		- number of bytes between two consequent rows of matrix :math:`C` or :math:`C^T`.

	*
		- beta

		- :math:`\beta` multiplier before :math:`C`

	*
		- dst

		- pointer to input :math:`M\times K` matrix :math:`D` stored in row major order.

	*
		- dst_step

		- number of bytes between two consequent rows of matrix :math:`D`.

	*
		- m

		- number of rows in matrix :math:`A` or :math:`A^T`, equals to number of rows in matrix :math:`D`

	*
		- n

		- number of columns in matrix :math:`A` or :math:`A^T`

	*
		- k

		- number of columns in matrix :math:`B` or :math:`B^T`, equals to number of columns in matrix :math:`D`

	*
		- flags

		- algorithm options (combination of CV_HAL_GEMM_1_T, ...).


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// global functions

	int
	:target:`hal_ni_gemm32f<doxid-d2/dab/group__core__hal__interface__matrix__multiplication_1ga15368479bd35519af51a945942c0931b>`(
		const float* src1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src1_step,
		const float* src2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src2_step,
		float alpha,
		const float* src3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src3_step,
		float beta,
		float* dst,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int m,
		int n,
		int k,
		int flags
		);

	int
	:target:`hal_ni_gemm32fc<doxid-d2/dab/group__core__hal__interface__matrix__multiplication_1gaba7435e9b30ae0b316463765c839aa81>`(
		const float* src1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src1_step,
		const float* src2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src2_step,
		float alpha,
		const float* src3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src3_step,
		float beta,
		float* dst,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int m,
		int n,
		int k,
		int flags
		);

	int
	:target:`hal_ni_gemm64f<doxid-d2/dab/group__core__hal__interface__matrix__multiplication_1gaea5d366c9248462ac0c41b883ae112ac>`(
		const double* src1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src1_step,
		const double* src2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src2_step,
		double alpha,
		const double* src3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src3_step,
		double beta,
		double* dst,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int m,
		int n,
		int k,
		int flags
		);

	int
	:target:`hal_ni_gemm64fc<doxid-d2/dab/group__core__hal__interface__matrix__multiplication_1ga13b238279569437ac66d4399c18c04f0>`(
		const double* src1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src1_step,
		const double* src2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src2_step,
		double alpha,
		const double* src3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src3_step,
		double beta,
		double* dst,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int m,
		int n,
		int k,
		int flags
		);

