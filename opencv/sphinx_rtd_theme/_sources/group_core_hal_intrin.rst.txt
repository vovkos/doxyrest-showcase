.. index:: pair: group; Universal intrinsics
.. _doxid-df/d91/group__core__hal__intrin:

Universal intrinsics
====================

.. toctree::
	:hidden:

	group_core_hal_intrin_impl.rst
	struct_cv_v_reg.rst

Overview
~~~~~~~~

"Universal intrinsics" is a types and functions set intended to simplify vectorization of code on different platforms. :ref:`More...<details-df/d91/group__core__hal__intrin>`

|	:ref:`Private implementation helpers<doxid-dd/d96/group__core__hal__intrin__impl>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, 4> :ref:`cv::v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, 2> :ref:`cv::v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<short, 8> :ref:`cv::v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, 4> :ref:`cv::v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`, 2> :ref:`cv::v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`, 16> :ref:`cv::v_int8x16<doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`, 8> :ref:`cv::v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<unsigned, 4> :ref:`cv::v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>`, 2> :ref:`cv::v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`;
	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`, 16> :ref:`cv::v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`;

	// structs

	template <
		typename _Tp,
		int n
		>
	struct :ref:`cv::v_reg<doxid-d1/d69/structcv_1_1v__reg>`;

	// global variables

	static const unsigned char :target:`cv::popCountTable<doxid-df/d91/group__core__hal__intrin_1ga1b8c26bf1cd9b597cdb9f20501a72f76>`[];

	// global functions

	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_setzero_u8<doxid-df/d91/group__core__hal__intrin_1ga2d5c93ea0a0fde5cd451d309e241cbc0>`();

	:ref:`v_int8x16<doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>`
	:target:`cv::v_setzero_s8<doxid-df/d91/group__core__hal__intrin_1ga21358685333860b45e1bded220ae7db9>`();

	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_setzero_u16<doxid-df/d91/group__core__hal__intrin_1gaad235e4e15c473055f42502d9bd6c6b6>`();

	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_setzero_s16<doxid-df/d91/group__core__hal__intrin_1gac12b4fdfed1380212c6267220a587819>`();

	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_setzero_u32<doxid-df/d91/group__core__hal__intrin_1ga64b9d89770c61189ee94b50490be290f>`();

	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_setzero_s32<doxid-df/d91/group__core__hal__intrin_1gadeed3bcb2a2c2afa0b6398c80be990b7>`();

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	:target:`cv::v_setzero_f32<doxid-df/d91/group__core__hal__intrin_1gad7cf5116faa00f5389226c29618bf0ba>`();

	:ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`
	:target:`cv::v_setzero_f64<doxid-df/d91/group__core__hal__intrin_1ga8dc60cdfa49e685e10731c0729dcab8a>`();

	:ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`
	:target:`cv::v_setzero_u64<doxid-df/d91/group__core__hal__intrin_1gaf1eb4e08a9234bffffefd5ab0e8884e8>`();

	:ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`
	:target:`cv::v_setzero_s64<doxid-df/d91/group__core__hal__intrin_1gad117e31c45604f1caf54f97a32c4a604>`();

	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_setall_u8<doxid-df/d91/group__core__hal__intrin_1ga9b60dc95a5c7d27ef8fe876e88d7a75c>`(:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>` val);

	:ref:`v_int8x16<doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>`
	:target:`cv::v_setall_s8<doxid-df/d91/group__core__hal__intrin_1ga8595edc0055bc74e5ddd24c269efced5>`(:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>` val);

	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_setall_u16<doxid-df/d91/group__core__hal__intrin_1gaf835c6f6fb1199b4e0d51450b1287be7>`(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` val);

	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_setall_s16<doxid-df/d91/group__core__hal__intrin_1gadc4a18bd77755893b6f30191a12412e0>`(short val);

	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_setall_u32<doxid-df/d91/group__core__hal__intrin_1gaae37de475214f1461ec66090fee2fa9f>`(unsigned val);

	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_setall_s32<doxid-df/d91/group__core__hal__intrin_1gadca754bb3ca01900243f154ee793d992>`(int val);

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	:target:`cv::v_setall_f32<doxid-df/d91/group__core__hal__intrin_1ga8c2f09f96f217de7e7cefa666e36c053>`(float val);

	:ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`
	:target:`cv::v_setall_f64<doxid-df/d91/group__core__hal__intrin_1ga30c70e8156b87130124791f8b9aa57fe>`(double val);

	:ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`
	:target:`cv::v_setall_u64<doxid-df/d91/group__core__hal__intrin_1gad6a20a93404788b07822393392675ed6>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` val);

	:ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`
	:target:`cv::v_setall_s64<doxid-df/d91/group__core__hal__intrin_1gac912dbc355464868b16480b629e6fd06>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` val);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_reinterpret_as_u8<doxid-df/d91/group__core__hal__intrin_1ga88ac0fcdb1b01535c0717803d0b28970>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_int8x16<doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>`
	:target:`cv::v_reinterpret_as_s8<doxid-df/d91/group__core__hal__intrin_1gaac3a25fcb7126fdb2261a7653839d284>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_reinterpret_as_u16<doxid-df/d91/group__core__hal__intrin_1gaa640240ce0cdb2b3f6c72a86e475b381>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_reinterpret_as_s16<doxid-df/d91/group__core__hal__intrin_1ga7fe109438c045faffecb911d1172304b>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_reinterpret_as_u32<doxid-df/d91/group__core__hal__intrin_1ga221a7371e610fb4a9c847aab6d149cf4>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_reinterpret_as_s32<doxid-df/d91/group__core__hal__intrin_1gacf6e6ec7b9e3eeba11b7793a9f6dd6aa>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	:target:`cv::v_reinterpret_as_f32<doxid-df/d91/group__core__hal__intrin_1gadd1d3630aefc75dbea57c6a9c3804075>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`
	:target:`cv::v_reinterpret_as_f64<doxid-df/d91/group__core__hal__intrin_1ga037d56acab4b1694076122c9e4032ac9>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`
	:target:`cv::v_reinterpret_as_u64<doxid-df/d91/group__core__hal__intrin_1ga55afb8985078282c46838cba28b3b4bb>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <
		typename _Tp0,
		int n0
		>
	:ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`
	:target:`cv::v_reinterpret_as_s64<doxid-df/d91/group__core__hal__intrin_1ga1bbbcd681fd39e74b56f7613d616957a>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp0, n0>& a);

	template <int n>
	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_shl<doxid-df/d91/group__core__hal__intrin_1ga2dea0f02b4b0ef4e7e9c143123f340ad>`(const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a);

	template <int n>
	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_shl<doxid-df/d91/group__core__hal__intrin_1ga87af7cd5f07b2a24f2cf369864bd72c7>`(const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a);

	template <int n>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_shl<doxid-df/d91/group__core__hal__intrin_1ga2bf99731b20fddbdd881e4bc7f34ea40>`(const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a);

	template <int n>
	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_shl<doxid-df/d91/group__core__hal__intrin_1ga5244ee58e810b41a52ac3a884c87f208>`(const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a);

	template <int n>
	:ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`
	:target:`cv::v_shl<doxid-df/d91/group__core__hal__intrin_1ga476af01757bc5e20f3a19d7fcb670adb>`(const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a);

	template <int n>
	:ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`
	:target:`cv::v_shl<doxid-df/d91/group__core__hal__intrin_1ga7130e8834005b5dda77f185511d3e1d5>`(const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a);

	template <int n>
	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_shr<doxid-df/d91/group__core__hal__intrin_1ga7f715071dfdeececaaf339706111cfe2>`(const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a);

	template <int n>
	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_shr<doxid-df/d91/group__core__hal__intrin_1ga23073a3d33587d3c24b90388b6a144da>`(const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a);

	template <int n>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_shr<doxid-df/d91/group__core__hal__intrin_1gae48b805da017d433cf4d1ffe92b0147f>`(const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a);

	template <int n>
	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_shr<doxid-df/d91/group__core__hal__intrin_1gaea21cf6b9e8b3478da39eb8f28549f6b>`(const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a);

	template <int n>
	:ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`
	:target:`cv::v_shr<doxid-df/d91/group__core__hal__intrin_1ga2322158031eaf56c2bd8a7ac609b3a5f>`(const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a);

	template <int n>
	:ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`
	:target:`cv::v_shr<doxid-df/d91/group__core__hal__intrin_1gaa88233e943e689e251f5e3f4f7a8591e>`(const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a);

	template <int n>
	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_rshr<doxid-df/d91/group__core__hal__intrin_1ga29f6b0c4fde67f24af7c37b8f9413473>`(const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a);

	template <int n>
	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_rshr<doxid-df/d91/group__core__hal__intrin_1ga66c4c8ede309982cfd5419621de12818>`(const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a);

	template <int n>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_rshr<doxid-df/d91/group__core__hal__intrin_1gab66bace59269af1b9fd52247f84433ec>`(const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a);

	template <int n>
	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_rshr<doxid-df/d91/group__core__hal__intrin_1gabf4a3b2cbebfd3b646d3cf64afff9357>`(const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a);

	template <int n>
	:ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`
	:target:`cv::v_rshr<doxid-df/d91/group__core__hal__intrin_1ga69195bd639cb5906ba5a12ce87cb66a6>`(const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a);

	template <int n>
	:ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`
	:target:`cv::v_rshr<doxid-df/d91/group__core__hal__intrin_1ga653feff62619b12d62fa650c0442cdee>`(const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a);

	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_pack<doxid-df/d91/group__core__hal__intrin_1gaf47a1974cbc3cf8e3947a53de492fe40>`(
		const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a,
		const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& b
		);

	:ref:`v_int8x16<doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>`
	:target:`cv::v_pack<doxid-df/d91/group__core__hal__intrin_1gae1e48820bce73eba35f4f0a91bb70ea6>`(
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& b
		);

	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_pack<doxid-df/d91/group__core__hal__intrin_1ga00201c70821278428435924171e0e832>`(
		const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a,
		const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& b
		);

	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_pack<doxid-df/d91/group__core__hal__intrin_1gad55572ccae49d0285e6339bba5a6a157>`(
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& b
		);

	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_pack<doxid-df/d91/group__core__hal__intrin_1ga70e5bc4fe6718bf6a5f111cdbbbd8b4c>`(
		const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a,
		const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& b
		);

	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_pack<doxid-df/d91/group__core__hal__intrin_1ga8c3ebbb81328db364fc0b4d01759f1a1>`(
		const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a,
		const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& b
		);

	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_pack_u<doxid-df/d91/group__core__hal__intrin_1ga5a12123d2a134b4e7816f2b6d5847ed6>`(
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& b
		);

	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_pack_u<doxid-df/d91/group__core__hal__intrin_1ga29ca7d08e0e8e7a397b7458d53607480>`(
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& b
		);

	template <int n>
	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_rshr_pack<doxid-df/d91/group__core__hal__intrin_1ga8af7fdb576ad3c06ae25d7f90862ca33>`(
		const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a,
		const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& b
		);

	template <int n>
	:ref:`v_int8x16<doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>`
	:target:`cv::v_rshr_pack<doxid-df/d91/group__core__hal__intrin_1ga69f7e1e9f005c7bdd57c1988c6e7706c>`(
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& b
		);

	template <int n>
	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_rshr_pack<doxid-df/d91/group__core__hal__intrin_1ga753dd3d0fc5aa4624c6464a488cfa824>`(
		const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a,
		const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& b
		);

	template <int n>
	:ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`
	:target:`cv::v_rshr_pack<doxid-df/d91/group__core__hal__intrin_1gad53cebe1426166fa9459a9baf39b8ce7>`(
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& b
		);

	template <int n>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:target:`cv::v_rshr_pack<doxid-df/d91/group__core__hal__intrin_1ga37082180d2b2548de935b6b457b43fab>`(
		const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a,
		const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& b
		);

	template <int n>
	:ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`
	:target:`cv::v_rshr_pack<doxid-df/d91/group__core__hal__intrin_1ga7706da8f4370d9b12347da90542dce35>`(
		const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a,
		const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& b
		);

	template <int n>
	:ref:`v_uint8x16<doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`
	:target:`cv::v_rshr_pack_u<doxid-df/d91/group__core__hal__intrin_1gac7351e0a20afe2d2d98dd1d5d0fefe7d>`(
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& b
		);

	template <int n>
	:ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`
	:target:`cv::v_rshr_pack_u<doxid-df/d91/group__core__hal__intrin_1gabde1391878a56d3ae808d755636c6dbf>`(
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& b
		);

	void
	:target:`cv::v_pack_store<doxid-df/d91/group__core__hal__intrin_1ga88461727ec3673cf0bf4ee1cf27036fb>`(
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* ptr,
		const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a
		);

	void
	:target:`cv::v_pack_store<doxid-df/d91/group__core__hal__intrin_1gae63cbd8ecdab4d86ac1758e3f3022620>`(
		:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`* ptr,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a
		);

	void
	:target:`cv::v_pack_store<doxid-df/d91/group__core__hal__intrin_1ga7ff068d486bb6e06c7e2da8bfadbafff>`(
		:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`* ptr,
		const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a
		);

	void
	:target:`cv::v_pack_store<doxid-df/d91/group__core__hal__intrin_1gad6183385837a20c30c9a010ca5439f49>`(
		short* ptr,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a
		);

	void
	:target:`cv::v_pack_store<doxid-df/d91/group__core__hal__intrin_1ga69df6f7661a6a6ffb65992fd947243e9>`(
		unsigned* ptr,
		const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a
		);

	void
	:target:`cv::v_pack_store<doxid-df/d91/group__core__hal__intrin_1ga67800893f2f63f9135b880d15d3c2ef9>`(
		int* ptr,
		const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a
		);

	void
	:target:`cv::v_pack_u_store<doxid-df/d91/group__core__hal__intrin_1ga5b6a7cfb95b87348e00f6882cb0e49e3>`(
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* ptr,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a
		);

	void
	:target:`cv::v_pack_u_store<doxid-df/d91/group__core__hal__intrin_1gac66b36e1f1b29c1f8b2d3b12ba6fb0f8>`(
		:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`* ptr,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_store<doxid-df/d91/group__core__hal__intrin_1gadab8b491c8d30c77a2fafaaeab9119b1>`(
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* ptr,
		const :ref:`v_uint16x8<doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_store<doxid-df/d91/group__core__hal__intrin_1ga4365a18161747c0013c8938e7a33c659>`(
		:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`* ptr,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_store<doxid-df/d91/group__core__hal__intrin_1ga837cb74d665e83581b5982ddba818ae6>`(
		:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`* ptr,
		const :ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_store<doxid-df/d91/group__core__hal__intrin_1gaa1ec329ee45eebbd3014f7d058d54e8b>`(
		short* ptr,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_store<doxid-df/d91/group__core__hal__intrin_1ga1c0d8fbd48b9729e97068a30b6031311>`(
		unsigned* ptr,
		const :ref:`v_uint64x2<doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_store<doxid-df/d91/group__core__hal__intrin_1ga3f857b949a7dad44a0435590e24a00fc>`(
		int* ptr,
		const :ref:`v_int64x2<doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_u_store<doxid-df/d91/group__core__hal__intrin_1ga8137abf4157a3f5a378b8f595b58dea5>`(
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* ptr,
		const :ref:`v_int16x8<doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>`& a
		);

	template <int n>
	void
	:target:`cv::v_rshr_pack_u_store<doxid-df/d91/group__core__hal__intrin_1gaab6a66c4f61f749ba2bd63f207a3b792>`(
		:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`* ptr,
		const :ref:`v_int32x4<doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`& a
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator!=<doxid-df/d91/group__core__hal__intrin_1gacfed05378c432f84c46e3a2e80e321e8>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator&<doxid-df/d91/group__core__hal__intrin_1ga6957bb19d507c40a6915ddd22d1249c4>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator&=<doxid-df/d91/group__core__hal__intrin_1ga1c36b9548296f20d3382808c82122ca3>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator*<doxid-df/d91/group__core__hal__intrin_1ga902a09c161f9ef0eedcf1414e58f3672>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator*=<doxid-df/d91/group__core__hal__intrin_1gae3a0bf0a7afa1dd2d3f4390220fd0934>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator+<doxid-df/d91/group__core__hal__intrin_1ga9d4eb51e74c435420686e52b53d915a0>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator+=<doxid-df/d91/group__core__hal__intrin_1ga1decb593e539029ba11c6fcc72c969cd>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator-<doxid-df/d91/group__core__hal__intrin_1ga657904e675f20f6b84d7821cf1b02576>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator-=<doxid-df/d91/group__core__hal__intrin_1gad5ad464e467385af9b4183e1689fa720>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator::<doxid-df/d91/group__core__hal__intrin_1ga73e22cc4b1f8a3132abc30677ed531c4>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator::=<doxid-df/d91/group__core__hal__intrin_1ga310bc17ff9e6db416c9c633bb61ee868>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator<<doxid-df/d91/group__core__hal__intrin_1ga0e974552b8acc15ea6043ec9cb3a2f44>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator<<<doxid-df/d91/group__core__hal__intrin_1gacef821c50106276406bf4bc1cd7a059a>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		int imm
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator<=<doxid-df/d91/group__core__hal__intrin_1ga02b1b9dcfcefdfb34dadf0cd35ba61a3>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator==<doxid-df/d91/group__core__hal__intrin_1ga265437a0b1f89bf8f23abfc7a4851fe7>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator><doxid-df/d91/group__core__hal__intrin_1ga53b1ef03655e02eabf49238a5927f384>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator>=<doxid-df/d91/group__core__hal__intrin_1ga192e4da1bbd83aa64b5e2e86dba8f9e9>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator>><doxid-df/d91/group__core__hal__intrin_1gaae9733cc2b353835e1a8723dcfc171e2>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		int imm
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator^<doxid-df/d91/group__core__hal__intrin_1ga7c759a9f061d90e4c6dac60aa74fb986>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator^=<doxid-df/d91/group__core__hal__intrin_1gadd58fb6b2720ce0e68d9665ddee198f9>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator|<doxid-df/d91/group__core__hal__intrin_1ga08e30fb25ccd0e148c11eab8f9b0daaf>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>&
	:target:`cv::operator|=<doxid-df/d91/group__core__hal__intrin_1gaad93bb02fc5c3c4c248b1dbb8a7348fe>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::operator~<doxid-df/d91/group__core__hal__intrin_1ga6238e30480f4a52f3b30d5c21bbbadb1>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::abs_type, n>
	:ref:`cv::v_abs<doxid-df/d91/group__core__hal__intrin_1gad6e7f35742fc27354596e5629a628e3f>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::abs_type, n>
	:ref:`cv::v_absdiff<doxid-df/d91/group__core__hal__intrin_1gad56841cd7dd8e5c63c57ccdffa6fc3ed>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	:ref:`cv::v_absdiff<doxid-df/d91/group__core__hal__intrin_1ga1767714db3dcadb809e7186824764796>`(
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& a,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& b
		);

	:ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`
	:ref:`cv::v_absdiff<doxid-df/d91/group__core__hal__intrin_1gaedcb5a63b95a345d4da1d278b4617547>`(
		const :ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`& a,
		const :ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_add_wrap<doxid-df/d91/group__core__hal__intrin_1ga6093cc09443c787193a24ffe4b0b4dcd>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_ceil<doxid-df/d91/group__core__hal__intrin_1ga283ec6202df8a72d8172572443167f24>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_ceil<doxid-df/d91/group__core__hal__intrin_1gabaff4ee2a4fab7233fd421a7236ac5c6>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	:ref:`cv::v_ceil<doxid-df/d91/group__core__hal__intrin_1ga39fece1cbdac6895c5494ee2c9c097e9>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a);

	template <
		typename _Tp,
		int n
		>
	bool
	:ref:`cv::v_check_all<doxid-df/d91/group__core__hal__intrin_1gad4a93a907f23a3e9028172d09b4822f8>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	bool
	:ref:`cv::v_check_any<doxid-df/d91/group__core__hal__intrin_1ga03282d0b7c46861f1ecc7329a40634b3>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_combine_high<doxid-df/d91/group__core__hal__intrin_1ga283fe35828ae5c7f94059f2f559d454f>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_combine_low<doxid-df/d91/group__core__hal__intrin_1ga9f131fad2680116c10c35b6ee660b190>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>
	:ref:`cv::v_cvt_f32<doxid-df/d91/group__core__hal__intrin_1ga140593e5fc051e291791899ad50976a6>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>
	:ref:`cv::v_cvt_f64<doxid-df/d91/group__core__hal__intrin_1ga141c997ee79d87823fdcbb497ecb24f9>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>
	:ref:`cv::v_cvt_f64<doxid-df/d91/group__core__hal__intrin_1gab419b9546c2d6a95a38b60e2ea32ccc5>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n*2>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>
	:ref:`cv::v_dotprod<doxid-df/d91/group__core__hal__intrin_1gac6b7cdd3073adba3d9f3e0a2bc986809>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_expand<doxid-df/d91/group__core__hal__intrin_1ga9eff16d8d73c6ce81122b3cd44a99627>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& b0,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& b1
		);

	template <
		int s,
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_extract<doxid-df/d91/group__core__hal__intrin_1gacd055cfd7ccb94ebb468a8b79afc819a>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_floor<doxid-df/d91/group__core__hal__intrin_1ga7f6956596736cde768aa97cb9962b6d7>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_floor<doxid-df/d91/group__core__hal__intrin_1ga6c95c494decd17905b43d47028370817>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	:ref:`cv::v_floor<doxid-df/d91/group__core__hal__intrin_1ga1fba933e3c72033673dfcd70cd345f15>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_invsqrt<doxid-df/d91/group__core__hal__intrin_1ga0e9fa03f4014a0c0756de5d94f895112>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, V_SIMD128Traits<_Tp>::nlanes>
	:ref:`cv::v_load<doxid-df/d91/group__core__hal__intrin_1gab665a422a89da120e3bd4bb76172437c>`(const _Tp* ptr);

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, V_SIMD128Traits<_Tp>::nlanes>
	:ref:`cv::v_load_aligned<doxid-df/d91/group__core__hal__intrin_1ga155f00bafccd79d36863c5546c786c0e>`(const _Tp* ptr);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_load_deinterleave<doxid-df/d91/group__core__hal__intrin_1gafd8e859406c66bb5b7d901473265119b>`(
		const _Tp* ptr,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_load_deinterleave<doxid-df/d91/group__core__hal__intrin_1gab364b341969494d47e6a1b173fc46658>`(
		const _Tp* ptr,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_load_deinterleave<doxid-df/d91/group__core__hal__intrin_1ga7f1f0d87d6210547bb125fd349a10e5d>`(
		const _Tp* ptr,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& d
		);

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, V_SIMD128Traits<_Tp>::nlanes/2>
	:ref:`cv::v_load_expand<doxid-df/d91/group__core__hal__intrin_1ga05eb0581c713f32d2b64ffca86cea594>`(const _Tp* ptr);

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::q_type, V_SIMD128Traits<_Tp>::nlanes/4>
	:ref:`cv::v_load_expand_q<doxid-df/d91/group__core__hal__intrin_1gad618a34ccc2f1b3ec9ad4af831cba9ba>`(const _Tp* ptr);

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, V_SIMD128Traits<_Tp>::nlanes>
	:ref:`cv::v_load_halves<doxid-df/d91/group__core__hal__intrin_1ga01e081b8017d09b6e5b31279b0d30a71>`(
		const _Tp* loptr,
		const _Tp* hiptr
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_magnitude<doxid-df/d91/group__core__hal__intrin_1ga3f3a248d8a6078b73be09883bf2a5108>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	:ref:`cv::v_matmul<doxid-df/d91/group__core__hal__intrin_1ga4f53754058cbcd76b98db8525cefe869>`(
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& v,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m0,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m1,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m2,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m3
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_max<doxid-df/d91/group__core__hal__intrin_1ga69ee01fdfd9d57067e2a967db5e8bd45>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_min<doxid-df/d91/group__core__hal__intrin_1gaf7cf8641863e5a56b642a363f539c836>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_mul_expand<doxid-df/d91/group__core__hal__intrin_1ga8bb510213a964865860cccf6b1ee42bb>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& c,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& d
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_muladd<doxid-df/d91/group__core__hal__intrin_1ga60cf2ff062954f9ae2775f42de5ebf76>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	:ref:`cv::v_popcount<doxid-df/d91/group__core__hal__intrin_1ga278f608463cbdd4d4a45f965e23b9ae5>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_recombine<doxid-df/d91/group__core__hal__intrin_1ga75a3cb5bb426fc37d9ed2f10e8706997>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& low,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& high
		);

	template <
		typename _Tp,
		int n
		>
	_Tp
	:ref:`cv::v_reduce_max<doxid-df/d91/group__core__hal__intrin_1gac2b31f9518aea3ea0f113c7ff163d2a9>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	_Tp
	:ref:`cv::v_reduce_min<doxid-df/d91/group__core__hal__intrin_1ga7ce066014a77ab386204688b30281c71>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	V_TypeTraits<_Tp>::sum_type
	:ref:`cv::v_reduce_sum<doxid-df/d91/group__core__hal__intrin_1ga38ffc32658e008a149f259b1637cb0be>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	:ref:`cv::v_reduce_sum4<doxid-df/d91/group__core__hal__intrin_1gafec4c6d20a68eba604ec1a480f457f34>`(
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& a,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& b,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& c,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& d
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_round<doxid-df/d91/group__core__hal__intrin_1ga4cfd2e478d7c585fc77c64cc4fde66ae>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_round<doxid-df/d91/group__core__hal__intrin_1ga10e8380a09690c5c2de2dafbf1b8e326>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	:ref:`cv::v_round<doxid-df/d91/group__core__hal__intrin_1ga97980b3f12acb3028558e51231240a4e>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_select<doxid-df/d91/group__core__hal__intrin_1gae440a2520e3b796df0be134e2fe6a7b0>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& mask,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	int
	:ref:`cv::v_signmask<doxid-df/d91/group__core__hal__intrin_1ga191a888185e95f221c8203884e8d66ec>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_sqr_magnitude<doxid-df/d91/group__core__hal__intrin_1ga51374eab401b0ef5b5efc8c31ea777c6>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_sqrt<doxid-df/d91/group__core__hal__intrin_1ga47a7b59cada76a8cdf6bcc4367a976ca>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store<doxid-df/d91/group__core__hal__intrin_1ga275dfa9c8935f5e9a1031121cde460f4>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store_aligned<doxid-df/d91/group__core__hal__intrin_1gaf2733377e1bc373657d0e203028c74fc>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store_high<doxid-df/d91/group__core__hal__intrin_1ga1665beb52f3824499d3b6b1203890ada>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store_interleave<doxid-df/d91/group__core__hal__intrin_1ga990eea5fa77df9a033ef1e21c3c6f16e>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store_interleave<doxid-df/d91/group__core__hal__intrin_1ga22d97d35e5e6f8d0f792d01c2dcea7f5>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store_interleave<doxid-df/d91/group__core__hal__intrin_1ga0e803cc8edeef3c7c4e0367274e9ffa3>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& d
		);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_store_low<doxid-df/d91/group__core__hal__intrin_1ga3cb662d09e37eae1e73043badee69612>`(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	:ref:`cv::v_sub_wrap<doxid-df/d91/group__core__hal__intrin_1gac5b977f61fae36e84e7468923e0a40f9>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		);

	template <typename _Tp>
	void
	:ref:`cv::v_transpose4x4<doxid-df/d91/group__core__hal__intrin_1gaf8bdcd643d22a9fc9c3f0ed202535928>`(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a0,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a1,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a2,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a3,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b0,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b1,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b2,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b3
		);

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_trunc<doxid-df/d91/group__core__hal__intrin_1ga160cc085612d8c36bdd0395df4b2333a>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	:ref:`cv::v_trunc<doxid-df/d91/group__core__hal__intrin_1ga4b773c451fe920bfdf3c773860c9f334>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a);

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	:ref:`cv::v_trunc<doxid-df/d91/group__core__hal__intrin_1gae347e0d88bcb9168f55043419b1ad6ec>`(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a);

	template <
		typename _Tp,
		int n
		>
	void
	:ref:`cv::v_zip<doxid-df/d91/group__core__hal__intrin_1ga19ef6326f6c132d75c62391cedf7c187>`(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a0,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a1,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b0,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b1
		);

	// macros

	#define :ref:`CV_SIMD128<doxid-df/d91/group__core__hal__intrin_1gad953f90887e4eb9a12657e6a1f86d01b>`
	#define :ref:`CV_SIMD128_64F<doxid-df/d91/group__core__hal__intrin_1ga51529fa7aa602e84255f9e68efa5ed01>`

.. _details-df/d91/group__core__hal__intrin:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

"Universal intrinsics" is a types and functions set intended to simplify vectorization of code on different platforms. Currently there are two supported SIMD extensions: **SSE/SSE2** on x86 architectures and **NEON** on ARM architectures, both allow working with 128 bit registers containing packed values of different types. In case when there is no SIMD extension available during compilation, fallback C++ implementation of intrinsics will be chosen and code will work as expected although it could be slower.

.. rubric:: Types

There are several types representing 128-bit register as a vector of packed values, each type is implemented as a structure based on a one SIMD register.

* :ref:`cv::v_uint8x16 <doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>` and :ref:`cv::v_int8x16 <doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede>` : sixteen 8-bit integer values (unsigned/signed) - char

* :ref:`cv::v_uint16x8 <doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b>` and :ref:`cv::v_int16x8 <doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce>` : eight 16-bit integer values (unsigned/signed) - short

* :ref:`cv::v_uint32x4 <doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>` and :ref:`cv::v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>` : four 32-bit integer values (unsgined/signed) - int

* :ref:`cv::v_uint64x2 <doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>` and :ref:`cv::v_int64x2 <doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc>` : two 64-bit integer values (unsigned/signed) - int64

* :ref:`cv::v_float32x4 <doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>` : four 32-bit floating point values (signed) - float

* :ref:`cv::v_float64x2 <doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>` : two 64-bit floating point valies (signed) - double

:ref:`cv::v_float64x2 <doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>` is not implemented in NEON variant, if you want to use this type, don't forget to check the CV_SIMD128_64F preprocessor definition:

.. ref-code-block:: cpp

	#if CV_SIMD128_64F
	//...
	#endif



.. rubric:: Load and store operations

These operations allow to set contents of the register explicitly or by loading it from some memory block and to save contents of the register to memory block.

* Constructors: :ref:`from memory <doxid-d1/d69/structcv_1_1v__reg_1a9791853618ca6b65cc0868de0f117728>`, :ref:`from two values <doxid-d1/d69/structcv_1_1v__reg_1adcf59996aa232fa9b65dc3ce295d5183>`, ...

* Other create methods: :ref:`v_setall_s8 <doxid-df/d91/group__core__hal__intrin_1ga8595edc0055bc74e5ddd24c269efced5>`, :ref:`v_setall_u8 <doxid-df/d91/group__core__hal__intrin_1ga9b60dc95a5c7d27ef8fe876e88d7a75c>`, ..., :ref:`v_setzero_u8 <doxid-df/d91/group__core__hal__intrin_1ga2d5c93ea0a0fde5cd451d309e241cbc0>`, :ref:`v_setzero_s8 <doxid-df/d91/group__core__hal__intrin_1ga21358685333860b45e1bded220ae7db9>`, ...

* Memory operations: :ref:`v_load <doxid-df/d91/group__core__hal__intrin_1gab665a422a89da120e3bd4bb76172437c>`, :ref:`v_load_aligned <doxid-df/d91/group__core__hal__intrin_1ga155f00bafccd79d36863c5546c786c0e>`, :ref:`v_load_halves <doxid-df/d91/group__core__hal__intrin_1ga01e081b8017d09b6e5b31279b0d30a71>`, :ref:`v_store <doxid-df/d91/group__core__hal__intrin_1ga275dfa9c8935f5e9a1031121cde460f4>`, :ref:`v_store_aligned <doxid-df/d91/group__core__hal__intrin_1gaf2733377e1bc373657d0e203028c74fc>`, :ref:`v_store_high <doxid-df/d91/group__core__hal__intrin_1ga1665beb52f3824499d3b6b1203890ada>`, :ref:`v_store_low <doxid-df/d91/group__core__hal__intrin_1ga3cb662d09e37eae1e73043badee69612>`

.. rubric:: Value reordering

These operations allow to reorder or recombine elements in one or multiple vectors.

* Interleave, deinterleave (2, 3 and 4 channels): :ref:`v_load_deinterleave <doxid-df/d91/group__core__hal__intrin_1gafd8e859406c66bb5b7d901473265119b>`, :ref:`v_store_interleave <doxid-df/d91/group__core__hal__intrin_1ga990eea5fa77df9a033ef1e21c3c6f16e>`

* Expand: :ref:`v_load_expand <doxid-df/d91/group__core__hal__intrin_1ga05eb0581c713f32d2b64ffca86cea594>`, :ref:`v_load_expand_q <doxid-df/d91/group__core__hal__intrin_1gad618a34ccc2f1b3ec9ad4af831cba9ba>`, :ref:`v_expand <doxid-df/d91/group__core__hal__intrin_1ga9eff16d8d73c6ce81122b3cd44a99627>`

* Pack: :ref:`v_pack <doxid-df/d91/group__core__hal__intrin_1gaf47a1974cbc3cf8e3947a53de492fe40>`, :ref:`v_pack_u <doxid-df/d91/group__core__hal__intrin_1ga5a12123d2a134b4e7816f2b6d5847ed6>`, :ref:`v_rshr_pack <doxid-df/d91/group__core__hal__intrin_1ga8af7fdb576ad3c06ae25d7f90862ca33>`, :ref:`v_rshr_pack_u <doxid-df/d91/group__core__hal__intrin_1gac7351e0a20afe2d2d98dd1d5d0fefe7d>`, :ref:`v_pack_store <doxid-df/d91/group__core__hal__intrin_1ga88461727ec3673cf0bf4ee1cf27036fb>`, :ref:`v_pack_u_store <doxid-df/d91/group__core__hal__intrin_1ga5b6a7cfb95b87348e00f6882cb0e49e3>`, :ref:`v_rshr_pack_store <doxid-df/d91/group__core__hal__intrin_1gadab8b491c8d30c77a2fafaaeab9119b1>`, :ref:`v_rshr_pack_u_store <doxid-df/d91/group__core__hal__intrin_1ga8137abf4157a3f5a378b8f595b58dea5>`

* Recombine: :ref:`v_zip <doxid-df/d91/group__core__hal__intrin_1ga19ef6326f6c132d75c62391cedf7c187>`, :ref:`v_recombine <doxid-df/d91/group__core__hal__intrin_1ga75a3cb5bb426fc37d9ed2f10e8706997>`, :ref:`v_combine_low <doxid-df/d91/group__core__hal__intrin_1ga9f131fad2680116c10c35b6ee660b190>`, :ref:`v_combine_high <doxid-df/d91/group__core__hal__intrin_1ga283fe35828ae5c7f94059f2f559d454f>`

* Extract: :ref:`v_extract <doxid-df/d91/group__core__hal__intrin_1gacd055cfd7ccb94ebb468a8b79afc819a>`

.. rubric:: Arithmetic, bitwise and comparison operations

Element-wise binary and unary operations.

* Arithmetics: :ref:`+ <doxid-df/d91/group__core__hal__intrin_1ga9d4eb51e74c435420686e52b53d915a0>`, :ref:`- <doxid-df/d91/group__core__hal__intrin_1ga657904e675f20f6b84d7821cf1b02576>`, :ref:`\* <doxid-df/d91/group__core__hal__intrin_1ga902a09c161f9ef0eedcf1414e58f3672>`, :ref:`/ <doxid-df/d91/group__core__hal__intrin_1ga73e22cc4b1f8a3132abc30677ed531c4>`, :ref:`v_mul_expand <doxid-df/d91/group__core__hal__intrin_1ga8bb510213a964865860cccf6b1ee42bb>`

* Non-saturating arithmetics: :ref:`v_add_wrap <doxid-df/d91/group__core__hal__intrin_1ga6093cc09443c787193a24ffe4b0b4dcd>`, :ref:`v_sub_wrap <doxid-df/d91/group__core__hal__intrin_1gac5b977f61fae36e84e7468923e0a40f9>`

* Bitwise shifts: :ref:`\<\< <doxid-df/d91/group__core__hal__intrin_1gacef821c50106276406bf4bc1cd7a059a>`, :ref:`>> <doxid-df/d91/group__core__hal__intrin_1gaae9733cc2b353835e1a8723dcfc171e2>`, :ref:`v_shl <doxid-df/d91/group__core__hal__intrin_1ga2dea0f02b4b0ef4e7e9c143123f340ad>`, :ref:`v_shr <doxid-df/d91/group__core__hal__intrin_1ga7f715071dfdeececaaf339706111cfe2>`

* Bitwise logic: :ref:`& <doxid-df/d91/group__core__hal__intrin_1ga6957bb19d507c40a6915ddd22d1249c4>`, :ref:`\| <doxid-df/d91/group__core__hal__intrin_1ga08e30fb25ccd0e148c11eab8f9b0daaf>`, :ref:`^ <doxid-df/d91/group__core__hal__intrin_1ga7c759a9f061d90e4c6dac60aa74fb986>`, :ref:`~ <doxid-df/d91/group__core__hal__intrin_1ga6238e30480f4a52f3b30d5c21bbbadb1>`

* Comparison: :ref:`> <doxid-df/d91/group__core__hal__intrin_1ga53b1ef03655e02eabf49238a5927f384>`, :ref:`>= <doxid-df/d91/group__core__hal__intrin_1ga192e4da1bbd83aa64b5e2e86dba8f9e9>`, :ref:`\< <doxid-df/d91/group__core__hal__intrin_1ga0e974552b8acc15ea6043ec9cb3a2f44>`, :ref:`\<= <doxid-df/d91/group__core__hal__intrin_1ga02b1b9dcfcefdfb34dadf0cd35ba61a3>`, :ref:`== <doxid-df/d91/group__core__hal__intrin_1ga265437a0b1f89bf8f23abfc7a4851fe7>`, :ref:`!= <doxid-df/d91/group__core__hal__intrin_1gacfed05378c432f84c46e3a2e80e321e8>`

* min/max: :ref:`v_min <doxid-df/d91/group__core__hal__intrin_1gaf7cf8641863e5a56b642a363f539c836>`, :ref:`v_max <doxid-df/d91/group__core__hal__intrin_1ga69ee01fdfd9d57067e2a967db5e8bd45>`

.. rubric:: Reduce and mask

Most of these operations return only one value.

* Reduce: :ref:`v_reduce_min <doxid-df/d91/group__core__hal__intrin_1ga7ce066014a77ab386204688b30281c71>`, :ref:`v_reduce_max <doxid-df/d91/group__core__hal__intrin_1gac2b31f9518aea3ea0f113c7ff163d2a9>`, :ref:`v_reduce_sum <doxid-df/d91/group__core__hal__intrin_1ga38ffc32658e008a149f259b1637cb0be>`, :ref:`v_popcount <doxid-df/d91/group__core__hal__intrin_1ga278f608463cbdd4d4a45f965e23b9ae5>`

* Mask: :ref:`v_signmask <doxid-df/d91/group__core__hal__intrin_1ga191a888185e95f221c8203884e8d66ec>`, :ref:`v_check_all <doxid-df/d91/group__core__hal__intrin_1gad4a93a907f23a3e9028172d09b4822f8>`, :ref:`v_check_any <doxid-df/d91/group__core__hal__intrin_1ga03282d0b7c46861f1ecc7329a40634b3>`, :ref:`v_select <doxid-df/d91/group__core__hal__intrin_1gae440a2520e3b796df0be134e2fe6a7b0>`

.. rubric:: Other math

* Some frequent operations: :ref:`v_sqrt <doxid-df/d91/group__core__hal__intrin_1ga47a7b59cada76a8cdf6bcc4367a976ca>`, :ref:`v_invsqrt <doxid-df/d91/group__core__hal__intrin_1ga0e9fa03f4014a0c0756de5d94f895112>`, :ref:`v_magnitude <doxid-df/d91/group__core__hal__intrin_1ga3f3a248d8a6078b73be09883bf2a5108>`, :ref:`v_sqr_magnitude <doxid-df/d91/group__core__hal__intrin_1ga51374eab401b0ef5b5efc8c31ea777c6>`

* Absolute values: :ref:`v_abs <doxid-df/d91/group__core__hal__intrin_1gad6e7f35742fc27354596e5629a628e3f>`, :ref:`v_absdiff <doxid-df/d91/group__core__hal__intrin_1gad56841cd7dd8e5c63c57ccdffa6fc3ed>`

.. rubric:: Conversions

Different type conversions and casts:

* Rounding: :ref:`v_round <doxid-df/d91/group__core__hal__intrin_1ga4cfd2e478d7c585fc77c64cc4fde66ae>`, :ref:`v_floor <doxid-df/d91/group__core__hal__intrin_1ga7f6956596736cde768aa97cb9962b6d7>`, :ref:`v_ceil <doxid-df/d91/group__core__hal__intrin_1ga283ec6202df8a72d8172572443167f24>`, :ref:`v_trunc <doxid-df/d91/group__core__hal__intrin_1ga160cc085612d8c36bdd0395df4b2333a>`,

* To float: :ref:`v_cvt_f32 <doxid-df/d91/group__core__hal__intrin_1ga140593e5fc051e291791899ad50976a6>`, :ref:`v_cvt_f64 <doxid-df/d91/group__core__hal__intrin_1ga141c997ee79d87823fdcbb497ecb24f9>`

* Reinterpret: :ref:`v_reinterpret_as_u8 <doxid-df/d91/group__core__hal__intrin_1ga88ac0fcdb1b01535c0717803d0b28970>`, :ref:`v_reinterpret_as_s8 <doxid-df/d91/group__core__hal__intrin_1gaac3a25fcb7126fdb2261a7653839d284>`, ...

.. rubric:: Matrix operations

In these operations vectors represent matrix rows/columns: :ref:`v_dotprod <doxid-df/d91/group__core__hal__intrin_1gac6b7cdd3073adba3d9f3e0a2bc986809>`, :ref:`v_matmul <doxid-df/d91/group__core__hal__intrin_1ga4f53754058cbcd76b98db8525cefe869>`, :ref:`v_transpose4x4 <doxid-df/d91/group__core__hal__intrin_1gaf8bdcd643d22a9fc9c3f0ed202535928>`

.. rubric:: Usability

Most operations are implemented only for some subset of the available types, following matrices shows the applicability of different operations to the types.

Regular integers:

==================  =========  ========  =========  ========  =========  ========  
Operations\Types    uint 8x16  int 8x16  uint 16x8  int 16x8  uint 32x4  int 32x4  
==================  =========  ========  =========  ========  =========  ========  

load, store         x          x         x          x         x          x         
interleave          x          x         x          x         x          x         
expand              x          x         x          x         x          x         
expand_q            x          x                                                   
add, sub            x          x         x          x         x          x         
add_wrap, sub_wrap  x          x         x          x                              
mul                                      x          x         x          x         
mul_expand                               x          x         x                    
compare             x          x         x          x         x          x         
shift                                    x          x         x          x         
dotprod                                             x                              
logical             x          x         x          x         x          x         
min, max            x          x         x          x         x          x         
absdiff             x          x         x          x         x          x         
reduce                                                        x          x         
mask                x          x         x          x         x          x         
pack                x          x         x          x         x          x         
pack_u              x                    x                                         
unpack              x          x         x          x         x          x         
extract             x          x         x          x         x          x         
cvt_flt32                                                                x         
cvt_flt64                                                                x         
transpose4x4                                                  x          x         
==================  =========  ========  =========  ========  =========  ========  

Big integers:

================  =========  ========  
Operations\Types  uint 64x2  int 64x2  
================  =========  ========  

load, store       x          x         
add, sub          x          x         
shift             x          x         
logical           x          x         
extract           x          x         
================  =========  ========  

Floating point:

================  ==========  ==========  
Operations\Types  float 32x4  float 64x2  
================  ==========  ==========  

load, store       x           x           
interleave        x                       
add, sub          x           x           
mul               x           x           
div               x           x           
compare           x           x           
min, max          x           x           
absdiff           x           x           
reduce            x                       
mask              x           x           
unpack            x           x           
cvt_flt32                     x           
cvt_flt64         x                       
sqrt, abs         x           x           
float math        x           x           
transpose4x4      x                       
================  ==========  ==========

Typedefs
--------

.. index:: pair: typedef; v_float32x4
.. _doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, 4> cv::v_float32x4

Four 32-bit floating point values (single precision)

.. index:: pair: typedef; v_float64x2
.. _doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, 2> cv::v_float64x2

Two 64-bit floating point values (double precision)

.. index:: pair: typedef; v_int16x8
.. _doxid-df/d91/group__core__hal__intrin_1gafa3957262ebae34fbdf7f4b930cb79ce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<short, 8> cv::v_int16x8

Eight 16-bit signed integer values.

.. index:: pair: typedef; v_int32x4
.. _doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, 4> cv::v_int32x4

Four 32-bit signed integer values.

.. index:: pair: typedef; v_int64x2
.. _doxid-df/d91/group__core__hal__intrin_1ga2448f821d0ad63d2f5f1b474e26aa0bc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`, 2> cv::v_int64x2

Two 64-bit signed integer values.

.. index:: pair: typedef; v_int8x16
.. _doxid-df/d91/group__core__hal__intrin_1ga133cdb895b50ab8825455da083d83ede:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`, 16> cv::v_int8x16

Sixteen 8-bit signed integer values.

.. index:: pair: typedef; v_uint16x8
.. _doxid-df/d91/group__core__hal__intrin_1ga33d7ee7873e4a78bcdf0b0beea3e061b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`, 8> cv::v_uint16x8

Eight 16-bit unsigned integer values.

.. index:: pair: typedef; v_uint32x4
.. _doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<unsigned, 4> cv::v_uint32x4

Four 32-bit unsigned integer values.

.. index:: pair: typedef; v_uint64x2
.. _doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>`, 2> cv::v_uint64x2

Two 64-bit unsigned integer values.

.. index:: pair: typedef; v_uint8x16
.. _doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`, 16> cv::v_uint8x16

Sixteen 8-bit unsigned integer values.

Global Functions
----------------

.. index:: pair: function; operator!=
.. _doxid-df/d91/group__core__hal__intrin_1gacfed05378c432f84c46e3a2e80e321e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator!=(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Not equal comparison.

For all types except 64-bit integer values.

.. index:: pair: function; operator&
.. _doxid-df/d91/group__core__hal__intrin_1ga6957bb19d507c40a6915ddd22d1249c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator&(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Bitwise AND.

Only for integer types.

.. index:: pair: function; operator*
.. _doxid-df/d91/group__core__hal__intrin_1ga902a09c161f9ef0eedcf1414e58f3672:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator*(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Multiply values.

For 16- and 32-bit integer types and floating types.

.. index:: pair: function; operator+
.. _doxid-df/d91/group__core__hal__intrin_1ga9d4eb51e74c435420686e52b53d915a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator+(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Add values.

For all types.

.. index:: pair: function; operator-
.. _doxid-df/d91/group__core__hal__intrin_1ga657904e675f20f6b84d7821cf1b02576:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator-(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Subtract values.

For all types.

.. index:: pair: function; operator/
.. _doxid-df/d91/group__core__hal__intrin_1ga73e22cc4b1f8a3132abc30677ed531c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator::(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Divide values.

For floating types only.

.. index:: pair: function; operator<
.. _doxid-df/d91/group__core__hal__intrin_1ga0e974552b8acc15ea6043ec9cb3a2f44:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator<(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Less-than comparison.

For all types except 64-bit integer values.

.. index:: pair: function; operator<<
.. _doxid-df/d91/group__core__hal__intrin_1gacef821c50106276406bf4bc1cd7a059a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator<<(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		int imm
		)

Bitwise shift left.

For 16-, 32- and 64-bit integer values.

.. index:: pair: function; operator<=
.. _doxid-df/d91/group__core__hal__intrin_1ga02b1b9dcfcefdfb34dadf0cd35ba61a3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator<=(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Less-than or equal comparison.

For all types except 64-bit integer values.

.. index:: pair: function; operator==
.. _doxid-df/d91/group__core__hal__intrin_1ga265437a0b1f89bf8f23abfc7a4851fe7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator==(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Equal comparison.

For all types except 64-bit integer values.

.. index:: pair: function; operator>
.. _doxid-df/d91/group__core__hal__intrin_1ga53b1ef03655e02eabf49238a5927f384:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator>(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Greater-than comparison.

For all types except 64-bit integer values.

.. index:: pair: function; operator>=
.. _doxid-df/d91/group__core__hal__intrin_1ga192e4da1bbd83aa64b5e2e86dba8f9e9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator>=(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Greater-than or equal comparison.

For all types except 64-bit integer values.

.. index:: pair: function; operator>>
.. _doxid-df/d91/group__core__hal__intrin_1gaae9733cc2b353835e1a8723dcfc171e2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator>>(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		int imm
		)

Bitwise shift right.

For 16-, 32- and 64-bit integer values.

.. index:: pair: function; operator^
.. _doxid-df/d91/group__core__hal__intrin_1ga7c759a9f061d90e4c6dac60aa74fb986:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator^(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Bitwise XOR.

Only for integer types.

.. index:: pair: function; operator|
.. _doxid-df/d91/group__core__hal__intrin_1ga08e30fb25ccd0e148c11eab8f9b0daaf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator|(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Bitwise OR.

Only for integer types.

.. index:: pair: function; operator~
.. _doxid-df/d91/group__core__hal__intrin_1ga6238e30480f4a52f3b30d5c21bbbadb1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::operator~(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Bitwise NOT.

Only for integer types.

.. index:: pair: function; v_abs
.. _doxid-df/d91/group__core__hal__intrin_1gad6e7f35742fc27354596e5629a628e3f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::abs_type, n>
	cv::v_abs(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Absolute value of elements.

Only for floating point types.

.. index:: pair: function; v_absdiff
.. _doxid-df/d91/group__core__hal__intrin_1gad56841cd7dd8e5c63c57ccdffa6fc3ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::abs_type, n>
	cv::v_absdiff(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Absolute difference.

Returns :math:`|a - b|` converted to corresponding unsigned type. Example:

.. ref-code-block:: cpp

	:ref:`v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>` a, b; // {1, 2, 3, 4} and {4, 3, 2, 1}
	:ref:`v_uint32x4 <doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>` c = :ref:`v_absdiff <doxid-df/d91/group__core__hal__intrin_1gad56841cd7dd8e5c63c57ccdffa6fc3ed>`(a, b); // result is {3, 1, 1, 3}

For 8-, 16-, 32-bit integer source types.

.. index:: pair: function; v_absdiff
.. _doxid-df/d91/group__core__hal__intrin_1ga1767714db3dcadb809e7186824764796:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	cv::v_absdiff(
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& a,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& b
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

For 32-bit floating point values

.. index:: pair: function; v_absdiff
.. _doxid-df/d91/group__core__hal__intrin_1gaedcb5a63b95a345d4da1d278b4617547:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`
	cv::v_absdiff(
		const :ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`& a,
		const :ref:`v_float64x2<doxid-df/d91/group__core__hal__intrin_1gafc604f432c648ca88335be4fcc4de25d>`& b
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

For 64-bit floating point values

.. index:: pair: function; v_add_wrap
.. _doxid-df/d91/group__core__hal__intrin_1ga6093cc09443c787193a24ffe4b0b4dcd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_add_wrap(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Add values without saturation.

For 8- and 16-bit integer values.

.. index:: pair: function; v_ceil
.. _doxid-df/d91/group__core__hal__intrin_1ga283ec6202df8a72d8172572443167f24:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_ceil(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Ceil elements.

Only for floating point types.

.. index:: pair: function; v_ceil
.. _doxid-df/d91/group__core__hal__intrin_1gabaff4ee2a4fab7233fd421a7236ac5c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_ceil(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a)

Ceil.

Ceil each value. Input type is float vector ==> output type is int vector.

.. index:: pair: function; v_ceil
.. _doxid-df/d91/group__core__hal__intrin_1ga39fece1cbdac6895c5494ee2c9c097e9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	cv::v_ceil(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; v_check_all
.. _doxid-df/d91/group__core__hal__intrin_1gad4a93a907f23a3e9028172d09b4822f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	bool
	cv::v_check_all(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Check if all packed values are less than zero.

Unsigned values will be casted to signed: ``uchar 254 => char -2``. For all types except 64-bit.

.. index:: pair: function; v_check_any
.. _doxid-df/d91/group__core__hal__intrin_1ga03282d0b7c46861f1ecc7329a40634b3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	bool
	cv::v_check_any(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Check if any of packed values is less than zero.

Unsigned values will be casted to signed: ``uchar 254 => char -2``. For all types except 64-bit.

.. index:: pair: function; v_combine_high
.. _doxid-df/d91/group__core__hal__intrin_1ga283fe35828ae5c7f94059f2f559d454f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_combine_high(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Combine vector from last elements of two vectors.

Scheme:

.. ref-code-block:: cpp

	  {A1 A2 A3 A4}
	  {B1 B2 B3 B4}
	---------------
	  {A3 A4 B3 B4}

For all types except 64-bit.

.. index:: pair: function; v_combine_low
.. _doxid-df/d91/group__core__hal__intrin_1ga9f131fad2680116c10c35b6ee660b190:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_combine_low(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Combine vector from first elements of two vectors.

Scheme:

.. ref-code-block:: cpp

	  {A1 A2 A3 A4}
	  {B1 B2 B3 B4}
	---------------
	  {A1 A2 B1 B2}

For all types except 64-bit.

.. index:: pair: function; v_cvt_f32
.. _doxid-df/d91/group__core__hal__intrin_1ga140593e5fc051e291791899ad50976a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>
	cv::v_cvt_f32(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>& a)

Convert to float.

Supported input type is :ref:`cv::v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`.

.. index:: pair: function; v_cvt_f64
.. _doxid-df/d91/group__core__hal__intrin_1ga141c997ee79d87823fdcbb497ecb24f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>
	cv::v_cvt_f64(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>& a)

Convert to double.

Supported input type is :ref:`cv::v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`.

.. index:: pair: function; v_cvt_f64
.. _doxid-df/d91/group__core__hal__intrin_1gab419b9546c2d6a95a38b60e2ea32ccc5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>
	cv::v_cvt_f64(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n*2>& a)

Convert to double.

Supported input type is :ref:`cv::v_float32x4 <doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`.

.. index:: pair: function; v_dotprod
.. _doxid-df/d91/group__core__hal__intrin_1gac6b7cdd3073adba3d9f3e0a2bc986809:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>
	cv::v_dotprod(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Dot product of elements.

Multiply values in two registers and sum adjacent result pairs. Scheme:

.. ref-code-block:: cpp

	  {A1 A2 ...} // 16-bit
	x {B1 B2 ...} // 16-bit
	-------------
	{A1B1+A2B2 ...} // 32-bit

Implemented only for 16-bit signed source type (v_int16x8).

.. index:: pair: function; v_expand
.. _doxid-df/d91/group__core__hal__intrin_1ga9eff16d8d73c6ce81122b3cd44a99627:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_expand(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& b0,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& b1
		)

Expand values to the wider pack type.

Copy contents of register to two registers with 2x wider pack type. Scheme:

.. ref-code-block:: cpp

	 int32x4     int64x2 int64x2
	{A B C D} ==> {A B} , {C D}

.. index:: pair: function; v_extract
.. _doxid-df/d91/group__core__hal__intrin_1gacd055cfd7ccb94ebb468a8b79afc819a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		int s,
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_extract(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Vector extract.

Scheme:

.. ref-code-block:: cpp

	  {A1 A2 A3 A4}
	  {B1 B2 B3 B4}
	========================
	shift = 1  {A2 A3 A4 B1}
	shift = 2  {A3 A4 B1 B2}
	shift = 3  {A4 B1 B2 B3}

Restriction: 0 <= shift < nlanes

Usage:

.. ref-code-block:: cpp

	v_int32x4 a, b, c;
	c = v_extract<2>(a, b);

For integer types only.

.. index:: pair: function; v_floor
.. _doxid-df/d91/group__core__hal__intrin_1ga7f6956596736cde768aa97cb9962b6d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_floor(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Floor elements.

Only for floating point types.

.. index:: pair: function; v_floor
.. _doxid-df/d91/group__core__hal__intrin_1ga6c95c494decd17905b43d47028370817:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_floor(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a)

Floor.

Floor each value. Input type is float vector ==> output type is int vector.

.. index:: pair: function; v_floor
.. _doxid-df/d91/group__core__hal__intrin_1ga1fba933e3c72033673dfcd70cd345f15:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	cv::v_floor(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; v_invsqrt
.. _doxid-df/d91/group__core__hal__intrin_1ga0e9fa03f4014a0c0756de5d94f895112:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_invsqrt(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Inversed square root.

Returns :math:`1/sqrt(a)` For floating point types only.

.. index:: pair: function; v_load
.. _doxid-df/d91/group__core__hal__intrin_1gab665a422a89da120e3bd4bb76172437c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, V_SIMD128Traits<_Tp>::nlanes>
	cv::v_load(const _Tp* ptr)

Load register contents from memory.

Returned type will be detected from passed pointer type, for example uchar ==> :ref:`cv::v_uint8x16 <doxid-df/d91/group__core__hal__intrin_1ga15cd4df600c57ee36d03ccfee5cb9820>`, int ==> :ref:`cv::v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>`, etc.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- pointer to memory block with data



.. rubric:: Returns:

register object

.. index:: pair: function; v_load_aligned
.. _doxid-df/d91/group__core__hal__intrin_1ga155f00bafccd79d36863c5546c786c0e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, V_SIMD128Traits<_Tp>::nlanes>
	cv::v_load_aligned(const _Tp* ptr)

Load register contents from memory (aligned)

similar to :ref:`cv::v_load <doxid-df/d91/group__core__hal__intrin_1gab665a422a89da120e3bd4bb76172437c>`, but source memory block should be aligned (to 16-byte boundary)

.. index:: pair: function; v_load_deinterleave
.. _doxid-df/d91/group__core__hal__intrin_1gafd8e859406c66bb5b7d901473265119b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_load_deinterleave(
		const _Tp* ptr,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Load and deinterleave (2 channels)

Load data from memory deinterleave and store to 2 registers. Scheme:

.. ref-code-block:: cpp

	{A1 B1 A2 B2 ...} ==> {A1 A2 ...}, {B1 B2 ...}

For all types except 64-bit.

.. index:: pair: function; v_load_deinterleave
.. _doxid-df/d91/group__core__hal__intrin_1gab364b341969494d47e6a1b173fc46658:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_load_deinterleave(
		const _Tp* ptr,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c
		)

Load and deinterleave (3 channels)

Load data from memory deinterleave and store to 3 registers. Scheme:

.. ref-code-block:: cpp

	{A1 B1 C1 A2 B2 C2 ...} ==> {A1 A2 ...}, {B1 B2 ...}, {C1 C2 ...}

For all types except 64-bit.

.. index:: pair: function; v_load_deinterleave
.. _doxid-df/d91/group__core__hal__intrin_1ga7f1f0d87d6210547bb125fd349a10e5d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_load_deinterleave(
		const _Tp* ptr,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& d
		)

Load and deinterleave (4 channels)

Load data from memory deinterleave and store to 4 registers. Scheme:

.. ref-code-block:: cpp

	{A1 B1 C1 D1 A2 B2 C2 D2 ...} ==> {A1 A2 ...}, {B1 B2 ...}, {C1 C2 ...}, {D1 D2 ...}

For all types except 64-bit.

.. index:: pair: function; v_load_expand
.. _doxid-df/d91/group__core__hal__intrin_1ga05eb0581c713f32d2b64ffca86cea594:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, V_SIMD128Traits<_Tp>::nlanes/2>
	cv::v_load_expand(const _Tp* ptr)

Load register contents from memory with double expand.

Same as :ref:`cv::v_load <doxid-df/d91/group__core__hal__intrin_1gab665a422a89da120e3bd4bb76172437c>`, but result pack type will be 2x wider than memory type.

.. ref-code-block:: cpp

	short buf[4] = {1, 2, 3, 4}; // type is int16
	:ref:`v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>` r = :ref:`v_load_expand <doxid-df/d91/group__core__hal__intrin_1ga05eb0581c713f32d2b64ffca86cea594>`(buf); // r = {1, 2, 3, 4} - type is int32

For 8-, 16-, 32-bit integer source types.

.. index:: pair: function; v_load_expand_q
.. _doxid-df/d91/group__core__hal__intrin_1gad618a34ccc2f1b3ec9ad4af831cba9ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::q_type, V_SIMD128Traits<_Tp>::nlanes/4>
	cv::v_load_expand_q(const _Tp* ptr)

Load register contents from memory with quad expand.

Same as :ref:`cv::v_load_expand <doxid-df/d91/group__core__hal__intrin_1ga05eb0581c713f32d2b64ffca86cea594>`, but result type is 4 times wider than source.

.. ref-code-block:: cpp

	char buf[4] = {1, 2, 3, 4}; // type is int8
	:ref:`v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>` r = v_load_q(buf); // r = {1, 2, 3, 4} - type is int32

For 8-bit integer source types.

.. index:: pair: function; v_load_halves
.. _doxid-df/d91/group__core__hal__intrin_1ga01e081b8017d09b6e5b31279b0d30a71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, V_SIMD128Traits<_Tp>::nlanes>
	cv::v_load_halves(
		const _Tp* loptr,
		const _Tp* hiptr
		)

Load register contents from two memory blocks.

.. ref-code-block:: cpp

	int lo[2] = { 1, 2 }, hi[2] = { 3, 4 };
	:ref:`v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>` r = :ref:`v_load_halves <doxid-df/d91/group__core__hal__intrin_1ga01e081b8017d09b6e5b31279b0d30a71>`(lo, hi);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- loptr

		- memory block containing data for first half (0..n/2)

	*
		- hiptr

		- memory block containing data for second half (n/2..n)

.. index:: pair: function; v_magnitude
.. _doxid-df/d91/group__core__hal__intrin_1ga3f3a248d8a6078b73be09883bf2a5108:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_magnitude(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Magnitude.

Returns :math:`sqrt(a^2 + b^2)` For floating point types only.

.. index:: pair: function; v_matmul
.. _doxid-df/d91/group__core__hal__intrin_1ga4f53754058cbcd76b98db8525cefe869:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	cv::v_matmul(
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& v,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m0,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m1,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m2,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& m3
		)

Matrix multiplication.

Scheme:

.. ref-code-block:: cpp

	{A0 A1 A2 A3}   |V0|
	{B0 B1 B2 B3}   |V1|
	{C0 C1 C2 C3}   |V2|
	{D0 D1 D2 D3} x |V3|
	====================
	{R0 R1 R2 R3}, where:
	R0 = A0V0 + A1V1 + A2V2 + A3V3,
	R1 = B0V0 + B1V1 + B2V2 + B3V3
	...

.. index:: pair: function; v_max
.. _doxid-df/d91/group__core__hal__intrin_1ga69ee01fdfd9d57067e2a967db5e8bd45:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_max(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Choose max values for each pair.

Scheme:

.. ref-code-block:: cpp

	{A1 A2 ...}
	{B1 B2 ...}
	--------------
	{max(A1,B1) max(A2,B2) ...}

For all types except 64-bit integer.

.. index:: pair: function; v_min
.. _doxid-df/d91/group__core__hal__intrin_1gaf7cf8641863e5a56b642a363f539c836:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_min(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Choose min values for each pair.

Scheme:

.. ref-code-block:: cpp

	{A1 A2 ...}
	{B1 B2 ...}
	--------------
	{min(A1,B1) min(A2,B2) ...}

For all types except 64-bit integer.

.. index:: pair: function; v_mul_expand
.. _doxid-df/d91/group__core__hal__intrin_1ga8bb510213a964865860cccf6b1ee42bb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_mul_expand(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& c,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<typename V_TypeTraits<_Tp>::w_type, n/2>& d
		)

Multiply and expand.

Multiply values two registers and store results in two registers with wider pack type. Scheme:

.. ref-code-block:: cpp

	  {A B C D} // 32-bit
	x {E F G H} // 32-bit
	---------------
	{AE BF}         // 64-bit
	        {CG DH} // 64-bit

Example:

.. ref-code-block:: cpp

	:ref:`v_uint32x4 <doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>` a, b; // {1,2,3,4} and {2,2,2,2}
	:ref:`v_uint64x2 <doxid-df/d91/group__core__hal__intrin_1gab32d838ec60649d90504438b02beeb40>` c, d; // results
	:ref:`v_mul_expand <doxid-df/d91/group__core__hal__intrin_1ga8bb510213a964865860cccf6b1ee42bb>`(a, b, c, d); // c, d = {2,4}, {6, 8}

Implemented only for 16- and unsigned 32-bit source types (v_int16x8, v_uint16x8, v_uint32x4).

.. index:: pair: function; v_muladd
.. _doxid-df/d91/group__core__hal__intrin_1ga60cf2ff062954f9ae2775f42de5ebf76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_muladd(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c
		)

Multiply and add.

Returns :math:`a*b + c` For floating point types only.

.. index:: pair: function; v_popcount
.. _doxid-df/d91/group__core__hal__intrin_1ga278f608463cbdd4d4a45f965e23b9ae5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_uint32x4<doxid-df/d91/group__core__hal__intrin_1ga5859d41d20a075cff6b832f0d64ee042>`
	cv::v_popcount(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Count the 1 bits in the vector and return 4 values.

Scheme:

.. ref-code-block:: cpp

	{A1 A2 A3 ...} => popcount(A1)

Any types but result will be in v_uint32x4

.. index:: pair: function; v_recombine
.. _doxid-df/d91/group__core__hal__intrin_1ga75a3cb5bb426fc37d9ed2f10e8706997:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_recombine(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& low,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& high
		)

Combine two vectors from lower and higher parts of two other vectors.

.. ref-code-block:: cpp

	low = :ref:`cv::v_combine_low <doxid-df/d91/group__core__hal__intrin_1ga9f131fad2680116c10c35b6ee660b190>`(a, b);
	high = :ref:`cv::v_combine_high <doxid-df/d91/group__core__hal__intrin_1ga283fe35828ae5c7f94059f2f559d454f>`(a, b);

.. index:: pair: function; v_reduce_max
.. _doxid-df/d91/group__core__hal__intrin_1gac2b31f9518aea3ea0f113c7ff163d2a9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	_Tp
	cv::v_reduce_max(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Find one max value.

Scheme:

.. ref-code-block:: cpp

	{A1 A2 A3 ...} => max(A1,A2,A3,...)

For 32-bit integer and 32-bit floating point types.

.. index:: pair: function; v_reduce_min
.. _doxid-df/d91/group__core__hal__intrin_1ga7ce066014a77ab386204688b30281c71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	_Tp
	cv::v_reduce_min(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Find one min value.

Scheme:

.. ref-code-block:: cpp

	{A1 A2 A3 ...} => min(A1,A2,A3,...)

For 32-bit integer and 32-bit floating point types.

.. index:: pair: function; v_reduce_sum
.. _doxid-df/d91/group__core__hal__intrin_1ga38ffc32658e008a149f259b1637cb0be:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	V_TypeTraits<_Tp>::sum_type
	cv::v_reduce_sum(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Sum packed values.

Scheme:

.. ref-code-block:: cpp

	{A1 A2 A3 ...} => sum{A1,A2,A3,...}

For 32-bit integer and 32-bit floating point types.

.. index:: pair: function; v_reduce_sum4
.. _doxid-df/d91/group__core__hal__intrin_1gafec4c6d20a68eba604ec1a480f457f34:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`
	cv::v_reduce_sum4(
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& a,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& b,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& c,
		const :ref:`v_float32x4<doxid-df/d91/group__core__hal__intrin_1gad1f972902dd8ee6dd7c2ebeb845728d4>`& d
		)

Sums all elements of each input vector, returns the vector of sums.

Scheme:

.. ref-code-block:: cpp

	result[0] = a[0] + a[1] + a[2] + a[3]
	result[1] = b[0] + b[1] + b[2] + b[3]
	result[2] = c[0] + c[1] + c[2] + c[3]
	result[3] = d[0] + d[1] + d[2] + d[3]

.. index:: pair: function; v_round
.. _doxid-df/d91/group__core__hal__intrin_1ga4cfd2e478d7c585fc77c64cc4fde66ae:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_round(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Round elements.

Only for floating point types.

.. index:: pair: function; v_round
.. _doxid-df/d91/group__core__hal__intrin_1ga10e8380a09690c5c2de2dafbf1b8e326:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_round(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a)

Round.

Rounds each value. Input type is float vector ==> output type is int vector.

.. index:: pair: function; v_round
.. _doxid-df/d91/group__core__hal__intrin_1ga97980b3f12acb3028558e51231240a4e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	cv::v_round(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; v_select
.. _doxid-df/d91/group__core__hal__intrin_1gae440a2520e3b796df0be134e2fe6a7b0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_select(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& mask,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Bitwise select.

Return value will be built by combining values a and b using the following scheme: If the i-th bit in *mask* is 1 select i-th bit from *a* else select i-th bit from *b*

.. index:: pair: function; v_signmask
.. _doxid-df/d91/group__core__hal__intrin_1ga191a888185e95f221c8203884e8d66ec:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	int
	cv::v_signmask(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Get negative values mask.

Returned value is a bit mask with bits set to 1 on places corresponding to negative packed values indexes. Example:

.. ref-code-block:: cpp

	:ref:`v_int32x4 <doxid-df/d91/group__core__hal__intrin_1ga4c6899623e3f4b0d89737817e7f83ff4>` r; // set to {-1, -1, 1, 1}
	int mask = :ref:`v_signmask <doxid-df/d91/group__core__hal__intrin_1ga191a888185e95f221c8203884e8d66ec>`(r); // mask = 3 <== 00000000 00000000 00000000 00000011

For all types except 64-bit.

.. index:: pair: function; v_sqr_magnitude
.. _doxid-df/d91/group__core__hal__intrin_1ga51374eab401b0ef5b5efc8c31ea777c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_sqr_magnitude(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Square of the magnitude.

Returns :math:`a^2 + b^2` For floating point types only.

.. index:: pair: function; v_sqrt
.. _doxid-df/d91/group__core__hal__intrin_1ga47a7b59cada76a8cdf6bcc4367a976ca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_sqrt(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Square root of elements.

Only for floating point types.

.. index:: pair: function; v_store
.. _doxid-df/d91/group__core__hal__intrin_1ga275dfa9c8935f5e9a1031121cde460f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		)

Store data to memory.

Store register contents to memory. Scheme:

.. ref-code-block:: cpp

	REG {A B C D} ==> MEM {A B C D}

Pointer can be unaligned.

.. index:: pair: function; v_store_aligned
.. _doxid-df/d91/group__core__hal__intrin_1gaf2733377e1bc373657d0e203028c74fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store_aligned(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		)

Store data to memory (aligned)

Store register contents to memory. Scheme:

.. ref-code-block:: cpp

	REG {A B C D} ==> MEM {A B C D}

Pointer **should** be aligned by 16-byte boundary.

.. index:: pair: function; v_store_high
.. _doxid-df/d91/group__core__hal__intrin_1ga1665beb52f3824499d3b6b1203890ada:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store_high(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		)

Store data to memory (higher half)

Store higher half of register contents to memory. Scheme:

.. ref-code-block:: cpp

	REG {A B C D} ==> MEM {C D}

.. index:: pair: function; v_store_interleave
.. _doxid-df/d91/group__core__hal__intrin_1ga990eea5fa77df9a033ef1e21c3c6f16e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store_interleave(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Interleave and store (2 channels)

Interleave and store data from 2 registers to memory. Scheme:

.. ref-code-block:: cpp

	{A1 A2 ...}, {B1 B2 ...} ==> {A1 B1 A2 B2 ...}

For all types except 64-bit.

.. index:: pair: function; v_store_interleave
.. _doxid-df/d91/group__core__hal__intrin_1ga22d97d35e5e6f8d0f792d01c2dcea7f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store_interleave(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c
		)

Interleave and store (3 channels)

Interleave and store data from 3 registers to memory. Scheme:

.. ref-code-block:: cpp

	{A1 A2 ...}, {B1 B2 ...}, {C1 C2 ...} ==> {A1 B1 C1 A2 B2 C2 ...}

For all types except 64-bit.

.. index:: pair: function; v_store_interleave
.. _doxid-df/d91/group__core__hal__intrin_1ga0e803cc8edeef3c7c4e0367274e9ffa3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store_interleave(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& c,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& d
		)

Interleave and store (4 channels)

Interleave and store data from 4 registers to memory. Scheme:

.. ref-code-block:: cpp

	{A1 A2 ...}, {B1 B2 ...}, {C1 C2 ...}, {D1 D2 ...} ==> {A1 B1 C1 D1 A2 B2 C2 D2 ...}

For all types except 64-bit.

.. index:: pair: function; v_store_low
.. _doxid-df/d91/group__core__hal__intrin_1ga3cb662d09e37eae1e73043badee69612:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_store_low(
		_Tp* ptr,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a
		)

Store data to memory (lower half)

Store lower half of register contents to memory. Scheme:

.. ref-code-block:: cpp

	REG {A B C D} ==> MEM {A B}

.. index:: pair: function; v_sub_wrap
.. _doxid-df/d91/group__core__hal__intrin_1gac5b977f61fae36e84e7468923e0a40f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>
	cv::v_sub_wrap(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b
		)

Subtract values without saturation.

For 8- and 16-bit integer values.

.. index:: pair: function; v_transpose4x4
.. _doxid-df/d91/group__core__hal__intrin_1gaf8bdcd643d22a9fc9c3f0ed202535928:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	void
	cv::v_transpose4x4(
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a0,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a1,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a2,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& a3,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b0,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b1,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b2,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, 4>& b3
		)

Transpose 4x4 matrix.

Scheme:

.. ref-code-block:: cpp

	a0  {A1 A2 A3 A4}
	a1  {B1 B2 B3 B4}
	a2  {C1 C2 C3 C4}
	a3  {D1 D2 D3 D4}
	===============
	b0  {A1 B1 C1 D1}
	b1  {A2 B2 C2 D2}
	b2  {A3 B3 C3 D3}
	b3  {A4 B4 C4 D4}

.. index:: pair: function; v_trunc
.. _doxid-df/d91/group__core__hal__intrin_1ga160cc085612d8c36bdd0395df4b2333a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_trunc(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a)

Truncate elements.

Only for floating point types.

.. index:: pair: function; v_trunc
.. _doxid-df/d91/group__core__hal__intrin_1ga4b773c451fe920bfdf3c773860c9f334:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n>
	cv::v_trunc(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<float, n>& a)

Trunc.

Truncate each value. Input type is float vector ==> output type is int vector.

.. index:: pair: function; v_trunc
.. _doxid-df/d91/group__core__hal__intrin_1gae347e0d88bcb9168f55043419b1ad6ec:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <int n>
	:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<int, n*2>
	cv::v_trunc(const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<double, n>& a)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; v_zip
.. _doxid-df/d91/group__core__hal__intrin_1ga19ef6326f6c132d75c62391cedf7c187:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	void
	cv::v_zip(
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a0,
		const :ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& a1,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b0,
		:ref:`v_reg<doxid-d1/d69/structcv_1_1v__reg>`<_Tp, n>& b1
		)

Interleave two vectors.

Scheme:

.. ref-code-block:: cpp

	  {A1 A2 A3 A4}
	  {B1 B2 B3 B4}
	---------------
	  {A1 B1 A2 B2} and {A3 B3 A4 B4}

For all types except 64-bit.

Macros
------

.. index:: pair: define; CV_SIMD128
.. _doxid-df/d91/group__core__hal__intrin_1gad953f90887e4eb9a12657e6a1f86d01b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SIMD128

Set to 1 if current compiler supports vector extensions (NEON or SSE is enabled)

.. index:: pair: define; CV_SIMD128_64F
.. _doxid-df/d91/group__core__hal__intrin_1ga51529fa7aa602e84255f9e68efa5ed01:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SIMD128_64F

Set to 1 if current intrinsics implementation supports 64-bit float vectors.

