.. index:: pair: group; OpenCL support
.. _doxid-dc/d83/group__core__opencl:

OpenCL support
==============

.. toctree::
	:hidden:

	enum_cv_ocl_OclVectorStrategy.rst
	class_cv_ocl_Context.rst
	class_cv_ocl_Device.rst
	class_cv_ocl_Image2D.rst
	class_cv_ocl_Kernel.rst
	class_cv_ocl_KernelArg.rst
	class_cv_ocl_Platform.rst
	class_cv_ocl_PlatformInfo.rst
	class_cv_ocl_Program.rst
	class_cv_ocl_ProgramSource.rst
	class_cv_ocl_Queue.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::ocl::OclVectorStrategy<doxid-dc/d83/group__core__opencl_1gae601ac868b72015b583ccbbdd0dec587>`;

	// classes

	class :ref:`cv::ocl::Context<doxid-d1/dbe/classcv_1_1ocl_1_1_context>`;
	class :ref:`cv::ocl::Device<doxid-d7/d5a/classcv_1_1ocl_1_1_device>`;
	class :ref:`cv::ocl::Image2D<doxid-dd/d69/classcv_1_1ocl_1_1_image2_d>`;
	class :ref:`cv::ocl::Kernel<doxid-d6/dfb/classcv_1_1ocl_1_1_kernel>`;
	class :ref:`cv::ocl::KernelArg<doxid-d2/d12/classcv_1_1ocl_1_1_kernel_arg>`;
	class :ref:`cv::ocl::Platform<doxid-d3/d4d/classcv_1_1ocl_1_1_platform>`;
	class :ref:`cv::ocl::PlatformInfo<doxid-dd/de3/classcv_1_1ocl_1_1_platform_info>`;
	class :ref:`cv::ocl::Program<doxid-d5/db4/classcv_1_1ocl_1_1_program>`;
	class :ref:`cv::ocl::ProgramSource<doxid-db/da1/classcv_1_1ocl_1_1_program_source>`;
	class :ref:`cv::ocl::Queue<doxid-d2/de6/classcv_1_1ocl_1_1_queue>`;

	// global functions

	void
	:ref:`cv::ocl::attachContext<doxid-dc/d83/group__core__opencl_1gaf83af36be2097fd43e3eba5c8f3025b1>`(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& platformName,
		void* platformID,
		void* context,
		void* deviceID
		);

	void
	:target:`cv::ocl::buildOptionsAddMatrixDescription<doxid-dc/d83/group__core__opencl_1ga95fc5d853c45a6b1db1d425d831f7d2f>`(
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`& buildOptions,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& name,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` _m
		);

	int
	:target:`cv::ocl::checkOptimalVectorWidth<doxid-dc/d83/group__core__opencl_1ga293c0b13a39f10465e3ea67a018d6779>`(
		const int* vectorWidths,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src4 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src5 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src6 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src7 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src8 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src9 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OclVectorStrategy<doxid-dc/d83/group__core__opencl_1gae601ac868b72015b583ccbbdd0dec587>` strat = :ref:`OCL_VECTOR_DEFAULT<doxid-dc/d83/group__core__opencl_1ggae601ac868b72015b583ccbbdd0dec587a566f2a652ca8f26eabf5f6fc50faf59e>`
		);

	void
	:ref:`cv::ocl::convertFromBuffer<doxid-dc/d83/group__core__opencl_1gaf7698360b08aa452c2692296ce55bccd>`(
		void* cl_mem_buffer,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` step,
		int rows,
		int cols,
		int type,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		);

	void
	:ref:`cv::ocl::convertFromImage<doxid-dc/d83/group__core__opencl_1gada97cc08c31e416b957e23b480334b6c>`(
		void* cl_mem_image,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		);

	const char*
	:target:`cv::ocl::convertTypeStr<doxid-dc/d83/group__core__opencl_1ga6af5cc5165cd65ae41925d6d95f0f7ae>`(
		int sdepth,
		int ddepth,
		int cn,
		char* buf
		);

	void
	:target:`cv::ocl::finish<doxid-dc/d83/group__core__opencl_1gabfca32247f267c662b3bff6587d14b40>`();

	:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`*
	:target:`cv::ocl::getOpenCLAllocator<doxid-dc/d83/group__core__opencl_1ga2de08873daa452bb88f17d5054aa3aae>`();

	void
	:target:`cv::ocl::getPlatfomsInfo<doxid-dc/d83/group__core__opencl_1gae98550085d4a41df7a1daff093fe775c>`(std::vector<:ref:`PlatformInfo<doxid-dd/de3/classcv_1_1ocl_1_1_platform_info>`>& platform_info);

	bool
	:target:`cv::ocl::haveAmdBlas<doxid-dc/d83/group__core__opencl_1gad2e486ab8104a3b197001e27d54e2a95>`();

	bool
	:target:`cv::ocl::haveAmdFft<doxid-dc/d83/group__core__opencl_1ga593387b5285a57ea03350b363c74c6cf>`();

	bool
	:target:`cv::ocl::haveOpenCL<doxid-dc/d83/group__core__opencl_1gaf8716694664cb127e7928c335b97d217>`();

	bool
	:target:`cv::ocl::haveSVM<doxid-dc/d83/group__core__opencl_1ga0744f1db6ed2ec8f8aa79a43449a4855>`();

	void
	:target:`cv::ocl::initializeContextFromHandle<doxid-dc/d83/group__core__opencl_1ga497674e2f118f367b2fa4decbcdecb15>`(
		:ref:`Context<doxid-d1/dbe/classcv_1_1ocl_1_1_context>`& ctx,
		void* platform,
		void* context,
		void* device
		);

	:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
	:target:`cv::ocl::kernelToStr<doxid-dc/d83/group__core__opencl_1gafb2b78806f036b57609e26b8237fa3d9>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` _kernel,
		int ddepth = -1,
		const char* name = NULL
		);

	const char*
	:target:`cv::ocl::memopTypeToStr<doxid-dc/d83/group__core__opencl_1ga3a8b3c8a8991e15ac4e4aa2a007bb2ea>`(int t);

	int
	:target:`cv::ocl::predictOptimalVectorWidth<doxid-dc/d83/group__core__opencl_1ga1b16507915166d63529ad8126e465c1a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src4 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src5 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src6 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src7 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src8 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src9 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OclVectorStrategy<doxid-dc/d83/group__core__opencl_1gae601ac868b72015b583ccbbdd0dec587>` strat = :ref:`OCL_VECTOR_DEFAULT<doxid-dc/d83/group__core__opencl_1ggae601ac868b72015b583ccbbdd0dec587a566f2a652ca8f26eabf5f6fc50faf59e>`
		);

	int
	:target:`cv::ocl::predictOptimalVectorWidthMax<doxid-dc/d83/group__core__opencl_1ga8b96cd547eac1e787cf50e22820bc4b9>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src4 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src5 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src6 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src7 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src8 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src9 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:target:`cv::ocl::setUseOpenCL<doxid-dc/d83/group__core__opencl_1gab747fa4efd88d3188f4ebcbc8a639c1e>`(bool flag);

	const char*
	:target:`cv::ocl::typeToStr<doxid-dc/d83/group__core__opencl_1ga332498ad6301e733151ff4e61e0d755c>`(int t);

	bool
	:target:`cv::ocl::useOpenCL<doxid-dc/d83/group__core__opencl_1gadb3b41d4552e9db7887855e3a1b2af37>`();

	const char*
	:target:`cv::ocl::vecopTypeToStr<doxid-dc/d83/group__core__opencl_1ga87fc1246a42a1f4c46eeea3ad5ce1790>`(int t);

.. _details-dc/d83/group__core__opencl:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; attachContext
.. _doxid-dc/d83/group__core__opencl_1gaf83af36be2097fd43e3eba5c8f3025b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ocl::attachContext(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& platformName,
		void* platformID,
		void* context,
		void* deviceID
		)

Attaches OpenCL context to OpenCV.

OpenCV will check if available OpenCL platform has platformName name, then assign context to OpenCV and call ``clRetainContext`` function. The deviceID device will be used as target device and new command queue will be created.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- platformName

		- name of OpenCL platform to attach, this string is used to check if platform is available to OpenCV at runtime

	*
		- platformID

		- ID of platform attached context was created for

	*
		- context

		- OpenCL context to be attached to OpenCV

	*
		- deviceID

		- ID of device, must be created from attached context

.. index:: pair: function; convertFromBuffer
.. _doxid-dc/d83/group__core__opencl_1gaf7698360b08aa452c2692296ce55bccd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ocl::convertFromBuffer(
		void* cl_mem_buffer,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` step,
		int rows,
		int cols,
		int type,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		)

Convert OpenCL buffer to :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`.

OpenCL buffer (cl_mem_buffer) should contain 2D image data, compatible with OpenCV. Memory content is not copied from ``clBuffer`` to :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`. Instead, buffer handle assigned to :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` and ``clRetainMemObject`` is called.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- cl_mem_buffer

		- source clBuffer handle

	*
		- step

		- num of bytes in single row

	*
		- rows

		- number of rows

	*
		- cols

		- number of cols

	*
		- type

		- OpenCV type of image

	*
		- dst

		- destination :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`

.. index:: pair: function; convertFromImage
.. _doxid-dc/d83/group__core__opencl_1gada97cc08c31e416b957e23b480334b6c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ocl::convertFromImage(
		void* cl_mem_image,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		)

Convert OpenCL image2d_t to :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`.

OpenCL ``image2d_t`` (cl_mem_image), should be compatible with OpenCV :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` formats. Memory content is copied from image to :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` with ``clEnqueueCopyImageToBuffer`` function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- cl_mem_image

		- source image2d_t handle

	*
		- dst

		- destination :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`

