.. index:: pair: group; Arithm Operations on Matrices
.. _doxid-d9/d88/group__cudaarithm__arithm:

Arithm Operations on Matrices
=============================

.. toctree::
	:hidden:

	class_cv_cuda_Convolution.rst
	class_cv_cuda_DFT.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// classes

	class :ref:`cv::cuda::Convolution<doxid-d1/d4f/classcv_1_1cuda_1_1_convolution>`;
	class :ref:`cv::cuda::DFT<doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`;

	// global functions

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Convolution<doxid-d1/d4f/classcv_1_1cuda_1_1_convolution>`>
	:ref:`cv::cuda::createConvolution<doxid-d9/d88/group__cudaarithm__arithm_1ga2695e05ef624bf3ce03cfbda383a821d>`(:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` user_block_size = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`());

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`DFT<doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`>
	:ref:`cv::cuda::createDFT<doxid-d9/d88/group__cudaarithm__arithm_1ga0f72d063b73c8bb995678525eb076f10>`(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` dft_size,
		int flags
		);

	void
	:ref:`cv::cuda::dft<doxid-d9/d88/group__cudaarithm__arithm_1gadea99cb15a715c983bcc2870d65a2e78>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` dft_size,
		int flags = 0,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::gemm<doxid-d9/d88/group__cudaarithm__arithm_1ga42efe211d7a43bbc922da044c4f17130>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3,
		double beta,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::mulAndScaleSpectrums<doxid-d9/d88/group__cudaarithm__arithm_1ga5704c25b8be4f19da812e6d98c8ee464>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags,
		float scale,
		bool conjB = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::mulSpectrums<doxid-d9/d88/group__cudaarithm__arithm_1gab3e8900d67c4f59bdc137a0495206cd8>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags,
		bool conjB = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

.. _details-d9/d88/group__cudaarithm__arithm:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; createConvolution
.. _doxid-d9/d88/group__cudaarithm__arithm_1ga2695e05ef624bf3ce03cfbda383a821d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`Convolution<doxid-d1/d4f/classcv_1_1cuda_1_1_convolution>`>
	cv::cuda::createConvolution(:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` user_block_size = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`())

Creates implementation for :ref:`cuda::Convolution <doxid-d1/d4f/classcv_1_1cuda_1_1_convolution>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- user_block_size

		- Block size. If you leave default value Size(0,0) then automatic estimation of block size will be used (which is optimized for speed). By varying user_block_size you can reduce memory requirements at the cost of speed.

.. index:: pair: function; createDFT
.. _doxid-d9/d88/group__cudaarithm__arithm_1ga0f72d063b73c8bb995678525eb076f10:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`DFT<doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`>
	cv::cuda::createDFT(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` dft_size,
		int flags
		)

Creates implementation for :ref:`cuda::DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dft_size

		- The image size.

	*
		- flags

		- 
		  Optional flags:
		  
		  * **DFT_ROWS** transforms each individual row of the source matrix.
		  
		  * **DFT_SCALE** scales the result: divide it by the number of elements in the transform (obtained from dft_size ).
		  
		  * **DFT_INVERSE** inverts :ref:`DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`. Use for complex-complex cases (real-complex and complex-real cases are always forward and inverse, respectively).
		  
		  * **DFT_COMPLEX_INPUT** Specifies that inputs will be complex with 2 channels.
		  
		  * **DFT_REAL_OUTPUT** specifies the output as real. The source matrix is the result of real-complex transform, so the destination matrix must be real.

.. index:: pair: function; dft
.. _doxid-d9/d88/group__cudaarithm__arithm_1gadea99cb15a715c983bcc2870d65a2e78:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::dft(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` dft_size,
		int flags = 0,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a forward or inverse discrete Fourier transform (1D or 2D) of the floating point matrix.

Use to handle real matrices ( CV32FC1 ) and complex matrices in the interleaved format ( CV32FC2 ).

The source matrix should be continuous, otherwise reallocation and data copying is performed. The function chooses an operation mode depending on the flags, size, and channel count of the source matrix:

* If the source matrix is complex and the output is not specified as real, the destination matrix is complex and has the dft_size size and CV_32FC2 type. The destination matrix contains a full result of the :ref:`DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>` (forward or inverse).

* If the source matrix is complex and the output is specified as real, the function assumes that its input is the result of the forward transform (see the next item). The destination matrix has the dft_size size and CV_32FC1 type. It contains the result of the inverse :ref:`DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`.

* If the source matrix is real (its type is CV_32FC1 ), forward :ref:`DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>` is performed. The result of the :ref:`DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>` is packed into complex ( CV_32FC2 ) matrix. So, the width of the destination matrix is dft_size.width / 2 + 1 . But if the source is a single column, the height is reduced instead of the width.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix (real or complex).

	*
		- dst

		- Destination matrix (real or complex).

	*
		- dft_size

		- Size of a discrete Fourier transform.

	*
		- flags

		- 
		  Optional flags:
		  
		  * **DFT_ROWS** transforms each individual row of the source matrix.
		  
		  * **DFT_SCALE** scales the result: divide it by the number of elements in the transform (obtained from dft_size ).
		  
		  * **DFT_INVERSE** inverts :ref:`DFT <doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`. Use for complex-complex cases (real-complex and complex-real cases are always forward and inverse, respectively).
		  
		  * **DFT_COMPLEX_INPUT** Specifies that input is complex input with 2 channels.
		  
		  * **DFT_REAL_OUTPUT** specifies the output as real. The source matrix is the result of real-complex transform, so the destination matrix must be real.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`dft <doxid-d9/d88/group__cudaarithm__arithm_1gadea99cb15a715c983bcc2870d65a2e78>`

.. index:: pair: function; gemm
.. _doxid-d9/d88/group__cudaarithm__arithm_1ga42efe211d7a43bbc922da044c4f17130:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::gemm(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3,
		double beta,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs generalized matrix multiplication.

The function performs generalized matrix multiplication similar to the gemm functions in BLAS level

#. For example, gemm(src1, src2, alpha, src3, beta, dst, GEMM_1_T + GEMM_3_T) corresponds to
   
   .. math::
   
   	\texttt{dst} = \texttt{alpha} \cdot \texttt{src1} ^T \cdot \texttt{src2} + \texttt{beta} \cdot \texttt{src3} ^T

Transposition operation doesn't support CV_64FC2 input type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First multiplied input matrix that should have CV_32FC1 , CV_64FC1 , CV_32FC2 , or CV_64FC2 type.

	*
		- src2

		- Second multiplied input matrix of the same type as src1 .

	*
		- alpha

		- Weight of the matrix product.

	*
		- src3

		- Third optional delta matrix added to the matrix product. It should have the same type as src1 and src2 .

	*
		- beta

		- Weight of src3 .

	*
		- dst

		- Destination matrix. It has the proper size and the same type as input matrices.

	*
		- flags

		- 
		  Operation flags:
		  
		  * **GEMM_1_T** transpose src1
		  
		  * **GEMM_2_T** transpose src2
		  
		  * **GEMM_3_T** transpose src3

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`gemm <doxid-d9/d88/group__cudaarithm__arithm_1ga42efe211d7a43bbc922da044c4f17130>`

.. index:: pair: function; mulAndScaleSpectrums
.. _doxid-d9/d88/group__cudaarithm__arithm_1ga5704c25b8be4f19da812e6d98c8ee464:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::mulAndScaleSpectrums(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags,
		float scale,
		bool conjB = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a per-element multiplication of two Fourier spectrums and scales the result.

Only full (not packed) CV_32FC2 complex spectrums in the interleaved format are supported for now.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First spectrum.

	*
		- src2

		- Second spectrum with the same size and type as a .

	*
		- dst

		- Destination spectrum.

	*
		- flags

		- Mock parameter used for CPU/CUDA interfaces similarity, simply add a ``0`` value.

	*
		- scale

		- Scale constant.

	*
		- conjB

		- Optional flag to specify if the second spectrum needs to be conjugated before the multiplication.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`mulSpectrums <doxid-d9/d88/group__cudaarithm__arithm_1gab3e8900d67c4f59bdc137a0495206cd8>`

.. index:: pair: function; mulSpectrums
.. _doxid-d9/d88/group__cudaarithm__arithm_1gab3e8900d67c4f59bdc137a0495206cd8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::mulSpectrums(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags,
		bool conjB = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a per-element multiplication of two Fourier spectrums.

Only full (not packed) CV_32FC2 complex spectrums in the interleaved format are supported for now.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First spectrum.

	*
		- src2

		- Second spectrum with the same size and type as a .

	*
		- dst

		- Destination spectrum.

	*
		- flags

		- Mock parameter used for CPU/CUDA interfaces similarity.

	*
		- conjB

		- Optional flag to specify if the second spectrum needs to be conjugated before the multiplication.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`mulSpectrums <doxid-d9/d88/group__cudaarithm__arithm_1gab3e8900d67c4f59bdc137a0495206cd8>`

