.. index:: pair: group; Interface
.. _doxid-dd/d8b/group__imgproc__hal__interface:

Interface
=========

.. toctree::
	:hidden:

	struct_cvhalFilter2D.rst

Overview
~~~~~~~~

Define your functions to override default implementations:

.. :ref:`More...<details-dd/d8b/group__imgproc__hal__interface>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// structs

	struct :ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`;

	// global functions

	int
	:ref:`hal_ni_cvtBGR5x5toBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga86cb6da09d59ebe995001cce055c8b93>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int dcn,
		bool swapBlue,
		int greenBits
		);

	int
	:ref:`hal_ni_cvtBGR5x5toGray<doxid-dd/d8b/group__imgproc__hal__interface_1ga0b7467b2f747cb3b7239dc563b581e5c>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int greenBits
		);

	int
	:ref:`hal_ni_cvtBGRtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga84934e275732ca6c19c8c6838c5ed3e8>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		int dcn,
		bool swapBlue
		);

	int
	:ref:`hal_ni_cvtBGRtoBGR5x5<doxid-dd/d8b/group__imgproc__hal__interface_1gaab7b96c1367629a45e2ce19f6a5ab019>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int scn,
		bool swapBlue,
		int greenBits
		);

	int
	:ref:`hal_ni_cvtBGRtoGray<doxid-dd/d8b/group__imgproc__hal__interface_1gaff902b3e83ea5cce1ce1bd32f4506e50>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue
		);

	int
	:ref:`hal_ni_cvtBGRtoHSV<doxid-dd/d8b/group__imgproc__hal__interface_1ga7f20c98dcb039185587b1301546053dd>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue,
		bool isFullRange,
		bool isHSV
		);

	int
	:ref:`hal_ni_cvtBGRtoLab<doxid-dd/d8b/group__imgproc__hal__interface_1ga4c7bf02b8eb02ab9125e24279b07a7f3>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue,
		bool isLab,
		bool srgb
		);

	int
	:ref:`hal_ni_cvtBGRtoThreePlaneYUV<doxid-dd/d8b/group__imgproc__hal__interface_1gafe9144b5701cc98ef78197e999bea93c>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int scn,
		bool swapBlue,
		int uIdx
		);

	int
	:ref:`hal_ni_cvtBGRtoXYZ<doxid-dd/d8b/group__imgproc__hal__interface_1ga0a40da22502576bac3a6e5dbf7a538be>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue
		);

	int
	:ref:`hal_ni_cvtBGRtoYUV<doxid-dd/d8b/group__imgproc__hal__interface_1ga6b01933b106c81ab8ad79e94703a0a21>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue,
		bool isCbCr
		);

	int
	:ref:`hal_ni_cvtGraytoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga0bf4dd99eb0c309cfd368212a91c26a0>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn
		);

	int
	:ref:`hal_ni_cvtGraytoBGR5x5<doxid-dd/d8b/group__imgproc__hal__interface_1gaf5012981976b0364743fc83f000edee9>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int greenBits
		);

	int
	:ref:`hal_ni_cvtHSVtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga4c4fba7a061b93e9e819012ad4a1ad11>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue,
		bool isFullRange,
		bool isHSV
		);

	int
	:ref:`hal_ni_cvtLabtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga6aaf378ba56fa01a3b132fa27a734044>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue,
		bool isLab,
		bool srgb
		);

	int
	:ref:`hal_ni_cvtMultipliedRGBAtoRGBA<doxid-dd/d8b/group__imgproc__hal__interface_1ga2dc9d7a563eb167672ef86544c065ee3>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height
		);

	int
	:ref:`hal_ni_cvtOnePlaneYUVtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1gadfd86bf279e76edc1bd3047b2cd3413f>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int dcn,
		bool swapBlue,
		int uIdx,
		int ycn
		);

	int
	:ref:`hal_ni_cvtRGBAtoMultipliedRGBA<doxid-dd/d8b/group__imgproc__hal__interface_1gae1c2d886ce77465d47f010230eda3012>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height
		);

	int
	:ref:`hal_ni_cvtThreePlaneYUVtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1gaffd5440a1073a1102866ed4764b571e2>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		int dcn,
		bool swapBlue,
		int uIdx
		);

	int
	:ref:`hal_ni_cvtTwoPlaneYUVtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga352ea06c6e2d2c725eab1ec91601f97b>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		int dcn,
		bool swapBlue,
		int uIdx
		);

	int
	:ref:`hal_ni_cvtXYZtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga555e7ca01bfa1277ab3e6863432fb717>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue
		);

	int
	:ref:`hal_ni_cvtYUVtoBGR<doxid-dd/d8b/group__imgproc__hal__interface_1ga4559cbea912d143938f462be763599fd>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue,
		bool isCbCr
		);

	int
	:ref:`hal_ni_filter<doxid-dd/d8b/group__imgproc__hal__interface_1gae9afd78a20740daf202699e1e9f1f9d0>`(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int full_width,
		int full_height,
		int offset_x,
		int offset_y
		);

	int
	:ref:`hal_ni_filterFree<doxid-dd/d8b/group__imgproc__hal__interface_1ga58a0dea9fa82eb73fc48e24e2c5c5e90>`(:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context);

	int
	:ref:`hal_ni_filterInit<doxid-dd/d8b/group__imgproc__hal__interface_1ga46bdb022b49d1cb5b30f7aab0c8895d5>`(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`** context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernel_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` kernel_step,
		int kernel_type,
		int kernel_width,
		int kernel_height,
		int max_width,
		int max_height,
		int src_type,
		int dst_type,
		int borderType,
		double delta,
		int anchor_x,
		int anchor_y,
		bool allowSubmatrix,
		bool allowInplace
		);

	int
	:ref:`hal_ni_integral<doxid-dd/d8b/group__imgproc__hal__interface_1gad70459985c8ac83beec7ac026944015b>`(
		int depth,
		int sdepth,
		int sqdepth,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* sum_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sum_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* sqsum_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sqsum_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* tilted_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` tilted_step,
		int width,
		int height,
		int cn
		);

	int
	:ref:`hal_ni_morph<doxid-dd/d8b/group__imgproc__hal__interface_1gac46ce17945a0e34ecef12d70cf03ce2d>`(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int src_full_width,
		int src_full_height,
		int src_roi_x,
		int src_roi_y,
		int dst_full_width,
		int dst_full_height,
		int dst_roi_x,
		int dst_roi_y
		);

	int
	:ref:`hal_ni_morphFree<doxid-dd/d8b/group__imgproc__hal__interface_1gaf73f8539e1be0757a378ddb34aade194>`(:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context);

	int
	:ref:`hal_ni_morphInit<doxid-dd/d8b/group__imgproc__hal__interface_1ga266f3d95e31d6acdb9bdc538643abf16>`(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`** context,
		int operation,
		int src_type,
		int dst_type,
		int max_width,
		int max_height,
		int kernel_type,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernel_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` kernel_step,
		int kernel_width,
		int kernel_height,
		int anchor_x,
		int anchor_y,
		int borderType,
		const double borderValue [4],
		int iterations,
		bool allowSubmatrix,
		bool allowInplace
		);

	int
	:ref:`hal_ni_resize<doxid-dd/d8b/group__imgproc__hal__interface_1ga1a1274535172aff5cd50a64eed7d53ab>`(
		int src_type,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		int src_width,
		int src_height,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		double inv_scale_x,
		double inv_scale_y,
		int interpolation
		);

	int
	:ref:`hal_ni_sepFilter<doxid-dd/d8b/group__imgproc__hal__interface_1ga4766f8b13fa22383863dafde341a9ce3>`(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int full_width,
		int full_height,
		int offset_x,
		int offset_y
		);

	int
	:ref:`hal_ni_sepFilterFree<doxid-dd/d8b/group__imgproc__hal__interface_1gadaac832d83a075675ec716e3d545634a>`(:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context);

	int
	:ref:`hal_ni_sepFilterInit<doxid-dd/d8b/group__imgproc__hal__interface_1ga08bf36c5ceabd864a894e4cb3bf4c974>`(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`** context,
		int src_type,
		int dst_type,
		int kernel_type,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernelx_data,
		int kernelx_length,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernely_data,
		int kernely_length,
		int anchor_x,
		int anchor_y,
		double delta,
		int borderType
		);

	int
	:ref:`hal_ni_warpAffine<doxid-dd/d8b/group__imgproc__hal__interface_1ga9e08b16f6f130d8486ce30d284d032a5>`(
		int src_type,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		int src_width,
		int src_height,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		const double M [6],
		int interpolation,
		int borderType,
		const double borderValue [4]
		);

	int
	:ref:`hal_ni_warpPerspectve<doxid-dd/d8b/group__imgproc__hal__interface_1ga1b16a8e9e57dedf60fc16761d9e02e04>`(
		int src_type,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		int src_width,
		int src_height,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		const double M [9],
		int interpolation,
		int borderType,
		const double borderValue [4]
		);

	// macros

	#define :target:`CV_HAL_INTER_AREA<doxid-dd/d8b/group__imgproc__hal__interface_1ga77f7cdfec1040def4426412675e2da9b>`
	#define :target:`CV_HAL_INTER_CUBIC<doxid-dd/d8b/group__imgproc__hal__interface_1ga14ed09fb7a39dd19245c920adc5aa47e>`
	#define :target:`CV_HAL_INTER_LANCZOS4<doxid-dd/d8b/group__imgproc__hal__interface_1ga399c36867fcaf48e5473a96b12ffa707>`
	#define :target:`CV_HAL_INTER_LINEAR<doxid-dd/d8b/group__imgproc__hal__interface_1ga599fa5267c51a2ee34c85c5a00fd3f38>`
	#define :target:`CV_HAL_INTER_NEAREST<doxid-dd/d8b/group__imgproc__hal__interface_1gac6862c3a30586769772f9bcf6c101e51>`
	#define :target:`MORPH_DILATE<doxid-dd/d8b/group__imgproc__hal__interface_1gae17c9abae133a68e1f2525c275c86bdd>`
	#define :target:`MORPH_ERODE<doxid-dd/d8b/group__imgproc__hal__interface_1ga7135a3d94ce419412a444222343e2808>`

.. _details-dd/d8b/group__imgproc__hal__interface:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Define your functions to override default implementations:

.. ref-code-block:: cpp

	#undef hal_add8u
	#define hal_add8u my_add8u

Global Functions
----------------

.. index:: pair: function; hal_ni_cvtBGR5x5toBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga86cb6da09d59ebe995001cce055c8b93:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGR5x5toBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int dcn,
		bool swapBlue,
		int greenBits
		)

hal_cvtBGR5x5toBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- greenBits

		- number of bits for green channel (5 or 6) Convert from packed BGR or RGB (16 bits per pixel, 555 or 565) to BGR, BGRA, RGB and RGBA. Support only CV_8U images (input 2 channels, output 3 or 4 channels).

.. index:: pair: function; hal_ni_cvtBGR5x5toGray
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga0b7467b2f747cb3b7239dc563b581e5c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGR5x5toGray(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int greenBits
		)

hal_cvtBGR5x5toGray



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- greenBits

		- number of bits for green channel (5 or 6) Convert from packed BGR (16 bits per pixel, 555 or 565) to 1-channel gray. Support only CV_8U images.

.. index:: pair: function; hal_ni_cvtBGRtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga84934e275732ca6c19c8c6838c5ed3e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		int dcn,
		bool swapBlue
		)

hal_cvtBGRtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U, CV_32F)

	*
		- scn

		- source image channels (3 or 4)

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R channels will be swapped (BGR->RGB or RGB->BGR) Convert between BGR, BGRA, RGB and RGBA image formats.

.. index:: pair: function; hal_ni_cvtBGRtoBGR5x5
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gaab7b96c1367629a45e2ce19f6a5ab019:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoBGR5x5(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int scn,
		bool swapBlue,
		int greenBits
		)

hal_cvtBGRtoBGR5x5



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB)

	*
		- greenBits

		- number of bits for green channel (5 or 6) Convert from BGR, BGRA, RGB and RGBA to packed BGR or RGB (16 bits per pixel, 555 or 565). Support only CV_8U images (input 3 or 4 channels, output 2 channels).

.. index:: pair: function; hal_ni_cvtBGRtoGray
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gaff902b3e83ea5cce1ce1bd32f4506e50:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoGray(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue
		)

hal_cvtBGRtoGray



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U or CV_32F)

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB) Convert from BGR, BGRA, RGB or RGBA to 1-channel gray.

.. index:: pair: function; hal_ni_cvtBGRtoHSV
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga7f20c98dcb039185587b1301546053dd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoHSV(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue,
		bool isFullRange,
		bool isHSV
		)

hal_cvtBGRtoHSV



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U or CV_32F)

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB)

	*
		- isFullRange

		- if set to true write hue in range 0-255 (0-360 for float) otherwise in range 0-180

	*
		- isHSV

		- if set to true write HSV otherwise HSL Convert from BGR, RGB, BGRA or RGBA to HSV or HSL.

.. index:: pair: function; hal_ni_cvtBGRtoLab
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga4c7bf02b8eb02ab9125e24279b07a7f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoLab(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue,
		bool isLab,
		bool srgb
		)

hal_cvtBGRtoLab



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U or CV_32F)

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB)

	*
		- isLab

		- if set to true write Lab otherwise Luv

	*
		- srgb

		- if set to true use sRGB gamma correction Convert from BGR, RGB, BGRA or RGBA to Lab or Luv.

.. index:: pair: function; hal_ni_cvtBGRtoThreePlaneYUV
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gafe9144b5701cc98ef78197e999bea93c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoThreePlaneYUV(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int scn,
		bool swapBlue,
		int uIdx
		)

hal_cvtBGRtoThreePlaneYUV



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB)

	*
		- uIdx

		- U-channel plane index (0 or 1) Convert from BGR, RGB, BGRA or RGBA to YUV (YUV420p (or YV12/YV21) - Y plane followed by U and V planes). Only for CV_8U.

.. index:: pair: function; hal_ni_cvtBGRtoXYZ
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga0a40da22502576bac3a6e5dbf7a538be:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoXYZ(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue
		)

hal_cvtBGRtoXYZ



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U or CV_32F)

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB) Convert from BGR, RGB, BGRA or RGBA to XYZ.

.. index:: pair: function; hal_ni_cvtBGRtoYUV
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga6b01933b106c81ab8ad79e94703a0a21:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtBGRtoYUV(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int scn,
		bool swapBlue,
		bool isCbCr
		)

hal_cvtBGRtoYUV



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U or CV_32F)

	*
		- scn

		- source image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R source channels will be swapped (treat as RGB)

	*
		- isCbCr

		- if set to true write output in YCbCr format Convert from BGR, RGB, BGRA or RGBA to YUV or YCbCr.

.. index:: pair: function; hal_ni_cvtGraytoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga0bf4dd99eb0c309cfd368212a91c26a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtGraytoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn
		)

hal_cvtGraytoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U or CV_32F)

	*
		- dcn

		- destination image channels (3 or 4) Convert from 1-channel gray to BGR, RGB, RGBA or BGRA.

.. index:: pair: function; hal_ni_cvtGraytoBGR5x5
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gaf5012981976b0364743fc83f000edee9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtGraytoBGR5x5(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int greenBits
		)

hal_cvtGraytoBGR5x5



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- greenBits

		- number of bits for green channel (5 or 6) Convert from 1-channel gray to packed BGR (16 bits per pixel, 555 or 565). Support only CV_8U images.

.. index:: pair: function; hal_ni_cvtHSVtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga4c4fba7a061b93e9e819012ad4a1ad11:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtHSVtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue,
		bool isFullRange,
		bool isHSV
		)

hal_cvtHSVtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U or CV_32F)

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- isFullRange

		- if set to true read hue in range 0-255 (0-360 for float) otherwise in range 0-180

	*
		- isHSV

		- if set to true treat source as HSV otherwise HSL Convert from HSV or HSL to BGR, RGB, BGRA or RGBA.

.. index:: pair: function; hal_ni_cvtLabtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga6aaf378ba56fa01a3b132fa27a734044:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtLabtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue,
		bool isLab,
		bool srgb
		)

hal_cvtLabtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U or CV_32F)

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- isLab

		- if set to true treat input as Lab otherwise Luv

	*
		- srgb

		- if set to true use sRGB gamma correction Convert from Lab or Luv to BGR, RGB, BGRA or RGBA.

.. index:: pair: function; hal_ni_cvtMultipliedRGBAtoRGBA
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga2dc9d7a563eb167672ef86544c065ee3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtMultipliedRGBAtoRGBA(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height
		)

hal_cvtMultipliedRGBAtoRGBA



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size Convert from format with multiplied alpha channel to BGRA or RGBA. Only for CV_8U.

.. index:: pair: function; hal_ni_cvtOnePlaneYUVtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gadfd86bf279e76edc1bd3047b2cd3413f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtOnePlaneYUVtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int dcn,
		bool swapBlue,
		int uIdx,
		int ycn
		)

hal_cvtOnePlaneYUVtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- uIdx

		- U-channel index (0 or 1)

	*
		- ycn

		- Y-channel index (0 or 1) Convert from UYVY, YUY2 or YVYU to BGR, RGB, BGRA or RGBA. Only for CV_8U.

.. index:: pair: function; hal_ni_cvtRGBAtoMultipliedRGBA
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gae1c2d886ce77465d47f010230eda3012:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtRGBAtoMultipliedRGBA(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height
		)

hal_cvtRGBAtoMultipliedRGBA



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size Convert from BGRA or RGBA to format with multiplied alpha channel. Only for CV_8U.

.. index:: pair: function; hal_ni_cvtThreePlaneYUVtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gaffd5440a1073a1102866ed4764b571e2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtThreePlaneYUVtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		int dcn,
		bool swapBlue,
		int uIdx
		)

hal_cvtThreePlaneYUVtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- dst_width

		- 

	*
		- dst_height

		- destination image size

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- uIdx

		- U-channel plane index (0 or 1) Convert from YUV (YUV420p (or YV12/YV21) - Y plane followed by U and V planes) to BGR, RGB, BGRA or RGBA. Only for CV_8U.

.. index:: pair: function; hal_ni_cvtTwoPlaneYUVtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga352ea06c6e2d2c725eab1ec91601f97b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtTwoPlaneYUVtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		int dcn,
		bool swapBlue,
		int uIdx
		)

hal_cvtTwoPlaneYUVtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- dst_width

		- 

	*
		- dst_height

		- destination image size

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- uIdx

		- U-channel index in the interleaved U/V plane (0 or 1) Convert from YUV (YUV420sp (or NV12/NV21) - Y plane followed by interleaved U/V plane) to BGR, RGB, BGRA or RGBA. Only for CV_8U.

.. index:: pair: function; hal_ni_cvtXYZtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga555e7ca01bfa1277ab3e6863432fb717:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtXYZtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue
		)

hal_cvtXYZtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U or CV_32F)

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB) Convert from XYZ to BGR, RGB, BGRA or RGBA.

.. index:: pair: function; hal_ni_cvtYUVtoBGR
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga4559cbea912d143938f462be763599fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_cvtYUVtoBGR(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int depth,
		int dcn,
		bool swapBlue,
		bool isCbCr
		)

hal_cvtYUVtoBGR



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_data

		- 

	*
		- src_step

		- source image data and step

	*
		- dst_data

		- 

	*
		- dst_step

		- destination image data and step

	*
		- width

		- 

	*
		- height

		- image size

	*
		- depth

		- image depth (one of CV_8U, CV_16U or CV_32F)

	*
		- dcn

		- destination image channels (3 or 4)

	*
		- swapBlue

		- if set to true B and R destination channels will be swapped (write RGB)

	*
		- isCbCr

		- if set to true treat source as YCbCr Convert from YUV or YCbCr to BGR, RGB, BGRA or RGBA.

.. index:: pair: function; hal_ni_filter
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gae9afd78a20740daf202699e1e9f1f9d0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_filter(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int full_width,
		int full_height,
		int offset_x,
		int offset_y
		)

hal_filter



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- pointer to user-defined context

	*
		- src_data

		- source image data

	*
		- src_step

		- source image step

	*
		- dst_data

		- destination image data

	*
		- dst_step

		- destination image step

	*
		- width

		- images width

	*
		- height

		- images height

	*
		- full_width

		- full width of source image (outside the ROI)

	*
		- full_height

		- full height of source image (outside the ROI)

	*
		- offset_x

		- source image ROI offset X

	*
		- offset_y

		- source image ROI offset Y



.. rubric:: See also:

:ref:`cv::filter2D <doxid-d4/d86/group__imgproc__filter_1ga27c049795ce870216ddfb366086b5a04>`, cv::hal::Filter2D

.. index:: pair: function; hal_ni_filterFree
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga58a0dea9fa82eb73fc48e24e2c5c5e90:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_filterFree(:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context)

hal_filterFree



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- pointer to user-defined context



.. rubric:: See also:

:ref:`cv::filter2D <doxid-d4/d86/group__imgproc__filter_1ga27c049795ce870216ddfb366086b5a04>`, cv::hal::Filter2D

.. index:: pair: function; hal_ni_filterInit
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga46bdb022b49d1cb5b30f7aab0c8895d5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_filterInit(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`** context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernel_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` kernel_step,
		int kernel_type,
		int kernel_width,
		int kernel_height,
		int max_width,
		int max_height,
		int src_type,
		int dst_type,
		int borderType,
		double delta,
		int anchor_x,
		int anchor_y,
		bool allowSubmatrix,
		bool allowInplace
		)

hal_filterInit



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- double pointer to user-defined context

	*
		- kernel_data

		- pointer to kernel data

	*
		- kernel_step

		- kernel step

	*
		- kernel_type

		- kernel type (CV_8U, ...)

	*
		- kernel_width

		- kernel width

	*
		- kernel_height

		- kernel height

	*
		- max_width

		- max possible image width, can be used to allocate working buffers

	*
		- max_height

		- max possible image height

	*
		- src_type

		- source image type

	*
		- dst_type

		- destination image type

	*
		- borderType

		- border processing mode (CV_HAL_BORDER_REFLECT, ...)

	*
		- delta

		- added to pixel values

	*
		- anchor_x

		- relative X position of center point within the kernel

	*
		- anchor_y

		- relative Y position of center point within the kernel

	*
		- allowSubmatrix

		- indicates whether the submatrices will be allowed as source image

	*
		- allowInplace

		- indicates whether the inplace operation will be possible



.. rubric:: See also:

:ref:`cv::filter2D <doxid-d4/d86/group__imgproc__filter_1ga27c049795ce870216ddfb366086b5a04>`, cv::hal::Filter2D

.. index:: pair: function; hal_ni_integral
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gad70459985c8ac83beec7ac026944015b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_integral(
		int depth,
		int sdepth,
		int sqdepth,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* sum_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sum_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* sqsum_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sqsum_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* tilted_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` tilted_step,
		int width,
		int height,
		int cn
		)

Calculate integral image.

Following combinations of image depths are used: ======  ======  ==========  
Source  Sum     Square sum  
======  ======  ==========  

CV_8U   CV_32S  CV_64F      
CV_8U   CV_32S  CV_32F      
CV_8U   CV_32S  CV_32S      
CV_8U   CV_32F  CV_64F      
CV_8U   CV_32F  CV_32F      
CV_8U   CV_64F  CV_64F      
CV_16U  CV_64F  CV_64F      
CV_16S  CV_64F  CV_64F      
CV_32F  CV_32F  CV_64F      
CV_32F  CV_32F  CV_32F      
CV_32F  CV_64F  CV_64F      
CV_64F  CV_64F  CV_64F      
======  ======  ==========



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- depth

		- 

	*
		- sdepth

		- 

	*
		- sqdepth

		- Depths of source image, sum image and square sum image

	*
		- src_data

		- 

	*
		- src_step

		- Source image

	*
		- sum_data

		- 

	*
		- sum_step

		- Sum image

	*
		- sqsum_data

		- 

	*
		- sqsum_step

		- Square sum image

	*
		- tilted_data

		- 

	*
		- tilted_step

		- Tilted sum image

	*
		- width

		- 

	*
		- height

		- Source image dimensions

	*
		- cn

		- Number of channels



.. rubric:: See also:

:ref:`cv::integral <doxid-d7/d1b/group__imgproc__misc_1gadeaf38d7701d7ad371278d663c50c77d>`

.. index:: pair: function; hal_ni_morph
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gac46ce17945a0e34ecef12d70cf03ce2d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_morph(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int src_full_width,
		int src_full_height,
		int src_roi_x,
		int src_roi_y,
		int dst_full_width,
		int dst_full_height,
		int dst_roi_x,
		int dst_roi_y
		)

hal_morph



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- pointer to user-defined context

	*
		- src_data

		- source image data

	*
		- src_step

		- source image step

	*
		- dst_data

		- destination image data

	*
		- dst_step

		- destination image step

	*
		- width

		- images width

	*
		- height

		- images height

	*
		- src_full_width

		- full width of source image (outside the ROI)

	*
		- src_full_height

		- full height of source image (outside the ROI)

	*
		- src_roi_x

		- source image ROI X offset

	*
		- src_roi_y

		- source image ROI Y offset

	*
		- dst_full_width

		- full width of destination image

	*
		- dst_full_height

		- full height of destination image

	*
		- dst_roi_x

		- destination image ROI X offset

	*
		- dst_roi_y

		- destination image ROI Y offset



.. rubric:: See also:

:ref:`cv::erode <doxid-d4/d86/group__imgproc__filter_1gaeb1e0c1033e3f6b891a25d0511362aeb>`, :ref:`cv::dilate <doxid-d4/d86/group__imgproc__filter_1ga4ff0f3318642c4f469d0e11f242f3b6c>`, :ref:`cv::morphologyEx <doxid-d4/d86/group__imgproc__filter_1ga67493776e3ad1a3df63883829375201f>`, cv::hal::Morph

.. index:: pair: function; hal_ni_morphFree
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gaf73f8539e1be0757a378ddb34aade194:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_morphFree(:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context)

hal_morphFree



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- pointer to user-defined context



.. rubric:: See also:

:ref:`cv::erode <doxid-d4/d86/group__imgproc__filter_1gaeb1e0c1033e3f6b891a25d0511362aeb>`, :ref:`cv::dilate <doxid-d4/d86/group__imgproc__filter_1ga4ff0f3318642c4f469d0e11f242f3b6c>`, :ref:`cv::morphologyEx <doxid-d4/d86/group__imgproc__filter_1ga67493776e3ad1a3df63883829375201f>`, cv::hal::Morph

.. index:: pair: function; hal_ni_morphInit
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga266f3d95e31d6acdb9bdc538643abf16:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_morphInit(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`** context,
		int operation,
		int src_type,
		int dst_type,
		int max_width,
		int max_height,
		int kernel_type,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernel_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` kernel_step,
		int kernel_width,
		int kernel_height,
		int anchor_x,
		int anchor_y,
		int borderType,
		const double borderValue [4],
		int iterations,
		bool allowSubmatrix,
		bool allowInplace
		)

hal_morphInit



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- double pointer to user-defined context

	*
		- operation

		- morphology operation CV_HAL_MORPH_ERODE or CV_HAL_MORPH_DILATE

	*
		- src_type

		- source image type

	*
		- dst_type

		- destination image type

	*
		- max_width

		- max possible image width, can be used to allocate working buffers

	*
		- max_height

		- max possible image height

	*
		- kernel_type

		- kernel type (CV_8U, ...)

	*
		- kernel_data

		- pointer to kernel data

	*
		- kernel_step

		- kernel step

	*
		- kernel_width

		- kernel width

	*
		- kernel_height

		- kernel height

	*
		- anchor_x

		- relative X position of center point within the kernel

	*
		- anchor_y

		- relative Y position of center point within the kernel

	*
		- borderType

		- border processing mode (CV_HAL_BORDER_REFLECT, ...)

	*
		- borderValue

		- values to use for CV_HAL_BORDER_CONSTANT mode

	*
		- iterations

		- number of iterations

	*
		- allowSubmatrix

		- indicates whether the submatrices will be allowed as source image

	*
		- allowInplace

		- indicates whether the inplace operation will be possible



.. rubric:: See also:

:ref:`cv::erode <doxid-d4/d86/group__imgproc__filter_1gaeb1e0c1033e3f6b891a25d0511362aeb>`, :ref:`cv::dilate <doxid-d4/d86/group__imgproc__filter_1ga4ff0f3318642c4f469d0e11f242f3b6c>`, :ref:`cv::morphologyEx <doxid-d4/d86/group__imgproc__filter_1ga67493776e3ad1a3df63883829375201f>`, cv::hal::Morph

.. index:: pair: function; hal_ni_resize
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga1a1274535172aff5cd50a64eed7d53ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_resize(
		int src_type,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		int src_width,
		int src_height,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		double inv_scale_x,
		double inv_scale_y,
		int interpolation
		)

hal_resize



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_type

		- source and destination image type

	*
		- src_data

		- source image data

	*
		- src_step

		- source image step

	*
		- src_width

		- source image width

	*
		- src_height

		- source image height

	*
		- dst_data

		- destination image data

	*
		- dst_step

		- destination image step

	*
		- dst_width

		- destination image width

	*
		- dst_height

		- destination image height

	*
		- inv_scale_x

		- inversed scale X coefficient

	*
		- inv_scale_y

		- inversed scale Y coefficient

	*
		- interpolation

		- interpolation mode (CV_HAL_INTER_NEAREST, ...)



.. rubric:: See also:

:ref:`cv::resize <doxid-da/d54/group__imgproc__transform_1ga47a974309e9102f5f08231edc7e7529d>`, :ref:`cv::hal::resize <doxid-d5/df1/group__imgproc__hal__functions_1ga2fe39d2201b12e1b961ca56b2aff9ff2>`

.. index:: pair: function; hal_ni_sepFilter
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga4766f8b13fa22383863dafde341a9ce3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_sepFilter(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int width,
		int height,
		int full_width,
		int full_height,
		int offset_x,
		int offset_y
		)

hal_sepFilter



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- pointer to user-defined context

	*
		- src_data

		- source image data

	*
		- src_step

		- source image step

	*
		- dst_data

		- destination image data

	*
		- dst_step

		- destination image step

	*
		- width

		- images width

	*
		- height

		- images height

	*
		- full_width

		- full width of source image (outside the ROI)

	*
		- full_height

		- full height of source image (outside the ROI)

	*
		- offset_x

		- source image ROI offset X

	*
		- offset_y

		- source image ROI offset Y



.. rubric:: See also:

:ref:`cv::sepFilter2D <doxid-d4/d86/group__imgproc__filter_1ga910e29ff7d7b105057d1625a4bf6318d>`, cv::hal::SepFilter2D

.. index:: pair: function; hal_ni_sepFilterFree
.. _doxid-dd/d8b/group__imgproc__hal__interface_1gadaac832d83a075675ec716e3d545634a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_sepFilterFree(:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`* context)

hal_sepFilterFree



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- pointer to user-defined context



.. rubric:: See also:

:ref:`cv::sepFilter2D <doxid-d4/d86/group__imgproc__filter_1ga910e29ff7d7b105057d1625a4bf6318d>`, cv::hal::SepFilter2D

.. index:: pair: function; hal_ni_sepFilterInit
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga08bf36c5ceabd864a894e4cb3bf4c974:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_sepFilterInit(
		:ref:`cvhalFilter2D<doxid-d4/d52/structcvhal_filter2_d>`** context,
		int src_type,
		int dst_type,
		int kernel_type,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernelx_data,
		int kernelx_length,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* kernely_data,
		int kernely_length,
		int anchor_x,
		int anchor_y,
		double delta,
		int borderType
		)

hal_sepFilterInit



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- context

		- double pointer to user-defined context

	*
		- src_type

		- source image type

	*
		- dst_type

		- destination image type

	*
		- kernel_type

		- kernels type

	*
		- kernelx_data

		- pointer to x-kernel data

	*
		- kernelx_length

		- x-kernel vector length

	*
		- kernely_data

		- pointer to y-kernel data

	*
		- kernely_length

		- y-kernel vector length

	*
		- anchor_x

		- relative X position of center point within the kernel

	*
		- anchor_y

		- relative Y position of center point within the kernel

	*
		- delta

		- added to pixel values

	*
		- borderType

		- border processing mode (CV_HAL_BORDER_REFLECT, ...)



.. rubric:: See also:

:ref:`cv::sepFilter2D <doxid-d4/d86/group__imgproc__filter_1ga910e29ff7d7b105057d1625a4bf6318d>`, cv::hal::SepFilter2D

.. index:: pair: function; hal_ni_warpAffine
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga9e08b16f6f130d8486ce30d284d032a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_warpAffine(
		int src_type,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		int src_width,
		int src_height,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		const double M [6],
		int interpolation,
		int borderType,
		const double borderValue [4]
		)

hal_warpAffine



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_type

		- source and destination image type

	*
		- src_data

		- source image data

	*
		- src_step

		- source image step

	*
		- src_width

		- source image width

	*
		- src_height

		- source image height

	*
		- dst_data

		- destination image data

	*
		- dst_step

		- destination image step

	*
		- dst_width

		- destination image width

	*
		- dst_height

		- destination image height

	*
		- M

		- 2x3 matrix with transform coefficients

	*
		- interpolation

		- interpolation mode (CV_HAL_INTER_NEAREST, ...)

	*
		- borderType

		- border processing mode (CV_HAL_BORDER_REFLECT, ...)

	*
		- borderValue

		- values to use for CV_HAL_BORDER_CONSTANT mode



.. rubric:: See also:

:ref:`cv::warpAffine <doxid-da/d54/group__imgproc__transform_1ga0203d9ee5fcd28d40dbc4a1ea4451983>`, :ref:`cv::hal::warpAffine <doxid-d5/df1/group__imgproc__hal__functions_1ga8a534cca6fb845c9ac77f10c35f67c0c>`

.. index:: pair: function; hal_ni_warpPerspectve
.. _doxid-dd/d8b/group__imgproc__hal__interface_1ga1b16a8e9e57dedf60fc16761d9e02e04:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hal_ni_warpPerspectve(
		int src_type,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* src_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` src_step,
		int src_width,
		int src_height,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* dst_data,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` dst_step,
		int dst_width,
		int dst_height,
		const double M [9],
		int interpolation,
		int borderType,
		const double borderValue [4]
		)

hal_warpPerspectve



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src_type

		- source and destination image type

	*
		- src_data

		- source image data

	*
		- src_step

		- source image step

	*
		- src_width

		- source image width

	*
		- src_height

		- source image height

	*
		- dst_data

		- destination image data

	*
		- dst_step

		- destination image step

	*
		- dst_width

		- destination image width

	*
		- dst_height

		- destination image height

	*
		- M

		- 3x3 matrix with transform coefficients

	*
		- interpolation

		- interpolation mode (CV_HAL_INTER_NEAREST, ...)

	*
		- borderType

		- border processing mode (CV_HAL_BORDER_REFLECT, ...)

	*
		- borderValue

		- values to use for CV_HAL_BORDER_CONSTANT mode



.. rubric:: See also:

:ref:`cv::warpPerspective <doxid-da/d54/group__imgproc__transform_1gaf73673a7e8e18ec6963e3774e6a94b87>`, cv::hal::warpPerspective

