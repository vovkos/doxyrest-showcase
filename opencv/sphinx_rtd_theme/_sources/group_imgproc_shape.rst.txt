.. index:: pair: group; Structural Analysis and Shape Descriptors
.. _doxid-d3/dc0/group__imgproc__shape:

Structural Analysis and Shape Descriptors
=========================================

.. toctree::
	:hidden:

	enum_cv_ConnectedComponentsAlgorithmsTypes.rst
	enum_cv_ConnectedComponentsTypes.rst
	enum_cv_ContourApproximationModes.rst
	enum_cv_RectanglesIntersectTypes.rst
	enum_cv_RetrievalModes.rst
	enum_cv_ShapeMatchModes.rst
	class_cv_Moments.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::ConnectedComponentsAlgorithmsTypes<doxid-d3/dc0/group__imgproc__shape_1ga5ed7784614678adccb699c70fb841075>`;
	enum :ref:`cv::ConnectedComponentsTypes<doxid-d3/dc0/group__imgproc__shape_1gac7099124c0390051c6970a987e7dc5c5>`;
	enum :ref:`cv::ContourApproximationModes<doxid-d3/dc0/group__imgproc__shape_1ga4303f45752694956374734a03c54d5ff>`;
	enum :ref:`cv::RectanglesIntersectTypes<doxid-d3/dc0/group__imgproc__shape_1gaaf0eb9e10bd5adcbd446cd31fea2db68>`;
	enum :ref:`cv::RetrievalModes<doxid-d3/dc0/group__imgproc__shape_1ga819779b9857cc2f8601e6526a3a5bc71>`;
	enum :ref:`cv::ShapeMatchModes<doxid-d3/dc0/group__imgproc__shape_1gaf2b97a230b51856d09a2d934b78c015f>`;

	// classes

	class :ref:`cv::Moments<doxid-d9/d06/classcv_1_1_moments>`;

	// global functions

	void
	:ref:`cv::approxPolyDP<doxid-d3/dc0/group__imgproc__shape_1ga0012a5fdaea70b8a9970165d98722b4c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` curve,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` approxCurve,
		double epsilon,
		bool closed
		);

	double
	:ref:`cv::arcLength<doxid-d3/dc0/group__imgproc__shape_1ga8d26483c636be6b35c3ec6335798a47c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` curve,
		bool closed
		);

	:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`
	:ref:`cv::boundingRect<doxid-d3/dc0/group__imgproc__shape_1gacb413ddce8e48ff3ca61ed7cf626a366>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points);

	void
	:ref:`cv::boxPoints<doxid-d3/dc0/group__imgproc__shape_1gaf78d467e024b4d7936cf9397185d2f5c>`(
		:ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>` box,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` points
		);

	int
	:ref:`cv::connectedComponents<doxid-d3/dc0/group__imgproc__shape_1gaedef8c7340499ca391d459122e51bef5>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		int connectivity,
		int ltype,
		int ccltype
		);

	int
	:ref:`cv::connectedComponents<doxid-d3/dc0/group__imgproc__shape_1gac2718a64ade63475425558aa669a943a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		int connectivity = 8,
		int ltype = :ref:`CV_32S<doxid-d1/d1b/group__core__hal__interface_1ga4067910fc388075c3ea3aa14393e83b9>`
		);

	int
	:ref:`cv::connectedComponentsWithStats<doxid-d3/dc0/group__imgproc__shape_1ga107a78bf7cd25dec05fb4dfc5c9e765f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stats,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centroids,
		int connectivity,
		int ltype,
		int ccltype
		);

	int
	:ref:`cv::connectedComponentsWithStats<doxid-d3/dc0/group__imgproc__shape_1gae57b028a2b2ca327227c2399a9d53241>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stats,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centroids,
		int connectivity = 8,
		int ltype = :ref:`CV_32S<doxid-d1/d1b/group__core__hal__interface_1ga4067910fc388075c3ea3aa14393e83b9>`
		);

	double
	:ref:`cv::contourArea<doxid-d3/dc0/group__imgproc__shape_1ga2c759ed9f497d4a618048a2f56dc97f1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour,
		bool oriented = false
		);

	void
	:ref:`cv::convexHull<doxid-d3/dc0/group__imgproc__shape_1ga014b28e56cb8854c0de4a211cb2be656>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` hull,
		bool clockwise = false,
		bool returnPoints = true
		);

	void
	:ref:`cv::convexityDefects<doxid-d3/dc0/group__imgproc__shape_1gada4437098113fd8683c932e0567f47ba>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` convexhull,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` convexityDefects
		);

	void
	:ref:`cv::findContours<doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` contours,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` hierarchy,
		int mode,
		int method,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		);

	void
	:ref:`cv::findContours<doxid-d3/dc0/group__imgproc__shape_1ga95f5b48d01abc7c2e0732db24689837b>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` contours,
		int mode,
		int method,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		);

	:ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`
	:ref:`cv::fitEllipse<doxid-d3/dc0/group__imgproc__shape_1gaf259efaad93098103d6c27b9e4900ffa>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points);

	void
	:ref:`cv::fitLine<doxid-d3/dc0/group__imgproc__shape_1gaf849da1fdafa67ee84b1e9a23b93f91f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` line,
		int distType,
		double param,
		double reps,
		double aeps
		);

	void
	:ref:`cv::HuMoments<doxid-d3/dc0/group__imgproc__shape_1gab001db45c1f1af6cbdbe64df04c4e944>`(
		const :ref:`Moments<doxid-d9/d06/classcv_1_1_moments>`& moments,
		double hu [7]
		);

	void
	:ref:`cv::HuMoments<doxid-d3/dc0/group__imgproc__shape_1ga6d6ac1b519cba25190119afe3a52c1cc>`(
		const :ref:`Moments<doxid-d9/d06/classcv_1_1_moments>`& m,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` hu
		);

	float
	:ref:`cv::intersectConvexConvex<doxid-d3/dc0/group__imgproc__shape_1ga8e840f3f3695613d32c052bec89e782c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` _p1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` _p2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` _p12,
		bool handleNested = true
		);

	bool
	:ref:`cv::isContourConvex<doxid-d3/dc0/group__imgproc__shape_1ga8abf8010377b58cbc16db6734d92941b>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour);

	double
	:ref:`cv::matchShapes<doxid-d3/dc0/group__imgproc__shape_1gaadc90cb16e2362c9bd6e7363e6e4c317>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour2,
		int method,
		double parameter
		);

	:ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`
	:ref:`cv::minAreaRect<doxid-d3/dc0/group__imgproc__shape_1ga3d476a3417130ae5154aea421ca7ead9>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points);

	void
	:ref:`cv::minEnclosingCircle<doxid-d3/dc0/group__imgproc__shape_1ga8ce13c24081bbc7151e9326f412190f1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`& center,
		float& radius
		);

	double
	:ref:`cv::minEnclosingTriangle<doxid-d3/dc0/group__imgproc__shape_1ga1513e72f6bbdfc370563664f71e0542f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` triangle
		);

	:ref:`Moments<doxid-d9/d06/classcv_1_1_moments>`
	:ref:`cv::moments<doxid-d3/dc0/group__imgproc__shape_1ga556a180f43cab22649c23ada36a8a139>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` array,
		bool binaryImage = false
		);

	double
	:ref:`cv::pointPolygonTest<doxid-d3/dc0/group__imgproc__shape_1ga1a539e8db2135af2566103705d7a5722>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
		bool measureDist
		);

	int
	:ref:`cv::rotatedRectangleIntersection<doxid-d3/dc0/group__imgproc__shape_1ga8740e7645628c59d238b0b22c2abe2d4>`(
		const :ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`& rect1,
		const :ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`& rect2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` intersectingRegion
		);

.. _details-d3/dc0/group__imgproc__shape:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; approxPolyDP
.. _doxid-d3/dc0/group__imgproc__shape_1ga0012a5fdaea70b8a9970165d98722b4c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::approxPolyDP(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` curve,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` approxCurve,
		double epsilon,
		bool closed
		)

Approximates a polygonal curve(s) with the specified precision.

The function :ref:`cv::approxPolyDP <doxid-d3/dc0/group__imgproc__shape_1ga0012a5fdaea70b8a9970165d98722b4c>` approximates a curve or a polygon with another curve/polygon with less vertices so that the distance between them is less or equal to the specified precision. It uses the Douglas-Peucker algorithm `http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm <http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm>`__



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- curve

		- Input vector of a 2D point stored in std::vector or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

	*
		- approxCurve

		- Result of the approximation. The type should match the type of the input curve.

	*
		- epsilon

		- Parameter specifying the approximation accuracy. This is the maximum distance between the original curve and its approximation.

	*
		- closed

		- If true, the approximated curve is closed (its first and last vertices are connected). Otherwise, it is not closed.

.. index:: pair: function; arcLength
.. _doxid-d3/dc0/group__imgproc__shape_1ga8d26483c636be6b35c3ec6335798a47c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::arcLength(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` curve,
		bool closed
		)

Calculates a contour perimeter or a curve length.

The function computes a curve length or a closed contour perimeter.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- curve

		- Input vector of 2D points, stored in std::vector or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.

	*
		- closed

		- Flag indicating whether the curve is closed or not.

.. index:: pair: function; boundingRect
.. _doxid-d3/dc0/group__imgproc__shape_1gacb413ddce8e48ff3ca61ed7cf626a366:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`
	cv::boundingRect(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points)

Calculates the up-right bounding rectangle of a point set.

The function calculates and returns the minimal up-right bounding rectangle for the specified point set.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input 2D point set, stored in std::vector or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.

.. index:: pair: function; boxPoints
.. _doxid-d3/dc0/group__imgproc__shape_1gaf78d467e024b4d7936cf9397185d2f5c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::boxPoints(
		:ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>` box,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` points
		)

Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.

The function finds the four vertices of a rotated rectangle. This function is useful to draw the rectangle. In C++, instead of using this function, you can directly use box.points() method. Please visit the `tutorial on bounding rectangle <http://docs.opencv.org/doc/tutorials/imgproc/shapedescriptors/bounding_rects_circles/bounding_rects_circles.html#bounding-rects-circles>`__ for more information.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- box

		- The input rotated rectangle. It may be the output of

	*
		- points

		- The output array of four vertices of rectangles.

.. index:: pair: function; connectedComponents
.. _doxid-d3/dc0/group__imgproc__shape_1gaedef8c7340499ca391d459122e51bef5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::connectedComponents(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		int connectivity,
		int ltype,
		int ccltype
		)

computes the connected components labeled image of boolean image

image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0 represents the background label. ltype specifies the output label image type, an important consideration based on the total number of labels or alternatively the total number of pixels in the source image. ccltype specifies the connected components labeling algorithm to use, currently Grana (BBDT) and Wu's (SAUF) algorithms are supported, see the :ref:`cv::ConnectedComponentsAlgorithmsTypes <doxid-d3/dc0/group__imgproc__shape_1ga5ed7784614678adccb699c70fb841075>` for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not. This function uses parallel version of both Grana and Wu's algorithms if at least one allowed parallel framework is enabled and if the rows of the image are at least twice the number returned by getNumberOfCPUs.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- the 8-bit single-channel image to be labeled

	*
		- labels

		- destination labeled image

	*
		- connectivity

		- 8 or 4 for 8-way or 4-way connectivity respectively

	*
		- ltype

		- output image label type. Currently CV_32S and CV_16U are supported.

	*
		- ccltype

		- connected components algorithm type (see the :ref:`cv::ConnectedComponentsAlgorithmsTypes <doxid-d3/dc0/group__imgproc__shape_1ga5ed7784614678adccb699c70fb841075>`).

.. index:: pair: function; connectedComponents
.. _doxid-d3/dc0/group__imgproc__shape_1gac2718a64ade63475425558aa669a943a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::connectedComponents(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		int connectivity = 8,
		int ltype = :ref:`CV_32S<doxid-d1/d1b/group__core__hal__interface_1ga4067910fc388075c3ea3aa14393e83b9>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- the 8-bit single-channel image to be labeled

	*
		- labels

		- destination labeled image

	*
		- connectivity

		- 8 or 4 for 8-way or 4-way connectivity respectively

	*
		- ltype

		- output image label type. Currently CV_32S and CV_16U are supported.

.. index:: pair: function; connectedComponentsWithStats
.. _doxid-d3/dc0/group__imgproc__shape_1ga107a78bf7cd25dec05fb4dfc5c9e765f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::connectedComponentsWithStats(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stats,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centroids,
		int connectivity,
		int ltype,
		int ccltype
		)

computes the connected components labeled image of boolean image and also produces a statistics output for each label

image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0 represents the background label. ltype specifies the output label image type, an important consideration based on the total number of labels or alternatively the total number of pixels in the source image. ccltype specifies the connected components labeling algorithm to use, currently Grana's (BBDT) and Wu's (SAUF) algorithms are supported, see the :ref:`cv::ConnectedComponentsAlgorithmsTypes <doxid-d3/dc0/group__imgproc__shape_1ga5ed7784614678adccb699c70fb841075>` for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not. This function uses parallel version of both Grana and Wu's algorithms (statistics included) if at least one allowed parallel framework is enabled and if the rows of the image are at least twice the number returned by getNumberOfCPUs.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- the 8-bit single-channel image to be labeled

	*
		- labels

		- destination labeled image

	*
		- stats

		- statistics output for each label, including the background label, see below for available statistics. Statistics are accessed via stats(label, COLUMN) where COLUMN is one of :ref:`cv::ConnectedComponentsTypes <doxid-d3/dc0/group__imgproc__shape_1gac7099124c0390051c6970a987e7dc5c5>`. The data type is CV_32S.

	*
		- centroids

		- centroid output for each label, including the background label. Centroids are accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.

	*
		- connectivity

		- 8 or 4 for 8-way or 4-way connectivity respectively

	*
		- ltype

		- output image label type. Currently CV_32S and CV_16U are supported.

	*
		- ccltype

		- connected components algorithm type (see the :ref:`cv::ConnectedComponentsAlgorithmsTypes <doxid-d3/dc0/group__imgproc__shape_1ga5ed7784614678adccb699c70fb841075>`).

.. index:: pair: function; connectedComponentsWithStats
.. _doxid-d3/dc0/group__imgproc__shape_1gae57b028a2b2ca327227c2399a9d53241:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::connectedComponentsWithStats(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stats,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centroids,
		int connectivity = 8,
		int ltype = :ref:`CV_32S<doxid-d1/d1b/group__core__hal__interface_1ga4067910fc388075c3ea3aa14393e83b9>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- the 8-bit single-channel image to be labeled

	*
		- labels

		- destination labeled image

	*
		- stats

		- statistics output for each label, including the background label, see below for available statistics. Statistics are accessed via stats(label, COLUMN) where COLUMN is one of :ref:`cv::ConnectedComponentsTypes <doxid-d3/dc0/group__imgproc__shape_1gac7099124c0390051c6970a987e7dc5c5>`. The data type is CV_32S.

	*
		- centroids

		- centroid output for each label, including the background label. Centroids are accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.

	*
		- connectivity

		- 8 or 4 for 8-way or 4-way connectivity respectively

	*
		- ltype

		- output image label type. Currently CV_32S and CV_16U are supported.

.. index:: pair: function; contourArea
.. _doxid-d3/dc0/group__imgproc__shape_1ga2c759ed9f497d4a618048a2f56dc97f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::contourArea(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour,
		bool oriented = false
		)

Calculates a contour area.

The function computes a contour area. Similarly to moments , the area is computed using the Green formula. Thus, the returned area and the number of non-zero pixels, if you draw the contour using drawContours or fillPoly , can be different. Also, the function will most certainly give a wrong results for contours with self-intersections.

Example:

.. ref-code-block:: cpp

	vector<Point> contour;
	contour.push_back(Point2f(0, 0));
	contour.push_back(Point2f(10, 0));
	contour.push_back(Point2f(10, 10));
	contour.push_back(Point2f(5, 4));
	
	double area0 = contourArea(contour);
	vector<Point> approx;
	approxPolyDP(contour, approx, 5, true);
	double area1 = contourArea(approx);
	
	cout << "area0 =" << area0 << endl <<
	        "area1 =" << area1 << endl <<
	        "approx poly vertices" << approx.size() << endl;



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- contour

		- Input vector of 2D points (contour vertices), stored in std::vector or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.

	*
		- oriented

		- Oriented area flag. If it is true, the function returns a signed area value, depending on the contour orientation (clockwise or counter-clockwise). Using this feature you can determine orientation of a contour by taking the sign of an area. By default, the parameter is false, which means that the absolute value is returned.

.. index:: pair: function; convexHull
.. _doxid-d3/dc0/group__imgproc__shape_1ga014b28e56cb8854c0de4a211cb2be656:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convexHull(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` hull,
		bool clockwise = false,
		bool returnPoints = true
		)

Finds the convex hull of a point set.

The function :ref:`cv::convexHull <doxid-d3/dc0/group__imgproc__shape_1ga014b28e56cb8854c0de4a211cb2be656>` finds the convex hull of a 2D point set using the Sklansky's algorithm :ref:`[77] <doxid-d0/de3/citelist_1CITEREF_Sklansky82>` that has *O(N logN)* complexity in the current implementation. See the OpenCV sample convexhull.cpp that demonstrates the usage of different function variants.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input 2D point set, stored in std::vector or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.

	*
		- hull

		- Output convex hull. It is either an integer vector of indices or vector of points. In the first case, the hull elements are 0-based indices of the convex hull points in the original array (since the set of convex hull points is a subset of the original point set). In the second case, hull elements are the convex hull points themselves.

	*
		- clockwise

		- Orientation flag. If it is true, the output convex hull is oriented clockwise. Otherwise, it is oriented counter-clockwise. The assumed coordinate system has its X axis pointing to the right, and its Y axis pointing upwards.

	*
		- returnPoints

		- Operation flag. In case of a matrix, when the flag is true, the function returns convex hull points. Otherwise, it returns indices of the convex hull points. When the output array is std::vector, the flag is ignored, and the output depends on the type of the vector: std::vector<int> implies returnPoints=false, std::vector<Point> implies returnPoints=true.

.. index:: pair: function; convexityDefects
.. _doxid-d3/dc0/group__imgproc__shape_1gada4437098113fd8683c932e0567f47ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convexityDefects(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` convexhull,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` convexityDefects
		)

Finds the convexity defects of a contour.

The figure below displays convexity defects of a hand contour:

.. image:: defects.png
	:alt: image



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- contour

		- Input contour.

	*
		- convexhull

		- Convex hull obtained using convexHull that should contain indices of the contour points that make the hull.

	*
		- convexityDefects

		- The output vector of convexity defects. In C++ and the new Python/Java interface each convexity defect is represented as 4-element integer vector (a.k.a. :ref:`cv::Vec4i <doxid-dc/d84/group__core__basic_1ga94ce799099ae6cdd66685e3fd0cad7d7>`): (start_index, end_index, farthest_pt_index, fixpt_depth), where indices are 0-based indices in the original contour of the convexity defect beginning, end and the farthest point, and fixpt_depth is fixed-point approximation (with 8 fractional bits) of the distance between the farthest contour point and the hull. That is, to get the floating-point value of the depth will be fixpt_depth/256.0.

.. index:: pair: function; findContours
.. _doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::findContours(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` contours,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` hierarchy,
		int mode,
		int method,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		)

Finds contours in a binary image.

The function retrieves contours from the binary image using the algorithm :ref:`[80] <doxid-d0/de3/citelist_1CITEREF_Suzuki85>`. The contours are a useful tool for shape analysis and object detection and recognition. See squares.cpp in the OpenCV sample directory. Since opencv 3.2 source image is not modified by this function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Source, an 8-bit single-channel image. Non-zero pixels are treated as 1's. Zero pixels remain 0's, so the image is treated as binary . You can use :ref:`cv::compare <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`, :ref:`cv::inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`, :ref:`cv::threshold <doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57>`, :ref:`cv::adaptiveThreshold <doxid-d7/d1b/group__imgproc__misc_1ga72b913f352e4a1b1b397736707afcde3>`, :ref:`cv::Canny <doxid-dd/d1a/group__imgproc__feature_1ga04723e007ed888ddf11d9ba04e2232de>`, and others to create a binary image out of a grayscale or color one. If mode equals to :ref:`cv::RETR_CCOMP <doxid-d3/dc0/group__imgproc__shape_1gga819779b9857cc2f8601e6526a3a5bc71a7d1d4b509fb2a9a8dc2f960357748752>` or :ref:`cv::RETR_FLOODFILL <doxid-d3/dc0/group__imgproc__shape_1gga819779b9857cc2f8601e6526a3a5bc71acc80715d6a2a51855cb3a9a8093a9352>`, the input can also be a 32-bit integer image of labels (CV_32SC1).

	*
		- contours

		- Detected contours. Each contour is stored as a vector of points (e.g. std::vector<std::vector<cv::Point> >).

	*
		- hierarchy

		- Optional output vector (e.g. std::vector<cv::Vec4i>), containing information about the image topology. It has as many elements as the number of contours. For each i-th contour contours[i], the elements hierarchy[i][0] , hierarchy[i][1] , hierarchy[i][2] , and hierarchy[i][3] are set to 0-based indices in contours of the next and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.

	*
		- mode

		- Contour retrieval mode, see :ref:`cv::RetrievalModes <doxid-d3/dc0/group__imgproc__shape_1ga819779b9857cc2f8601e6526a3a5bc71>`

	*
		- method

		- Contour approximation method, see :ref:`cv::ContourApproximationModes <doxid-d3/dc0/group__imgproc__shape_1ga4303f45752694956374734a03c54d5ff>`

	*
		- offset

		- Optional offset by which every contour point is shifted. This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.

.. index:: pair: function; findContours
.. _doxid-d3/dc0/group__imgproc__shape_1ga95f5b48d01abc7c2e0732db24689837b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::findContours(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` contours,
		int mode,
		int method,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; fitEllipse
.. _doxid-d3/dc0/group__imgproc__shape_1gaf259efaad93098103d6c27b9e4900ffa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`
	cv::fitEllipse(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points)

Fits an ellipse around a set of 2D points.

The function calculates the ellipse that fits (in a least-squares sense) a set of 2D points best of all. It returns the rotated rectangle in which the ellipse is inscribed. The first algorithm described by :ref:`[27] <doxid-d0/de3/citelist_1CITEREF_Fitzgibbon95>` is used. Developer should keep in mind that it is possible that the returned ellipse/rotatedRect data contains negative indices, due to the data points being close to the border of the containing :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input 2D point set, stored in std::vector<> or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

.. index:: pair: function; fitLine
.. _doxid-d3/dc0/group__imgproc__shape_1gaf849da1fdafa67ee84b1e9a23b93f91f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::fitLine(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` line,
		int distType,
		double param,
		double reps,
		double aeps
		)

Fits a line to a 2D or 3D point set.

The function fitLine fits a line to a 2D or 3D point set by minimizing :math:`\sum_i \rho(r_i)` where :math:`r_i` is a distance between the :math:`i^{th}` point, the line and :math:`\rho(r)` is a distance function, one of the following:

* DIST_L2
  
  .. math::
  
  	\rho (r) = r^2/2 \quad \text{(the simplest and the fastest least-squares method)}

* DIST_L1
  
  .. math::
  
  	\rho (r) = r

* DIST_L12
  
  .. math::
  
  	\rho (r) = 2 \cdot ( \sqrt{1 + \frac{r^2}{2}} - 1)

* DIST_FAIR
  
  .. math::
  
  	\rho \left (r \right ) = C^2 \cdot \left ( \frac{r}{C} - \log{\left(1 + \frac{r}{C}\right)} \right ) \quad \text{where} \quad C=1.3998

* DIST_WELSCH
  
  .. math::
  
  	\rho \left (r \right ) = \frac{C^2}{2} \cdot \left ( 1 - \exp{\left(-\left(\frac{r}{C}\right)^2\right)} \right ) \quad \text{where} \quad C=2.9846

* DIST_HUBER
  
  .. math::
  
  	\rho (r) = \fork{r^2/2}{if \(r < C\)}{C \cdot (r-C/2)}{otherwise} \quad \text{where} \quad C=1.345

The algorithm is based on the M-estimator (`http://en.wikipedia.org/wiki/M-estimator <http://en.wikipedia.org/wiki/M-estimator>`__) technique that iteratively fits the line using the weighted least-squares algorithm. After each iteration the weights :math:`w_i` are adjusted to be inversely proportional to :math:`\rho(r_i)`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input vector of 2D or 3D points, stored in std::vector<> or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.

	*
		- line

		- Output line parameters. In case of 2D fitting, it should be a vector of 4 elements (like Vec4f) - (vx, vy, x0, y0), where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is a point on the line. In case of 3D fitting, it should be a vector of 6 elements (like Vec6f) - (vx, vy, vz, x0, y0, z0), where (vx, vy, vz) is a normalized vector collinear to the line and (x0, y0, z0) is a point on the line.

	*
		- distType

		- Distance used by the M-estimator, see :ref:`cv::DistanceTypes <doxid-d7/d1b/group__imgproc__misc_1gaa2bfbebbc5c320526897996aafa1d8eb>`

	*
		- param

		- Numerical parameter ( C ) for some types of distances. If it is 0, an optimal value is chosen.

	*
		- reps

		- Sufficient accuracy for the radius (distance between the coordinate origin and the line).

	*
		- aeps

		- Sufficient accuracy for the angle. 0.01 would be a good default value for reps and aeps.

.. index:: pair: function; HuMoments
.. _doxid-d3/dc0/group__imgproc__shape_1gab001db45c1f1af6cbdbe64df04c4e944:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::HuMoments(
		const :ref:`Moments<doxid-d9/d06/classcv_1_1_moments>`& moments,
		double hu [7]
		)

Calculates seven Hu invariants.

The function calculates seven Hu invariants (introduced in :ref:`[40] <doxid-d0/de3/citelist_1CITEREF_Hu62>`; see also `http://en.wikipedia.org/wiki/Image_moment <http://en.wikipedia.org/wiki/Image_moment>`__) defined as:

.. math::

	\begin{array}{l} hu[0]= \eta _{20}+ \eta _{02} \\ hu[1]=( \eta _{20}- \eta _{02})^{2}+4 \eta _{11}^{2} \\ hu[2]=( \eta _{30}-3 \eta _{12})^{2}+ (3 \eta _{21}- \eta _{03})^{2} \\ hu[3]=( \eta _{30}+ \eta _{12})^{2}+ ( \eta _{21}+ \eta _{03})^{2} \\ hu[4]=( \eta _{30}-3 \eta _{12})( \eta _{30}+ \eta _{12})[( \eta _{30}+ \eta _{12})^{2}-3( \eta _{21}+ \eta _{03})^{2}]+(3 \eta _{21}- \eta _{03})( \eta _{21}+ \eta _{03})[3( \eta _{30}+ \eta _{12})^{2}-( \eta _{21}+ \eta _{03})^{2}] \\ hu[5]=( \eta _{20}- \eta _{02})[( \eta _{30}+ \eta _{12})^{2}- ( \eta _{21}+ \eta _{03})^{2}]+4 \eta _{11}( \eta _{30}+ \eta _{12})( \eta _{21}+ \eta _{03}) \\ hu[6]=(3 \eta _{21}- \eta _{03})( \eta _{21}+ \eta _{03})[3( \eta _{30}+ \eta _{12})^{2}-( \eta _{21}+ \eta _{03})^{2}]-( \eta _{30}-3 \eta _{12})( \eta _{21}+ \eta _{03})[3( \eta _{30}+ \eta _{12})^{2}-( \eta _{21}+ \eta _{03})^{2}] \\ \end{array}

where :math:`\eta_{ji}` stands for :math:`\texttt{Moments::nu}_{ji}`.

These values are proved to be invariants to the image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. This invariance is proved with the assumption of infinite image resolution. In case of raster images, the computed Hu invariants for the original and transformed images are a bit different.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- moments

		- Input moments computed with moments .

	*
		- hu

		- Output Hu invariants.



.. rubric:: See also:

:ref:`matchShapes <doxid-d3/dc0/group__imgproc__shape_1gaadc90cb16e2362c9bd6e7363e6e4c317>`

.. index:: pair: function; HuMoments
.. _doxid-d3/dc0/group__imgproc__shape_1ga6d6ac1b519cba25190119afe3a52c1cc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::HuMoments(
		const :ref:`Moments<doxid-d9/d06/classcv_1_1_moments>`& m,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` hu
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; intersectConvexConvex
.. _doxid-d3/dc0/group__imgproc__shape_1ga8e840f3f3695613d32c052bec89e782c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	cv::intersectConvexConvex(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` _p1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` _p2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` _p12,
		bool handleNested = true
		)

finds intersection of two convex polygons

.. index:: pair: function; isContourConvex
.. _doxid-d3/dc0/group__imgproc__shape_1ga8abf8010377b58cbc16db6734d92941b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::isContourConvex(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour)

Tests a contour convexity.

The function tests whether the input contour is convex or not. The contour must be simple, that is, without self-intersections. Otherwise, the function output is undefined.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- contour

		- Input vector of 2D points, stored in std::vector<> or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

.. index:: pair: function; matchShapes
.. _doxid-d3/dc0/group__imgproc__shape_1gaadc90cb16e2362c9bd6e7363e6e4c317:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::matchShapes(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour2,
		int method,
		double parameter
		)

Compares two shapes.

The function compares two shapes. All three implemented methods use the Hu invariants (see :ref:`cv::HuMoments <doxid-d3/dc0/group__imgproc__shape_1gab001db45c1f1af6cbdbe64df04c4e944>`)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- contour1

		- First contour or grayscale image.

	*
		- contour2

		- Second contour or grayscale image.

	*
		- method

		- Comparison method, see :ref:`cv::ShapeMatchModes <doxid-d3/dc0/group__imgproc__shape_1gaf2b97a230b51856d09a2d934b78c015f>`

	*
		- parameter

		- Method-specific parameter (not supported now).

.. index:: pair: function; minAreaRect
.. _doxid-d3/dc0/group__imgproc__shape_1ga3d476a3417130ae5154aea421ca7ead9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`
	cv::minAreaRect(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points)

Finds a rotated rectangle of the minimum area enclosing the input 2D point set.

The function calculates and returns the minimum-area bounding rectangle (possibly rotated) for a specified point set. See the OpenCV sample minarea.cpp . Developer should keep in mind that the returned rotatedRect can contain negative indices when data is close to the containing :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` element boundary.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input vector of 2D points, stored in std::vector<> or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

.. index:: pair: function; minEnclosingCircle
.. _doxid-d3/dc0/group__imgproc__shape_1ga8ce13c24081bbc7151e9326f412190f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::minEnclosingCircle(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`& center,
		float& radius
		)

Finds a circle of the minimum area enclosing a 2D point set.

The function finds the minimal enclosing circle of a 2D point set using an iterative algorithm. See the OpenCV sample minarea.cpp .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input vector of 2D points, stored in std::vector<> or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

	*
		- center

		- Output center of the circle.

	*
		- radius

		- Output radius of the circle.

.. index:: pair: function; minEnclosingTriangle
.. _doxid-d3/dc0/group__imgproc__shape_1ga1513e72f6bbdfc370563664f71e0542f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::minEnclosingTriangle(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` triangle
		)

Finds a triangle of minimum area enclosing a 2D point set and returns its area.

The function finds a triangle of minimum area enclosing the given set of 2D points and returns its area. The output for a given 2D point set is shown in the image below. 2D points are depicted in red\* and the enclosing triangle in *yellow*.

.. image:: minenclosingtriangle.png
	:alt: Sample output of the minimum enclosing triangle function

The implementation of the algorithm is based on O'Rourke's :ref:`[64] <doxid-d0/de3/citelist_1CITEREF_ORourke86>` and Klee and Laskowski's :ref:`[43] <doxid-d0/de3/citelist_1CITEREF_KleeLaskowski85>` papers. O'Rourke provides a :math:`\theta(n)` algorithm for finding the minimal enclosing triangle of a 2D convex polygon with n vertices. Since the minEnclosingTriangle function takes a 2D point set as input an additional preprocessing step of computing the convex hull of the 2D point set is required. The complexity of the convexHull function is :math:`O(n log(n))` which is higher than :math:`\theta(n)`. Thus the overall complexity of the function is :math:`O(n log(n))`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input vector of 2D points with depth CV_32S or CV_32F, stored in std::vector<> or :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`

	*
		- triangle

		- Output vector of three 2D points defining the vertices of the triangle. The depth of the OutputArray must be CV_32F.

.. index:: pair: function; moments
.. _doxid-d3/dc0/group__imgproc__shape_1ga556a180f43cab22649c23ada36a8a139:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Moments<doxid-d9/d06/classcv_1_1_moments>`
	cv::moments(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` array,
		bool binaryImage = false
		)

Calculates all of the moments up to the third order of a polygon or rasterized shape.

The function computes moments, up to the 3rd order, of a vector shape or a rasterized shape. The results are returned in the structure :ref:`cv::Moments <doxid-d9/d06/classcv_1_1_moments>`.

Only applicable to contour moments calculations from Python bindings: Note that the numpy type for the input array should be either np.int32 or np.float32.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- array

		- Raster image (single-channel, 8-bit or floating-point 2D array) or an array (:math:`1 \times N` or :math:`N \times 1`) of 2D points (Point or Point2f ).

	*
		- binaryImage

		- If it is true, all non-zero image pixels are treated as 1's. The parameter is used for images only.



.. rubric:: Returns:

moments.



.. rubric:: See also:

:ref:`contourArea <doxid-d3/dc0/group__imgproc__shape_1ga2c759ed9f497d4a618048a2f56dc97f1>`, :ref:`arcLength <doxid-d3/dc0/group__imgproc__shape_1ga8d26483c636be6b35c3ec6335798a47c>`

.. index:: pair: function; pointPolygonTest
.. _doxid-d3/dc0/group__imgproc__shape_1ga1a539e8db2135af2566103705d7a5722:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::pointPolygonTest(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour,
		:ref:`Point2f<doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>` pt,
		bool measureDist
		)

Performs a point-in-contour test.

The function determines whether the point is inside a contour, outside, or lies on an edge (or coincides with a vertex). It returns positive (inside), negative (outside), or zero (on an edge) value, correspondingly. When measureDist=false , the return value is +1, -1, and 0, respectively. Otherwise, the return value is a signed distance between the point and the nearest contour edge.

See below a sample output of the function where each image pixel is tested against the contour:

.. image:: pointpolygon.png
	:alt: sample output



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- contour

		- Input contour.

	*
		- pt

		- Point tested against the contour.

	*
		- measureDist

		- If true, the function estimates the signed distance from the point to the nearest contour edge. Otherwise, the function only checks if the point is inside a contour or not.

.. index:: pair: function; rotatedRectangleIntersection
.. _doxid-d3/dc0/group__imgproc__shape_1ga8740e7645628c59d238b0b22c2abe2d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::rotatedRectangleIntersection(
		const :ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`& rect1,
		const :ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`& rect2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` intersectingRegion
		)

Finds out if there is any intersection between two rotated rectangles.

If there is then the vertices of the intersecting region are returned as well.

Below are some examples of intersection configurations. The hatched pattern indicates the intersecting region and the red vertices are returned by the function.

.. image:: intersection.png
	:alt: intersection examples



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rect1

		- First rectangle

	*
		- rect2

		- Second rectangle

	*
		- intersectingRegion

		- The output array of the verticies of the intersecting region. It returns at most 8 vertices. Stored as std::vector<:ref:`cv::Point2f <doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`> or :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` as Mx1 of type CV_32FC2.



.. rubric:: Returns:

One of :ref:`cv::RectanglesIntersectTypes <doxid-d3/dc0/group__imgproc__shape_1gaaf0eb9e10bd5adcbd446cd31fea2db68>`

