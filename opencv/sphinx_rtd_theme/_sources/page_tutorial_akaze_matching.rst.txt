.. index:: pair: page; AKAZE local features matching
.. _doxid-db/d70/tutorial_akaze_matching:

AKAZE local features matching
=============================

.. rubric:: Introduction

In this tutorial we will learn how to use AKAZE :ref:`[1] <doxid-d0/de3/citelist_1CITEREF_ANB13>` local features to detect and match keypoints on two images. We will find keypoints on a pair of images with given homography matrix, match them and count the

number of inliers (i. e. matches that fit in the given homography).

You can find expanded version of this example here: `https://github.com/pablofdezalc/test_kaze_akaze_opencv <https://github.com/pablofdezalc/test_kaze_akaze_opencv>`__

.. rubric:: Data

We are going to use images 1 and 3 from *Graffity* sequence of Oxford dataset.

.. image:: graf.png

Homography is given by a 3 by 3 matrix:

.. ref-code-block:: cpp

	7.6285898e-01  -2.9922929e-01   2.2567123e+02
	3.3443473e-01   1.0143901e+00  -7.6999973e+01
	3.4663091e-04  -1.4364524e-05   1.0000000e+00

You can find the images (*graf1.png*, *graf3.png*) and homography (*H1to3p.xml*) in *opencv/samples/cpp*.

.. rubric:: Source Code

.. ref-code-block:: cpp

	#include <opencv2/features2d.hpp>
	#include <opencv2/imgcodecs.hpp>
	#include <opencv2/opencv.hpp>
	#include <vector>
	#include <iostream>
	
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	
	const float inlier_threshold = 2.5f; // Distance threshold to identify inliers
	const float nn_match_ratio = 0.8f;   // Nearest neighbor matching ratio
	
	int main(void)
	{
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` img1 = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`("../data/graf1.png", :ref:`IMREAD_GRAYSCALE <doxid-d4/da8/group__imgcodecs_1gga61d9b0126a3e57d9277ac48327799c80ae29981cfc153d3b0cef5c0daeedd2125>`);
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` img2 = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`("../data/graf3.png", :ref:`IMREAD_GRAYSCALE <doxid-d4/da8/group__imgcodecs_1gga61d9b0126a3e57d9277ac48327799c80ae29981cfc153d3b0cef5c0daeedd2125>`);
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` homography;
	    :ref:`FileStorage <doxid-d9/df9/classcv_1_1_file_storage>` fs("../data/H1to3p.xml", FileStorage::READ);
	    fs.getFirstTopLevelNode() >> homography;
	
	    vector<KeyPoint> kpts1, kpts2;
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` desc1, desc2;
	
	    :ref:`Ptr\<AKAZE> <doxid-d2/d56/structcv_1_1_ptr>` akaze = AKAZE::create();
	    akaze->:ref:`detectAndCompute <doxid-d9/d9f/classcv_1_1_feature2_d_1a8be0d1c20b08eb867184b8d74c15a677>`(img1, :ref:`noArray <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(), kpts1, desc1);
	    akaze->:ref:`detectAndCompute <doxid-d9/d9f/classcv_1_1_feature2_d_1a8be0d1c20b08eb867184b8d74c15a677>`(img2, :ref:`noArray <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(), kpts2, desc2);
	
	    :ref:`BFMatcher <doxid-d9/d49/classcv_1_1_b_f_matcher>` matcher(:ref:`NORM_HAMMING <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa4b063afd04aebb8dd07085a1207da727>`);
	    vector< vector<DMatch> > nn_matches;
	    matcher.knnMatch(desc1, desc2, nn_matches, 2);
	
	    vector<KeyPoint> matched1, matched2, inliers1, inliers2;
	    vector<DMatch> good_matches;
	    for(size_t i = 0; i < nn_matches.size(); i++) {
	        :ref:`DMatch <doxid-d9/db0/classcv_1_1_d_match>` first = nn_matches[i][0];
	        float dist1 = nn_matches[i][0].distance;
	        float dist2 = nn_matches[i][1].distance;
	
	        if(dist1 < nn_match_ratio * dist2) {
	            matched1.push_back(kpts1[first.:ref:`queryIdx <doxid-d9/db0/classcv_1_1_d_match_1a47475576327f6ba9cd39250881b4d330>`]);
	            matched2.push_back(kpts2[first.:ref:`trainIdx <doxid-d9/db0/classcv_1_1_d_match_1a2320bcc822280c8a416b85f80f5a4453>`]);
	        }
	    }
	
	    for(unsigned i = 0; i < matched1.size(); i++) {
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` col = Mat::ones(3, 1, :ref:`CV_64F <doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`);
	        col.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<double>(0) = matched1[i].pt.x;
	        col.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<double>(1) = matched1[i].pt.y;
	
	        col = homography * col;
	        col /= col.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<double>(2);
	        double dist = :ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`( :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`(col.at<double>(0) - matched2[i].pt.x, 2) +
	                            :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`(col.at<double>(1) - matched2[i].pt.y, 2));
	
	        if(dist < inlier_threshold) {
	            int new_i = static_cast<int>(inliers1.size());
	            inliers1.push_back(matched1[i]);
	            inliers2.push_back(matched2[i]);
	            good_matches.push_back(:ref:`DMatch <doxid-d9/db0/classcv_1_1_d_match>`(new_i, new_i, 0));
	        }
	    }
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` res;
	    :ref:`drawMatches <doxid-d4/d5d/group__features2d__draw_1ga7421b3941617d7267e3f2311582f49e1>`(img1, inliers1, img2, inliers2, good_matches, res);
	    :ref:`imwrite <doxid-d4/da8/group__imgcodecs_1gabbc7ef1aa2edfaa87772f1202d67e0ce>`("res.png", res);
	
	    double inlier_ratio = inliers1.size() * 1.0 / matched1.size();
	    cout << "A-KAZE Matching Results" << endl;
	    cout << "*******************************" << endl;
	    cout << "# Keypoints 1:                        \t" << kpts1.size() << endl;
	    cout << "# Keypoints 2:                        \t" << kpts2.size() << endl;
	    cout << "# Matches:                            \t" << matched1.size() << endl;
	    cout << "# Inliers:                            \t" << inliers1.size() << endl;
	    cout << "# Inliers Ratio:                      \t" << inlier_ratio << endl;
	    cout << endl;
	
	    return 0;
	}

.. rubric:: Explanation

#. **Load images and homography**
   
   .. ref-code-block:: cpp
   
   	Mat img1 = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`("graf1.png", :ref:`IMREAD_GRAYSCALE <doxid-d4/da8/group__imgcodecs_1gga61d9b0126a3e57d9277ac48327799c80ae29981cfc153d3b0cef5c0daeedd2125>`);
   	Mat img2 = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`("graf3.png", :ref:`IMREAD_GRAYSCALE <doxid-d4/da8/group__imgcodecs_1gga61d9b0126a3e57d9277ac48327799c80ae29981cfc153d3b0cef5c0daeedd2125>`);
   	
   	Mat homography;
   	FileStorage fs("H1to3p.xml", FileStorage::READ);
   	fs.getFirstTopLevelNode() >> homography;
   
   We are loading grayscale images here. Homography is stored in the xml created with FileStorage.

#. **Detect keypoints and compute descriptors using AKAZE**
   
   .. ref-code-block:: cpp
   
   	vector<KeyPoint> kpts1, kpts2;
   	Mat desc1, desc2;
   	
   	AKAZE akaze;
   	akaze(img1, :ref:`noArray <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(), kpts1, desc1);
   	akaze(img2, :ref:`noArray <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(), kpts2, desc2);
   
   We create AKAZE object and use it's *operator()* functionality. Since we don't need the *mask* parameter, :ref:`noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>` is used.

#. **Use brute-force matcher to find 2-nn matches**
   
   .. ref-code-block:: cpp
   
   	BFMatcher matcher(:ref:`NORM_HAMMING <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa4b063afd04aebb8dd07085a1207da727>`);
   	vector< vector<DMatch> > nn_matches;
   	matcher.knnMatch(desc1, desc2, nn_matches, 2);
   
   We use Hamming distance, because AKAZE uses binary descriptor by default.

#. **Use 2-nn matches to find correct keypoint matches**
   
   .. ref-code-block:: cpp
   
   	for(size_t i = 0; i < nn_matches.size(); i++) {
   	    DMatch first = nn_matches[i][0];
   	    float dist1 = nn_matches[i][0].:ref:`distance <doxid-d9/db0/classcv_1_1_d_match_1a1cb9bee47b20ad96e16de28f4b9cbdf1>`;
   	    float dist2 = nn_matches[i][1].distance;
   	
   	    if(dist1 < nn_match_ratio * dist2) {
   	        matched1.push_back(kpts1[first.queryIdx]);
   	        matched2.push_back(kpts2[first.trainIdx]);
   	    }
   	}
   
   If the closest match is *ratio* closer than the second closest one, then the match is correct.

#. **Check if our matches fit in the homography model**
   
   .. ref-code-block:: cpp
   
   	for(int i = 0; i < matched1.size(); i++) {
   	    Mat col = Mat::ones(3, 1, :ref:`CV_64F <doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`);
   	    col.at<double>(0) = matched1[i].pt.x;
   	    col.at<double>(1) = matched1[i].pt.y;
   	
   	    col = homography * col;
   	    col /= col.at<double>(2);
   	    float dist = :ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`( :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`(col.at<double>(0) - matched2[i].pt.x, 2) +
   	                       :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`(col.at<double>(1) - matched2[i].pt.y, 2));
   	
   	    if(dist < inlier_threshold) {
   	        int new_i = inliers1.size();
   	        inliers1.push_back(matched1[i]);
   	        inliers2.push_back(matched2[i]);
   	        good_matches.push_back(DMatch(new_i, new_i, 0));
   	    }
   	}
   
   If the distance from first keypoint's projection to the second keypoint is less than threshold, then it it fits in the homography.
   
   We create a new set of matches for the inliers, because it is required by the drawing function.

#. **Output results**
   
   .. ref-code-block:: cpp
   
   	Mat res;
   	:ref:`drawMatches <doxid-d4/d5d/group__features2d__draw_1ga7421b3941617d7267e3f2311582f49e1>`(img1, inliers1, img2, inliers2, good_matches, res);
   	:ref:`imwrite <doxid-d4/da8/group__imgcodecs_1gabbc7ef1aa2edfaa87772f1202d67e0ce>`("res.png", res);
   	...
   
   Here we save the resulting image and print some statistics.

.. rubric:: Results

.. rubric:: Found matches

.. image:: res.png

.. rubric:: A-KAZE Matching Results

.. ref-code-block:: cpp

	Keypoints 1:   2943
	Keypoints 2:   3511
	Matches:       447
	Inliers:       308
	Inlier Ratio: 0.689038}

