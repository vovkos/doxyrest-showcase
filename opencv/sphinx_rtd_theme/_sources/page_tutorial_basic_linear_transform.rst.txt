.. index:: pair: page; Changing the contrast and brightness of an image!
.. _doxid-d3/dc1/tutorial_basic_linear_transform:

Changing the contrast and brightness of an image!
=================================================

.. rubric:: Goal

In this tutorial you will learn how to:

* Access pixel values

* Initialize a matrix with zeros

* Learn what :ref:`cv::saturate_cast <doxid-db/de0/group__core__utils_1gab93126370b85fda2c8bfaf8c811faeaf>` does and why it is useful

* Get some cool info about pixel transformations

* Improve the brightness of an image on a practical example

.. rubric:: Theory

The explanation below belongs to the book `Computer Vision: Algorithms and Applications <http://szeliski.org/Book/>`__ by Richard Szeliski



.. rubric:: Image Processing

* A general image processing operator is a function that takes one or more input images and produces an output image.

* Image transforms can be seen as:
  
  * Point operators (pixel transforms)
  
  * Neighborhood (area-based) operators

.. rubric:: Pixel Transforms

* In this kind of image processing transform, each output pixel's value depends on only the corresponding input pixel value (plus, potentially, some globally collected information or parameters).

* Examples of such operators include *brightness and contrast adjustments* as well as color correction and transformations.

.. rubric:: Brightness and contrast adjustments

* Two commonly used point processes are *multiplication* and *addition* with a constant:
  
  .. math::
  
  	g(x) = \alpha f(x) + \beta

* The parameters :math:`\alpha > 0` and :math:`\beta` are often called the *gain* and *bias* parameters; sometimes these parameters are said to control *contrast* and *brightness* respectively.

* You can think of :math:`f(x)` as the source image pixels and :math:`g(x)` as the output image pixels. Then, more conveniently we can write the expression as:
  
  .. math::
  
  	g(i,j) = \alpha \cdot f(i,j) + \beta
  
  where :math:`i` and :math:`j` indicates that the pixel is located in the *i-th* row and *j-th* column.

.. rubric:: Code

* The following code performs the operation :math:`g(i,j) = \alpha \cdot f(i,j) + \beta` :
  
  .. ref-code-block:: cpp
  
  	
  	#include "opencv2/imgcodecs.hpp"
  	#include "opencv2/highgui.hpp"
  	#include <iostream>
  	
  	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
  	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
  	
  	int main( int, char** argv )
  	{
  	    double alpha = 1.0; /*< Simple contrast control */
  	    int beta = 0;       /*< Simple brightness control */
  	
  	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` image = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`( argv[1] );
  	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` new_image = Mat::zeros( image.:ref:`size <doxid-db/de6/classcv_1_1_mat_1a146f8e8dda07d1365a575ab83d9828d1>`(), image.:ref:`type <doxid-db/de6/classcv_1_1_mat_1af2d2652e552d7de635988f18a84b53e5>`() );
  	
  	    cout << " Basic Linear Transforms " << endl;
  	    cout << "-------------------------" << endl;
  	    cout << "* Enter the alpha value [1.0-3.0]: "; cin >> alpha;
  	    cout << "* Enter the beta value [0-100]: ";    cin >> beta;
  	
  	    for( int y = 0; y < image.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`; y++ ) {
  	        for( int x = 0; x < image.:ref:`cols <doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>`; x++ ) {
  	            for( int c = 0; c < 3; c++ ) {
  	                new_image.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(y,x)[c] =
  	                  :ref:`saturate_cast\<uchar> <doxid-db/de0/group__core__utils_1ga2858f5fe522e46a2e17662669199f6ff>`( alpha*( image.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(y,x)[c] ) + beta );
  	            }
  	        }
  	    }
  	
  	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Original Image", :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>`);
  	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("New Image", :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>`);
  	
  	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Original Image", image);
  	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("New Image", new_image);
  	
  	    :ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`();
  	    return 0;
  	}

.. rubric:: Explanation

#. We begin by creating parameters to save :math:`\alpha` and :math:`\beta` to be entered by the user:
   
   .. ref-code-block:: cpp
   
   	double alpha = 1.0; /*< Simple contrast control */
   	int beta = 0;       /*< Simple brightness control */

#. We load an image using :ref:`cv::imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>` and save it in a Mat object:
   
   .. ref-code-block:: cpp
   
   	Mat image = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`( argv[1] );

#. Now, since we will make some transformations to this image, we need a new Mat object to store it. Also, we want this to have the following features:
   
   * Initial pixel values equal to zero
   
   * Same size and type as the original image
     
     .. ref-code-block:: cpp
     
     	Mat new_image = Mat::zeros( image.size(), image.type() );
     
     We observe that :ref:`cv::Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>` returns a Matlab-style zero initializer based on *image.size()* and *image.type()*

#. Now, to perform the operation :math:`g(i,j) = \alpha \cdot f(i,j) + \beta` we will access to each pixel in image. Since we are operating with BGR images, we will have three values per pixel (B, G and R), so we will also access them separately. Here is the piece of code:
   
   .. ref-code-block:: cpp
   
   	for( int y = 0; y < image.rows; y++ ) {
   	    for( int x = 0; x < image.cols; x++ ) {
   	        for( int c = 0; c < 3; c++ ) {
   	            new_image.at<:ref:`Vec3b <doxid-dc/d84/group__core__basic_1ga7e6060c0b8d48459964df6e1eb524c03>`>(y,x)[c] =
   	              :ref:`saturate_cast\<uchar> <doxid-db/de0/group__core__utils_1ga2858f5fe522e46a2e17662669199f6ff>`( alpha*( image.at<:ref:`Vec3b <doxid-dc/d84/group__core__basic_1ga7e6060c0b8d48459964df6e1eb524c03>`>(y,x)[c] ) + beta );
   	        }
   	    }
   	}
   
   Notice the following:
   
   * To access each pixel in the images we are using this syntax: *image.at<Vec3b>(y,x)[c]* where *y* is the row, *x* is the column and *c* is R, G or B (0, 1 or 2).
   
   * Since the operation :math:`\alpha \cdot p(i,j) + \beta` can give values out of range or not integers (if :math:`\alpha` is float), we use :ref:`cv::saturate_cast <doxid-db/de0/group__core__utils_1gab93126370b85fda2c8bfaf8c811faeaf>` to make sure the values are valid.

#. Finally, we create windows and show the images, the usual way.
   
   .. ref-code-block:: cpp
   
   	:ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Original Image", :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>`);
   	:ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("New Image", :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>`);
   
   	:ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Original Image", image);
   	:ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("New Image", new_image);
   
   	:ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`();
   
   Instead of using the **for** loops to access each pixel, we could have simply used this command:
   
   .. ref-code-block:: cpp
   
   	image.convertTo(new_image, -1, alpha, beta);
   
   where :ref:`cv::Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>` would effectively perform \*new_image = a\*image + beta\*. However, we wanted to show you how to access each pixel. In any case, both methods give the same result but convertTo is more optimized and works a lot faster.
   
   
   
   .. rubric:: Result

* Running our code and using :math:`\alpha = 2.2` and :math:`\beta = 50`
  
  .. ref-code-block:: cpp
  
  	$ ./BasicLinearTransforms lena.jpg
  	Basic Linear Transforms
  	-------------------------
  	* Enter the alpha value [1.0-3.0]: 2.2
  	* Enter the beta value [0-100]: 50

* We get this:
  
  .. image:: Basic_Linear_Transform_Tutorial_Result_big.jpg

.. rubric:: Practical example

In this paragraph, we will put into practice what we have learned to correct an underexposed image by adjusting the brightness and the contrast of the image. We will also see another technique to correct the brightness of an image called gamma correction.

.. rubric:: Brightness and contrast adjustments

Increasing (/ decreasing) the :math:`\beta` value will add (/ subtract) a constant value to every pixel. Pixel values outside of the [0 ; 255] range will be saturated (i.e. a pixel value higher (/ lesser) than 255 (/ 0) will be clamp to 255 (/ 0)).

.. image:: Basic_Linear_Transform_Tutorial_hist_beta.png
	:alt: In light gray, histogram of the original image, in dark gray when brightness = 80 in Gimp

The histogram represents for each color level the number of pixels with that color level. A dark image will have many pixels with low color value and thus the histogram will present a peak in his left part. When adding a constant bias, the histogram is shifted to the right as we have added a constant bias to all the pixels.

The :math:`\alpha` parameter will modify how the levels spread. If :math:`\alpha < 1`, the color levels will be compressed and the result will be an image with less contrast.

.. image:: Basic_Linear_Transform_Tutorial_hist_alpha.png
	:alt: In light gray, histogram of the original image, in dark gray when contrast < 0 in Gimp

Note that these histograms have been obtained using the Brightness-Contrast tool in the Gimp software. The brightness tool should be identical to the :math:`\beta` bias parameters but the contrast tool seems to differ to the :math:`\alpha` gain where the output range seems to be centered with Gimp (as you can notice in the previous histogram).

It can occur that playing with the :math:`\beta` bias will improve the brightness but in the same time the image will appear with a slight veil as the contrast will be reduced. The :math:`\alpha` gain can be used to diminue this effect but due to the saturation, we will lose some details in the original bright regions.

.. rubric:: Gamma correction

`Gamma correction <https://en.wikipedia.org/wiki/Gamma_correction>`__ can be used to correct the brightness of an image by using a non linear transformation between the input values and the mapped output values:

.. math::

	O = \left( \frac{I}{255} \right)^{\gamma} \times 255

As this relation is non linear, the effect will not be the same for all the pixels and will depend to their original value.

.. image:: Basic_Linear_Transform_Tutorial_gamma.png
	:alt: Plot for different values of gamma

When :math:`\gamma < 1`, the original dark regions will be brighter and the histogram will be shifted to the right whereas it will be the opposite with :math:`\gamma > 1`.

.. rubric:: Correct an underexposed image

The following image has been corrected with: :math:`\alpha = 1.3` and :math:`\beta = 40`.

.. image:: Basic_Linear_Transform_Tutorial_linear_transform_correction.jpg
	:alt: By Visem (Own work) [CC BY-SA 3.0], via Wikimedia Commons

The overall brightness has been improved but you can notice that the clouds are now greatly saturated due to the numerical saturation of the implementation used (`highlight clipping <https://en.wikipedia.org/wiki/Clipping_(photography)>`__ in photography).

The following image has been corrected with: :math:`\gamma = 0.4`.

.. image:: Basic_Linear_Transform_Tutorial_gamma_correction.jpg
	:alt: By Visem (Own work) [CC BY-SA 3.0], via Wikimedia Commons

The gamma correction should tend to add less saturation effect as the mapping is non linear and there is no numerical saturation possible as in the previous method.

.. image:: Basic_Linear_Transform_Tutorial_histogram_compare.png
	:alt: Left: histogram after alpha, beta correction ; Center: histogram of the original image ; Right: histogram after the gamma correction

The previous figure compares the histograms for the three images (the y-ranges are not the same between the three histograms). You can notice that most of the pixel values are in the lower part of the histogram for the original image. After :math:`\alpha`, :math:`\beta` correction, we can observe a big peak at 255 due to the saturation as well as a shift in the right. After gamma correction, the histogram is shifted to the right but the pixels in the dark regions are more shifted (see the gamma curves `figure <Basic_Linear_Transform_Tutorial_gamma.png>`__) than those in the bright regions.

In this tutorial, you have seen two simple methods to adjust the contrast and the brightness of an image. **They are basic techniques and are not intended to be used as a replacement of a raster graphics editor!**

.. rubric:: Code

Code for the tutorial is `here <https://github.com/opencv/opencv/blob/master/samples/cpp/tutorial_code/ImgProc/changing_contrast_brightness_image/changing_contrast_brightness_image.cpp>`__. Code for the gamma correction:

.. ref-code-block:: cpp

	Mat lookUpTable(1, 256, :ref:`CV_8U <doxid-d1/d1b/group__core__hal__interface_1ga32b18d904ee2b1731a9416a8eef67d06>`);
	:ref:`uchar <doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* p = lookUpTable.ptr();
	for( int i = 0; i < 256; ++i)
	    p[i] = :ref:`saturate_cast\<uchar> <doxid-db/de0/group__core__utils_1ga2858f5fe522e46a2e17662669199f6ff>`(:ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`(i / 255.0, gamma_) * 255.0);

	Mat res = img.clone();
	:ref:`LUT <doxid-d2/de8/group__core__array_1gab55b8d062b7f5587720ede032d34156f>`(img, lookUpTable, res);

A look-up table is used to improve the performance of the computation as only 256 values needs to be calculated once.

.. rubric:: Additional resources

* `Gamma correction in graphics rendering <https://learnopengl.com/#!Advanced-Lighting/Gamma-Correction>`__

* `Gamma correction and images displayed on CRT monitors <http://www.graphics.cornell.edu/~westin/gamma/gamma.html>`__

* `Digital exposure techniques <http://www.cambridgeincolour.com/tutorials/digital-exposure-techniques.htm>`__

