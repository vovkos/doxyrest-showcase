.. index:: pair: page; Using OpenCV with Eclipse (plugin CDT)
.. _doxid-d7/d16/tutorial_linux_eclipse:

Using OpenCV with Eclipse (plugin CDT)
======================================

.. rubric:: Prerequisites

Two ways, one by forming a project directly, and another by CMake Prerequisites

#. Having installed `Eclipse <http://www.eclipse.org/>`__ in your workstation (only the CDT plugin for C/C++ is needed). You can follow the following steps:
   
   * Go to the Eclipse site
   
   * Download `Eclipse IDE for C/C++ Developers <http://www.eclipse.org/downloads/packages/eclipse-ide-cc-developers/heliossr2>`__. Choose the link according to your workstation.

#. Having installed OpenCV. If not yet, go :ref:`here <doxid-d7/d9f/tutorial_linux_install>`.

.. rubric:: Making a project

#. Start Eclipse. Just run the executable that comes in the folder.

#. Go to **File -> New -> C/C++ Project**
   
   .. image:: a0.png

#. Choose a name for your project (i.e. DisplayImage). An **Empty Project** should be okay for this example.
   
   .. image:: a1.png

#. Leave everything else by default. Press **Finish**.

#. Your project (in this case DisplayImage) should appear in the **Project Navigator** (usually at the left side of your window).
   
   .. image:: a3.png

#. Now, let's add a source file using OpenCV:
   
   * Right click on **DisplayImage** (in the Navigator). **New -> Folder**.
     
     .. image:: a4.png
   
   * Name your folder **src** and then hit **Finish**
   
   * Right click on your newly created **src** folder. Choose **New source file** :
   
   * Call it **DisplayImage.cpp**. Hit **Finish**
     
     .. image:: a7.png

#. So, now you have a project with a empty .cpp file. Let's fill it with some sample code (in other words, copy and paste the snippet below):
   
   .. ref-code-block:: cpp
   
   	#include <opencv2/opencv.hpp>
   	
   	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
   	
   	int main( int argc, char** argv )
   	{
   	  :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` image;
   	  image = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`( argv[1], 1 );
   	
   	  if( argc != 2 || !image.:ref:`data <doxid-db/de6/classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564>` )
   	    {
   	      printf( "No image data \n" );
   	      return -1;
   	    }
   	
   	  :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`( "Display Image", :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>` );
   	  :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`( "Display Image", image );
   	
   	  :ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`(0);
   	
   	  return 0;
   	}

#. We are only missing one final step: To tell OpenCV where the OpenCV headers and libraries are. For this, do the following:
   
   * Go to **Project>Properties**
   
   * In **C/C++ Build**, click on **Settings**. At the right, choose the **Tool Settings** Tab. Here we will enter the headers and libraries info:
     
     #. In **GCC C++ Compiler**, go to **Includes**. In **Include paths(-l)** you should include the path of the folder where opencv was installed. In our example, this is /usr/local/include/opencv.
        
        .. image:: a9.png
        
        If you do not know where your opencv files are, open the **Terminal** and type:
        
        .. ref-code-block:: cpp
        
        	pkg-config --cflags opencv
        
        For instance, that command gave me this output:
        
        .. ref-code-block:: cpp
        
        	-I/usr/local/include/opencv -I/usr/local/include
     
     #. Now go to **GCC C++ Linker**,there you have to fill two spaces:
        
        First in **Library search path (-L)** you have to write the path to where the opencv libraries reside, in my case the path is: :
        
        .. code-block:: cpp
        
        	/usr/local/lib
        
        Then in **Libraries(-l)** add the OpenCV libraries that you may need. Usually just the 4 first on the list below are enough (for simple applications) . In my case, I am putting all of them since I plan to use the whole bunch:
        
        opencv_core opencv_imgproc opencv_imgcodecs opencv_highgui opencv_ml opencv_videoio opencv_video opencv_features2d opencv_calib3d opencv_objdetect opencv_flann
        
        .. image:: a10.png
        
        If you don't know where your libraries are (or you are just psychotic and want to make sure the path is fine), type in **Terminal** :
        
        .. ref-code-block:: cpp
        
        	pkg-config --libs opencv
        
        My output (in case you want to check) was:
        
        .. ref-code-block:: cpp
        
        	-L/usr/local/lib -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lopencv_video -lopencv_features2d -lopencv_calib3d -lopencv_objdetect -lopencv_videoio -lopencv_imgcodecs -lopencv_flann
        
        Now you are done. Click **OK**



* Your project should be ready to be built. For this, go to **Project->Build all**
  
  In the Console you should get something like
  
  .. image:: a12.png
  
  If you check in your folder, there should be an executable there.

.. rubric:: Running the executable

So, now we have an executable ready to run. If we were to use the Terminal, we would probably do something like:

.. ref-code-block:: cpp

	cd <DisplayImage_directory>
	cd src
	./DisplayImage ../images/HappyLittleFish.png

Assuming that the image to use as the argument would be located in <DisplayImage_directory>/images/HappyLittleFish.png. We can still do this, but let's do it from Eclipse:

#. Go to **Run->Run Configurations**

#. Under C/C++ Application you will see the name of your executable + Debug (if not, click over C/C++ Application a couple of times). Select the name (in this case **DisplayImage Debug**).

#. Now, in the right side of the window, choose the **Arguments** Tab. Write the path of the image file we want to open (path relative to the workspace/DisplayImage folder). Let's use **HappyLittleFish.png** :
   
   .. image:: a14.png

#. Click on the **Apply** button and then in Run. An OpenCV window should pop up with the fish image (or whatever you used).
   
   .. image:: a15.jpg

#. Congratulations! You are ready to have fun with OpenCV using Eclipse.

.. rubric:: V2: Using CMake+OpenCV with Eclipse (plugin CDT)

Say you have or create a new file, *helloworld.cpp* in a directory called *foo* :

.. ref-code-block:: cpp

	#include <opencv2/opencv.hpp>
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	
	int main ( int argc, char **argv )
	{
	  :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` img(480, 640, :ref:`CV_8U <doxid-d1/d1b/group__core__hal__interface_1ga32b18d904ee2b1731a9416a8eef67d06>`);
	  :ref:`putText <doxid-d6/d6e/group__imgproc__draw_1ga5126f47f883d730f633d74f07456c576>`(img, "Hello World!", :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 200, 400 ), :ref:`FONT_HERSHEY_SIMPLEX <doxid-d0/de1/group__core_1gga0f9314ea6e35f99bb23f29567fc16e11afff8b973668df2e4028dddc5274310c9>` | :ref:`FONT_ITALIC <doxid-d0/de1/group__core_1gga0f9314ea6e35f99bb23f29567fc16e11af0f7c8824fe42205076771a7b67661c2>`, 1.0, :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`( 255, 255, 0 ));
	  :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("My Window", img);
	  :ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`();
	  return 0;
	}



#. Create a build directory, say, under *foo* : mkdir /build. Then cd build.

#. Put a ``CmakeLists.txt`` file in build:
   
   .. ref-code-block:: cpp
   
   	PROJECT( helloworld_proj )
   	FIND_PACKAGE( OpenCV REQUIRED )
   	ADD_EXECUTABLE( helloworld helloworld.cxx )
   	TARGET_LINK_LIBRARIES( helloworld \f${OpenCV_LIBS} )

#. Run: cmake-gui .. and make sure you fill in where opencv was built.

#. Then click configure and then generate. If it's OK, **quit cmake-gui**

#. Run ``make -j4`` (the -j4 is optional, it just tells the compiler to build in 4 threads). Make sure it builds.

#. Start eclipse. Put the workspace in some directory but **not** in foo or ``foo\build``

#. Right click in the Project Explorer section. Select Import And then open the C/C++ filter. Choose *Existing Code* as a Makefile Project.

#. Name your project, say *helloworld*. Browse to the Existing Code location ``foo\build`` (where you ran your cmake-gui from). Select *Linux GCC* in the \*"Toolchain for Indexer Settings"\* and press *Finish*.

#. Right click in the Project Explorer section. Select Properties. Under C/C++ Build, set the *build directory:* from something like ``${workspace_loc:/helloworld}`` to ``${workspace_loc:/helloworld}/build`` since that's where you are building to.
   
   #. You can also optionally modify the Build command: from make to something like ``make VERBOSE=1 -j4`` which tells the compiler to produce detailed symbol files for debugging and also to compile in 4 parallel threads.

#. Done!

