.. index:: pair: page; Point Polygon Test
.. _doxid-dc/d48/tutorial_point_polygon_test:

Point Polygon Test
==================

.. rubric:: Goal

In this tutorial you will learn how to:

* Use the OpenCV function :ref:`cv::pointPolygonTest <doxid-d3/dc0/group__imgproc__shape_1ga1a539e8db2135af2566103705d7a5722>`

.. rubric:: Theory

.. rubric:: Code

This tutorial code's is shown lines below. You can also download it from `here <https://github.com/opencv/opencv/tree/master/samples/cpp/tutorial_code/ShapeDescriptors/pointPolygonTest_demo.cpp>`__

.. ref-code-block:: cpp

	
	#include "opencv2/highgui.hpp"
	#include "opencv2/imgproc.hpp"
	#include <iostream>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	
	int main( void )
	{
	  const int r = 100;
	  :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` src = :ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`( :ref:`Size <doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`( 4*r, 4*r ), :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>` );
	
	  vector<Point2f> vert(6);
	
	  vert[0] = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 3*r/2, static_cast<int>(1.34*r) );
	  vert[1] = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 1*r, 2*r );
	  vert[2] = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 3*r/2, static_cast<int>(2.866*r) );
	  vert[3] = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 5*r/2, static_cast<int>(2.866*r) );
	  vert[4] = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 3*r, 2*r );
	  vert[5] = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`( 5*r/2, static_cast<int>(1.34*r) );
	
	  for( int j = 0; j < 6; j++ )
	     { :ref:`line <doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2>`( src, vert[j],  vert[(j+1)%6], :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`( 255 ), 3, 8 ); }
	
	  vector<vector<Point> > contours; vector<Vec4i> hierarchy;
	  :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` src_copy = src.:ref:`clone <doxid-db/de6/classcv_1_1_mat_1ad1c9cc37d66c4e5bd05fae36f62d1cb4>`();
	
	  :ref:`findContours <doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`( src_copy, contours, hierarchy, :ref:`RETR_TREE <doxid-d3/dc0/group__imgproc__shape_1gga819779b9857cc2f8601e6526a3a5bc71ab10df56aed56c89a026580adc9431f58>`, :ref:`CHAIN_APPROX_SIMPLE <doxid-d3/dc0/group__imgproc__shape_1gga4303f45752694956374734a03c54d5ffa5f2883048e654999209f88ba04c302f5>`);
	
	  :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` raw_dist( src.:ref:`size <doxid-db/de6/classcv_1_1_mat_1a146f8e8dda07d1365a575ab83d9828d1>`(), :ref:`CV_32FC1 <doxid-d1/d1b/group__core__hal__interface_1ga32ec76240e43e4c9c7b2e2785180a7e6>` );
	
	  for( int j = 0; j < src.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`; j++ )
	     { for( int i = 0; i < src.:ref:`cols <doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>`; i++ )
	          { raw_dist.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(j,i) = (float):ref:`pointPolygonTest <doxid-d3/dc0/group__imgproc__shape_1ga1a539e8db2135af2566103705d7a5722>`( contours[0], :ref:`Point2f <doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`((float)i,(float)j), true ); }
	     }
	
	  double minVal; double maxVal;
	  :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`( raw_dist, &minVal, &maxVal, 0, 0, :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`() );
	  minVal = :ref:`abs <doxid-d2/d75/namespacecv_1af6df65b17fb11af6d34634b6dfa44683>`(minVal); maxVal = :ref:`abs <doxid-d2/d75/namespacecv_1af6df65b17fb11af6d34634b6dfa44683>`(maxVal);
	
	  :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` drawing = :ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`( src.:ref:`size <doxid-db/de6/classcv_1_1_mat_1a146f8e8dda07d1365a575ab83d9828d1>`(), :ref:`CV_8UC3 <doxid-d1/d1b/group__core__hal__interface_1ga88c4cd9de76f678f33928ef1e3f96047>` );
	
	  for( int j = 0; j < src.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`; j++ )
	     { for( int i = 0; i < src.:ref:`cols <doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>`; i++ )
	          {
	            if( raw_dist.at<float>(j,i) < 0 )
	              { drawing.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(j,i)[0] = (:ref:`uchar <doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`)(255 - :ref:`abs <doxid-d2/d75/namespacecv_1af6df65b17fb11af6d34634b6dfa44683>`(raw_dist.at<float>(j,i))*255/minVal); }
	            else if( raw_dist.at<float>(j,i) > 0 )
	              { drawing.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(j,i)[2] = (:ref:`uchar <doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`)(255 - raw_dist.at<float>(j,i)*255/maxVal); }
	            else
	              { drawing.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(j,i)[0] = 255; drawing.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(j,i)[1] = 255; drawing.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(j,i)[2] = 255; }
	          }
	     }
	
	  const char* source_window = "Source";
	  :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`( source_window, :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>` );
	  :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`( source_window, src );
	  :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`( "Distance", :ref:`WINDOW_AUTOSIZE <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3acf621ace7a54954cbac01df27e47228f>` );
	  :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`( "Distance", drawing );
	
	  :ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`(0);
	  return(0);
	}

.. rubric:: Explanation

.. rubric:: Result

Here it is:

.. image:: Point_Polygon_Test_Source_Image.png



.. image:: Point_Polygon_Test_Result.jpg

