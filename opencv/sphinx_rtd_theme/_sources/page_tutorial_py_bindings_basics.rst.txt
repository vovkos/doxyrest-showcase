.. index:: pair: page; How OpenCV-Python Bindings Works?
.. _doxid-da/d49/tutorial_py_bindings_basics:

How OpenCV-Python Bindings Works?
=================================

.. rubric:: Goal

Learn:

* How OpenCV-Python bindings are generated?

* How to extend new OpenCV modules to Python?

.. rubric:: How OpenCV-Python bindings are generated?

In OpenCV, all algorithms are implemented in C++. But these algorithms can be used from different languages like Python, Java etc. This is made possible by the bindings generators. These generators create a bridge between C++ and Python which enables users to call C++ functions from Python. To get a complete picture of what is happening in background, a good knowledge of Python/C API is required. A simple example on extending C++ functions to Python can be found in official Python documentation[1]. So extending all functions in OpenCV to Python by writing their wrapper functions manually is a time-consuming task. So OpenCV does it in a more intelligent way. OpenCV generates these wrapper functions automatically from the C++ headers using some Python scripts which are located in modules/python/src2. We will look into what they do.

First, modules/python/CMakeFiles.txt is a CMake script which checks the modules to be extended to Python. It will automatically check all the modules to be extended and grab their header files. These header files contain list of all classes, functions, constants etc. for that particular modules.

Second, these header files are passed to a Python script, modules/python/src2/gen2.py. This is the Python bindings generator script. It calls another Python script modules/python/src2/hdr_parser.py. This is the header parser script. This header parser splits the complete header file into small Python lists. So these lists contain all details about a particular function, class etc. For example, a function will be parsed to get a list containing function name, return type, input arguments, argument types etc. Final list contains details of all the functions, structs, classes etc. in that header file.

But header parser doesn't parse all the functions/classes in the header file. The developer has to specify which functions should be exported to Python. For that, there are certain macros added to the beginning of these declarations which enables the header parser to identify functions to be parsed. These macros are added by the developer who programs the particular function. In short, the developer decides which functions should be extended to Python and which are not. Details of those macros will be given in next session.

So header parser returns a final big list of parsed functions. Our generator script (gen2.py) will create wrapper functions for all the functions/classes/enums/structs parsed by header parser (You can find these header files during compilation in the build/modules/python/ folder as pyopencv_generated\_\*.h files). But there may be some basic OpenCV datatypes like Mat, Vec4i, Size. They need to be extended manually. For example, a Mat type should be extended to Numpy array, Size should be extended to a tuple of two integers etc. Similarly, there may be some complex structs/classes/functions etc. which need to be extended manually. All such manual wrapper functions are placed in modules/python/src2/cv2.cpp.

So now only thing left is the compilation of these wrapper files which gives us **cv2** module. So when you call a function, say res = equalizeHist(img1,img2) in Python, you pass two numpy arrays and you expect another numpy array as the output. So these numpy arrays are converted to :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` and then calls the :ref:`equalizeHist() <doxid-d6/dc7/group__imgproc__hist_1ga7e54091f0c937d49bf84152a16f76d6e>` function in C++. Final result, res will be converted back into a Numpy array. So in short, almost all operations are done in C++ which gives us almost same speed as that of C++.

So this is the basic version of how OpenCV-Python bindings are generated.

.. rubric:: How to extend new modules to Python?

Header parser parse the header files based on some wrapper macros added to function declaration. Enumeration constants don't need any wrapper macros. They are automatically wrapped. But remaining functions, classes etc. need wrapper macros.

Functions are extended using CV_EXPORTS_W macro. An example is shown below.

.. ref-code-block:: cpp

	:ref:`CV_EXPORTS_W <doxid-db/de0/group__core__utils_1ga67ea671a3582ce612ac3c281e067f480>` void :ref:`equalizeHist <doxid-d6/dc7/group__imgproc__hist_1ga7e54091f0c937d49bf84152a16f76d6e>`( InputArray src, :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst );

Header parser can understand the input and output arguments from keywords like InputArray, OutputArray etc. But sometimes, we may need to hardcode inputs and outputs. For that, macros like CV_OUT, CV_IN_OUT etc. are used.

.. ref-code-block:: cpp

	:ref:`CV_EXPORTS_W <doxid-db/de0/group__core__utils_1ga67ea671a3582ce612ac3c281e067f480>` void :ref:`minEnclosingCircle <doxid-d3/dc0/group__imgproc__shape_1ga8ce13c24081bbc7151e9326f412190f1>`( InputArray points,
	                                     :ref:`CV_OUT <doxid-db/de0/group__core__utils_1ga4e999bc21cb894d3ed789f3f0bc26778>` Point2f& center, :ref:`CV_OUT <doxid-db/de0/group__core__utils_1ga4e999bc21cb894d3ed789f3f0bc26778>` float& radius );

For large classes also, CV_EXPORTS_W is used. To extend class methods, CV_WRAP is used. Similarly, CV_PROP is used for class fields.

.. ref-code-block:: cpp

	class :ref:`CV_EXPORTS_W <doxid-db/de0/group__core__utils_1ga67ea671a3582ce612ac3c281e067f480>` CLAHE : public Algorithm
	{
	public:
	    :ref:`CV_WRAP <doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>` virtual void apply(InputArray src, :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst) = 0;
	
	    :ref:`CV_WRAP <doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>` virtual void setClipLimit(double clipLimit) = 0;
	    :ref:`CV_WRAP <doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>` virtual double getClipLimit() const = 0;
	}

Overloaded functions can be extended using CV_EXPORTS_AS. But we need to pass a new name so that each function will be called by that name in Python. Take the case of integral function below. Three functions are available, so each one is named with a suffix in Python. Similarly CV_WRAP_AS can be used to wrap overloaded methods.

.. ref-code-block:: cpp

	:ref:`CV_EXPORTS_W <doxid-db/de0/group__core__utils_1ga67ea671a3582ce612ac3c281e067f480>` void :ref:`integral <doxid-d5/df1/group__imgproc__hal__functions_1ga78d53bcbe1710d0f7034e89fd0d43259>`( InputArray src, :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum, int sdepth = -1 );
	
	:ref:`CV_EXPORTS_AS <doxid-db/de0/group__core__utils_1ga288d5d11e4d8675aab962ec2b2066855>`(integral2) void :ref:`integral <doxid-d5/df1/group__imgproc__hal__functions_1ga78d53bcbe1710d0f7034e89fd0d43259>`( InputArray src, :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
	                                        :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sqsum, int sdepth = -1, int sqdepth = -1 );
	
	:ref:`CV_EXPORTS_AS <doxid-db/de0/group__core__utils_1ga288d5d11e4d8675aab962ec2b2066855>`(integral3) void :ref:`integral <doxid-d5/df1/group__imgproc__hal__functions_1ga78d53bcbe1710d0f7034e89fd0d43259>`( InputArray src, :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
	                                        :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sqsum, :ref:`OutputArray <doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tilted,
	                                        int sdepth = -1, int sqdepth = -1 );

Small classes/structs are extended using CV_EXPORTS_W_SIMPLE. These structs are passed by value to C++ functions. Examples are KeyPoint, Match etc. Their methods are extended by CV_WRAP and fields are extended by CV_PROP_RW.

.. ref-code-block:: cpp

	class :ref:`CV_EXPORTS_W_SIMPLE <doxid-db/de0/group__core__utils_1ga13d649e3f5582a106caaa98f187dd34b>` DMatch
	{
	public:
	    :ref:`CV_WRAP <doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>` DMatch();
	    :ref:`CV_WRAP <doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>` DMatch(int _queryIdx, int _trainIdx, float _distance);
	    :ref:`CV_WRAP <doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>` DMatch(int _queryIdx, int _trainIdx, int _imgIdx, float _distance);
	
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` int queryIdx; // query descriptor index
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` int trainIdx; // train descriptor index
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` int imgIdx;   // train image index
	
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` float distance;
	};

Some other small classes/structs can be exported using CV_EXPORTS_W_MAP where it is exported to a Python native dictionary. Moments() is an example of it.

.. ref-code-block:: cpp

	class :ref:`CV_EXPORTS_W_MAP <doxid-db/de0/group__core__utils_1gaff7195942cab00fc5eafdd8ed777fac5>` Moments
	{
	public:
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;
	    :ref:`CV_PROP_RW <doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>` double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;
	};

So these are the major extension macros available in OpenCV. Typically, a developer has to put proper macros in their appropriate positions. Rest is done by generator scripts. Sometimes, there may be an exceptional cases where generator scripts cannot create the wrappers. Such functions need to be handled manually, to do this write your own pyopencv\_\*.hpp extending headers and put them into misc/python subdirectory of your module. But most of the time, a code written according to OpenCV coding guidelines will be automatically wrapped by generator scripts.

