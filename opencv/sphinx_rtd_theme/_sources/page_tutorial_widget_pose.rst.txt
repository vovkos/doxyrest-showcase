.. index:: pair: page; Pose of a widget
.. _doxid-d8/df0/tutorial_widget_pose:

Pose of a widget
================

.. rubric:: Goal

In this tutorial you will learn how to

* Add widgets to the visualization window

* Use Affine3 to set pose of a widget

* Rotating and translating a widget along an axis

.. rubric:: Code

You can download the code from `here <https://github.com/opencv/opencv/tree/master/samples/cpp/tutorial_code/viz/widget_pose.cpp>`__.

.. ref-code-block:: cpp

	
	#include <opencv2/viz.hpp>
	#include <opencv2/calib3d.hpp>
	#include <iostream>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	
	static void help()
	{
	    cout
	    << "--------------------------------------------------------------------------"   << endl
	    << "This program shows how to visualize a cube rotated around (1,1,1) and shifted "
	    << "using Rodrigues vector."                                                      << endl
	    << "Usage:"                                                                       << endl
	    << "./widget_pose"                                                                << endl
	    << endl;
	}
	
	int main()
	{
	    help();
	
	    :ref:`viz::Viz3d <doxid-dd/d47/classcv_1_1viz_1_1_viz3d>` myWindow("Coordinate Frame");
	
	    myWindow.showWidget("Coordinate Widget", :ref:`viz::WCoordinateSystem <doxid-d2/d31/classcv_1_1viz_1_1_w_coordinate_system>`());
	
	    :ref:`viz::WLine <doxid-d3/da9/classcv_1_1viz_1_1_w_line>` axis(:ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(-1.0f,-1.0f,-1.0f), :ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(1.0f,1.0f,1.0f));
	    axis.setRenderingProperty(:ref:`viz::LINE_WIDTH <doxid-dc/d5c/group__viz__widget_1ggae4df8152c2d8639b915eccd0bb90f8aca06fc87e04c15fbfad2977314751a8738>`, 4.0);
	    myWindow.showWidget("Line Widget", axis);
	
	    :ref:`viz::WCube <doxid-de/dc5/classcv_1_1viz_1_1_w_cube>` cube_widget(:ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(0.5,0.5,0.0), :ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(0.0,0.0,-0.5), true, :ref:`viz::Color::blue <doxid-df/d5b/classcv_1_1viz_1_1_color_1a7b7b90d7bb2994782725c55e70d7f83f>`());
	    cube_widget.setRenderingProperty(:ref:`viz::LINE_WIDTH <doxid-dc/d5c/group__viz__widget_1ggae4df8152c2d8639b915eccd0bb90f8aca06fc87e04c15fbfad2977314751a8738>`, 4.0);
	    myWindow.showWidget("Cube Widget", cube_widget);
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` rot_vec = :ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`(1,3,:ref:`CV_32F <doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`);
	    float translation_phase = 0.0, translation = 0.0;
	    while(!myWindow.wasStopped())
	    {
	        /* Rotation using rodrigues */
	        rot_vec.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(0,0) += CV_PI * 0.01f;
	        rot_vec.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(0,1) += CV_PI * 0.01f;
	        rot_vec.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(0,2) += CV_PI * 0.01f;
	
	        translation_phase += CV_PI * 0.01f;
	        translation = :ref:`sin <doxid-df/dfc/group__cudev_1gaa65ebb1958aa6daaacb7e0b94810ff87>`(translation_phase);
	
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` rot_mat;
	        :ref:`Rodrigues <doxid-d9/d0c/group__calib3d_1ga61585db663d9da06b68e70cfbf6a1eac>`(rot_vec, rot_mat);
	
	        :ref:`Affine3f <doxid-d3/d84/classcv_1_1_affine3>` pose(rot_mat, :ref:`Vec3f <doxid-dc/d84/group__core__basic_1gab9e0ab642a3e01742916763173b72232>`(translation, translation, translation));
	
	        myWindow.setWidgetPose("Cube Widget", pose);
	
	        myWindow.spinOnce(1, true);
	    }
	
	    return 0;
	}

.. rubric:: Explanation

Here is the general structure of the program:

* Create a visualization window.
  
  .. ref-code-block:: cpp
  
  	viz::Viz3d myWindow("Coordinate Frame");

* Show coordinate axes in the window using CoordinateSystemWidget.
  
  .. ref-code-block:: cpp
  
  	myWindow.showWidget("Coordinate Widget", viz::WCoordinateSystem());

* Display a line representing the axis (1,1,1).
  
  .. ref-code-block:: cpp
  
  	viz::WLine axis(:ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(-1.0f,-1.0f,-1.0f), :ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(1.0f,1.0f,1.0f));
  	axis.setRenderingProperty(:ref:`viz::LINE_WIDTH <doxid-dc/d5c/group__viz__widget_1ggae4df8152c2d8639b915eccd0bb90f8aca06fc87e04c15fbfad2977314751a8738>`, 4.0);
  	myWindow.showWidget("Line Widget", axis);

* Construct a cube.
  
  .. ref-code-block:: cpp
  
  	viz::WCube cube_widget(:ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(0.5,0.5,0.0), :ref:`Point3f <doxid-dc/d84/group__core__basic_1ga3d79ceeb4419bccd0308dfdf1cd31435>`(0.0,0.0,-0.5), true, viz::Color::blue());
  	cube_widget.setRenderingProperty(:ref:`viz::LINE_WIDTH <doxid-dc/d5c/group__viz__widget_1ggae4df8152c2d8639b915eccd0bb90f8aca06fc87e04c15fbfad2977314751a8738>`, 4.0);
  	myWindow.showWidget("Cube Widget", cube_widget);

* Create rotation matrix from rodrigues vector
  
  .. ref-code-block:: cpp
  
  	rot_vec.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(0,0) += CV_PI * 0.01f;
  	rot_vec.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(0,1) += CV_PI * 0.01f;
  	rot_vec.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<float>(0,2) += CV_PI * 0.01f;
  	
  	...
  	
  	Mat rot_mat;
  	:ref:`Rodrigues <doxid-d9/d0c/group__calib3d_1ga61585db663d9da06b68e70cfbf6a1eac>`(rot_vec, rot_mat);

* Use Affine3f to set pose of the cube.
  
  .. ref-code-block:: cpp
  
  	:ref:`Affine3f <doxid-d0/de1/group__core_1gae10a81cba3f3232648be48e28759a7bc>` pose(rot_mat, :ref:`Vec3f <doxid-dc/d84/group__core__basic_1gab9e0ab642a3e01742916763173b72232>`(translation, translation, translation));
  	myWindow.setWidgetPose("Cube Widget", pose);

* Animate the rotation using wasStopped and spinOnce
  
  .. ref-code-block:: cpp
  
  	while(!myWindow.wasStopped())
  	{
  	    ...
  	
  	    myWindow.spinOnce(1, true);
  	}

.. rubric:: Results

Here is the result of the program.

