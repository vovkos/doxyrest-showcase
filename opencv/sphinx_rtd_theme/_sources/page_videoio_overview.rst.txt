.. index:: pair: page; Video I/O with OpenCV Overview
.. _doxid-d0/da7/videoio_overview:

Video I/O with OpenCV Overview
==============================

.. rubric:: See also:

* :ref:`Video I/O Code Reference <doxid-dd/de7/group__videoio>`

* Tutorials: :ref:`Video Input and Output (videoio module) <doxid-df/d2c/tutorial_table_of_content_videoio>`

.. rubric:: General Information

The OpenCV :ref:`Video I/O <doxid-dd/de7/group__videoio>` module is a set of classes and functions to read and write video or images sequence.

Basically, the module provides the :ref:`cv::VideoCapture <doxid-df/dcb/classcv_1_1_video_capture>` and :ref:`cv::VideoWriter <doxid-d6/d16/classcv_1_1_video_writer>` classes as 2-layer interface to many video I/O APIs used as backend.

.. image:: videoio_overview.svg
	:alt: Video I/O with OpenCV

Some backends such as (DSHOW) Direct Show, Video For Windows (VFW), Microsoft Media Foundation (MSMF), Video 4 Linux (V4L), etc... are interfaces to the video I/O library provided by the operating system.

Some others backends like OpenNI2 for Kinect, Intel Perceptual Computing SDK, GStreamer, XIMEA Camera API, etc... are interfaces to proprietary drivers or to external library.

See the list of supported backends here: :ref:`cv::VideoCaptureAPIs <doxid-d4/d15/group__videoio__flags__base_1ga023786be1ee68a9105bf2e48c700294d>`

Some backends are experimental use them at your own risk

Each backend supports devices properties (:ref:`cv::VideoCaptureProperties <doxid-d4/d15/group__videoio__flags__base_1gaeb8dd9c89c10a5c63c139bf7c4f5704d>`) in a different way or might not support any property at all.



.. rubric:: Select the backend at runtime

OpenCV automatically selects and uses first available backend (``apiPreference=:ref:`cv::CAP_ANY <doxid-d4/d15/group__videoio__flags__base_1gga023786be1ee68a9105bf2e48c700294da77ab1fe260fd182f8ec7655fab27a31d>```).

As advanced usage you can select the backend to use at runtime. Currently this option is available only with VideoCapture.

For example to grab from default camera using Direct Show as backend

.. ref-code-block:: cpp

	//declare a capture object
	:ref:`cv::VideoCapture <doxid-df/dcb/classcv_1_1_video_capture>` cap(0 + :ref:`cv::CAP_DSHOW <doxid-d4/d15/group__videoio__flags__base_1gga023786be1ee68a9105bf2e48c700294dab6ac3effa04f41ed5470375c85a23504>`);
	
	//or specify the apiPreference with open
	cap.:ref:`open <doxid-df/dcb/classcv_1_1_video_capture_1ab5b7391cd5ec50e7237e575a758f6f05>`(0 + :ref:`cv::CAP_DSHOW <doxid-d4/d15/group__videoio__flags__base_1gga023786be1ee68a9105bf2e48c700294dab6ac3effa04f41ed5470375c85a23504>`);

If you want to grab from a file using the Direct Show as backend:

.. ref-code-block:: cpp

	//declare a capture object
	:ref:`cv::VideoCapture <doxid-df/dcb/classcv_1_1_video_capture>` cap(filename, :ref:`cv::CAP_DSHOW <doxid-d4/d15/group__videoio__flags__base_1gga023786be1ee68a9105bf2e48c700294dab6ac3effa04f41ed5470375c85a23504>`);
	
	//or specify the apiPreference with open
	cap.:ref:`open <doxid-df/dcb/classcv_1_1_video_capture_1ab5b7391cd5ec50e7237e575a758f6f05>`(filename, :ref:`cv::CAP_DSHOW <doxid-d4/d15/group__videoio__flags__base_1gga023786be1ee68a9105bf2e48c700294dab6ac3effa04f41ed5470375c85a23504>`);

.. rubric:: Enable backends

Backends are available only if they have been built with your OpenCV binaries.

Check in ``opencv2/cvconfig.h`` to know which APIs are currently available (e.g. ``HAVE_MSMF, HAVE_VFW, HAVE_LIBV4L``, etc...).

To enable/disable APIs, you have to:

#. re-configure OpenCV using appropriates CMake switches (e.g. ``-DWITH_MSMF=ON -DWITH_VFW=ON ...``) or checking related switch in cmake-gui

#. rebuild OpenCV itself

.. rubric:: Use 3rd party drivers or cameras

Many industrial cameras or some video I/O devices don't provide standard driver interfaces for the operating system. Thus you can't use VideoCapture or VideoWriter with these devices.

To get access to their devices, manufactures provide their own C++ API and library that you have to include and link with your OpenCV application.

Is common case that this libraries read/write images from/to a memory buffer. If it so, it is possible to make a ``Mat`` header for memory buffer (user-allocated data) and process it in-place using OpenCV functions. See :ref:`cv::Mat::Mat() <doxid-db/de6/classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc>` for more details.

.. rubric:: The FFmpeg library

OpenCV can use the FFmpeg library (`http://ffmpeg.org/ <http://ffmpeg.org/>`__) as backend to record, convert and stream audio and video. FFMpeg is a complete, cross-reference solution. If you enable FFmpeg while configuring OpenCV than CMake will download and install the binaries in ``OPENCV_SOURCE_CODE/3rdparty/ffmpeg/``. To use FFMpeg at runtime, you must deploy the FFMepg binaries with your application.

FFmpeg is licensed under the GNU Lesser General Public License (LGPL) version 2.1 or later. See ``OPENCV_SOURCE_CODE/3rdparty/ffmpeg/readme.txt`` and `http://ffmpeg.org/legal.html <http://ffmpeg.org/legal.html>`__ for details and licensing information



.. rubric:: See also:

:ref:`cv::VideoCapture::open() <doxid-df/dcb/classcv_1_1_video_capture_1ab5b7391cd5ec50e7237e575a758f6f05>`, :ref:`cv::VideoCapture::VideoCapture() <doxid-df/dcb/classcv_1_1_video_capture_1a57c0e81e83e60f36c83027dc2a188e80>`

