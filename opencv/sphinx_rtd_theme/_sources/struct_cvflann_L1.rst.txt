.. index:: pair: struct; cvflann::L1
.. _doxid-d1/dfe/structcvflann_1_1_l1:

template struct cvflann::L1
===========================

.. toctree::
	:hidden:

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <dist.h>
	
	template <class T>
	struct L1
	{
		// typedefs
	
		typedef T :target:`ElementType<doxid-d1/dfe/structcvflann_1_1_l1_1a2e5f85d35af395e5654465e9a69643c0>`;
		typedef :ref:`True<doxid-d7/daa/classcvflann_1_1_true>` :target:`is_kdtree_distance<doxid-d1/dfe/structcvflann_1_1_l1_1aa3e6c602907baa81d90ddcfc33041874>`;
		typedef :ref:`True<doxid-d7/daa/classcvflann_1_1_true>` :target:`is_vector_space_distance<doxid-d1/dfe/structcvflann_1_1_l1_1a1df70c0d506c0446a8e55d60c697a55c>`;
		typedef :ref:`Accumulator<doxid-d4/d03/structcvflann_1_1_accumulator>`<T>::Type :target:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>`;

		// methods
	
		template <
			typename U,
			typename V
			>
		:ref:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>`
		:ref:`accum_dist<doxid-d1/dfe/structcvflann_1_1_l1_1a2cd01e85cd8775df6fe14fa7032efdbf>`(
			const U& a,
			const V& b,
			int
			) const;
	
		template <
			typename Iterator1,
			typename Iterator2
			>
		:ref:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>`
		:ref:`operator()<doxid-d1/dfe/structcvflann_1_1_l1_1a87f3a661b5e5ae77ad02f63547080c15>`(
			Iterator1 a,
			Iterator2 b,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size,
			:ref:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>` worst_dist = -1
			) const;
	};
.. _details-d1/dfe/structcvflann_1_1_l1:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Methods
-------

.. index:: pair: function; accum_dist
.. _doxid-d1/dfe/structcvflann_1_1_l1_1a2cd01e85cd8775df6fe14fa7032efdbf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename U,
		typename V
		>
	:ref:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>`
	accum_dist(
		const U& a,
		const V& b,
		int
		) const

Partial distance, used by the kd-tree.

.. index:: pair: function; operator()
.. _doxid-d1/dfe/structcvflann_1_1_l1_1a87f3a661b5e5ae77ad02f63547080c15:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename Iterator1,
		typename Iterator2
		>
	:ref:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>`
	operator()(
		Iterator1 a,
		Iterator2 b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size,
		:ref:`ResultType<doxid-d1/dfe/structcvflann_1_1_l1_1a4b809418ce6bf89439d5dbd0ccd42220>` worst_dist = -1
		) const

Compute the Manhattan (L_1) distance between two vectors.

This is highly optimised, with loop unrolling, as it is one of the most expensive inner loops.

