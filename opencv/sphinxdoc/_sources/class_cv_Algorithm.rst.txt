.. index:: pair: class; cv::Algorithm
.. _doxid-d1/d41/classcv_1_1_algorithm:

class cv::Algorithm
===================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This is a base class for all more or less complex algorithms in OpenCV. :ref:`More...<details-d1/d41/classcv_1_1_algorithm>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <core.hpp>
	
	class Algorithm
	{
	public:
		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);

	protected:
		// methods
	
		void
		:target:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	};

	// direct descendants

	class :ref:`AlignExposures<doxid-df/d56/classcv_1_1_align_exposures>`;
	class :ref:`BackgroundSubtractor<doxid-d5/d6d/classcv_1_1_background_subtractor>`;
	class :ref:`BaseCascadeClassifier<doxid-dd/de9/classcv_1_1_base_cascade_classifier>`;
	class :ref:`CalibrateCRF<doxid-d6/d43/classcv_1_1_calibrate_c_r_f>`;
	class :ref:`CLAHE<doxid-db/dc0/classcv_1_1_c_l_a_h_e>`;
	class :ref:`CannyEdgeDetector<doxid-de/d77/classcv_1_1cuda_1_1_canny_edge_detector>`;
	class :ref:`CascadeClassifier<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier>`;
	class :ref:`Convolution<doxid-d1/d4f/classcv_1_1cuda_1_1_convolution>`;
	class :ref:`CornernessCriteria<doxid-db/d3a/classcv_1_1cuda_1_1_cornerness_criteria>`;
	class :ref:`CornersDetector<doxid-da/d6e/classcv_1_1cuda_1_1_corners_detector>`;
	class :ref:`DenseOpticalFlow<doxid-d8/d5b/classcv_1_1cuda_1_1_dense_optical_flow>`;
	class :ref:`DescriptorMatcher<doxid-db/d2d/classcv_1_1cuda_1_1_descriptor_matcher>`;
	class :ref:`DFT<doxid-d2/d98/classcv_1_1cuda_1_1_d_f_t>`;
	class :ref:`DisparityBilateralFilter<doxid-dd/d4c/classcv_1_1cuda_1_1_disparity_bilateral_filter>`;
	class :ref:`Filter<doxid-db/dde/classcv_1_1cuda_1_1_filter>`;
	class :ref:`HOG<doxid-d0/d34/classcv_1_1cuda_1_1_h_o_g>`;
	class :ref:`HoughCirclesDetector<doxid-d2/d2d/classcv_1_1cuda_1_1_hough_circles_detector>`;
	class :ref:`HoughLinesDetector<doxid-d7/d9d/classcv_1_1cuda_1_1_hough_lines_detector>`;
	class :ref:`HoughSegmentDetector<doxid-de/d0d/classcv_1_1cuda_1_1_hough_segment_detector>`;
	class :ref:`ImagePyramid<doxid-df/d92/classcv_1_1cuda_1_1_image_pyramid>`;
	class :ref:`LookUpTable<doxid-db/d23/classcv_1_1cuda_1_1_look_up_table>`;
	class :ref:`SparseOpticalFlow<doxid-d3/ddc/classcv_1_1cuda_1_1_sparse_optical_flow>`;
	class :ref:`TemplateMatching<doxid-de/db8/classcv_1_1cuda_1_1_template_matching>`;
	class :ref:`DenseOpticalFlow<doxid-d9/d8c/classcv_1_1_dense_optical_flow>`;
	class :ref:`DescriptorMatcher<doxid-d4/d64/classcv_1_1_descriptor_matcher>`;
	class :ref:`Feature2D<doxid-d9/d9f/classcv_1_1_feature2_d>`;
	class :ref:`GeneralizedHough<doxid-df/d46/classcv_1_1_generalized_hough>`;
	class :ref:`HistogramCostExtractor<doxid-d8/d30/classcv_1_1_histogram_cost_extractor>`;
	class :ref:`LineSegmentDetector<doxid-dc/d72/classcv_1_1_line_segment_detector>`;
	class :ref:`MergeExposures<doxid-d2/df7/classcv_1_1_merge_exposures>`;
	class :ref:`MinProblemSolver<doxid-d0/d39/classcv_1_1_min_problem_solver>`;
	class :ref:`StatModel<doxid-d9/d36/classcv_1_1ml_1_1_stat_model>`;
	class :ref:`Kernel<doxid-d2/d30/classcv_1_1ml_1_1_s_v_m_1_1_kernel>`;
	class :ref:`ShapeDistanceExtractor<doxid-d2/ddc/classcv_1_1_shape_distance_extractor>`;
	class :ref:`ShapeTransformer<doxid-db/d82/classcv_1_1_shape_transformer>`;
	class :ref:`SparseOpticalFlow<doxid-d2/d91/classcv_1_1_sparse_optical_flow>`;
	class :ref:`StereoMatcher<doxid-dd/ddc/classcv_1_1_stereo_matcher>`;
	class :ref:`DenseOpticalFlowExt<doxid-db/dd1/classcv_1_1superres_1_1_dense_optical_flow_ext>`;
	class :ref:`SuperResolution<doxid-d4/d45/classcv_1_1superres_1_1_super_resolution>`;
	class :ref:`Tonemap<doxid-d0/dd3/classcv_1_1_tonemap>`;
.. _details-d1/d41/classcv_1_1_algorithm:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This is a base class for all more or less complex algorithms in OpenCV.

especially for classes of algorithms, for which there can be multiple implementations. The examples are stereo correspondence (for which there are algorithms like block matching, semi-global block matching, graph-cut etc.), background subtraction (which can be done using mixture-of-gaussians models, codebook-based algorithm etc.), optical flow (block matching, Lucas-Kanade, Horn-Schunck etc.).

Here is example of SIFT use in your application via :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>` interface:

.. ref-code-block:: cpp

	#include "opencv2/opencv.hpp"
	#include "opencv2/xfeatures2d.hpp"
	using namespace cv::xfeatures2d;
	
	Ptr<Feature2D> sift = SIFT::create();
	FileStorage fs("sift_params.xml", FileStorage::READ);
	if( fs.isOpened() ) // if we have file with parameters, read them
	{
	    sift->read(fs["sift_params"]);
	    fs.release();
	}
	else // else modify the parameters and store them; user can later edit the file to use different parameters
	{
	    sift->setContrastThreshold(0.01f); // lower the contrast threshold, compared to the default value
	    {
	        WriteStructContext ws(fs, "sift_params", CV_NODE_MAP);
	        sift->write(fs);
	    }
	}
	Mat image = imread("myimage.png", 0), descriptors;
	vector<KeyPoint> keypoints;
	sift->detectAndCompute(image, noArray(), keypoints, descriptors);

Methods
-------

.. index:: pair: function; clear
.. _doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	clear()

Clears the algorithm state.

.. index:: pair: function; empty
.. _doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	empty() const

Returns true if the :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>` is empty (e.g. in the very beginning or after unsuccessful read.

.. index:: pair: function; getDefaultName
.. _doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
	getDefaultName() const

Returns the algorithm string identifier. This string is used as top level xml/yml node tag when the object is saved to a file or string.

.. index:: pair: function; read
.. _doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	read(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn)

Reads algorithm parameters from a file storage.

.. index:: pair: function; save
.. _doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	save(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const

Saves the algorithm to a file. In order to make this method work, the derived class must implement Algorithm::write(FileStorage& fs).

.. index:: pair: function; write
.. _doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	write(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const

Stores algorithm parameters in a file storage.

.. index:: pair: function; load
.. _doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
	load(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
		)

Loads algorithm from the file.

This is static template method of :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>`. It's usage is following (in the case of SVM):

.. ref-code-block:: cpp

	Ptr<SVM> svm = Algorithm::load<SVM>("my_svm_model.xml");

In order to make this method work, the derived class must overwrite :ref:`Algorithm::read <doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>` (const :ref:`FileNode <doxid-dc/d21/classcv_1_1_file_node>` & fn).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- Name of the file to read.

	*
		- objname

		- The optional name of the node to read (if empty, the first top-level node will be used)

.. index:: pair: function; loadFromString
.. _doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
	loadFromString(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
		)

Loads algorithm from a :ref:`String <doxid-dc/d0e/classcv_1_1_string>`.

This is static template method of :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>`. It's usage is following (in the case of SVM):

.. ref-code-block:: cpp

	Ptr<SVM> svm = Algorithm::loadFromString<SVM>(myStringModel);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- strModel

		- The string variable containing the model you want to load.

	*
		- objname

		- The optional name of the node to read (if empty, the first top-level node will be used)

.. index:: pair: function; read
.. _doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
	read(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn)

Reads algorithm from the file node.

This is static template method of :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>`. It's usage is following (in the case of SVM):

.. ref-code-block:: cpp

	cv::FileStorage fsRead("example.xml", FileStorage::READ);
	Ptr<SVM> svm = Algorithm::read<SVM>(fsRead.root());

In order to make this method work, the derived class must overwrite :ref:`Algorithm::read <doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>` (const :ref:`FileNode <doxid-dc/d21/classcv_1_1_file_node>` & fn) and also have static create() method without parameters (or with all the optional parameters)

