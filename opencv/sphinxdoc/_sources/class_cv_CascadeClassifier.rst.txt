.. index:: pair: class; cv::CascadeClassifier
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier:

class cv::CascadeClassifier
===========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Cascade classifier class for object detection. :ref:`More...<details-dd/d5f/classcv_1_1_cascade_classifier>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <objdetect.hpp>
	
	class CascadeClassifier
	{
	public:
		// fields
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`BaseCascadeClassifier<doxid-dd/de9/classcv_1_1_base_cascade_classifier>`> :target:`cc<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a028c1d86a8275c82b089510768f853bd>`;

		// construction
	
		:target:`CascadeClassifier<doxid-dd/d5f/classcv_1_1_cascade_classifier_1ab3e572643114c43b21074df48c565a27>`();
		:ref:`CascadeClassifier<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a6d01a748b103f0cd6bd2a20037ae8731>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename);

		// methods
	
		void
		:ref:`detectMultiScale<doxid-dd/d5f/classcv_1_1_cascade_classifier_1aaf8181cb63968136476ec4204ffca498>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects,
			double scaleFactor = 1.1,
			int minNeighbors = 3,
			int flags = 0,
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`()
			);
	
		void
		:ref:`detectMultiScale<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a90fe1b7778bed4a27aa8482e1eecc116>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects,
			std::vector<int>& numDetections,
			double scaleFactor = 1.1,
			int minNeighbors = 3,
			int flags = 0,
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`()
			);
	
		void
		:ref:`detectMultiScale<doxid-dd/d5f/classcv_1_1_cascade_classifier_1accf96d130d9f3cf4c58bf445b7861c19>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects,
			std::vector<int>& rejectLevels,
			std::vector<double>& levelWeights,
			double scaleFactor = 1.1,
			int minNeighbors = 3,
			int flags = 0,
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
			bool outputRejectLevels = false
			);
	
		bool
		:ref:`empty<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a1753ebe58554fe0673ce46cb4e83f08a>`() const;
	
		int
		:target:`getFeatureType<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a0bab6de516c685ba879a4b1f1debdef1>`() const;
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`BaseCascadeClassifier::MaskGenerator<doxid-d8/dbc/classcv_1_1_base_cascade_classifier_1_1_mask_generator>`>
		:target:`getMaskGenerator<doxid-dd/d5f/classcv_1_1_cascade_classifier_1ac39ae98f8358d3ffc14d7477a7bdb116>`();
	
		void*
		:target:`getOldCascade<doxid-dd/d5f/classcv_1_1_cascade_classifier_1ac7cccf61596e217726c5da99da3a69bf>`();
	
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`getOriginalWindowSize<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a7a131d319ab42a444ff2bcbb433b7b41>`() const;
	
		bool
		:target:`isOldFormatCascade<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a556bdd8738ba96aac07628ec38ff46da>`() const;
	
		bool
		:ref:`load<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a1a5884c8cc749422f9eb77c2471958bc>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename);
	
		bool
		:ref:`read<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a6e3f096b121259fd3bab1c2437e840c5>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& node);
	
		void
		:target:`setMaskGenerator<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a7628a59eefb561ecd79ad9d02bd69073>`(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`BaseCascadeClassifier::MaskGenerator<doxid-d8/dbc/classcv_1_1_base_cascade_classifier_1_1_mask_generator>`>& maskGenerator);
	
		static
		bool
		:target:`convert<doxid-dd/d5f/classcv_1_1_cascade_classifier_1a6bdc0b45d2a340a7a1dd8d6f9bce4bda>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& oldcascade,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& newcascade
			);
	};
.. _details-dd/d5f/classcv_1_1_cascade_classifier:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Cascade classifier class for object detection.

Construction
------------

.. index:: pair: function; CascadeClassifier
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1a6d01a748b103f0cd6bd2a20037ae8731:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CascadeClassifier(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename)

Loads a classifier from a file.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- Name of the file from which the classifier is loaded.

Methods
-------

.. index:: pair: function; detectMultiScale
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1aaf8181cb63968136476ec4204ffca498:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	detectMultiScale(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects,
		double scaleFactor = 1.1,
		int minNeighbors = 3,
		int flags = 0,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`()
		)

Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.

The function is parallelized with the TBB library.

* (Python) A face detection example using cascade classifiers can be found at opencv_source_code/samples/python/facedetect.py



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Matrix of the type CV_8U containing an image where objects are detected.

	*
		- objects

		- Vector of rectangles where each rectangle contains the detected object, the rectangles may be partially outside the original image.

	*
		- scaleFactor

		- Parameter specifying how much the image size is reduced at each image scale.

	*
		- minNeighbors

		- Parameter specifying how many neighbors each candidate rectangle should have to retain it.

	*
		- flags

		- Parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. It is not used for a new cascade.

	*
		- minSize

		- Minimum possible object size. Objects smaller than that are ignored.

	*
		- maxSize

		- Maximum possible object size. Objects larger than that are ignored. If ``maxSize == minSize`` model is evaluated on single scale.

.. index:: pair: function; detectMultiScale
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1a90fe1b7778bed4a27aa8482e1eecc116:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	detectMultiScale(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects,
		std::vector<int>& numDetections,
		double scaleFactor = 1.1,
		int minNeighbors = 3,
		int flags = 0,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Matrix of the type CV_8U containing an image where objects are detected.

	*
		- objects

		- Vector of rectangles where each rectangle contains the detected object, the rectangles may be partially outside the original image.

	*
		- numDetections

		- Vector of detection numbers for the corresponding objects. An object's number of detections is the number of neighboring positively classified rectangles that were joined together to form the object.

	*
		- scaleFactor

		- Parameter specifying how much the image size is reduced at each image scale.

	*
		- minNeighbors

		- Parameter specifying how many neighbors each candidate rectangle should have to retain it.

	*
		- flags

		- Parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. It is not used for a new cascade.

	*
		- minSize

		- Minimum possible object size. Objects smaller than that are ignored.

	*
		- maxSize

		- Maximum possible object size. Objects larger than that are ignored. If ``maxSize == minSize`` model is evaluated on single scale.

.. index:: pair: function; detectMultiScale
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1accf96d130d9f3cf4c58bf445b7861c19:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	detectMultiScale(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects,
		std::vector<int>& rejectLevels,
		std::vector<double>& levelWeights,
		double scaleFactor = 1.1,
		int minNeighbors = 3,
		int flags = 0,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		bool outputRejectLevels = false
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function allows you to retrieve the final stage decision certainty of classification. For this, one needs to set ``outputRejectLevels`` on true and provide the ``rejectLevels`` and ``levelWeights`` parameter. For each resulting detection, ``levelWeights`` will then contain the certainty of classification at the final stage. This value can then be used to separate strong from weaker classifications.

A code sample on how to use it efficiently can be found below:

.. ref-code-block:: cpp

	Mat img;
	vector<double> weights;
	vector<int> levels;
	vector<Rect> detections;
	CascadeClassifier model("/path/to/your/model.xml");
	model.detectMultiScale(img, detections, levels, weights, 1.1, 3, 0, Size(), Size(), true);
	cerr << "Detection " << detections[0] << " with weight " << weights[0] << endl;

.. index:: pair: function; empty
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1a1753ebe58554fe0673ce46cb4e83f08a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	empty() const

Checks whether the classifier has been loaded.

.. index:: pair: function; load
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1a1a5884c8cc749422f9eb77c2471958bc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	load(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename)

Loads a classifier from a file.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- Name of the file from which the classifier is loaded. The file may contain an old HAAR classifier trained by the haartraining application or a new cascade classifier trained by the traincascade application.

.. index:: pair: function; read
.. _doxid-dd/d5f/classcv_1_1_cascade_classifier_1a6e3f096b121259fd3bab1c2437e840c5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	read(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& node)

Reads a classifier from a :ref:`FileStorage <doxid-d9/df9/classcv_1_1_file_storage>` node.

The file may contain a new cascade classifier (trained traincascade application) only.

