.. index:: pair: class; cv::HausdorffDistanceExtractor
.. _doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor:

class cv::HausdorffDistanceExtractor
====================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A simple Hausdorff distance measure between shapes defined by contours. :ref:`More...<details-df/d5e/classcv_1_1_hausdorff_distance_extractor>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <shape_distance.hpp>
	
	class HausdorffDistanceExtractor: public :ref:`cv::ShapeDistanceExtractor<doxid-d2/ddc/classcv_1_1_shape_distance_extractor>`
	{
	public:
		// methods
	
		virtual
		int
		:target:`getDistanceFlag<doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor_1a0cd09b764ae62d682b75a1d7caecfa79>`() const = 0;
	
		virtual
		float
		:target:`getRankProportion<doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor_1ab34200a60e1f60f42925c0d75a67a0df>`() const = 0;
	
		virtual
		void
		:ref:`setDistanceFlag<doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor_1a4469fbc8322ee88d34b4dc885e173ec6>`(int distanceFlag) = 0;
	
		virtual
		void
		:ref:`setRankProportion<doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor_1a36af13e0653ebb2d6677e68932010dfb>`(float rankProportion) = 0;
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		float
		:ref:`computeDistance<doxid-d2/ddc/classcv_1_1_shape_distance_extractor_1aba29b7775eca6bd6c4b4f5e300094097>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour1,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` contour2
			) = 0;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-df/d5e/classcv_1_1_hausdorff_distance_extractor:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A simple Hausdorff distance measure between shapes defined by contours.

according to the paper "Comparing Images using the Hausdorff distance." by D.P. Huttenlocher, G.A. Klanderman, and W.J. Rucklidge. (PAMI 1993). :

Methods
-------

.. index:: pair: function; setDistanceFlag
.. _doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor_1a4469fbc8322ee88d34b4dc885e173ec6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setDistanceFlag(int distanceFlag) = 0

Set the norm used to compute the Hausdorff value between two shapes. It can be :ref:`L1 <doxid-d0/de0/structcv_1_1_l1>` or :ref:`L2 <doxid-dd/dff/structcv_1_1_l2>` norm.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- distanceFlag

		- Flag indicating which norm is used to compute the Hausdorff distance (NORM_L1, NORM_L2).

.. index:: pair: function; setRankProportion
.. _doxid-df/d5e/classcv_1_1_hausdorff_distance_extractor_1a36af13e0653ebb2d6677e68932010dfb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setRankProportion(float rankProportion) = 0

This method sets the rank proportion (or fractional value) that establish the Kth ranked value of the partial Hausdorff distance. Experimentally had been shown that 0.6 is a good value to compare shapes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rankProportion

		- fractional value (between 0 and 1).

