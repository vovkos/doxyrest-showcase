.. index:: pair: class; cv::KalmanFilter
.. _doxid-d3/dfb/classcv_1_1_kalman_filter:

class cv::KalmanFilter
======================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Kalman filter class. :ref:`More...<details-d3/dfb/classcv_1_1_kalman_filter>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <tracking.hpp>
	
	class KalmanFilter
	{
	public:
		// fields
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`controlMatrix<doxid-d3/dfb/classcv_1_1_kalman_filter_1a6486e7287114810636fb33953280ed52>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`errorCovPost<doxid-d3/dfb/classcv_1_1_kalman_filter_1a446d8e9a0105b0aa35cd66119c529803>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`errorCovPre<doxid-d3/dfb/classcv_1_1_kalman_filter_1ae1bd3a86f10753d723e7174d570d9ac1>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`gain<doxid-d3/dfb/classcv_1_1_kalman_filter_1a077d73eb075b00779dc009a9057c27c3>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`measurementMatrix<doxid-d3/dfb/classcv_1_1_kalman_filter_1a0f60b78726d8eccf74a1f2479c2d1f97>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`measurementNoiseCov<doxid-d3/dfb/classcv_1_1_kalman_filter_1a828d051035ba807966ad65edf288a08e>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`processNoiseCov<doxid-d3/dfb/classcv_1_1_kalman_filter_1af19be9c0630d0f658bdbaea409a35cda>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`statePost<doxid-d3/dfb/classcv_1_1_kalman_filter_1add8fb5ac9c04b4600b679698dcb0447d>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`statePre<doxid-d3/dfb/classcv_1_1_kalman_filter_1a926dece64b4e0e28c3f58af8b7793669>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`temp1<doxid-d3/dfb/classcv_1_1_kalman_filter_1aa3d064a9194c2815dbe19c056b6dc763>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`temp2<doxid-d3/dfb/classcv_1_1_kalman_filter_1a14866bd506668eb0ed57b3974b3a1ee7>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`temp3<doxid-d3/dfb/classcv_1_1_kalman_filter_1afdbe36066a7d7f560aa02abe6be114d8>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`temp4<doxid-d3/dfb/classcv_1_1_kalman_filter_1a84342f2d9dec1e6389025ad229401809>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :target:`temp5<doxid-d3/dfb/classcv_1_1_kalman_filter_1a846c2a6222c6e5d8b1385dfbccc83ae0>`;
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` :ref:`transitionMatrix<doxid-d3/dfb/classcv_1_1_kalman_filter_1a0657173e411acbf40d2d3c6b46e03b19>`;

		// construction
	
		:ref:`KalmanFilter<doxid-d3/dfb/classcv_1_1_kalman_filter_1ac0799f0611baee9e7e558f016e4a7b40>`();
	
		:ref:`KalmanFilter<doxid-d3/dfb/classcv_1_1_kalman_filter_1abac82ecfa530611a163255bc7d91c088>`(
			int dynamParams,
			int measureParams,
			int controlParams = 0,
			int type = :ref:`CV_32F<doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`
			);

		// methods
	
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`&
		:ref:`correct<doxid-d3/dfb/classcv_1_1_kalman_filter_1a60eb7feb569222ad0657ef1875884b5e>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& measurement);
	
		void
		:ref:`init<doxid-d3/dfb/classcv_1_1_kalman_filter_1a4f136c39c016d3530c7c5801dd1ddb3b>`(
			int dynamParams,
			int measureParams,
			int controlParams = 0,
			int type = :ref:`CV_32F<doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`
			);
	
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`&
		:ref:`predict<doxid-d3/dfb/classcv_1_1_kalman_filter_1aa710d2255566bec8d6ce608d103d4fa7>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& control = :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`());
	};
.. _details-d3/dfb/classcv_1_1_kalman_filter:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Kalman filter class.

The class implements a standard Kalman filter `http://en.wikipedia.org/wiki/Kalman_filter <http://en.wikipedia.org/wiki/Kalman_filter>`__, :ref:`[91] <doxid-d0/de3/citelist_1CITEREF_Welch95>`. However, you can modify transitionMatrix, controlMatrix, and measurementMatrix to get an extended Kalman filter functionality. See the OpenCV sample kalman.cpp.

* An example using the standard Kalman filter can be found at opencv_source_code/samples/cpp/kalman.cpp

Fields
------

.. index:: pair: variable; controlMatrix
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a6486e7287114810636fb33953280ed52:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` controlMatrix

control matrix (B) (not used if there is no control)

.. index:: pair: variable; errorCovPost
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a446d8e9a0105b0aa35cd66119c529803:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` errorCovPost

posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)\*H)\*P'(k)

.. index:: pair: variable; errorCovPre
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1ae1bd3a86f10753d723e7174d570d9ac1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` errorCovPre

priori error estimate covariance matrix (P'(k)): P'(k)=A\*P(k-1)\*At + Q)\*/

.. index:: pair: variable; gain
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a077d73eb075b00779dc009a9057c27c3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` gain

Kalman gain matrix (K(k)): K(k)=P'(k)\*Ht\*inv(H\*P'(k)\*Ht+R)

.. index:: pair: variable; measurementMatrix
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a0f60b78726d8eccf74a1f2479c2d1f97:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` measurementMatrix

measurement matrix (H)

.. index:: pair: variable; measurementNoiseCov
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a828d051035ba807966ad65edf288a08e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` measurementNoiseCov

measurement noise covariance matrix (R)

.. index:: pair: variable; processNoiseCov
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1af19be9c0630d0f658bdbaea409a35cda:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` processNoiseCov

process noise covariance matrix (Q)

.. index:: pair: variable; statePost
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1add8fb5ac9c04b4600b679698dcb0447d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` statePost

corrected state (x(k)): x(k)=x'(k)+K(k)\*(z(k)-H\*x'(k))

.. index:: pair: variable; statePre
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a926dece64b4e0e28c3f58af8b7793669:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` statePre

predicted state (x'(k)): x(k)=A\*x(k-1)+B\*u(k)

.. index:: pair: variable; transitionMatrix
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a0657173e411acbf40d2d3c6b46e03b19:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>` transitionMatrix

state transition matrix (A)

Construction
------------

.. index:: pair: function; KalmanFilter
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1ac0799f0611baee9e7e558f016e4a7b40:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	KalmanFilter()

The constructors.

In C API when CvKalman\* kalmanFilter structure is not needed anymore, it should be released with cvReleaseKalman(&kalmanFilter)

.. index:: pair: function; KalmanFilter
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1abac82ecfa530611a163255bc7d91c088:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	KalmanFilter(
		int dynamParams,
		int measureParams,
		int controlParams = 0,
		int type = :ref:`CV_32F<doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dynamParams

		- Dimensionality of the state.

	*
		- measureParams

		- Dimensionality of the measurement.

	*
		- controlParams

		- Dimensionality of the control vector.

	*
		- type

		- Type of the created matrices that should be CV_32F or CV_64F.

Methods
-------

.. index:: pair: function; correct
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a60eb7feb569222ad0657ef1875884b5e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`&
	correct(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& measurement)

Updates the predicted state from the measurement.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- measurement

		- The measured system parameters

.. index:: pair: function; init
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1a4f136c39c016d3530c7c5801dd1ddb3b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	init(
		int dynamParams,
		int measureParams,
		int controlParams = 0,
		int type = :ref:`CV_32F<doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`
		)

Re-initializes Kalman filter. The previous content is destroyed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dynamParams

		- Dimensionality of the state.

	*
		- measureParams

		- Dimensionality of the measurement.

	*
		- controlParams

		- Dimensionality of the control vector.

	*
		- type

		- Type of the created matrices that should be CV_32F or CV_64F.

.. index:: pair: function; predict
.. _doxid-d3/dfb/classcv_1_1_kalman_filter_1aa710d2255566bec8d6ce608d103d4fa7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`&
	predict(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& control = :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`())

Computes a predicted state.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- control

		- The optional input control

