.. index:: pair: class; cv::RNG
.. _doxid-d3/df8/classcv_1_1_r_n_g:

class cv::RNG
=============

.. toctree::
	:hidden:

Overview
~~~~~~~~

Random Number Generator. :ref:`More...<details-d3/df8/classcv_1_1_r_n_g>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <core.hpp>
	
	class RNG
	{
	public:
		// enums
	
		enum
		{
		    :target:`UNIFORM<doxid-d3/df8/classcv_1_1_r_n_g_1af25905f7e5db288b4b78752e34a49c95af6797281458bec27565ee730ea228d4a>` = 0,
		    :target:`NORMAL<doxid-d3/df8/classcv_1_1_r_n_g_1af25905f7e5db288b4b78752e34a49c95a85da6d7bc413e10a648f638151129a91>`  = 1,
		};

		// fields
	
		:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` :target:`state<doxid-d3/df8/classcv_1_1_r_n_g_1a993bd2e6a5a9b8f3b37ba6049b523136>`;

		// construction
	
		:ref:`RNG<doxid-d3/df8/classcv_1_1_r_n_g_1a06c28035e383bc9eff22e1fad619ddf6>`();
		:ref:`RNG<doxid-d3/df8/classcv_1_1_r_n_g_1a2d2f54a5a1145e5b9f645b8983c6ae75>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` state);

		// methods
	
		void
		:ref:`fill<doxid-d3/df8/classcv_1_1_r_n_g_1ad26f2b09d9868cf108e84c9814aa682d>`(
			:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mat,
			int distType,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` a,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` b,
			bool saturateRange = false
			);
	
		double
		:ref:`gaussian<doxid-d3/df8/classcv_1_1_r_n_g_1a8df8ce4dc7d15916cee743e5a884639d>`(double sigma);
	
		unsigned
		:ref:`next<doxid-d3/df8/classcv_1_1_r_n_g_1ad8d035897a5e31e7fc3e1e6c378c32f5>`();
	
		:ref:`operator double<doxid-d3/df8/classcv_1_1_r_n_g_1a5e3c36ffa74d7786313037c838c429eb>`();
		:ref:`operator float<doxid-d3/df8/classcv_1_1_r_n_g_1a6c542e1c042c18b82ac447747445de9b>`();
		:ref:`operator schar<doxid-d3/df8/classcv_1_1_r_n_g_1a5f01fd132f75a87cc2ed153bf9907240>`();
		:ref:`operator short<doxid-d3/df8/classcv_1_1_r_n_g_1ac6584b40ce8f99260210bcac615bd1ed>`();
		:ref:`operator uchar<doxid-d3/df8/classcv_1_1_r_n_g_1a8b1a6322d1cac24cd929aecad1041f22>`();
		:ref:`operator unsigned<doxid-d3/df8/classcv_1_1_r_n_g_1a8419e63b25666f77d2d388aaae8122ba>`();
		:ref:`operator ushort<doxid-d3/df8/classcv_1_1_r_n_g_1a51e4c416b3ace4840774cceaedcc4b9a>`();
	
		unsigned
		:ref:`operator()<doxid-d3/df8/classcv_1_1_r_n_g_1a16ca31c8e2ec0990df323b442ab09e4f>`();
	
		unsigned
		:ref:`operator()<doxid-d3/df8/classcv_1_1_r_n_g_1ac0112dc300696b1fc7998d37f15dd733>`(unsigned N);
	
		bool
		:target:`operator==<doxid-d3/df8/classcv_1_1_r_n_g_1a6c4889ee703a2b667df1fa298ffa312f>`(const RNG& other) const;
	
		int
		:ref:`uniform<doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(
			int a,
			int b
			);
	
		float
		:ref:`uniform<doxid-d3/df8/classcv_1_1_r_n_g_1a47acb9cf49f56ae6b86ab08c51f0f7d3>`(
			float a,
			float b
			);
	
		double
		:ref:`uniform<doxid-d3/df8/classcv_1_1_r_n_g_1a8325cc562269b47bcac2343639b6fafc>`(
			double a,
			double b
			);
	};
.. _details-d3/df8/classcv_1_1_r_n_g:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Random Number Generator.

Random number generator. It encapsulates the state (currently, a 64-bit integer) and has methods to return scalar random values and to fill arrays with random values. Currently it supports uniform and Gaussian (normal) distributions. The generator uses Multiply-With-Carry algorithm, introduced by G. Marsaglia (`http://en.wikipedia.org/wiki/Multiply-with-carry <http://en.wikipedia.org/wiki/Multiply-with-carry>`__). Gaussian-distribution random numbers are generated using the Ziggurat algorithm (`http://en.wikipedia.org/wiki/Ziggurat_algorithm <http://en.wikipedia.org/wiki/Ziggurat_algorithm>`__), introduced by G. Marsaglia and W. W. Tsang.

Construction
------------

.. index:: pair: function; RNG
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a06c28035e383bc9eff22e1fad619ddf6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	RNG()

constructor

These are the :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>` constructors. The first form sets the state to some pre-defined value, equal to 2\*\*32-1 in the current implementation. The second form sets the state to the specified value. If you passed state=0 , the constructor uses the above default value instead to avoid the singular random number sequence, consisting of all zeros.

.. index:: pair: function; RNG
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a2d2f54a5a1145e5b9f645b8983c6ae75:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	RNG(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` state)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- state

		- 64-bit value used to initialize the :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>`.

Methods
-------

.. index:: pair: function; fill
.. _doxid-d3/df8/classcv_1_1_r_n_g_1ad26f2b09d9868cf108e84c9814aa682d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	fill(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mat,
		int distType,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` a,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` b,
		bool saturateRange = false
		)

Fills arrays with random numbers.

Each of the methods fills the matrix with the random values from the specified distribution. As the new numbers are generated, the :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>` state is updated accordingly. In case of multiple-channel images, every channel is filled independently, which means that :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>` cannot generate samples from the multi-dimensional Gaussian distribution with non-diagonal covariance matrix directly. To do that, the method generates samples from multi-dimensional standard Gaussian distribution with zero mean and identity covariation matrix, and then transforms them using transform to get samples from the specified Gaussian distribution.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- 2D or N-dimensional matrix; currently matrices with more than 4 channels are not supported by the methods, use :ref:`Mat::reshape <doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8>` as a possible workaround.

	*
		- distType

		- distribution type, :ref:`RNG::UNIFORM <doxid-d3/df8/classcv_1_1_r_n_g_1af25905f7e5db288b4b78752e34a49c95af6797281458bec27565ee730ea228d4a>` or :ref:`RNG::NORMAL <doxid-d3/df8/classcv_1_1_r_n_g_1af25905f7e5db288b4b78752e34a49c95a85da6d7bc413e10a648f638151129a91>`.

	*
		- a

		- first distribution parameter; in case of the uniform distribution, this is an inclusive lower boundary, in case of the normal distribution, this is a mean value.

	*
		- b

		- second distribution parameter; in case of the uniform distribution, this is a non-inclusive upper boundary, in case of the normal distribution, this is a standard deviation (diagonal of the standard deviation matrix or the full standard deviation matrix).

	*
		- saturateRange

		- pre-saturation flag; for uniform distribution only; if true, the method will first convert a and b to the acceptable value range (according to the mat datatype) and then will generate uniformly distributed random numbers within the range [saturate(a), saturate(b)), if saturateRange=false, the method will generate uniformly distributed random numbers in the original range [a, b) and then will saturate them, it means, for example, that ``:ref:`theRNG() <doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>`.fill(mat_8u, :ref:`RNG::UNIFORM <doxid-d3/df8/classcv_1_1_r_n_g_1af25905f7e5db288b4b78752e34a49c95af6797281458bec27565ee730ea228d4a>`, -DBL_MAX, DBL_MAX)`` will likely produce array mostly filled with 0's and 255's, since the range (0, 255) is significantly smaller than [-DBL_MAX, DBL_MAX).

.. index:: pair: function; gaussian
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a8df8ce4dc7d15916cee743e5a884639d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	gaussian(double sigma)

Returns the next random number sampled from the Gaussian distribution.

The method transforms the state using the MWC algorithm and returns the next random number from the Gaussian distribution N(0,sigma) . That is, the mean value of the returned random numbers is zero and the standard deviation is the specified sigma .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sigma

		- standard deviation of the distribution.

.. index:: pair: function; next
.. _doxid-d3/df8/classcv_1_1_r_n_g_1ad8d035897a5e31e7fc3e1e6c378c32f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned
	next()

The method updates the state using the MWC algorithm and returns the next 32-bit random number.

.. index:: pair: function; operator double
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a5e3c36ffa74d7786313037c838c429eb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator double()

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; operator float
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a6c542e1c042c18b82ac447747445de9b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator float()

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; operator schar
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a5f01fd132f75a87cc2ed153bf9907240:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator schar()

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; operator short
.. _doxid-d3/df8/classcv_1_1_r_n_g_1ac6584b40ce8f99260210bcac615bd1ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator short()

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; operator uchar
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a8b1a6322d1cac24cd929aecad1041f22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator uchar()

Each of the methods updates the state using the MWC algorithm and returns the next random number of the specified type. In case of integer types, the returned number is from the available value range for the specified type. In case of floating-point types, the returned value is from [0,1) range.

.. index:: pair: function; operator unsigned
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a8419e63b25666f77d2d388aaae8122ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator unsigned()

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; operator ushort
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a51e4c416b3ace4840774cceaedcc4b9a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	operator ushort()

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; operator()
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a16ca31c8e2ec0990df323b442ab09e4f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned
	operator()()

returns a random integer sampled uniformly from [0, N).

The methods transform the state using the MWC algorithm and return the next random number. The first form is equivalent to :ref:`RNG::next <doxid-d3/df8/classcv_1_1_r_n_g_1ad8d035897a5e31e7fc3e1e6c378c32f5>`. The second form returns the random number modulo N , which means that the result is in the range [0, N) .

.. index:: pair: function; operator()
.. _doxid-d3/df8/classcv_1_1_r_n_g_1ac0112dc300696b1fc7998d37f15dd733:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned
	operator()(unsigned N)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- N

		- upper non-inclusive boundary of the returned random number.

.. index:: pair: function; uniform
.. _doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	uniform(
		int a,
		int b
		)

returns uniformly distributed integer random number from [a,b) range

The methods transform the state using the MWC algorithm and return the next uniformly-distributed random number of the specified type, deduced from the input parameter type, from the range [a, b) . There is a nuance illustrated by the following sample:

.. ref-code-block:: cpp

	:ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g_1a06c28035e383bc9eff22e1fad619ddf6>` rng;
	
	// always produces 0
	double a = rng.uniform(0, 1);
	
	// produces double from [0, 1)
	double a1 = rng.uniform((double)0, (double)1);
	
	// produces float from [0, 1)
	float b = rng.uniform(0.f, 1.f);
	
	// produces double from [0, 1)
	double c = rng.uniform(0., 1.);
	
	// may cause compiler error because of ambiguity:
	//  RNG::uniform(0, (int)0.999999)? or RNG::uniform((double)0, 0.99999)?
	double d = rng.uniform(0, 0.999999);

The compiler does not take into account the type of the variable to which you assign the result of :ref:`RNG::uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`. The only thing that matters to the compiler is the type of a and b parameters. So, if you want a floating-point random number, but the range boundaries are integer numbers, either put dots in the end, if they are constants, or use explicit type cast operators, as in the a1 initialization above.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- lower inclusive boundary of the returned random number.

	*
		- b

		- upper non-inclusive boundary of the returned random number.

.. index:: pair: function; uniform
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a47acb9cf49f56ae6b86ab08c51f0f7d3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	uniform(
		float a,
		float b
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; uniform
.. _doxid-d3/df8/classcv_1_1_r_n_g_1a8325cc562269b47bcac2343639b6fafc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	uniform(
		double a,
		double b
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

