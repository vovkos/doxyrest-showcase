.. index:: pair: class; cv::SparseMat
.. _doxid-d5/d29/classcv_1_1_sparse_mat:

class cv::SparseMat
===================

.. toctree::
	:hidden:

	struct_cv_SparseMat_Hdr.rst
	struct_cv_SparseMat_Node.rst

Overview
~~~~~~~~

The class :ref:`SparseMat <doxid-d5/d29/classcv_1_1_sparse_mat>` represents multi-dimensional sparse numerical arrays. :ref:`More...<details-d5/d29/classcv_1_1_sparse_mat>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mat.hpp>
	
	class SparseMat
	{
	public:
		// typedefs
	
		typedef :ref:`SparseMatConstIterator<doxid-db/dc8/classcv_1_1_sparse_mat_const_iterator>` :target:`const_iterator<doxid-d5/d29/classcv_1_1_sparse_mat_1a4f7803d5c41eef808081903167d3a263>`;
		typedef :ref:`SparseMatIterator<doxid-dd/d91/classcv_1_1_sparse_mat_iterator>` :target:`iterator<doxid-d5/d29/classcv_1_1_sparse_mat_1aa766accd9ac415bea90019010f58cac6>`;

		// enums
	
		enum
		{
		    :target:`MAGIC_VAL<doxid-d5/d29/classcv_1_1_sparse_mat_1ab5d2eb8ba04b98045a8b26243312e3a1a14d02d4adbcb5fa71d1922ceda241e8a>`  =0x42FD0000,
		    :target:`MAX_DIM<doxid-d5/d29/classcv_1_1_sparse_mat_1ab5d2eb8ba04b98045a8b26243312e3a1abe1aff4cd2b540afd5a3f4ffca3bd9a2>`    =32,
		    :target:`HASH_SCALE<doxid-d5/d29/classcv_1_1_sparse_mat_1ab5d2eb8ba04b98045a8b26243312e3a1a28ca477c8ed1afabd0da753827149eeb>` =0x5bd1e995,
		    :target:`HASH_BIT<doxid-d5/d29/classcv_1_1_sparse_mat_1ab5d2eb8ba04b98045a8b26243312e3a1a79cfd2c6ddc2c192623e8426429d27d1>`   =0x80000000,
		};

		// structs
	
		struct :ref:`Hdr<doxid-d5/d62/structcv_1_1_sparse_mat_1_1_hdr>`;
		struct :ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`;

		// fields
	
		int :target:`flags<doxid-d5/d29/classcv_1_1_sparse_mat_1ad5f261bc8c1330e4e516684861410cd2>`;
		:ref:`Hdr<doxid-d5/d62/structcv_1_1_sparse_mat_1_1_hdr>`* :target:`hdr<doxid-d5/d29/classcv_1_1_sparse_mat_1a3741ff43acd46b31aace23dee092d85a>`;

		// construction
	
		:ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat_1a9b5f1214a43144122b158c354a93e338>`();
	
		:ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat_1a62224fe4fbdc6134d80861a150e01b58>`(
			int dims,
			const int* _sizes,
			int _type
			);
	
		:ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat_1a753add6192d4355c04e6e3594ab97b49>`(const SparseMat& m);
		:ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat_1af9432a94bda00c7fd2103bcd57654d03>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);

		// methods
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-d5/d29/classcv_1_1_sparse_mat_1a810b96cf23e3cc816e7f99473b81b513>`(
			int i0,
			bool createMissing,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-d5/d29/classcv_1_1_sparse_mat_1a14e7bb6106e6b4608ddbbc394bbf585e>`(
			int i0,
			int i1,
			bool createMissing,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-d5/d29/classcv_1_1_sparse_mat_1afa0e9b6331a781f1d746e77582bee8a8>`(
			int i0,
			int i1,
			int i2,
			bool createMissing,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:ref:`ptr<doxid-d5/d29/classcv_1_1_sparse_mat_1a5425bac965f62767f50c7e68a7c452a0>`(
			const int* idx,
			bool createMissing,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		template <typename _Tp>
		_Tp&
		:ref:`ref<doxid-d5/d29/classcv_1_1_sparse_mat_1a0e1e95540e8cc75976bb4be97dc2203e>`(
			int i0,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		template <typename _Tp>
		_Tp&
		:ref:`ref<doxid-d5/d29/classcv_1_1_sparse_mat_1a565a2111e6223af3d3e7d7af2db7588b>`(
			int i0,
			int i1,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		template <typename _Tp>
		_Tp&
		:ref:`ref<doxid-d5/d29/classcv_1_1_sparse_mat_1a8123bdba2899184e4946c82b2ddaa541>`(
			int i0,
			int i1,
			int i2,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		template <typename _Tp>
		_Tp&
		:ref:`ref<doxid-d5/d29/classcv_1_1_sparse_mat_1a31eeb43c5070301db9cba23bdb45ee11>`(
			const int* idx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		template <typename _Tp>
		_Tp
		:ref:`value<doxid-d5/d29/classcv_1_1_sparse_mat_1a64d526ae50a7aceb49b2c5ba3528c859>`(
			int i0,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		_Tp
		:ref:`value<doxid-d5/d29/classcv_1_1_sparse_mat_1a50920170695fb08a34b4dbfd272b352d>`(
			int i0,
			int i1,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		_Tp
		:ref:`value<doxid-d5/d29/classcv_1_1_sparse_mat_1a34720d97d1db6e1f57ab229fddb5281f>`(
			int i0,
			int i1,
			int i2,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		_Tp
		:ref:`value<doxid-d5/d29/classcv_1_1_sparse_mat_1af112d88b293cd922392043fd57bb8398>`(
			const int* idx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		const _Tp*
		:ref:`find<doxid-d5/d29/classcv_1_1_sparse_mat_1af31f0f8c0f55db0640aa8081a593f64e>`(
			int i0,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		const _Tp*
		:ref:`find<doxid-d5/d29/classcv_1_1_sparse_mat_1a782dd472d4a859a13dc77fca7e4ef8a6>`(
			int i0,
			int i1,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		const _Tp*
		:ref:`find<doxid-d5/d29/classcv_1_1_sparse_mat_1aca75a3e5266b78bafcd01dffe75e563d>`(
			int i0,
			int i1,
			int i2,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		template <typename _Tp>
		const _Tp*
		:ref:`find<doxid-d5/d29/classcv_1_1_sparse_mat_1a6a68ed5f9b65fa36c3d209c0dafa24a8>`(
			const int* idx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			) const;
	
		:ref:`SparseMatIterator<doxid-dd/d91/classcv_1_1_sparse_mat_iterator>`
		:ref:`begin<doxid-d5/d29/classcv_1_1_sparse_mat_1ad3913621631f1f3bd6a3a3ef6e667570>`();
	
		template <typename _Tp>
		:ref:`SparseMatIterator_<doxid-d1/d10/classcv_1_1_sparse_mat_iterator__>`<_Tp>
		:ref:`begin<doxid-d5/d29/classcv_1_1_sparse_mat_1af371f2cb6952b62ec7ad3b82538d9363>`();
	
		:ref:`SparseMatConstIterator<doxid-db/dc8/classcv_1_1_sparse_mat_const_iterator>`
		:ref:`begin<doxid-d5/d29/classcv_1_1_sparse_mat_1a106056c6a53a49929da7c52c24945165>`() const;
	
		template <typename _Tp>
		:ref:`SparseMatConstIterator_<doxid-db/d01/classcv_1_1_sparse_mat_const_iterator__>`<_Tp>
		:ref:`begin<doxid-d5/d29/classcv_1_1_sparse_mat_1ad02b25e131308553618b710e22ca8af1>`() const;
	
		void
		:ref:`addref<doxid-d5/d29/classcv_1_1_sparse_mat_1a8d1d03d3c19ccd8cd5653b3b7375bb68>`();
	
		void
		:target:`assignTo<doxid-d5/d29/classcv_1_1_sparse_mat_1ae102ac11f15a875d9b689575d585d21f>`(
			SparseMat& m,
			int type = -1
			) const;
	
		int
		:ref:`channels<doxid-d5/d29/classcv_1_1_sparse_mat_1acb6b3b831a74b2071f8741ee873e925f>`() const;
	
		void
		:ref:`clear<doxid-d5/d29/classcv_1_1_sparse_mat_1a2fa705d84961513f6e0b0066ec245a8e>`();
	
		SparseMat
		:ref:`clone<doxid-d5/d29/classcv_1_1_sparse_mat_1a291307d646c7e9e76607b8a49ab4d6ea>`() const;
	
		void
		:ref:`convertTo<doxid-d5/d29/classcv_1_1_sparse_mat_1a577ea9bbc02ffcf195df6d96f9c9650c>`(
			SparseMat& m,
			int rtype,
			double alpha = 1
			) const;
	
		void
		:ref:`convertTo<doxid-d5/d29/classcv_1_1_sparse_mat_1a668825b1d0bb87a075cc2382692093b7>`(
			:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
			int rtype,
			double alpha = 1,
			double beta = 0
			) const;
	
		void
		:ref:`copyTo<doxid-d5/d29/classcv_1_1_sparse_mat_1a18d9fb50fa768fd20e9f11b003906133>`(SparseMat& m) const;
	
		void
		:ref:`copyTo<doxid-d5/d29/classcv_1_1_sparse_mat_1a6b077b6ec96d3aa588ef32e63cd7f7f5>`(:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m) const;
	
		void
		:ref:`create<doxid-d5/d29/classcv_1_1_sparse_mat_1adf2713a5ec1fb025c9ff4014a53e68c6>`(
			int dims,
			const int* _sizes,
			int _type
			);
	
		int
		:ref:`depth<doxid-d5/d29/classcv_1_1_sparse_mat_1ae40e39e851f00341f1df57cb482429dc>`() const;
	
		int
		:ref:`dims<doxid-d5/d29/classcv_1_1_sparse_mat_1a1779da985ecb9cd570e0dd71a49b6aca>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`elemSize<doxid-d5/d29/classcv_1_1_sparse_mat_1af42f343f4f3d5bc974db1eca57417150>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`elemSize1<doxid-d5/d29/classcv_1_1_sparse_mat_1a3564e3c77b19ac1104dbe924973dd288>`() const;
	
		:ref:`SparseMatIterator<doxid-dd/d91/classcv_1_1_sparse_mat_iterator>`
		:ref:`end<doxid-d5/d29/classcv_1_1_sparse_mat_1a71cef837db3fd9aabef3abb57ae19a1b>`();
	
		:ref:`SparseMatConstIterator<doxid-db/dc8/classcv_1_1_sparse_mat_const_iterator>`
		:ref:`end<doxid-d5/d29/classcv_1_1_sparse_mat_1a4d3e2d01ec6a363488097ae2b0b3c124>`() const;
	
		template <typename _Tp>
		:ref:`SparseMatIterator_<doxid-d1/d10/classcv_1_1_sparse_mat_iterator__>`<_Tp>
		:ref:`end<doxid-d5/d29/classcv_1_1_sparse_mat_1a4fe2ca854bcafa54cb371146523c7e36>`();
	
		template <typename _Tp>
		:ref:`SparseMatConstIterator_<doxid-db/d01/classcv_1_1_sparse_mat_const_iterator__>`<_Tp>
		:ref:`end<doxid-d5/d29/classcv_1_1_sparse_mat_1ac004c4119d6e77bfa95e803d9a7dd5fd>`() const;
	
		void
		:ref:`erase<doxid-d5/d29/classcv_1_1_sparse_mat_1ad4ff041a2a3771613847b94c761ab1f4>`(
			int i0,
			int i1,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		void
		:ref:`erase<doxid-d5/d29/classcv_1_1_sparse_mat_1ab00d2c0c7bff3c631d1ac43fe1be45cd>`(
			int i0,
			int i1,
			int i2,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		void
		:ref:`erase<doxid-d5/d29/classcv_1_1_sparse_mat_1a6f64485a3f47ba79847a3fdf349b9943>`(
			const int* idx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
			);
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`hash<doxid-d5/d29/classcv_1_1_sparse_mat_1ae882e4ed31b4cc76b19cd67d84e854b1>`(int i0) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`hash<doxid-d5/d29/classcv_1_1_sparse_mat_1aa9aba486fd7e4fc2b1c80bc54844ac23>`(
			int i0,
			int i1
			) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`hash<doxid-d5/d29/classcv_1_1_sparse_mat_1a681b6dafd842a95589cb82ed790279c9>`(
			int i0,
			int i1,
			int i2
			) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`hash<doxid-d5/d29/classcv_1_1_sparse_mat_1a5c4f02569b2b2f183903112435a13f83>`(const int* idx) const;
	
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
		:target:`newNode<doxid-d5/d29/classcv_1_1_sparse_mat_1acfbf3c27ab6d5f90e4d37b1654f90f0a>`(
			const int* idx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` hashval
			);
	
		:ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`*
		:target:`node<doxid-d5/d29/classcv_1_1_sparse_mat_1a499f156a1dc912aae86f1d725fbb9b77>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nidx);
	
		const :ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`*
		:target:`node<doxid-d5/d29/classcv_1_1_sparse_mat_1ab3e934620dcbc6248a09e2b8a5760b3f>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nidx) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`nzcount<doxid-d5/d29/classcv_1_1_sparse_mat_1ad0cd6ef01802341dda3e8b75af5933f0>`() const;
	
		SparseMat&
		:ref:`operator=<doxid-d5/d29/classcv_1_1_sparse_mat_1a144c0f1ec1d3ffc20305bc4d1747b741>`(const SparseMat& m);
	
		SparseMat&
		:ref:`operator=<doxid-d5/d29/classcv_1_1_sparse_mat_1a9e634f2d73a077444df4395e50821129>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);
	
		void
		:target:`release<doxid-d5/d29/classcv_1_1_sparse_mat_1a3f4c162afd8cc809d23bd0fe9b38ead7>`();
	
		void
		:target:`removeNode<doxid-d5/d29/classcv_1_1_sparse_mat_1a5adcb69ee679da35f74ea3a78594a692>`(
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` hidx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nidx,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` previdx
			);
	
		void
		:target:`resizeHashTab<doxid-d5/d29/classcv_1_1_sparse_mat_1af86523883daef3f618a7ec38fe049edc>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` newsize);
	
		const int*
		:ref:`size<doxid-d5/d29/classcv_1_1_sparse_mat_1a65eac830987646a4792815ad4e717c3e>`() const;
	
		int
		:ref:`size<doxid-d5/d29/classcv_1_1_sparse_mat_1a4fe9c986b3cf0240c68ce985df334c17>`(int i) const;
	
		int
		:ref:`type<doxid-d5/d29/classcv_1_1_sparse_mat_1a3331bffc1409d61631d223169a950b25>`() const;
	
		template <typename _Tp>
		_Tp&
		:ref:`value<doxid-d5/d29/classcv_1_1_sparse_mat_1a0ede1a78ef553729dd33f039c1ed50f5>`(:ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`* n);
	
		template <typename _Tp>
		const _Tp&
		:ref:`value<doxid-d5/d29/classcv_1_1_sparse_mat_1a39e257c6ec922968175136de3f572d2f>`(const :ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`* n) const;
	};

	// direct descendants

	template <typename _Tp>
	class :ref:`SparseMat_<doxid-df/d90/classcv_1_1_sparse_mat__>`;
.. _details-d5/d29/classcv_1_1_sparse_mat:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The class :ref:`SparseMat <doxid-d5/d29/classcv_1_1_sparse_mat>` represents multi-dimensional sparse numerical arrays.

Such a sparse array can store elements of any type that :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` can store. *Sparse* means that only non-zero elements are stored (though, as a result of operations on a sparse matrix, some of its stored elements can actually become 0. It is up to you to detect such elements and delete them using :ref:`SparseMat::erase <doxid-d5/d29/classcv_1_1_sparse_mat_1ad4ff041a2a3771613847b94c761ab1f4>`). The non-zero elements are stored in a hash table that grows when it is filled so that the search time is O(1) in average (regardless of whether element is there or not). Elements can be accessed using the following methods:

* Query operations (:ref:`SparseMat::ptr <doxid-d5/d29/classcv_1_1_sparse_mat_1a810b96cf23e3cc816e7f99473b81b513>` and the higher-level :ref:`SparseMat::ref <doxid-d5/d29/classcv_1_1_sparse_mat_1a0e1e95540e8cc75976bb4be97dc2203e>`, :ref:`SparseMat::value <doxid-d5/d29/classcv_1_1_sparse_mat_1a64d526ae50a7aceb49b2c5ba3528c859>` and :ref:`SparseMat::find <doxid-d5/d29/classcv_1_1_sparse_mat_1af31f0f8c0f55db0640aa8081a593f64e>`), for example:
  
  .. ref-code-block:: cpp
  
  	const int dims = 5;
  	int size[5] = {10, 10, 10, 10, 10};
  	SparseMat sparse_mat(dims, size, CV_32F);
  	for(int i = 0; i < 1000; i++)
  	{
  	    int idx[dims];
  	    for(int k = 0; k < dims; k++)
  	        idx[k] = rand() % size[k];
  	    sparse_mat.ref<float>(idx) += 1.f;
  	}
  	cout << "nnz = " << sparse_mat.nzcount() << endl;

* Sparse matrix iterators. They are similar to MatIterator but different from :ref:`NAryMatIterator <doxid-d1/ddb/classcv_1_1_n_ary_mat_iterator>`. That is, the iteration loop is familiar to STL users:
  
  .. ref-code-block:: cpp
  
  	// prints elements of a sparse floating-point matrix
  	// and the sum of elements.
  	SparseMatConstIterator_<float>
  	    it = sparse_mat.begin<float>(),
  	    it_end = sparse_mat.end<float>();
  	double s = 0;
  	int dims = sparse_mat.dims();
  	for(; it != it_end; ++it)
  	{
  	    // print element indices and the element value
  	    const SparseMat::Node* n = it.node();
  	    printf("(");
  	    for(int i = 0; i < dims; i++)
  	        printf("%d%s", n->idx[i], i < dims-1 ? ", " : ")");
  	    printf(": %g\n", it.value<float>());
  	    s += *it;
  	}
  	printf("Element sum is %g\n", s);
  
  If you run this loop, you will notice that elements are not enumerated in a logical order (lexicographical, and so on). They come in the same order as they are stored in the hash table (semi-randomly). You may collect pointers to the nodes and sort them to get the proper ordering. Note, however, that pointers to the nodes may become invalid when you add more elements to the matrix. This may happen due to possible buffer reallocation.

* Combination of the above 2 methods when you need to process 2 or more sparse matrices simultaneously. For example, this is how you can compute unnormalized cross-correlation of the 2 floating-point sparse matrices:
  
  .. ref-code-block:: cpp
  
  	double cross_corr(const SparseMat& a, const SparseMat& b)
  	{
  	    const SparseMat *_a = &a, *_b = &b;
  	    // if b contains less elements than a,
  	    // it is faster to iterate through b
  	    if(_a->nzcount() > _b->nzcount())
  	        std::swap(_a, _b);
  	    SparseMatConstIterator_<float> it = _a->begin<float>(),
  	                                   it_end = _a->end<float>();
  	    double ccorr = 0;
  	    for(; it != it_end; ++it)
  	    {
  	        // take the next element from the first matrix
  	        float avalue = *it;
  	        const Node* anode = it.node();
  	        // and try to find an element with the same index in the second matrix.
  	        // since the hash value depends only on the element index,
  	        // reuse the hash value stored in the node
  	        float bvalue = _b->value<float>(anode->idx,&anode->hashval);
  	        ccorr += avalue*bvalue;
  	    }
  	    return ccorr;
  	}

Construction
------------

.. index:: pair: function; SparseMat
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a9b5f1214a43144122b158c354a93e338:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat()

Various :ref:`SparseMat <doxid-d5/d29/classcv_1_1_sparse_mat>` constructors.

.. index:: pair: function; SparseMat
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a62224fe4fbdc6134d80861a150e01b58:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat(
		int dims,
		const int* _sizes,
		int _type
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dims

		- Array dimensionality.

	*
		- _sizes

		- Sparce matrix size on all dementions.

	*
		- _type

		- Sparse matrix data type.

.. index:: pair: function; SparseMat
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a753add6192d4355c04e6e3594ab97b49:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat(const SparseMat& m)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Source matrix for copy constructor. If m is dense matrix (ocvMat) then it will be converted to sparse representation.

.. index:: pair: function; SparseMat
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1af9432a94bda00c7fd2103bcd57654d03:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- Source matrix for copy constructor. If m is dense matrix (ocvMat) then it will be converted to sparse representation.

Methods
-------

.. index:: pair: function; ptr
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a810b96cf23e3cc816e7f99473b81b513:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int i0,
		bool createMissing,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns pointer to the specified element (1D case)

specialized variants for 1D, 2D, 3D cases and the generic_type one for n-D case. return pointer to the matrix element.

* if the element is there (it's non-zero), the pointer to it is returned

* if it's not there and createMissing=false, NULL pointer is returned

* if it's not there and createMissing=true, then the new element is created and initialized with 0. Pointer to it is returned

* if the optional hashval pointer is not NULL, the element hash value is not computed, but \*hashval is taken instead.

.. index:: pair: function; ptr
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a14e7bb6106e6b4608ddbbc394bbf585e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int i0,
		int i1,
		bool createMissing,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns pointer to the specified element (2D case)

.. index:: pair: function; ptr
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1afa0e9b6331a781f1d746e77582bee8a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		int i0,
		int i1,
		int i2,
		bool createMissing,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns pointer to the specified element (3D case)

.. index:: pair: function; ptr
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a5425bac965f62767f50c7e68a7c452a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	ptr(
		const int* idx,
		bool createMissing,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns pointer to the specified element (nD case)

.. index:: pair: function; ref
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a0e1e95540e8cc75976bb4be97dc2203e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	ref(
		int i0,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns reference to the specified element (1D case)

return read-write reference to the specified sparse matrix element.

``ref<_Tp>(i0,...[,hashval])`` is equivalent to ``*(_Tp*)ptr(i0,...,true[,hashval])``. The methods always return a valid reference. If the element did not exist, it is created and initialiazed with 0.

.. index:: pair: function; ref
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a565a2111e6223af3d3e7d7af2db7588b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	ref(
		int i0,
		int i1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns reference to the specified element (2D case)

.. index:: pair: function; ref
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a8123bdba2899184e4946c82b2ddaa541:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	ref(
		int i0,
		int i1,
		int i2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns reference to the specified element (3D case)

.. index:: pair: function; ref
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a31eeb43c5070301db9cba23bdb45ee11:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	ref(
		const int* idx,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

returns reference to the specified element (nD case)

.. index:: pair: function; value
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a64d526ae50a7aceb49b2c5ba3528c859:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp
	value(
		int i0,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns value of the specified element (1D case)

return value of the specified sparse matrix element.

``value<_Tp>(i0,...[,hashval])`` is equivalent to

.. ref-code-block:: cpp

	{ const _Tp* p = find<_Tp>(i0,...[,hashval]); return p ? *p : _Tp(); }

That is, if the element did not exist, the methods return 0.

.. index:: pair: function; value
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a50920170695fb08a34b4dbfd272b352d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp
	value(
		int i0,
		int i1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns value of the specified element (2D case)

.. index:: pair: function; value
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a34720d97d1db6e1f57ab229fddb5281f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp
	value(
		int i0,
		int i1,
		int i2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns value of the specified element (3D case)

.. index:: pair: function; value
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1af112d88b293cd922392043fd57bb8398:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp
	value(
		const int* idx,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns value of the specified element (nD case)

.. index:: pair: function; find
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1af31f0f8c0f55db0640aa8081a593f64e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	find(
		int i0,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns pointer to the specified element (1D case)

Return pointer to the specified sparse matrix element if it exists

``find<_Tp>(i0,...[,hashval])`` is equivalent to ``(_const Tp*)ptr(i0,...false[,hashval])``.

If the specified element does not exist, the methods return NULL.

.. index:: pair: function; find
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a782dd472d4a859a13dc77fca7e4ef8a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	find(
		int i0,
		int i1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns pointer to the specified element (2D case)

.. index:: pair: function; find
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1aca75a3e5266b78bafcd01dffe75e563d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	find(
		int i0,
		int i1,
		int i2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns pointer to the specified element (3D case)

.. index:: pair: function; find
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a6a68ed5f9b65fa36c3d209c0dafa24a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp*
	find(
		const int* idx,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		) const

returns pointer to the specified element (nD case)

.. index:: pair: function; begin
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ad3913621631f1f3bd6a3a3ef6e667570:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`SparseMatIterator<doxid-dd/d91/classcv_1_1_sparse_mat_iterator>`
	begin()

returns the sparse matrix iterator at the matrix beginning

return the sparse matrix iterator pointing to the first sparse matrix element

.. index:: pair: function; begin
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1af371f2cb6952b62ec7ad3b82538d9363:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`SparseMatIterator_<doxid-d1/d10/classcv_1_1_sparse_mat_iterator__>`<_Tp>
	begin()

returns the sparse matrix iterator at the matrix beginning

.. index:: pair: function; begin
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a106056c6a53a49929da7c52c24945165:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`SparseMatConstIterator<doxid-db/dc8/classcv_1_1_sparse_mat_const_iterator>`
	begin() const

returns the read-only sparse matrix iterator at the matrix beginning

.. index:: pair: function; begin
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ad02b25e131308553618b710e22ca8af1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`SparseMatConstIterator_<doxid-db/d01/classcv_1_1_sparse_mat_const_iterator__>`<_Tp>
	begin() const

returns the read-only sparse matrix iterator at the matrix beginning

.. index:: pair: function; addref
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a8d1d03d3c19ccd8cd5653b3b7375bb68:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	addref()

manually increments the reference counter to the header.

.. index:: pair: function; channels
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1acb6b3b831a74b2071f8741ee873e925f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	channels() const

returns the number of channels

.. index:: pair: function; clear
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a2fa705d84961513f6e0b0066ec245a8e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	clear()

sets all the sparse matrix elements to 0, which means clearing the hash table.

.. index:: pair: function; clone
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a291307d646c7e9e76607b8a49ab4d6ea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat
	clone() const

creates full copy of the matrix

.. index:: pair: function; convertTo
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a577ea9bbc02ffcf195df6d96f9c9650c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	convertTo(
		SparseMat& m,
		int rtype,
		double alpha = 1
		) const

multiplies all the matrix elements by the specified scale factor alpha and converts the results to the specified data type

.. index:: pair: function; convertTo
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a668825b1d0bb87a075cc2382692093b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	convertTo(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m,
		int rtype,
		double alpha = 1,
		double beta = 0
		) const

converts sparse matrix to dense n-dim matrix with optional type conversion and scaling.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- - output matrix; if it does not have a proper size or type before the operation, it is reallocated

	*
		- rtype

		- - desired output matrix type or, rather, the depth since the number of channels are the same as the input has; if rtype is negative, the output matrix will have the same type as the input.

	*
		- alpha

		- - optional scale factor

	*
		- beta

		- - optional delta added to the scaled values

.. index:: pair: function; copyTo
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a18d9fb50fa768fd20e9f11b003906133:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(SparseMat& m) const

copies all the data to the destination matrix. All the previous content of m is erased

.. index:: pair: function; copyTo
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a6b077b6ec96d3aa588ef32e63cd7f7f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m) const

converts sparse matrix to dense matrix.

.. index:: pair: function; create
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1adf2713a5ec1fb025c9ff4014a53e68c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		int dims,
		const int* _sizes,
		int _type
		)

reallocates sparse matrix.

If the matrix already had the proper size and type, it is simply cleared with :ref:`clear() <doxid-d5/d29/classcv_1_1_sparse_mat_1a2fa705d84961513f6e0b0066ec245a8e>`, otherwise, the old matrix is released (using :ref:`release() <doxid-d5/d29/classcv_1_1_sparse_mat_1a3f4c162afd8cc809d23bd0fe9b38ead7>`) and the new one is allocated.

.. index:: pair: function; depth
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ae40e39e851f00341f1df57cb482429dc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	depth() const

returns the depth of sparse matrix elements

.. index:: pair: function; dims
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a1779da985ecb9cd570e0dd71a49b6aca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	dims() const

returns the matrix dimensionality

.. index:: pair: function; elemSize
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1af42f343f4f3d5bc974db1eca57417150:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	elemSize() const

converts sparse matrix to the old-style representation; all the elements are copied.

returns the size of each element in bytes (not including the overhead - the space occupied by :ref:`SparseMat::Node <doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>` elements)

.. index:: pair: function; elemSize1
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a3564e3c77b19ac1104dbe924973dd288:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	elemSize1() const

returns :ref:`elemSize() <doxid-d5/d29/classcv_1_1_sparse_mat_1af42f343f4f3d5bc974db1eca57417150>` /channels()

.. index:: pair: function; end
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a71cef837db3fd9aabef3abb57ae19a1b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`SparseMatIterator<doxid-dd/d91/classcv_1_1_sparse_mat_iterator>`
	end()

returns the sparse matrix iterator at the matrix end

return the sparse matrix iterator pointing to the element following the last sparse matrix element

.. index:: pair: function; end
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a4d3e2d01ec6a363488097ae2b0b3c124:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`SparseMatConstIterator<doxid-db/dc8/classcv_1_1_sparse_mat_const_iterator>`
	end() const

returns the read-only sparse matrix iterator at the matrix end

.. index:: pair: function; end
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a4fe2ca854bcafa54cb371146523c7e36:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`SparseMatIterator_<doxid-d1/d10/classcv_1_1_sparse_mat_iterator__>`<_Tp>
	end()

returns the typed sparse matrix iterator at the matrix end

.. index:: pair: function; end
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ac004c4119d6e77bfa95e803d9a7dd5fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	:ref:`SparseMatConstIterator_<doxid-db/d01/classcv_1_1_sparse_mat_const_iterator__>`<_Tp>
	end() const

returns the typed read-only sparse matrix iterator at the matrix end

.. index:: pair: function; erase
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ad4ff041a2a3771613847b94c761ab1f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	erase(
		int i0,
		int i1,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

erases the specified element (2D case)

.. index:: pair: function; erase
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ab00d2c0c7bff3c631d1ac43fe1be45cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	erase(
		int i0,
		int i1,
		int i2,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

erases the specified element (3D case)

.. index:: pair: function; erase
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a6f64485a3f47ba79847a3fdf349b9943:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	erase(
		const int* idx,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* hashval = 0
		)

erases the specified element (nD case)

.. index:: pair: function; hash
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ae882e4ed31b4cc76b19cd67d84e854b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	hash(int i0) const

computes the element hash value (1D case)

.. index:: pair: function; hash
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1aa9aba486fd7e4fc2b1c80bc54844ac23:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	hash(
		int i0,
		int i1
		) const

computes the element hash value (2D case)

.. index:: pair: function; hash
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a681b6dafd842a95589cb82ed790279c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	hash(
		int i0,
		int i1,
		int i2
		) const

computes the element hash value (3D case)

.. index:: pair: function; hash
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a5c4f02569b2b2f183903112435a13f83:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	hash(const int* idx) const

computes the element hash value (nD case)

.. index:: pair: function; nzcount
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1ad0cd6ef01802341dda3e8b75af5933f0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	nzcount() const

returns the number of non-zero elements (=the number of hash table nodes)

.. index:: pair: function; operator=
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a144c0f1ec1d3ffc20305bc4d1747b741:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat&
	operator=(const SparseMat& m)

assignment operator. This is O(1) operation, i.e. no data is copied

.. index:: pair: function; operator=
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a9e634f2d73a077444df4395e50821129:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SparseMat&
	operator=(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m)

equivalent to the corresponding constructor

.. index:: pair: function; size
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a65eac830987646a4792815ad4e717c3e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const int*
	size() const

returns the array of sizes, or NULL if the matrix is not allocated

.. index:: pair: function; size
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a4fe9c986b3cf0240c68ce985df334c17:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	size(int i) const

returns the size of i-th matrix dimension (or 0)

.. index:: pair: function; type
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a3331bffc1409d61631d223169a950b25:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	type() const

returns type of sparse matrix elements

.. index:: pair: function; value
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a0ede1a78ef553729dd33f039c1ed50f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	_Tp&
	value(:ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`* n)

returns the value stored in the sparse martix node

.. index:: pair: function; value
.. _doxid-d5/d29/classcv_1_1_sparse_mat_1a39e257c6ec922968175136de3f572d2f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	const _Tp&
	value(const :ref:`Node<doxid-d9/d77/structcv_1_1_sparse_mat_1_1_node>`* n) const

returns the value stored in the sparse martix node

