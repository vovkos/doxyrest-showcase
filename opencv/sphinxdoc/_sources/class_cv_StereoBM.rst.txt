.. index:: pair: class; cv::StereoBM
.. _doxid-d1/db9/classcv_1_1_stereo_b_m:

class cv::StereoBM
==================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige. :ref:`More...<details-d1/db9/classcv_1_1_stereo_b_m>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <calib3d.hpp>
	
	class StereoBM: public :ref:`cv::StereoMatcher<doxid-dd/ddc/classcv_1_1_stereo_matcher>`
	{
	public:
		// enums
	
		enum
		{
		    :target:`PREFILTER_NORMALIZED_RESPONSE<doxid-d1/db9/classcv_1_1_stereo_b_m_1a5a1107f4879559037cf2eb657605399ca9b5f32162b35799e3c29e1bfd73e93df>` = 0,
		    :target:`PREFILTER_XSOBEL<doxid-d1/db9/classcv_1_1_stereo_b_m_1a5a1107f4879559037cf2eb657605399cabf381e03e290b2b94541738193a6abd6>`              = 1,
		};

		// methods
	
		virtual
		int
		:target:`getPreFilterCap<doxid-d1/db9/classcv_1_1_stereo_b_m_1aa1659733652473662da8e2e2a6dd83fa>`() const = 0;
	
		virtual
		int
		:target:`getPreFilterSize<doxid-d1/db9/classcv_1_1_stereo_b_m_1ac8b5569ca0dd322e5c6436e25aef833a>`() const = 0;
	
		virtual
		int
		:target:`getPreFilterType<doxid-d1/db9/classcv_1_1_stereo_b_m_1a2c148484f1b69d300e608c6a52dfe537>`() const = 0;
	
		virtual
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`
		:target:`getROI1<doxid-d1/db9/classcv_1_1_stereo_b_m_1a6b44df190e8f3ae0b06707e231dfe14f>`() const = 0;
	
		virtual
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`
		:target:`getROI2<doxid-d1/db9/classcv_1_1_stereo_b_m_1ae7a58914c4448aa417b88415ab45b9a1>`() const = 0;
	
		virtual
		int
		:target:`getSmallerBlockSize<doxid-d1/db9/classcv_1_1_stereo_b_m_1a6c048feee99fb565d0dd14c23b9f4a3c>`() const = 0;
	
		virtual
		int
		:target:`getTextureThreshold<doxid-d1/db9/classcv_1_1_stereo_b_m_1a1b6a29dd617f05fd30a0a67bac5e830b>`() const = 0;
	
		virtual
		int
		:target:`getUniquenessRatio<doxid-d1/db9/classcv_1_1_stereo_b_m_1a4a1181713b16fe730e186fe5d8021339>`() const = 0;
	
		virtual
		void
		:target:`setPreFilterCap<doxid-d1/db9/classcv_1_1_stereo_b_m_1a19c6de399420337984db65aec28fc6b3>`(int preFilterCap) = 0;
	
		virtual
		void
		:target:`setPreFilterSize<doxid-d1/db9/classcv_1_1_stereo_b_m_1a6edbcfd1dd79c9ba0c76a206741b4719>`(int preFilterSize) = 0;
	
		virtual
		void
		:target:`setPreFilterType<doxid-d1/db9/classcv_1_1_stereo_b_m_1ae44e1b05ac1b36917cd5fb4d4fd1d7c2>`(int preFilterType) = 0;
	
		virtual
		void
		:target:`setROI1<doxid-d1/db9/classcv_1_1_stereo_b_m_1a4bc3beb14fb5db0d58533fa101de20a2>`(:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` roi1) = 0;
	
		virtual
		void
		:target:`setROI2<doxid-d1/db9/classcv_1_1_stereo_b_m_1ae4b5129722296e505bfba9fac46d43a2>`(:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` roi2) = 0;
	
		virtual
		void
		:target:`setSmallerBlockSize<doxid-d1/db9/classcv_1_1_stereo_b_m_1abb6280255bb070f51ade69d6455216d6>`(int blockSize) = 0;
	
		virtual
		void
		:target:`setTextureThreshold<doxid-d1/db9/classcv_1_1_stereo_b_m_1aaee69730b91d606744cc4c5d9d8590e7>`(int textureThreshold) = 0;
	
		virtual
		void
		:target:`setUniquenessRatio<doxid-d1/db9/classcv_1_1_stereo_b_m_1ab60fc9ac381c1fde378bbc205f4d5c8f>`(int uniquenessRatio) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<StereoBM>
		:ref:`create<doxid-d1/db9/classcv_1_1_stereo_b_m_1a04fdf00525f82fe708d556e2cd359004>`(
			int numDisparities = 0,
			int blockSize = 21
			);
	};

	// direct descendants

	class :ref:`StereoBM<doxid-d8/d05/classcv_1_1cuda_1_1_stereo_b_m>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum
		{
		    :ref:`DISP_SHIFT<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa6aadf3b0bd4503bde2531592e5f90e0b>` = 4,
		    :ref:`DISP_SCALE<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa5b4b128a781d8002c3bc2640912295a4>` = (1 <<DISP_SHIFT),
		};

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`compute<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` left,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` right,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity
			) = 0;
	
		virtual
		int
		:ref:`getBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a9ab4290840ac7a9270af455f74b30b98>`() const = 0;
	
		virtual
		int
		:ref:`getDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a0ca2c2ab88e7ecac58720134867ea072>`() const = 0;
	
		virtual
		int
		:ref:`getMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abd790d22519d3c0d4fcb8e3210d11b13>`() const = 0;
	
		virtual
		int
		:ref:`getNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab3a3d5f5a49f77be0b965557e17d9fdd>`() const = 0;
	
		virtual
		int
		:ref:`getSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1afb686d0de4551e86306f10509632fa24>`() const = 0;
	
		virtual
		int
		:ref:`getSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a1be922bd3111d427fd2ddc8448537c35>`() const = 0;
	
		virtual
		void
		:ref:`setBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a38814e8a33d59f4eb5db33de04fe8c34>`(int blockSize) = 0;
	
		virtual
		void
		:ref:`setDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1aede8620506ff7f27d106fff25777514d>`(int disp12MaxDiff) = 0;
	
		virtual
		void
		:ref:`setMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ae67a506bfe7fbd37444b6713aea1c0ad>`(int minDisparity) = 0;
	
		virtual
		void
		:ref:`setNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abacfe4e5760e86b48d0c19bd4106c2fc>`(int numDisparities) = 0;
	
		virtual
		void
		:ref:`setSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a3c9106923f87592b98bf53e90bcba020>`(int speckleRange) = 0;
	
		virtual
		void
		:ref:`setSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ad21033d76ad7cdf36a5c8bb6cd946d43>`(int speckleWindowSize) = 0;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d1/db9/classcv_1_1_stereo_b_m:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Class for computing stereo correspondence using the block matching algorithm, introduced and contributed to OpenCV by K. Konolige.

Methods
-------

.. index:: pair: function; create
.. _doxid-d1/db9/classcv_1_1_stereo_b_m_1a04fdf00525f82fe708d556e2cd359004:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<StereoBM>
	create(
		int numDisparities = 0,
		int blockSize = 21
		)

Creates :ref:`StereoBM <doxid-d1/db9/classcv_1_1_stereo_b_m>` object.

The function create :ref:`StereoBM <doxid-d1/db9/classcv_1_1_stereo_b_m>` object. You can then call :ref:`StereoBM::compute() <doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345>` to compute disparity for a specific stereo pair.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- numDisparities

		- the disparity search range. For each pixel algorithm will find the best disparity from 0 (default minimum disparity) to numDisparities. The search range can then be shifted by changing the minimum disparity.

	*
		- blockSize

		- the linear size of the blocks compared by the algorithm. The size should be odd (as the block is centered at the current pixel). Larger block size implies smoother, though less accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher chance for algorithm to find a wrong correspondence.

