.. index:: pair: class; cv::StereoSGBM
.. _doxid-d4/d35/classcv_1_1_stereo_s_g_b_m:

class cv::StereoSGBM
====================

.. toctree::
	:hidden:

Overview
~~~~~~~~

The class implements the modified H. Hirschmuller algorithm :ref:`[39] <doxid-d0/de3/citelist_1CITEREF_HH08>` that differs from the original one as follows: :ref:`More...<details-d4/d35/classcv_1_1_stereo_s_g_b_m>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <calib3d.hpp>
	
	class StereoSGBM: public :ref:`cv::StereoMatcher<doxid-dd/ddc/classcv_1_1_stereo_matcher>`
	{
	public:
		// enums
	
		enum
		{
		    :target:`MODE_SGBM<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea21fac9fae6db6a60a940fd24cc61f081>`      = 0,
		    :target:`MODE_HH<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea0f746667febe92e1189e924c40752660>`        = 1,
		    :target:`MODE_SGBM_3WAY<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360eaa3ffd07d169f0d913c2402bf20595a9f>` = 2,
		    :target:`MODE_HH4<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea2bb93a960b8709039f81d7027b928559>`       = 3,
		};

		// methods
	
		virtual
		int
		:target:`getMode<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a27faa3d735e82d2b44f8eb13e2ba0a90>`() const = 0;
	
		virtual
		int
		:target:`getP1<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a387cc8f9a90d0b43b491bb1a55357023>`() const = 0;
	
		virtual
		int
		:target:`getP2<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a5ad84c9f98f5ed4663bc9f50fc00d413>`() const = 0;
	
		virtual
		int
		:target:`getPreFilterCap<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a400e482f280339ce05beccd9ed9e5bfb>`() const = 0;
	
		virtual
		int
		:target:`getUniquenessRatio<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1aa0f168808513cabc221b763664791185>`() const = 0;
	
		virtual
		void
		:target:`setMode<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a32617c11dbdac9b689711a38cd928017>`(int mode) = 0;
	
		virtual
		void
		:target:`setP1<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae62e17715deea97b431d328869a3eace>`(int P1) = 0;
	
		virtual
		void
		:target:`setP2<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a13a55a4704c988fa60e5f5902c4abfaa>`(int P2) = 0;
	
		virtual
		void
		:target:`setPreFilterCap<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1a03019cccd79bcc833dd2423c55654975>`(int preFilterCap) = 0;
	
		virtual
		void
		:target:`setUniquenessRatio<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ac7b3c009706c6809211b7c5e79434ebd>`(int uniquenessRatio) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<StereoSGBM>
		:ref:`create<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1adb7a50ef5f200ad9559e9b0e976cfa59>`(
			int minDisparity = 0,
			int numDisparities = 16,
			int blockSize = 3,
			int P1 = 0,
			int P2 = 0,
			int disp12MaxDiff = 0,
			int preFilterCap = 0,
			int uniquenessRatio = 0,
			int speckleWindowSize = 0,
			int speckleRange = 0,
			int mode = :ref:`StereoSGBM::MODE_SGBM<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea21fac9fae6db6a60a940fd24cc61f081>`
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum
		{
		    :ref:`DISP_SHIFT<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa6aadf3b0bd4503bde2531592e5f90e0b>` = 4,
		    :ref:`DISP_SCALE<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa5b4b128a781d8002c3bc2640912295a4>` = (1 <<DISP_SHIFT),
		};

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`compute<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` left,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` right,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity
			) = 0;
	
		virtual
		int
		:ref:`getBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a9ab4290840ac7a9270af455f74b30b98>`() const = 0;
	
		virtual
		int
		:ref:`getDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a0ca2c2ab88e7ecac58720134867ea072>`() const = 0;
	
		virtual
		int
		:ref:`getMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abd790d22519d3c0d4fcb8e3210d11b13>`() const = 0;
	
		virtual
		int
		:ref:`getNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab3a3d5f5a49f77be0b965557e17d9fdd>`() const = 0;
	
		virtual
		int
		:ref:`getSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1afb686d0de4551e86306f10509632fa24>`() const = 0;
	
		virtual
		int
		:ref:`getSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a1be922bd3111d427fd2ddc8448537c35>`() const = 0;
	
		virtual
		void
		:ref:`setBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a38814e8a33d59f4eb5db33de04fe8c34>`(int blockSize) = 0;
	
		virtual
		void
		:ref:`setDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1aede8620506ff7f27d106fff25777514d>`(int disp12MaxDiff) = 0;
	
		virtual
		void
		:ref:`setMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ae67a506bfe7fbd37444b6713aea1c0ad>`(int minDisparity) = 0;
	
		virtual
		void
		:ref:`setNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abacfe4e5760e86b48d0c19bd4106c2fc>`(int numDisparities) = 0;
	
		virtual
		void
		:ref:`setSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a3c9106923f87592b98bf53e90bcba020>`(int speckleRange) = 0;
	
		virtual
		void
		:ref:`setSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ad21033d76ad7cdf36a5c8bb6cd946d43>`(int speckleWindowSize) = 0;

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d4/d35/classcv_1_1_stereo_s_g_b_m:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The class implements the modified H. Hirschmuller algorithm :ref:`[39] <doxid-d0/de3/citelist_1CITEREF_HH08>` that differs from the original one as follows:

* By default, the algorithm is single-pass, which means that you consider only 5 directions instead of 8. Set mode= :ref:`StereoSGBM::MODE_HH <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea0f746667febe92e1189e924c40752660>` in createStereoSGBM to run the full variant of the algorithm but beware that it may consume a lot of memory.

* The algorithm matches blocks, not individual pixels. Though, setting blockSize=1 reduces the blocks to single pixels.

* Mutual information cost function is not implemented. Instead, a simpler Birchfield-Tomasi sub-pixel metric from :ref:`[4] <doxid-d0/de3/citelist_1CITEREF_BT98>` is used. Though, the color images are supported as well.

* Some pre- and post- processing steps from K. Konolige algorithm :ref:`StereoBM <doxid-d1/db9/classcv_1_1_stereo_b_m>` are included, for example: pre-filtering (:ref:`StereoBM::PREFILTER_XSOBEL <doxid-d1/db9/classcv_1_1_stereo_b_m_1a5a1107f4879559037cf2eb657605399cabf381e03e290b2b94541738193a6abd6>` type) and post-filtering (uniqueness check, quadratic interpolation and speckle filtering).

* (Python) An example illustrating the use of the :ref:`StereoSGBM <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>` matching algorithm can be found at opencv_source_code/samples/python/stereo_match.py

Methods
-------

.. index:: pair: function; create
.. _doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1adb7a50ef5f200ad9559e9b0e976cfa59:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<StereoSGBM>
	create(
		int minDisparity = 0,
		int numDisparities = 16,
		int blockSize = 3,
		int P1 = 0,
		int P2 = 0,
		int disp12MaxDiff = 0,
		int preFilterCap = 0,
		int uniquenessRatio = 0,
		int speckleWindowSize = 0,
		int speckleRange = 0,
		int mode = :ref:`StereoSGBM::MODE_SGBM<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea21fac9fae6db6a60a940fd24cc61f081>`
		)

Creates :ref:`StereoSGBM <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>` object.

The first constructor initializes :ref:`StereoSGBM <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>` with all the default parameters. So, you only have to set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter to a custom value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- minDisparity

		- Minimum possible disparity value. Normally, it is zero but sometimes rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.

	*
		- numDisparities

		- Maximum disparity minus minimum disparity. The value is always greater than zero. In the current implementation, this parameter must be divisible by 16.

	*
		- blockSize

		- Matched block size. It must be an odd number >=1 . Normally, it should be somewhere in the 3..11 range.

	*
		- P1

		- The first parameter controlling the disparity smoothness. See below.

	*
		- P2

		- The second parameter controlling the disparity smoothness. The larger the values are, the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1 between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor pixels. The algorithm requires P2 > P1 . See stereo_match.cpp sample where some reasonably good P1 and P2 values are shown (like 8\*number_of_image_channels\*SADWindowSize\*SADWindowSize and 32\*number_of_image_channels\*SADWindowSize\*SADWindowSize , respectively).

	*
		- disp12MaxDiff

		- Maximum allowed difference (in integer pixel units) in the left-right disparity check. Set it to a non-positive value to disable the check.

	*
		- preFilterCap

		- Truncation value for the prefiltered image pixels. The algorithm first computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval. The result values are passed to the Birchfield-Tomasi pixel cost function.

	*
		- uniquenessRatio

		- Margin in percentage by which the best (minimum) computed cost function value should "win" the second best value to consider the found match correct. Normally, a value within the 5-15 range is good enough.

	*
		- speckleWindowSize

		- Maximum size of smooth disparity regions to consider their noise speckles and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the 50-200 range.

	*
		- speckleRange

		- Maximum disparity variation within each connected component. If you do speckle filtering, set the parameter to a positive value, it will be implicitly multiplied by 16. Normally, 1 or 2 is good enough.

	*
		- mode

		- Set it to :ref:`StereoSGBM::MODE_HH <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m_1ae0d254b141a56c1fe8b6219eabf3360ea0f746667febe92e1189e924c40752660>` to run the full-scale two-pass dynamic programming algorithm. It will consume O(W\*H\*numDisparities) bytes, which is large for 640x480 stereo and huge for HD-size pictures. By default, it is set to false .

