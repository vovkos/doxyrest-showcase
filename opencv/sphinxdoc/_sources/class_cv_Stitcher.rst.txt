.. index:: pair: class; cv::Stitcher
.. _doxid-d7/d79/classcv_1_1_stitcher:

class cv::Stitcher
==================

.. toctree::
	:hidden:

	enum_cv_Stitcher_Mode.rst
	enum_cv_Stitcher_Status.rst

Overview
~~~~~~~~

High level image stitcher. :ref:`More...<details-d7/d79/classcv_1_1_stitcher>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <stitching.hpp>
	
	class Stitcher
	{
	public:
		// enums
	
		enum
		{
		    :target:`ORIG_RESOL<doxid-d7/d79/classcv_1_1_stitcher_1a1fdd71244ab2618bced437c46f7eb44aac77eedc34a400551e89e12818f8bec63>` = -1,
		};
	
		enum :ref:`Mode<doxid-d7/d79/classcv_1_1_stitcher_1a114713924ec05a0309f4df7e918c0324>`;
		enum :ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`;

		// methods
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<Stitcher>
		:ref:`create<doxid-d7/d79/classcv_1_1_stitcher_1acb32106b3b3e7870d4b39082ab58a26e>`(
			:ref:`Mode<doxid-d7/d79/classcv_1_1_stitcher_1a114713924ec05a0309f4df7e918c0324>` mode = :ref:`PANORAMA<doxid-d7/d79/classcv_1_1_stitcher_1a114713924ec05a0309f4df7e918c0324a67810f8a77e48cadc3134972ed7f99fd>`,
			bool try_use_gpu = false
			);
	
		static
		Stitcher
		:ref:`createDefault<doxid-d7/d79/classcv_1_1_stitcher_1a6c2bc426c1f6ae0bcb45d8f8aa501b6b>`(bool try_use_gpu = false);
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::Blender<doxid-d3/d01/classcv_1_1detail_1_1_blender>`>
		:target:`blender<doxid-d7/d79/classcv_1_1_stitcher_1aaf325d20b42ed5336956c966b6a416fe>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::Blender<doxid-d3/d01/classcv_1_1detail_1_1_blender>`>
		:target:`blender<doxid-d7/d79/classcv_1_1_stitcher_1a07adb5cdfbbb49f181f96470a2bb203f>`() const;
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::BundleAdjusterBase<doxid-da/d90/classcv_1_1detail_1_1_bundle_adjuster_base>`>
		:target:`bundleAdjuster<doxid-d7/d79/classcv_1_1_stitcher_1a3afc54727bdd855bad04613f7e337a89>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::BundleAdjusterBase<doxid-da/d90/classcv_1_1detail_1_1_bundle_adjuster_base>`>
		:target:`bundleAdjuster<doxid-d7/d79/classcv_1_1_stitcher_1aa8938cad4d5b9084c8199ea192f2b332>`() const;
	
		std::vector<:ref:`detail::CameraParams<doxid-da/d60/structcv_1_1detail_1_1_camera_params>`>
		:target:`cameras<doxid-d7/d79/classcv_1_1_stitcher_1af9097e2b658dc1d3d57763c3fefd40aa>`() const;
	
		std::vector<int>
		:target:`component<doxid-d7/d79/classcv_1_1_stitcher_1a7fed80561a9b46a1a924ac6cb334ac85>`() const;
	
		:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
		:ref:`composePanorama<doxid-d7/d79/classcv_1_1_stitcher_1a3217156f7deba256ecd7790ef34008ed>`(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano);
	
		:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
		:ref:`composePanorama<doxid-d7/d79/classcv_1_1_stitcher_1acc8409a6b2e548de1653f0dc5c2ccb02>`(
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano
			);
	
		double
		:target:`compositingResol<doxid-d7/d79/classcv_1_1_stitcher_1ad13d2d50b253e471fbaf041b9a044571>`() const;
	
		:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
		:ref:`estimateTransform<doxid-d7/d79/classcv_1_1_stitcher_1af3da9d25fc1c01495e9ca7ad5a1198a5>`(:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images);
	
		:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
		:ref:`estimateTransform<doxid-d7/d79/classcv_1_1_stitcher_1ab4e72dcb479163cdcf8ba720570e41d1>`(
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
			const std::vector<std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>>& rois
			);
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::ExposureCompensator<doxid-d0/d46/classcv_1_1detail_1_1_exposure_compensator>`>
		:target:`exposureCompensator<doxid-d7/d79/classcv_1_1_stitcher_1afc646488ee47f87c743d3ab1e3832b48>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::ExposureCompensator<doxid-d0/d46/classcv_1_1detail_1_1_exposure_compensator>`>
		:target:`exposureCompensator<doxid-d7/d79/classcv_1_1_stitcher_1ab065fe029bb9b499c4d86c80741d0a2d>`() const;
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::FeaturesFinder<doxid-d9/d1f/classcv_1_1detail_1_1_features_finder>`>
		:target:`featuresFinder<doxid-d7/d79/classcv_1_1_stitcher_1aa724ae80a2962ead6b1c3e5a8eaa0c07>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::FeaturesFinder<doxid-d9/d1f/classcv_1_1detail_1_1_features_finder>`>
		:target:`featuresFinder<doxid-d7/d79/classcv_1_1_stitcher_1ab3905defecad0499ac1d1417e6848adc>`() const;
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::FeaturesMatcher<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher>`>
		:target:`featuresMatcher<doxid-d7/d79/classcv_1_1_stitcher_1a426a576f1e2c12d9d5437a86625564c0>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::FeaturesMatcher<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher>`>
		:target:`featuresMatcher<doxid-d7/d79/classcv_1_1_stitcher_1adf4593da8d34466283ef0cdd21fff3e7>`() const;
	
		const :ref:`cv::UMat<doxid-d8/d82/classcv_1_1_u_mat>`&
		:target:`matchingMask<doxid-d7/d79/classcv_1_1_stitcher_1a4b2624192c5854601f4baebeee321c81>`() const;
	
		double
		:target:`panoConfidenceThresh<doxid-d7/d79/classcv_1_1_stitcher_1a3755bbeca7f4c80dc42af034f7621568>`() const;
	
		double
		:target:`registrationResol<doxid-d7/d79/classcv_1_1_stitcher_1a9b90774eabdf68c9ee864918d620538d>`() const;
	
		double
		:target:`seamEstimationResol<doxid-d7/d79/classcv_1_1_stitcher_1ac559c3eb228614f9402ff3eba23a08f5>`() const;
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::SeamFinder<doxid-d7/d53/classcv_1_1detail_1_1_seam_finder>`>
		:target:`seamFinder<doxid-d7/d79/classcv_1_1_stitcher_1a380c7c920f59047f2b25de7dc86f563d>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::SeamFinder<doxid-d7/d53/classcv_1_1detail_1_1_seam_finder>`>
		:target:`seamFinder<doxid-d7/d79/classcv_1_1_stitcher_1a850ad8689b42b43e10f8f45c39b0f797>`() const;
	
		void
		:target:`setBlender<doxid-d7/d79/classcv_1_1_stitcher_1a79651cf9e4b87cb6af26caa0535b9baa>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::Blender<doxid-d3/d01/classcv_1_1detail_1_1_blender>`> b);
	
		void
		:target:`setBundleAdjuster<doxid-d7/d79/classcv_1_1_stitcher_1aa3060cbd7d492a53052754439e830d40>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::BundleAdjusterBase<doxid-da/d90/classcv_1_1detail_1_1_bundle_adjuster_base>`> bundle_adjuster);
	
		void
		:target:`setCompositingResol<doxid-d7/d79/classcv_1_1_stitcher_1afe927e80fcb2ca2061630ddd98eebba8>`(double resol_mpx);
	
		void
		:target:`setExposureCompensator<doxid-d7/d79/classcv_1_1_stitcher_1a487373f15a54192e6a85ce6b04151d91>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::ExposureCompensator<doxid-d0/d46/classcv_1_1detail_1_1_exposure_compensator>`> exposure_comp);
	
		void
		:target:`setFeaturesFinder<doxid-d7/d79/classcv_1_1_stitcher_1ae7cd5967c7a89cb743b07e9eac8a7ae5>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::FeaturesFinder<doxid-d9/d1f/classcv_1_1detail_1_1_features_finder>`> features_finder);
	
		void
		:target:`setFeaturesMatcher<doxid-d7/d79/classcv_1_1_stitcher_1ada7fb8b0e696bfe3104f73d07ab0b5c4>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::FeaturesMatcher<doxid-d2/da0/classcv_1_1detail_1_1_features_matcher>`> features_matcher);
	
		void
		:target:`setMatchingMask<doxid-d7/d79/classcv_1_1_stitcher_1ad1591614305b0385f8a6152458f93955>`(const :ref:`cv::UMat<doxid-d8/d82/classcv_1_1_u_mat>`& mask);
	
		void
		:target:`setPanoConfidenceThresh<doxid-d7/d79/classcv_1_1_stitcher_1a6f5e62bc1dd5d7bdb5f9313a2c21c558>`(double conf_thresh);
	
		void
		:target:`setRegistrationResol<doxid-d7/d79/classcv_1_1_stitcher_1a9912fe8c095b8385267908e5ef707439>`(double resol_mpx);
	
		void
		:target:`setSeamEstimationResol<doxid-d7/d79/classcv_1_1_stitcher_1ad0fcef52b2fedda1dbb90ea780cd7979>`(double resol_mpx);
	
		void
		:target:`setSeamFinder<doxid-d7/d79/classcv_1_1_stitcher_1ad813cf8a3493fa6fe53343f3f5a1da81>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`detail::SeamFinder<doxid-d7/d53/classcv_1_1detail_1_1_seam_finder>`> seam_finder);
	
		void
		:target:`setWarper<doxid-d7/d79/classcv_1_1_stitcher_1adb1219c1caae710736a5a5e6b13ad21b>`(:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`WarperCreator<doxid-d7/d30/classcv_1_1_warper_creator>`> creator);
	
		void
		:target:`setWaveCorrection<doxid-d7/d79/classcv_1_1_stitcher_1a968a2f4a1faddfdacbcfce54b44bab70>`(bool flag);
	
		void
		:target:`setWaveCorrectKind<doxid-d7/d79/classcv_1_1_stitcher_1a17413f5c06e4e569bfd45e01d4e8ff4a>`(:ref:`detail::WaveCorrectKind<doxid-d7/d74/group__stitching__rotation_1ga83b24d4c3e93584986a56d9e43b9cf7f>` kind);
	
		:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
		:ref:`stitch<doxid-d7/d79/classcv_1_1_stitcher_1a37ee5bacf229e9d0fb9f97c8f5ed1acd>`(
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano
			);
	
		:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
		:ref:`stitch<doxid-d7/d79/classcv_1_1_stitcher_1a34152e67e9b04306236b6d570e9adf30>`(
			:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
			const std::vector<std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>>& rois,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano
			);
	
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`WarperCreator<doxid-d7/d30/classcv_1_1_warper_creator>`>
		:target:`warper<doxid-d7/d79/classcv_1_1_stitcher_1ab99a767d1d40f8ae1e739c8793278e57>`();
	
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`WarperCreator<doxid-d7/d30/classcv_1_1_warper_creator>`>
		:target:`warper<doxid-d7/d79/classcv_1_1_stitcher_1a068dd5eb4e1e45791ce3abb509b9b97e>`() const;
	
		bool
		:target:`waveCorrection<doxid-d7/d79/classcv_1_1_stitcher_1af6a51e0b23dac119a3612d57345f9a7f>`() const;
	
		:ref:`detail::WaveCorrectKind<doxid-d7/d74/group__stitching__rotation_1ga83b24d4c3e93584986a56d9e43b9cf7f>`
		:target:`waveCorrectKind<doxid-d7/d79/classcv_1_1_stitcher_1ad9c9c9b8a97b686ad3b93f7918c4c6de>`() const;
	
		double
		:target:`workScale<doxid-d7/d79/classcv_1_1_stitcher_1a69f0feb213330d7e4806892867ac4249>`() const;
	};
.. _details-d7/d79/classcv_1_1_stitcher:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

High level image stitcher.

It's possible to use this class without being aware of the entire stitching pipeline. However, to be able to achieve higher stitching stability and quality of the final images at least being familiar with the theory is recommended.

* A basic example on image stitching can be found at opencv_source_code/samples/cpp/stitching.cpp
  
  * A detailed example on image stitching can be found at opencv_source_code/samples/cpp/stitching_detailed.cpp

Methods
-------

.. index:: pair: function; create
.. _doxid-d7/d79/classcv_1_1_stitcher_1acb32106b3b3e7870d4b39082ab58a26e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<Stitcher>
	create(
		:ref:`Mode<doxid-d7/d79/classcv_1_1_stitcher_1a114713924ec05a0309f4df7e918c0324>` mode = :ref:`PANORAMA<doxid-d7/d79/classcv_1_1_stitcher_1a114713924ec05a0309f4df7e918c0324a67810f8a77e48cadc3134972ed7f99fd>`,
		bool try_use_gpu = false
		)

Creates a :ref:`Stitcher <doxid-d7/d79/classcv_1_1_stitcher>` configured in one of the stitching modes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mode

		- Scenario for stitcher operation. This is usually determined by source of images to stitch and their transformation. Default parameters will be chosen for operation in given scenario.

	*
		- try_use_gpu

		- Flag indicating whether GPU should be used whenever it's possible.



.. rubric:: Returns:

:ref:`Stitcher <doxid-d7/d79/classcv_1_1_stitcher>` class instance.

.. index:: pair: function; createDefault
.. _doxid-d7/d79/classcv_1_1_stitcher_1a6c2bc426c1f6ae0bcb45d8f8aa501b6b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	Stitcher
	createDefault(bool try_use_gpu = false)

Creates a stitcher with the default parameters.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- try_use_gpu

		- Flag indicating whether GPU should be used whenever it's possible.



.. rubric:: Returns:

:ref:`Stitcher <doxid-d7/d79/classcv_1_1_stitcher>` class instance.

.. index:: pair: function; composePanorama
.. _doxid-d7/d79/classcv_1_1_stitcher_1a3217156f7deba256ecd7790ef34008ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
	composePanorama(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; composePanorama
.. _doxid-d7/d79/classcv_1_1_stitcher_1acc8409a6b2e548de1653f0dc5c2ccb02:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
	composePanorama(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano
		)

These functions try to compose the given images (or images stored internally from the other function calls) into the final pano under the assumption that the image transformations were estimated before.

Use the functions only if you're aware of the stitching pipeline, otherwise use :ref:`Stitcher::stitch <doxid-d7/d79/classcv_1_1_stitcher_1a37ee5bacf229e9d0fb9f97c8f5ed1acd>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- images

		- Input images.

	*
		- pano

		- Final pano.



.. rubric:: Returns:

Status code.

.. index:: pair: function; estimateTransform
.. _doxid-d7/d79/classcv_1_1_stitcher_1af3da9d25fc1c01495e9ca7ad5a1198a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
	estimateTransform(:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; estimateTransform
.. _doxid-d7/d79/classcv_1_1_stitcher_1ab4e72dcb479163cdcf8ba720570e41d1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
	estimateTransform(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
		const std::vector<std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>>& rois
		)

These functions try to match the given images and to estimate rotations of each camera.

Use the functions only if you're aware of the stitching pipeline, otherwise use :ref:`Stitcher::stitch <doxid-d7/d79/classcv_1_1_stitcher_1a37ee5bacf229e9d0fb9f97c8f5ed1acd>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- images

		- Input images.

	*
		- rois

		- Region of interest rectangles.



.. rubric:: Returns:

Status code.

.. index:: pair: function; stitch
.. _doxid-d7/d79/classcv_1_1_stitcher_1a37ee5bacf229e9d0fb9f97c8f5ed1acd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
	stitch(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; stitch
.. _doxid-d7/d79/classcv_1_1_stitcher_1a34152e67e9b04306236b6d570e9adf30:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Status<doxid-d7/d79/classcv_1_1_stitcher_1a507409ce9435dd89857469d12ec06b45>`
	stitch(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` images,
		const std::vector<std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>>& rois,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` pano
		)

These functions try to stitch the given images.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- images

		- Input images.

	*
		- rois

		- Region of interest rectangles.

	*
		- pano

		- Final pano.



.. rubric:: Returns:

Status code.

