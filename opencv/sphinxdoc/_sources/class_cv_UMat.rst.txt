.. index:: pair: class; cv::UMat
.. _doxid-d8/d82/classcv_1_1_u_mat:

class cv::UMat
==============

.. toctree::
	:hidden:

Overview
~~~~~~~~

Todo document :ref:`More...<details-d8/d82/classcv_1_1_u_mat>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mat.hpp>
	
	class UMat
	{
	public:
		// enums
	
		enum
		{
		    :target:`MAGIC_VAL<doxid-d8/d82/classcv_1_1_u_mat_1a1faa83c1ccf9f716023204586bb770b4a502944660bbb466a4e6b6ce0ec7eddb1>`       = 0x42FF0000,
		    :target:`AUTO_STEP<doxid-d8/d82/classcv_1_1_u_mat_1a1faa83c1ccf9f716023204586bb770b4a10741a8eaf539b2cb513c134641c940f>`       = 0,
		    :target:`CONTINUOUS_FLAG<doxid-d8/d82/classcv_1_1_u_mat_1a1faa83c1ccf9f716023204586bb770b4a84000db2750cd83ad01c344b8a5b896e>` = CV_MAT_CONT_FLAG,
		    :target:`SUBMATRIX_FLAG<doxid-d8/d82/classcv_1_1_u_mat_1a1faa83c1ccf9f716023204586bb770b4a1dadb89fba042bf2b7fb5bca8399aa73>`  = CV_SUBMAT_FLAG,
		};
	
		enum
		{
		    :target:`MAGIC_MASK<doxid-d8/d82/classcv_1_1_u_mat_1a1fd9ab5c787767965bbea466af621388af10fa455a54f107558b9dbb9efd3959d>` = 0xFFFF0000,
		    :target:`TYPE_MASK<doxid-d8/d82/classcv_1_1_u_mat_1a1fd9ab5c787767965bbea466af621388acfda75d2f03eb3b2dc71e9654b5bef46>`  = 0x00000FFF,
		    :target:`DEPTH_MASK<doxid-d8/d82/classcv_1_1_u_mat_1a1fd9ab5c787767965bbea466af621388acbabb2648f797b89bd9ddc77cce0c408>` = 7,
		};

		// fields
	
		:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`* :ref:`allocator<doxid-d8/d82/classcv_1_1_u_mat_1a1fb3a925c15a454a5edba1cb0f0008fd>`;
		int :target:`cols<doxid-d8/d82/classcv_1_1_u_mat_1a18cc40c5ec8a6b95317e5fe6abaca6fc>`;
		int :ref:`dims<doxid-d8/d82/classcv_1_1_u_mat_1a7ad5753f30745d97f4e037516f3edf4f>`;
		int :ref:`flags<doxid-d8/d82/classcv_1_1_u_mat_1ad662d8ae2354913ddee4374cb5a86808>`;
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` :target:`offset<doxid-d8/d82/classcv_1_1_u_mat_1aefd8bc792218830014d8a99357acefa3>`;
		int :ref:`rows<doxid-d8/d82/classcv_1_1_u_mat_1a8137e5d25233b57db5616f227f1772ee>`;
		:ref:`MatSize<doxid-d3/d31/structcv_1_1_mat_size>` :target:`size<doxid-d8/d82/classcv_1_1_u_mat_1a762e5567b5c5636f6c1de2c260b12065>`;
		:ref:`MatStep<doxid-dc/d72/structcv_1_1_mat_step>` :target:`step<doxid-d8/d82/classcv_1_1_u_mat_1a96ee14c5d1163cbb90a111539ea40a49>`;
		:ref:`UMatData<doxid-dd/d13/structcv_1_1_u_mat_data>`* :target:`u<doxid-d8/d82/classcv_1_1_u_mat_1ad2462b4ad4d5b2e8833730a98ea7382a>`;
		:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` :target:`usageFlags<doxid-d8/d82/classcv_1_1_u_mat_1aa3c55c1af19750d1665eeee41a88d126>`;

		// construction
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a63cb4da02e647fb49df1f40aab8ca35b>`(:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`);
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1add0dc0febd6a7b6a7a79a85d41bb17f2>`(
			int rows,
			int cols,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		:target:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a1f0939f54199110a180cf5d8e4c8d725>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a16a02552218847de2e60ce907b5e904a>`(
			int rows,
			int cols,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		:target:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1aa0e86661d2f62be94ed7648508f1ec07>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1af159e956ff96c64745c6940a3b1820ba>`(
			int ndims,
			const int* sizes,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		:target:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a5e1866c206e9c116304a0257bc3a6c50>`(
			int ndims,
			const int* sizes,
			int type,
			const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a6afe62166cf5634b17ac54bdb16e8379>`(const UMat& m);
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1afeaabd3e9eef98ccef422a81176a4250>`(
			const UMat& m,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& rowRange,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& colRange = :ref:`Range::all<doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`()
			);
	
		:target:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1aaa3fa04bb82fee6026cc2e85df96a796>`(
			const UMat& m,
			const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi
			);
	
		:target:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a96f381979b76ce63d497e812fd7ec574>`(
			const UMat& m,
			const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`* ranges
			);
	
		:target:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a577f91740a6ee96201049cad9b15c22d>`(
			const UMat& m,
			const std::vector<:ref:`Range<doxid-d7/d65/classcv_1_1_range>`>& ranges
			);
	
		template <typename _Tp>
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a0edcf01672609ffb76bccc84e6039c4b>`(
			const std::vector<_Tp>& vec,
			bool copyData = false
			);
	
		template <
			typename _Tp,
			int n
			>
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a316d6e8c8085dd465ecc8abb275092df>`(
			const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<_Tp, n>& vec,
			bool copyData = true
			);
	
		template <
			typename _Tp,
			int m,
			int n
			>
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a719d720e8f935c4dfed075f342d6a187>`(
			const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& mtx,
			bool copyData = true
			);
	
		template <typename _Tp>
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1a7591b42fc20467ef04a8bcf145397974>`(
			const :ref:`Point_<doxid-d9/d87/classcv_1_1_point__>`<_Tp>& pt,
			bool copyData = true
			);
	
		template <typename _Tp>
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1ae75b7bb36992de47f96fc05c6272150e>`(
			const :ref:`Point3_<doxid-d4/d29/classcv_1_1_point3__>`<_Tp>& pt,
			bool copyData = true
			);
	
		template <typename _Tp>
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat_1afd0d43167dfa37819c7af1debca8df16>`(const :ref:`MatCommaInitializer_<doxid-d7/dfc/classcv_1_1_mat_comma_initializer__>`<_Tp>& commaInitializer);

		// methods
	
		void
		:ref:`addref<doxid-d8/d82/classcv_1_1_u_mat_1a9f87daa635b42c20579ef2e526fc2b54>`();
	
		UMat&
		:ref:`adjustROI<doxid-d8/d82/classcv_1_1_u_mat_1a80d08e2b1d2ee0343bbec632a14fa615>`(
			int dtop,
			int dbottom,
			int dleft,
			int dright
			);
	
		void
		:target:`assignTo<doxid-d8/d82/classcv_1_1_u_mat_1aef524a90c600f04e1cdd12788c608476>`(
			UMat& m,
			int type = -1
			) const;
	
		int
		:ref:`channels<doxid-d8/d82/classcv_1_1_u_mat_1a58c1b68b2e355c044cf089c9156910c4>`() const;
	
		int
		:ref:`checkVector<doxid-d8/d82/classcv_1_1_u_mat_1a3d9972bea2e00ae4a8e2402dfdd5d99a>`(
			int elemChannels,
			int depth = -1,
			bool requireContinuous = true
			) const;
	
		UMat
		:ref:`clone<doxid-d8/d82/classcv_1_1_u_mat_1ab5137cae60c000c2435c9faa6282770d>`() const;
	
		UMat
		:ref:`col<doxid-d8/d82/classcv_1_1_u_mat_1aaaa4b7216656ea35c63fcfc745c6995c>`(int x) const;
	
		UMat
		:ref:`colRange<doxid-d8/d82/classcv_1_1_u_mat_1adc6ffa253b779dd078638ad996e17c2f>`(
			int startcol,
			int endcol
			) const;
	
		UMat
		:target:`colRange<doxid-d8/d82/classcv_1_1_u_mat_1ade9f05c6bae4f6de8b24cc71d29f4b8a>`(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& r) const;
	
		void
		:ref:`convertTo<doxid-d8/d82/classcv_1_1_u_mat_1a6f11287e53debd8d460fc053dc88feaa>`(
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
			int rtype,
			double alpha = 1,
			double beta = 0
			) const;
	
		void
		:ref:`copySize<doxid-d8/d82/classcv_1_1_u_mat_1a2ea1c1537ee15db8b22e34218a372f5f>`(const UMat& m);
	
		void
		:ref:`copyTo<doxid-d8/d82/classcv_1_1_u_mat_1ab9f4b02e099696dc0fb43c85c6f4a2f1>`(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m) const;
	
		void
		:ref:`copyTo<doxid-d8/d82/classcv_1_1_u_mat_1a9f97eb1b8c307b5cd4c17962af27efbf>`(
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask
			) const;
	
		void
		:ref:`create<doxid-d8/d82/classcv_1_1_u_mat_1afe3063b40dd6c5d8a0054759c1142631>`(
			int rows,
			int cols,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		void
		:target:`create<doxid-d8/d82/classcv_1_1_u_mat_1ac0b2ce3cbd609f68092b8cffa2cc7155>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		void
		:target:`create<doxid-d8/d82/classcv_1_1_u_mat_1a0d6066cb804ad356c18fd7dc89203b92>`(
			int ndims,
			const int* sizes,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		void
		:target:`create<doxid-d8/d82/classcv_1_1_u_mat_1a1f51b337fe0ee25e7c659502e3fe1022>`(
			const std::vector<int>& sizes,
			int type,
			:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
			);
	
		void
		:ref:`deallocate<doxid-d8/d82/classcv_1_1_u_mat_1a8c3716c2b363388bb8e59212a50e6ba5>`();
	
		int
		:ref:`depth<doxid-d8/d82/classcv_1_1_u_mat_1a8511e27bd0093e5dd236df1ef111087a>`() const;
	
		UMat
		:ref:`diag<doxid-d8/d82/classcv_1_1_u_mat_1a4bac5184c68677463a435e2bee4a8ac7>`(int d = 0) const;
	
		double
		:ref:`dot<doxid-d8/d82/classcv_1_1_u_mat_1a6daed34dfaccf50a34aca1d1ee5e5027>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`elemSize<doxid-d8/d82/classcv_1_1_u_mat_1a391f71d1da637a234701f78d7b0cc9a5>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`elemSize1<doxid-d8/d82/classcv_1_1_u_mat_1a318efa69d05f7b4c61488a8ce5125247>`() const;
	
		bool
		:ref:`empty<doxid-d8/d82/classcv_1_1_u_mat_1a8d0149f2671fd776444301cafa0eff8c>`() const;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getMat<doxid-d8/d82/classcv_1_1_u_mat_1a96b462ce3e2edc6344bcc72ee4b8f5cb>`(int flags) const;
	
		void*
		:ref:`handle<doxid-d8/d82/classcv_1_1_u_mat_1ad0a6c367bf2af33c1f8d34c51ba1f3da>`(int accessFlags) const;
	
		UMat
		:ref:`inv<doxid-d8/d82/classcv_1_1_u_mat_1abb77173e3e661fc3f161f79e5559c5d7>`(int method = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`) const;
	
		bool
		:ref:`isContinuous<doxid-d8/d82/classcv_1_1_u_mat_1af9f1dc7d12bb762061089e1c3bd77875>`() const;
	
		bool
		:ref:`isSubmatrix<doxid-d8/d82/classcv_1_1_u_mat_1acfba13176eea1e0e3db646a4e7a663a5>`() const;
	
		void
		:ref:`locateROI<doxid-d8/d82/classcv_1_1_u_mat_1a657631fc34ff89a3e2e921122c45c667>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`& wholeSize,
			:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& ofs
			) const;
	
		UMat
		:ref:`mul<doxid-d8/d82/classcv_1_1_u_mat_1af50d8160ca05a304b30c1dd64ae20755>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m,
			double scale = 1
			) const;
	
		void
		:target:`ndoffset<doxid-d8/d82/classcv_1_1_u_mat_1afaf9116d630cafce0bb6465b616e7ce8>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`* ofs) const;
	
		UMat
		:ref:`operator()<doxid-d8/d82/classcv_1_1_u_mat_1a84b1f570775c927202a55ab1cccd9542>`(
			:ref:`Range<doxid-d7/d65/classcv_1_1_range>` rowRange,
			:ref:`Range<doxid-d7/d65/classcv_1_1_range>` colRange
			) const;
	
		UMat
		:target:`operator()<doxid-d8/d82/classcv_1_1_u_mat_1a7679d5bea4421e360b90225d348e3fa3>`(const :ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`& roi) const;
	
		UMat
		:target:`operator()<doxid-d8/d82/classcv_1_1_u_mat_1a0e245fe34228df0f31d3e3fdb6fa89d3>`(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`* ranges) const;
	
		UMat
		:target:`operator()<doxid-d8/d82/classcv_1_1_u_mat_1af4e69198d95654e9fe2bd03dd1feee38>`(const std::vector<:ref:`Range<doxid-d7/d65/classcv_1_1_range>`>& ranges) const;
	
		UMat&
		:ref:`operator=<doxid-d8/d82/classcv_1_1_u_mat_1aac5e0ed13076c2371fa41d215a49b17f>`(const UMat& m);
	
		UMat&
		:ref:`operator=<doxid-d8/d82/classcv_1_1_u_mat_1a245c83dba9f05fc44d44d557f86101f1>`(const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s);
	
		void
		:ref:`release<doxid-d8/d82/classcv_1_1_u_mat_1aa9a894abdfd44e72ef37a4fc10f3481b>`();
	
		UMat
		:ref:`reshape<doxid-d8/d82/classcv_1_1_u_mat_1a25ac687266568c8b024debd187c15b9b>`(
			int cn,
			int rows = 0
			) const;
	
		UMat
		:target:`reshape<doxid-d8/d82/classcv_1_1_u_mat_1ac166eaa6eccbeb2f5e9ce593ee156ef4>`(
			int cn,
			int newndims,
			const int* newsz
			) const;
	
		UMat
		:ref:`row<doxid-d8/d82/classcv_1_1_u_mat_1a4f493829ef460456db42c3b802ebf20f>`(int y) const;
	
		UMat
		:ref:`rowRange<doxid-d8/d82/classcv_1_1_u_mat_1a838edd92ae26c7f1cff59beda1b0518b>`(
			int startrow,
			int endrow
			) const;
	
		UMat
		:target:`rowRange<doxid-d8/d82/classcv_1_1_u_mat_1aced43849cffaea0bf71f35edeba6ea1c>`(const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& r) const;
	
		UMat&
		:ref:`setTo<doxid-d8/d82/classcv_1_1_u_mat_1a57513848cc5e55fe2b40bf98dfc99f08>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` value,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			);
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`step1<doxid-d8/d82/classcv_1_1_u_mat_1a5bcb8141a5651e69ceeabddf18d8ddfb>`(int i = 0) const;
	
		UMat
		:ref:`t<doxid-d8/d82/classcv_1_1_u_mat_1ac18ab17cd8accff358d593e3c79ac1c3>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:ref:`total<doxid-d8/d82/classcv_1_1_u_mat_1abe7fd91b67cf90aa90c0845572552030>`() const;
	
		int
		:ref:`type<doxid-d8/d82/classcv_1_1_u_mat_1a65194dd922bef59b349a4148cd39d675>`() const;
	
		static
		UMat
		:ref:`diag<doxid-d8/d82/classcv_1_1_u_mat_1a0da02ad901084904580cf4b39d1552e9>`(const UMat& d);
	
		static
		UMat
		:target:`eye<doxid-d8/d82/classcv_1_1_u_mat_1a479e07ad4829b35b83f2aae7231d0ec6>`(
			int rows,
			int cols,
			int type
			);
	
		static
		UMat
		:target:`eye<doxid-d8/d82/classcv_1_1_u_mat_1a79a713e4c931aae8a8b13ec3c62326b9>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		static
		:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`*
		:ref:`getStdAllocator<doxid-d8/d82/classcv_1_1_u_mat_1abf1e71cc2820eb96eca2f6a4df46b808>`();
	
		static
		UMat
		:target:`ones<doxid-d8/d82/classcv_1_1_u_mat_1adf78401deb21d2b46144db979a86a296>`(
			int rows,
			int cols,
			int type
			);
	
		static
		UMat
		:target:`ones<doxid-d8/d82/classcv_1_1_u_mat_1a85f38b108c177ed5696aa4295f45ea4e>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		static
		UMat
		:target:`ones<doxid-d8/d82/classcv_1_1_u_mat_1ae6f92d67658151a00723abdbabe572b8>`(
			int ndims,
			const int* sz,
			int type
			);
	
		static
		UMat
		:ref:`zeros<doxid-d8/d82/classcv_1_1_u_mat_1ab846739615683bbd536d90c06c40c47f>`(
			int rows,
			int cols,
			int type
			);
	
		static
		UMat
		:target:`zeros<doxid-d8/d82/classcv_1_1_u_mat_1ab27675e2c0e6a95fea933fe21dbcc17c>`(
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` size,
			int type
			);
	
		static
		UMat
		:target:`zeros<doxid-d8/d82/classcv_1_1_u_mat_1a7e514870623df43ff318341fffa0d74c>`(
			int ndims,
			const int* sz,
			int type
			);
	};
.. _details-d8/d82/classcv_1_1_u_mat:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Todo document

Fields
------

.. index:: pair: variable; allocator
.. _doxid-d8/d82/classcv_1_1_u_mat_1a1fb3a925c15a454a5edba1cb0f0008fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`* allocator

custom allocator

.. index:: pair: variable; dims
.. _doxid-d8/d82/classcv_1_1_u_mat_1a7ad5753f30745d97f4e037516f3edf4f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int dims

the matrix dimensionality, >= 2

.. index:: pair: variable; flags
.. _doxid-d8/d82/classcv_1_1_u_mat_1ad662d8ae2354913ddee4374cb5a86808:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int flags

includes several bit-fields:

* the magic signature

* continuity flag

* depth

* number of channels

.. index:: pair: variable; rows
.. _doxid-d8/d82/classcv_1_1_u_mat_1a8137e5d25233b57db5616f227f1772ee:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int rows

the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions

Construction
------------

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a63cb4da02e647fb49df1f40aab8ca35b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat(:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`)

default constructor

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1add0dc0febd6a7b6a7a79a85d41bb17f2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat(
		int rows,
		int cols,
		int type,
		:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
		)

constructs 2D matrix of the specified size and type

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a16a02552218847de2e60ce907b5e904a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat(
		int rows,
		int cols,
		int type,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s,
		:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
		)

constucts 2D matrix and fills it with the specified value _s.

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1af159e956ff96c64745c6940a3b1820ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat(
		int ndims,
		const int* sizes,
		int type,
		:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
		)

constructs n-dimensional matrix

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a6afe62166cf5634b17ac54bdb16e8379:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat(const UMat& m)

copy constructor

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1afeaabd3e9eef98ccef422a81176a4250:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat(
		const UMat& m,
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& rowRange,
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& colRange = :ref:`Range::all<doxid-d7/d65/classcv_1_1_range_1af5a0207f6f98a69077db8e77898abc0f>`()
		)

creates a matrix header for a part of the bigger matrix

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a0edcf01672609ffb76bccc84e6039c4b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	UMat(
		const std::vector<_Tp>& vec,
		bool copyData = false
		)

builds matrix from std::vector with or without copying the data

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a316d6e8c8085dd465ecc8abb275092df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int n
		>
	UMat(
		const :ref:`Vec<doxid-db/d93/classcv_1_1_vec>`<_Tp, n>& vec,
		bool copyData = true
		)

builds matrix from :ref:`cv::Vec <doxid-db/d93/classcv_1_1_vec>`; the data is copied by default

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a719d720e8f935c4dfed075f342d6a187:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename _Tp,
		int m,
		int n
		>
	UMat(
		const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& mtx,
		bool copyData = true
		)

builds matrix from :ref:`cv::Matx <doxid-db/d15/classcv_1_1_matx>`; the data is copied by default

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1a7591b42fc20467ef04a8bcf145397974:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	UMat(
		const :ref:`Point_<doxid-d9/d87/classcv_1_1_point__>`<_Tp>& pt,
		bool copyData = true
		)

builds matrix from a 2D point

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1ae75b7bb36992de47f96fc05c6272150e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	UMat(
		const :ref:`Point3_<doxid-d4/d29/classcv_1_1_point3__>`<_Tp>& pt,
		bool copyData = true
		)

builds matrix from a 3D point

.. index:: pair: function; UMat
.. _doxid-d8/d82/classcv_1_1_u_mat_1afd0d43167dfa37819c7af1debca8df16:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	UMat(const :ref:`MatCommaInitializer_<doxid-d7/dfc/classcv_1_1_mat_comma_initializer__>`<_Tp>& commaInitializer)

builds matrix from comma initializer

Methods
-------

.. index:: pair: function; addref
.. _doxid-d8/d82/classcv_1_1_u_mat_1a9f87daa635b42c20579ef2e526fc2b54:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	addref()

increases the reference counter; use with care to avoid memleaks

.. index:: pair: function; adjustROI
.. _doxid-d8/d82/classcv_1_1_u_mat_1a80d08e2b1d2ee0343bbec632a14fa615:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat&
	adjustROI(
		int dtop,
		int dbottom,
		int dleft,
		int dright
		)

moves/resizes the current matrix ROI inside the parent matrix.

.. index:: pair: function; channels
.. _doxid-d8/d82/classcv_1_1_u_mat_1a58c1b68b2e355c044cf089c9156910c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	channels() const

returns element type, similar to CV_MAT_CN(cvmat->type)

.. index:: pair: function; checkVector
.. _doxid-d8/d82/classcv_1_1_u_mat_1a3d9972bea2e00ae4a8e2402dfdd5d99a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	checkVector(
		int elemChannels,
		int depth = -1,
		bool requireContinuous = true
		) const

returns N if the matrix is 1-channel (N x ptdim) or ptdim-channel (1 x N) or (N x 1); negative number otherwise

.. index:: pair: function; clone
.. _doxid-d8/d82/classcv_1_1_u_mat_1ab5137cae60c000c2435c9faa6282770d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	clone() const

returns deep copy of the matrix, i.e. the data is copied

.. index:: pair: function; col
.. _doxid-d8/d82/classcv_1_1_u_mat_1aaaa4b7216656ea35c63fcfc745c6995c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	col(int x) const

returns a new matrix header for the specified column

.. index:: pair: function; colRange
.. _doxid-d8/d82/classcv_1_1_u_mat_1adc6ffa253b779dd078638ad996e17c2f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	colRange(
		int startcol,
		int endcol
		) const

... for the specified column span

.. index:: pair: function; convertTo
.. _doxid-d8/d82/classcv_1_1_u_mat_1a6f11287e53debd8d460fc053dc88feaa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	convertTo(
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
		int rtype,
		double alpha = 1,
		double beta = 0
		) const

converts matrix to another datatype with optional scalng. See cvConvertScale.

.. index:: pair: function; copySize
.. _doxid-d8/d82/classcv_1_1_u_mat_1a2ea1c1537ee15db8b22e34218a372f5f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copySize(const UMat& m)

internal use function; properly re-allocates _size, _step arrays

.. index:: pair: function; copyTo
.. _doxid-d8/d82/classcv_1_1_u_mat_1ab9f4b02e099696dc0fb43c85c6f4a2f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m) const

copies the matrix content to "m".

.. index:: pair: function; copyTo
.. _doxid-d8/d82/classcv_1_1_u_mat_1a9f97eb1b8c307b5cd4c17962af27efbf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	copyTo(
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` m,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask
		) const

copies those matrix elements to "m" that are marked with non-zero mask elements.

.. index:: pair: function; create
.. _doxid-d8/d82/classcv_1_1_u_mat_1afe3063b40dd6c5d8a0054759c1142631:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	create(
		int rows,
		int cols,
		int type,
		:ref:`UMatUsageFlags<doxid-dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2>` usageFlags = :ref:`USAGE_DEFAULT<doxid-dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893>`
		)

allocates new matrix data unless the matrix already has specified size and type.

.. index:: pair: function; deallocate
.. _doxid-d8/d82/classcv_1_1_u_mat_1a8c3716c2b363388bb8e59212a50e6ba5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	deallocate()

deallocates the matrix data

.. index:: pair: function; depth
.. _doxid-d8/d82/classcv_1_1_u_mat_1a8511e27bd0093e5dd236df1ef111087a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	depth() const

returns element type, similar to CV_MAT_DEPTH(cvmat->type)

.. index:: pair: function; diag
.. _doxid-d8/d82/classcv_1_1_u_mat_1a4bac5184c68677463a435e2bee4a8ac7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	diag(int d = 0) const

... for the specified diagonal (d=0 - the main diagonal, >0 - a diagonal from the upper half, <0 - a diagonal from the lower half)

.. index:: pair: function; dot
.. _doxid-d8/d82/classcv_1_1_u_mat_1a6daed34dfaccf50a34aca1d1ee5e5027:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	dot(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m) const

computes dot-product

.. index:: pair: function; elemSize
.. _doxid-d8/d82/classcv_1_1_u_mat_1a391f71d1da637a234701f78d7b0cc9a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	elemSize() const

returns element size in bytes,

.. index:: pair: function; elemSize1
.. _doxid-d8/d82/classcv_1_1_u_mat_1a318efa69d05f7b4c61488a8ce5125247:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	elemSize1() const

returns the size of element channel in bytes.

.. index:: pair: function; empty
.. _doxid-d8/d82/classcv_1_1_u_mat_1a8d0149f2671fd776444301cafa0eff8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	empty() const

returns true if matrix data is NULL

.. index:: pair: function; handle
.. _doxid-d8/d82/classcv_1_1_u_mat_1ad0a6c367bf2af33c1f8d34c51ba1f3da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	handle(int accessFlags) const

Returns the OpenCL buffer handle on which :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` operates on. The :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` instance should be kept alive during the use of the handle to prevent the buffer to be returned to the OpenCV buffer pool.

.. index:: pair: function; inv
.. _doxid-d8/d82/classcv_1_1_u_mat_1abb77173e3e661fc3f161f79e5559c5d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	inv(int method = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`) const

matrix inversion by means of matrix expressions

.. index:: pair: function; isContinuous
.. _doxid-d8/d82/classcv_1_1_u_mat_1af9f1dc7d12bb762061089e1c3bd77875:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	isContinuous() const

returns true iff the matrix data is continuous

.. index:: pair: function; isSubmatrix
.. _doxid-d8/d82/classcv_1_1_u_mat_1acfba13176eea1e0e3db646a4e7a663a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	isSubmatrix() const

returns true if the matrix is a submatrix of another matrix

.. index:: pair: function; locateROI
.. _doxid-d8/d82/classcv_1_1_u_mat_1a657631fc34ff89a3e2e921122c45c667:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	locateROI(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`& wholeSize,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& ofs
		) const

locates matrix header within a parent matrix. See below

.. index:: pair: function; mul
.. _doxid-d8/d82/classcv_1_1_u_mat_1af50d8160ca05a304b30c1dd64ae20755:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	mul(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m,
		double scale = 1
		) const

per-element matrix multiplication by means of matrix expressions

.. index:: pair: function; operator()
.. _doxid-d8/d82/classcv_1_1_u_mat_1a84b1f570775c927202a55ab1cccd9542:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	operator()(
		:ref:`Range<doxid-d7/d65/classcv_1_1_range>` rowRange,
		:ref:`Range<doxid-d7/d65/classcv_1_1_range>` colRange
		) const

extracts a rectangular sub-matrix

.. index:: pair: function; operator=
.. _doxid-d8/d82/classcv_1_1_u_mat_1aac5e0ed13076c2371fa41d215a49b17f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat&
	operator=(const UMat& m)

assignment operators

.. index:: pair: function; operator=
.. _doxid-d8/d82/classcv_1_1_u_mat_1a245c83dba9f05fc44d44d557f86101f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat&
	operator=(const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s)

sets every matrix element to s

.. index:: pair: function; release
.. _doxid-d8/d82/classcv_1_1_u_mat_1aa9a894abdfd44e72ef37a4fc10f3481b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	release()

decreases reference counter;

.. index:: pair: function; reshape
.. _doxid-d8/d82/classcv_1_1_u_mat_1a25ac687266568c8b024debd187c15b9b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	reshape(
		int cn,
		int rows = 0
		) const

creates alternative matrix header for the same data, with different

.. index:: pair: function; row
.. _doxid-d8/d82/classcv_1_1_u_mat_1a4f493829ef460456db42c3b802ebf20f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	row(int y) const

returns a new matrix header for the specified row

.. index:: pair: function; rowRange
.. _doxid-d8/d82/classcv_1_1_u_mat_1a838edd92ae26c7f1cff59beda1b0518b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	rowRange(
		int startrow,
		int endrow
		) const

... for the specified row span

.. index:: pair: function; setTo
.. _doxid-d8/d82/classcv_1_1_u_mat_1a57513848cc5e55fe2b40bf98dfc99f08:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat&
	setTo(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` value,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

sets some of the matrix elements to s, according to the mask

.. index:: pair: function; step1
.. _doxid-d8/d82/classcv_1_1_u_mat_1a5bcb8141a5651e69ceeabddf18d8ddfb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	step1(int i = 0) const

returns step/elemSize1()

.. index:: pair: function; t
.. _doxid-d8/d82/classcv_1_1_u_mat_1ac18ab17cd8accff358d593e3c79ac1c3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UMat
	t() const

matrix transposition by means of matrix expressions

.. index:: pair: function; total
.. _doxid-d8/d82/classcv_1_1_u_mat_1abe7fd91b67cf90aa90c0845572552030:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	total() const

returns the total number of matrix elements

.. index:: pair: function; type
.. _doxid-d8/d82/classcv_1_1_u_mat_1a65194dd922bef59b349a4148cd39d675:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	type() const

returns element type, similar to CV_MAT_TYPE(cvmat->type)

.. index:: pair: function; diag
.. _doxid-d8/d82/classcv_1_1_u_mat_1a0da02ad901084904580cf4b39d1552e9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	UMat
	diag(const UMat& d)

constructs a square diagonal matrix which main diagonal is vector "d"

.. index:: pair: function; getStdAllocator
.. _doxid-d8/d82/classcv_1_1_u_mat_1abf1e71cc2820eb96eca2f6a4df46b808:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`MatAllocator<doxid-d4/dee/classcv_1_1_mat_allocator>`*
	getStdAllocator()

and the standard allocator

.. index:: pair: function; zeros
.. _doxid-d8/d82/classcv_1_1_u_mat_1ab846739615683bbd536d90c06c40c47f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	UMat
	zeros(
		int rows,
		int cols,
		int type
		)

Matlab-style matrix initialization.

