.. index:: pair: class; cv::WImage
.. _doxid-d3/d68/classcv_1_1_w_image:

template class cv::WImage
=========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Image class which provides a thin layer around an :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`. :ref:`More...<details-d3/d68/classcv_1_1_w_image>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <wimage.hpp>
	
	template <typename T>
	class WImage
	{
	public:
		// typedefs
	
		typedef T :target:`BaseType<doxid-d3/d68/classcv_1_1_w_image_1a87024ed424ce62a4f756eb0452192dcf>`;

		// methods
	
		int
		:target:`Channels<doxid-d3/d68/classcv_1_1_w_image_1a3ef51cdd9069bd992933476a23c68c69>`() const;
	
		int
		:target:`ChannelSize<doxid-d3/d68/classcv_1_1_w_image_1a79211f43ccb8cf0e8da3f3eea7e4b08e>`() const;
	
		void
		:target:`CopyFrom<doxid-d3/d68/classcv_1_1_w_image_1abe6830f1c62377f96e3d83ea546e6b77>`(const WImage<T>& src);
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1a6757084fc9d443500e7ac49ae6803056>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1a3494e771dca1b39b76990d9694987f20>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1a7186f75ff4fa10328c1f3361dc3043e7>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1a7c6da57f6ecefe5783c2b63f5f784d9b>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1ab5b08f518864b321d5c0c8e70e5e75dc>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1a73a8d52bbfea0adba2a4dd8ec40b05dd>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1af538eb8094a3c8c12a8c8509da9fcb51>`() const;
	
		int
		:target:`Depth<doxid-d3/d68/classcv_1_1_w_image_1a7a1b61a45c3b3650fc45ff407d2f6548>`() const;
	
		int
		:target:`Height<doxid-d3/d68/classcv_1_1_w_image_1aa0de45d11c7330381609683a6e398e7d>`() const;
	
		T*
		:target:`ImageData<doxid-d3/d68/classcv_1_1_w_image_1aedde2884cc02ee1e1f56bc7ed2cbfa45>`();
	
		const T*
		:target:`ImageData<doxid-d3/d68/classcv_1_1_w_image_1ae9a257a671ee9559b1e17e64b90b2349>`() const;
	
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
		:target:`Ipl<doxid-d3/d68/classcv_1_1_w_image_1abd8a637b0dc18ddd956bbd4b7c70f474>`();
	
		const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
		:target:`Ipl<doxid-d3/d68/classcv_1_1_w_image_1ae4431ea18f4da9dc89dda536c6e109d2>`() const;
	
		T*
		:target:`operator()<doxid-d3/d68/classcv_1_1_w_image_1a05265675cba56e68d20d2f33d8b141e5>`(
			int c,
			int r
			);
	
		const T*
		:target:`operator()<doxid-d3/d68/classcv_1_1_w_image_1af722473774e683f31864377dc860cc8e>`(
			int c,
			int r
			) const;
	
		int
		:target:`PixelSize<doxid-d3/d68/classcv_1_1_w_image_1a89a8b4a90e1e7376cf9d3f89492abc51>`() const;
	
		const T*
		:target:`Row<doxid-d3/d68/classcv_1_1_w_image_1aef2219de27966534ae6715d6e02e5547>`(int r) const;
	
		T*
		:target:`Row<doxid-d3/d68/classcv_1_1_w_image_1a2de01c6717de0fa693404525ddff9499>`(int r);
	
		void
		:target:`SetZero<doxid-d3/d68/classcv_1_1_w_image_1a825adf1b072eff6f41e381ab8af2a516>`();
	
		:ref:`WImageView<doxid-d9/d30/classcv_1_1_w_image_view>`<T>
		:target:`View<doxid-d0/de1/group__core_1ga9a92e66525f85ed3526ed3404159cefb>`(
			int c,
			int r,
			int width,
			int height
			);
	
		int
		:target:`Width<doxid-d3/d68/classcv_1_1_w_image_1afecbb64e57540331aca16e4cc6e9dd84>`() const;
	
		int
		:target:`WidthStep<doxid-d3/d68/classcv_1_1_w_image_1ac4dddf5df788bd2a53096775470bef51>`() const;

	protected:
		// fields
	
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* :target:`image_<doxid-d3/d68/classcv_1_1_w_image_1ad7bf04753978822af5a5ac4eb5125268>`;

		// construction
	
		:target:`WImage<doxid-d3/d68/classcv_1_1_w_image_1a870e41bb69eceab11ac645007938531e>`(const WImage&);
		:target:`WImage<doxid-d3/d68/classcv_1_1_w_image_1a5c1a0805b986421eddafa3bb319de8d6>`(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* img);

		// methods
	
		void
		:target:`operator=<doxid-d3/d68/classcv_1_1_w_image_1a8a740c514045956f3f464f3ad2ae9499>`(const WImage&);
	
		void
		:target:`SetIpl<doxid-d3/d68/classcv_1_1_w_image_1acb2f355dc35cd3dc1dbaef2ba2f7ad96>`(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image);
	};

	// direct descendants

	template <typename T>
	class :ref:`WImageBuffer<doxid-d3/d9e/classcv_1_1_w_image_buffer>`;

	template <
		typename T,
		int C
		>
	class :ref:`WImageC<doxid-db/dde/classcv_1_1_w_image_c>`;

	template <typename T>
	class :ref:`WImageView<doxid-d9/d30/classcv_1_1_w_image_view>`;
.. _details-d3/d68/classcv_1_1_w_image:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Image class which provides a thin layer around an :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`.

The goals of the class design are:

.. code-block:: cpp

	-# All the data has explicit ownership to avoid memory leaks
	-# No hidden allocations or copies for performance.
	-# Easy access to OpenCV methods (which will access IPP if available)
	-# Can easily treat external data as an image
	-# Easy to create images which are subsets of other images
	-# Fast pixel access which can take advantage of number of channels if known at compile time.

The :ref:`WImage <doxid-d3/d68/classcv_1_1_w_image>` class is the image class which provides the data accessors. The 'W' comes from the fact that it is also a wrapper around the popular but inconvenient :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` class. A :ref:`WImage <doxid-d3/d68/classcv_1_1_w_image>` can be constructed either using a :ref:`WImageBuffer <doxid-d3/d9e/classcv_1_1_w_image_buffer>` class which allocates and frees the data, or using a :ref:`WImageView <doxid-d9/d30/classcv_1_1_w_image_view>` class which constructs a subimage or a view into external data. The view class does no memory management. Each class actually has two versions, one when the number of channels is known at compile time and one when it isn't. Using the one with the number of channels specified can provide some compile time optimizations by using the fact that the number of channels is a constant.

We use the convention (c,r) to refer to column c and row r with (0,0) being the upper left corner. This is similar to standard Euclidean coordinates with the first coordinate varying in the horizontal direction and the second coordinate varying in the vertical direction. Thus (c,r) is usually in the domain [0, width) X [0, height)

Example usage:

.. ref-code-block:: cpp

	WImageBuffer3_b  im(5,7);  // Make a 5X7 3 channel image of type uchar
	WImageView3_b  sub_im(im, 2,2, 3,3); // 3X3 submatrix
	vector<float> vec(10, 3.0f);
	WImageView1_f user_im(&vec[0], 2, 5);  // 2X5 image w/ supplied data
	
	im.SetZero();  // same as cvSetZero(im.Ipl())
	*im(2, 3) = 15;  // Modify the element at column 2, row 3
	MySetRand(&sub_im);
	
	// Copy the second row into the first.  This can be done with no memory
	// allocation and will use SSE if IPP is available.
	int w = im.Width();
	im.View(0,0, w,1).CopyFrom(im.View(0,1, w,1));
	
	// Doesn't care about source of data since using WImage
	void MySetRand(WImage_b* im) { // Works with any number of channels
	for (int r = 0; r < im->Height(); ++r) {
	 float* row = im->Row(r);
	 for (int c = 0; c < im->Width(); ++c) {
	    for (int ch = 0; ch < im->Channels(); ++ch, ++row) {
	      *row = uchar(rand() & 255);
	    }
	 }
	}
	}

Functions that are not part of the basic image allocation, viewing, and access should come from OpenCV, except some useful functions that are not part of OpenCV can be found in wimage_util.h

