.. index:: pair: class; cv::_InputArray
.. _doxid-d6/d3a/classcv_1_1___input_array:

class cv::_InputArray
=====================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This is the proxy class for passing read-only input arrays into OpenCV functions. :ref:`More...<details-d6/d3a/classcv_1_1___input_array>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mat.hpp>
	
	class _InputArray
	{
	public:
		// enums
	
		enum
		{
		    :target:`KIND_SHIFT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a34545fbcc40d31569f47af332822fbeb>`              = 16,
		    :target:`FIXED_TYPE<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a517c23e91976c6c72e6cb025fae551aa>`              = 0x8000 <<KIND_SHIFT,
		    :target:`FIXED_SIZE<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a4eb3928003c50a19e08aebee36ed3a7e>`              = 0x4000 <<KIND_SHIFT,
		    :target:`KIND_MASK<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a1b1e62a17e6a897cde97556970e80afc>`               = 31 <<KIND_SHIFT,
		    :target:`NONE<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a7f22b71cc694233d39d400bb0192a30a>`                    = 0 <<KIND_SHIFT,
		    :target:`MAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a78b5339efc1a4718ab6a1b688ccffc1c>`                     = 1 <<KIND_SHIFT,
		    :target:`MATX<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a52401c0e7c2c1bd3e55d86f06b529279>`                    = 2 <<KIND_SHIFT,
		    :target:`STD_VECTOR<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a967fc6460ab5b965c4a75d722ed37380>`              = 3 <<KIND_SHIFT,
		    :target:`STD_VECTOR_VECTOR<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a21a9a638579ea97800bac55c8d8bb52e>`       = 4 <<KIND_SHIFT,
		    :target:`STD_VECTOR_MAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a515a6d0a638e2232a37f16c724eb59e8>`          = 5 <<KIND_SHIFT,
		    :target:`EXPR<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a84ed741d208c2de3eaa9658ce1554379>`                    = 6 <<KIND_SHIFT,
		    :target:`OPENGL_BUFFER<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2ac0f3b1297b8b3abf313d7e4e51346d70>`           = 7 <<KIND_SHIFT,
		    :target:`CUDA_HOST_MEM<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a7738c968c10d86fc85092882e41e0d77>`           = 8 <<KIND_SHIFT,
		    :target:`CUDA_GPU_MAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a131b6b2d8f36c9310bf1b2e382e85225>`            = 9 <<KIND_SHIFT,
		    :target:`UMAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a3f0f082586ac549b0d2dc49dffc8b901>`                    =10 <<KIND_SHIFT,
		    :target:`STD_VECTOR_UMAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a827a421eedd965d75e051fefe0fa092d>`         =11 <<KIND_SHIFT,
		    :target:`STD_BOOL_VECTOR<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2ab45e0dc7a61826aa715ff6274ed3f959>`         =12 <<KIND_SHIFT,
		    :target:`STD_VECTOR_CUDA_GPU_MAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a92c94c2700563364fd249037fb0a6ce2>` = 13 <<KIND_SHIFT,
		    :target:`STD_ARRAY<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a780ad3b04e04029c2b8264dfce2e5f6a>`               =14 <<KIND_SHIFT,
		    :target:`STD_ARRAY_MAT<doxid-d6/d3a/classcv_1_1___input_array_1abedee61c7763d8d659f733ccddca6ad2a6f2510d5b8467dbd29eed8b1db08ed5f>`           =15 <<KIND_SHIFT,
		};

		// construction
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a53021a00f01d897cd73b8da2ebf1bddb>`();
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a69a60bb7f2e2557303b4104e54122b12>`(
			int _flags,
			void* _obj
			);
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a2e29aa9f12b95788c27bceae6a5f3d4c>`(const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& m);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a3340383c8099a86af0de0c50c751a9e3>`(const :ref:`MatExpr<doxid-d9/ddc/classcv_1_1_mat_expr>`& expr);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1aee97a5b37f743c1db66b8a71d16adf00>`(const std::vector<:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`>& vec);
	
		template <typename _Tp>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a585d5795fa403f7e1d191a9c51d1061f>`(const :ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`<_Tp>& m);
	
		template <typename _Tp>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1adacef592a29916041a2a6c7a472861a3>`(const std::vector<_Tp>& vec);
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1aaaaad19987ca4178860e642e468bea6d>`(const std::vector<bool>& vec);
	
		template <typename _Tp>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a3c66a68e3da809f7f73650b8b58b97af>`(const std::vector<std::vector<_Tp>>& vec);
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1ad91e41d9d8366788d3149c752c90c9f4>`(const std::vector<std::vector<bool>>&);
	
		template <typename _Tp>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a9c452a1cc00d336b05ac6e74a37833ba>`(const std::vector<:ref:`Mat_<doxid-d9/de0/classcv_1_1_mat__>`<_Tp>>& vec);
	
		template <typename _Tp>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1af5fefc8554c4df2697f83033753799e7>`(
			const _Tp* vec,
			int n
			);
	
		template <
			typename _Tp,
			int m,
			int n
			>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a7bec1263943a7a94d9e626f5f94386a9>`(const :ref:`Matx<doxid-db/d15/classcv_1_1_matx>`<_Tp, m, n>& matx);
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a57658bf76c0e76281de0af10b6b14ff9>`(const double& val);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a0cad773e3f682971f977fb4942d860cd>`(const :ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`& d_mat);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a7e6029982832e1318c08ced40a0efab8>`(const std::vector<:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`>& d_mat_array);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a5204b708684ac1bba6d2e51ce8d023b2>`(const :ref:`ogl::Buffer<doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`& buf);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a5f3ab6a2ae4b4e40ff3cc561b4bcdb5d>`(const :ref:`cuda::HostMem<doxid-da/d5b/classcv_1_1cuda_1_1_host_mem>`& cuda_mem);
	
		template <typename _Tp>
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1a233f6def32ea9be70505e4c232517c19>`(const :ref:`cudev::GpuMat_<doxid-d6/d0a/classcv_1_1cudev_1_1_gpu_mat__>`<_Tp>& m);
	
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1adfb99b863033bb0fb0924f2a32b88c9b>`(const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& um);
		:target:`_InputArray<doxid-d6/d3a/classcv_1_1___input_array_1ac583f949a02b9e07a2c11c111d93ab24>`(const std::vector<:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`>& umv);

		// methods
	
		int
		:target:`channels<doxid-d6/d3a/classcv_1_1___input_array_1af198cb2bf572d2877185756a58b724f8>`(int i = -1) const;
	
		int
		:target:`cols<doxid-d6/d3a/classcv_1_1___input_array_1abf46b7c02ec98a5b26820f79f7017b03>`(int i = -1) const;
	
		void
		:target:`copyTo<doxid-d6/d3a/classcv_1_1___input_array_1a938c12fa2b73e6aea81017fe8d31526e>`(const :ref:`_OutputArray<doxid-d4/d46/classcv_1_1___output_array>`& arr) const;
	
		void
		:target:`copyTo<doxid-d6/d3a/classcv_1_1___input_array_1a20f3875b298bcd5d17a0a7e068f4518a>`(
			const :ref:`_OutputArray<doxid-d4/d46/classcv_1_1___output_array>`& arr,
			const _InputArray& mask
			) const;
	
		int
		:target:`depth<doxid-d6/d3a/classcv_1_1___input_array_1a30d20f67815668353be5644725f78dfa>`(int i = -1) const;
	
		int
		:target:`dims<doxid-d6/d3a/classcv_1_1___input_array_1a925e432f82689ff04dcc7d7576a735a8>`(int i = -1) const;
	
		bool
		:target:`empty<doxid-d6/d3a/classcv_1_1___input_array_1aca4fc0e916419225f18026bdc7b1b180>`() const;
	
		int
		:target:`getFlags<doxid-d6/d3a/classcv_1_1___input_array_1a0c213305ad043dc5def50159b1f67341>`() const;
	
		:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`
		:target:`getGpuMat<doxid-d6/d3a/classcv_1_1___input_array_1a27af21d5fb66f761f6b7c0c59ce1b808>`() const;
	
		void
		:target:`getGpuMatVector<doxid-d6/d3a/classcv_1_1___input_array_1aa7f083f38e5e44e277ceb51107328f7f>`(std::vector<:ref:`cuda::GpuMat<doxid-d5/da3/classcv_1_1cuda_1_1_gpu_mat>`>& gpumv) const;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getMat<doxid-d6/d3a/classcv_1_1___input_array_1a9c09739ca3e0ce212e2ab8374aa2f195>`(int idx = -1) const;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getMat_<doxid-d6/d3a/classcv_1_1___input_array_1ad240d5085e65fa2ceacbaaa086aa8801>`(int idx = -1) const;
	
		void
		:target:`getMatVector<doxid-d6/d3a/classcv_1_1___input_array_1a1d4c624c277215c4ed20f9604fdba5c8>`(std::vector<:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`>& mv) const;
	
		void*
		:target:`getObj<doxid-d6/d3a/classcv_1_1___input_array_1aa33a71040201aa69ac880bdcd1d92541>`() const;
	
		:ref:`ogl::Buffer<doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`
		:target:`getOGlBuffer<doxid-d6/d3a/classcv_1_1___input_array_1ac1db5c859bf438693b1e22aa31397a40>`() const;
	
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`getSz<doxid-d6/d3a/classcv_1_1___input_array_1a30139470fc4ac0d3a1e20ad63163dc4f>`() const;
	
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`
		:target:`getUMat<doxid-d6/d3a/classcv_1_1___input_array_1af38304bf253a127c66685593237dee29>`(int idx = -1) const;
	
		void
		:target:`getUMatVector<doxid-d6/d3a/classcv_1_1___input_array_1a05c38a03565d070e39a89c7a65b81662>`(std::vector<:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`>& umv) const;
	
		bool
		:target:`isContinuous<doxid-d6/d3a/classcv_1_1___input_array_1af38d2ea2a7ec65f622d267eed4863578>`(int i = -1) const;
	
		bool
		:target:`isGpuMatVector<doxid-d6/d3a/classcv_1_1___input_array_1a2f3eb944ab23455d4a0c5db922a3705b>`() const;
	
		bool
		:target:`isMat<doxid-d6/d3a/classcv_1_1___input_array_1a7157baa2f1e8801053a5ff2a56006448>`() const;
	
		bool
		:target:`isMatVector<doxid-d6/d3a/classcv_1_1___input_array_1ad8b51d941c9a4286f2fc362d6e951bc2>`() const;
	
		bool
		:target:`isMatx<doxid-d6/d3a/classcv_1_1___input_array_1af221eb464622ee46d0d3a8c63358023b>`() const;
	
		bool
		:target:`isSubmatrix<doxid-d6/d3a/classcv_1_1___input_array_1a7963ba0ea28fcd0f50e5a9218a1e71ba>`(int i = -1) const;
	
		bool
		:target:`isUMat<doxid-d6/d3a/classcv_1_1___input_array_1a7e1555ee58814435df26535ff9380e2e>`() const;
	
		bool
		:target:`isUMatVector<doxid-d6/d3a/classcv_1_1___input_array_1a25688fd401f1f9e1d20f31c7f3c9467e>`() const;
	
		bool
		:target:`isVector<doxid-d6/d3a/classcv_1_1___input_array_1ad9a833a610fa8a02d1f840bd6f213086>`() const;
	
		int
		:target:`kind<doxid-d6/d3a/classcv_1_1___input_array_1af24ff600505ee2389942763575a58f99>`() const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:target:`offset<doxid-d6/d3a/classcv_1_1___input_array_1a65071abdc2def57324376f3f56cac370>`(int i = -1) const;
	
		int
		:target:`rows<doxid-d6/d3a/classcv_1_1___input_array_1a4ee92cc0ce081ee8af90c8c3970b316a>`(int i = -1) const;
	
		bool
		:target:`sameSize<doxid-d6/d3a/classcv_1_1___input_array_1a72b0761972d6ed08761c74545f6b5622>`(const _InputArray& arr) const;
	
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`size<doxid-d6/d3a/classcv_1_1___input_array_1a0d8ed64f7bbbda6d34e3289681ffdff0>`(int i = -1) const;
	
		int
		:target:`sizend<doxid-d6/d3a/classcv_1_1___input_array_1a7cb4cadf3108dc232e05e3ae5550e912>`(
			int* sz,
			int i = -1
			) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:target:`step<doxid-d6/d3a/classcv_1_1___input_array_1aa91e7e76c9247f7192ab70d0c0be4783>`(int i = -1) const;
	
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
		:target:`total<doxid-d6/d3a/classcv_1_1___input_array_1a2ccd313e06ba169ca6d45c2457d75ee5>`(int i = -1) const;
	
		int
		:target:`type<doxid-d6/d3a/classcv_1_1___input_array_1aad62862c81d1d5bdf3f6597a32585844>`(int i = -1) const;

	protected:
		// fields
	
		int :target:`flags<doxid-d6/d3a/classcv_1_1___input_array_1af3be19723301164bb9932133f550149f>`;
		void* :target:`obj<doxid-d6/d3a/classcv_1_1___input_array_1aa3a74c8655eb5357a9a9cb4c10b2e032>`;
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` :target:`sz<doxid-d6/d3a/classcv_1_1___input_array_1a721c16a853d3bae3f41c8c0e9634b5a3>`;

		// methods
	
		void
		:target:`init<doxid-d6/d3a/classcv_1_1___input_array_1a0f07de15ae1dea185ddbdd69aa36fcb4>`(
			int _flags,
			const void* _obj
			);
	
		void
		:target:`init<doxid-d6/d3a/classcv_1_1___input_array_1a296e276ec57703236b468acf43ca7755>`(
			int _flags,
			const void* _obj,
			:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` _sz
			);
	};

	// direct descendants

	class :ref:`_OutputArray<doxid-d4/d46/classcv_1_1___output_array>`;
.. _details-d6/d3a/classcv_1_1___input_array:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This is the proxy class for passing read-only input arrays into OpenCV functions.

It is defined as:

.. ref-code-block:: cpp

	typedef const _InputArray& InputArray;

where :ref:`_InputArray <doxid-d6/d3a/classcv_1_1___input_array>` is a class that can be constructed from ``:ref:`Mat <doxid-db/de6/classcv_1_1_mat>```, ``:ref:`Mat_ <doxid-d9/de0/classcv_1_1_mat__>`<T>``, ``:ref:`Matx <doxid-db/d15/classcv_1_1_matx>`<T, m, n>``, ``std::vector<T>``, ``std::vector<std::vector<T> >``, ``std::vector<:ref:`Mat <doxid-db/de6/classcv_1_1_mat>`>``, ``std::vector<:ref:`Mat_ <doxid-d9/de0/classcv_1_1_mat__>`<T> >``, ``:ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>```, ``std::vector<:ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`>`` or ``double``. It can also be constructed from a matrix expression.

Since this is mostly implementation-level class, and its interface may change in future versions, we do not describe it in details. There are a few key things, though, that should be kept in mind:

* When you see in the reference manual or in OpenCV source code a function that takes InputArray, it means that you can actually pass ``:ref:`Mat <doxid-db/de6/classcv_1_1_mat>```, ``:ref:`Matx <doxid-db/d15/classcv_1_1_matx>```, ``vector<T>`` etc. (see above the complete list).

* Optional input arguments: If some of the input arrays may be empty, pass :ref:`cv::noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>` (or simply :ref:`cv::Mat() <doxid-db/de6/classcv_1_1_mat>` as you probably did before).

* The class is designed solely for passing parameters. That is, normally you *should not* declare class members, local and global variables of this type.

* If you want to design your own function or a class method that can operate of arrays of multiple types, you can use InputArray (or OutputArray) for the respective parameters. Inside a function you should use :ref:`_InputArray::getMat() <doxid-d6/d3a/classcv_1_1___input_array_1a9c09739ca3e0ce212e2ab8374aa2f195>` method to construct a matrix header for the array (without copying data). :ref:`_InputArray::kind() <doxid-d6/d3a/classcv_1_1___input_array_1af24ff600505ee2389942763575a58f99>` can be used to distinguish :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` from ``vector<>`` etc., but normally it is not needed.

Here is how you can use a function that takes InputArray :

.. ref-code-block:: cpp

	std::vector<Point2f> vec;
	// points or a circle
	for( int i = 0; i < 30; i++ )
	    vec.push_back(Point2f((float)(100 + 30*cos(i*CV_PI*2/5)),
	                          (float)(100 - 30*sin(i*CV_PI*2/5))));
	cv::transform(vec, vec, cv::Matx23f(0.707, -0.707, 10, 0.707, 0.707, 20));

That is, we form an STL vector containing points, and apply in-place affine transformation to the vector using the 2x3 matrix created inline as ``:ref:`Matx <doxid-db/d15/classcv_1_1_matx>`<float, 2, 3>`` instance.

Here is how such a function can be implemented (for simplicity, we implement a very specific case of it, according to the assertion statement inside) :

.. ref-code-block:: cpp

	void myAffineTransform(InputArray _src, OutputArray _dst, InputArray _m)
	{
	    // get Mat headers for input arrays. This is O(1) operation,
	    // unless _src and/or _m are matrix expressions.
	    Mat src = _src.getMat(), m = _m.getMat();
	    CV_Assert( src.type() == CV_32FC2 && m.type() == CV_32F && m.size() == Size(3, 2) );
	
	    // [re]create the output array so that it has the proper size and type.
	    // In case of Mat it calls Mat::create, in case of STL vector it calls vector::resize.
	    _dst.create(src.size(), src.type());
	    Mat dst = _dst.getMat();
	
	    for( int i = 0; i < src.rows; i++ )
	        for( int j = 0; j < src.cols; j++ )
	        {
	            Point2f pt = src.at<Point2f>(i, j);
	            dst.at<Point2f>(i, j) = Point2f(m.at<float>(0, 0)*pt.x +
	                                            m.at<float>(0, 1)*pt.y +
	                                            m.at<float>(0, 2),
	                                            m.at<float>(1, 0)*pt.x +
	                                            m.at<float>(1, 1)*pt.y +
	                                            m.at<float>(1, 2));
	        }
	}

There is another related type, InputArrayOfArrays, which is currently defined as a synonym for InputArray:

.. ref-code-block:: cpp

	typedef InputArray InputArrayOfArrays;

It denotes function arguments that are either vectors of vectors or vectors of matrices. A separate synonym is needed to generate Python/Java etc. wrappers properly. At the function implementation level their use is similar, but _InputArray::getMat(idx) should be used to get header for the idx-th component of the outer vector and :ref:`_InputArray::size() <doxid-d6/d3a/classcv_1_1___input_array_1a0d8ed64f7bbbda6d34e3289681ffdff0>`.area() should be used to find the number of components (vectors/matrices) of the outer vector.

