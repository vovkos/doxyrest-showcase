.. index:: pair: class; cv::cuda::CascadeClassifier
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier:

class cv::cuda::CascadeClassifier
=================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Cascade classifier class used for object detection. Supports HAAR and LBP cascades. : :ref:`More...<details-d1/d36/classcv_1_1cuda_1_1_cascade_classifier>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <cudaobjdetect.hpp>
	
	class CascadeClassifier: public :ref:`cv::Algorithm<doxid-d1/d41/classcv_1_1_algorithm>`
	{
	public:
		// methods
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<CascadeClassifier>
		:ref:`create<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a2cc2a7ffa981a55ef1aa33cbf8583f22>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename);
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<CascadeClassifier>
		:ref:`create<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a7ec814e7ff407203d8a2da290843f66c>`(const :ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& file);
	
		virtual
		void
		:ref:`convert<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1aff325883052e446bb7a4cc85775beaa6>`(
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` gpu_objects,
			std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects
			) = 0;
	
		virtual
		void
		:ref:`detectMultiScale<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a182656b878046eb3f0e9c0f0ee327f08>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` objects,
			:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
			) = 0;
	
		virtual
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`getClassifierSize<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a55c5d472de91adabbcc85e279cad715b>`() const = 0;
	
		virtual
		bool
		:target:`getFindLargestObject<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a2b1e994f44c94a507c56c6097f58f389>`() = 0;
	
		virtual
		int
		:target:`getMaxNumObjects<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a7ca5b072c83a7404907dbebb5b351abf>`() const = 0;
	
		virtual
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`getMaxObjectSize<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1abf171bb48ad331c45165540f3ace1af5>`() const = 0;
	
		virtual
		int
		:target:`getMinNeighbors<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a72fd7ee1aae7c243d3ff264d328410e7>`() const = 0;
	
		virtual
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
		:target:`getMinObjectSize<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1ab502f407f4869abe99b56d7343f46ae4>`() const = 0;
	
		virtual
		double
		:target:`getScaleFactor<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a7d9844e5ab68fbb87b8fd3894a8e793a>`() const = 0;
	
		virtual
		void
		:target:`setFindLargestObject<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a39e517368b8b95f40b5b9c07778f38c4>`(bool findLargestObject) = 0;
	
		virtual
		void
		:target:`setMaxNumObjects<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a7b86aedaf7ba94827b36bc3dbca6b323>`(int maxNumObjects) = 0;
	
		virtual
		void
		:ref:`setMaxObjectSize<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1ab48f89668d33f9a0db3979351b66da20>`(:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxObjectSize) = 0;
	
		virtual
		void
		:ref:`setMinNeighbors<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1ab46735fa5ab7d20672665fbfaa6a442b>`(int minNeighbors) = 0;
	
		virtual
		void
		:ref:`setMinObjectSize<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1aedf17c846fbf3e80fd80f213d3daa600>`(:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize) = 0;
	
		virtual
		void
		:ref:`setScaleFactor<doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a0900d85125de1fa488c883e56547e351>`(double scaleFactor) = 0;
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d1/d36/classcv_1_1cuda_1_1_cascade_classifier:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Cascade classifier class used for object detection. Supports HAAR and LBP cascades. :

* A cascade classifier example can be found at opencv_source_code/samples/gpu/cascadeclassifier.cpp
  
  * A Nvidea API specific cascade classifier example can be found at opencv_source_code/samples/gpu/cascadeclassifier_nvidia_api.cpp

Methods
-------

.. index:: pair: function; create
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a2cc2a7ffa981a55ef1aa33cbf8583f22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<CascadeClassifier>
	create(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename)

Loads the classifier from a file. Cascade type is detected automatically by constructor parameter.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- Name of the file from which the classifier is loaded. Only the old haar classifier (trained by the haar training application) and NVIDIA's nvbin are supported for HAAR and only new type of OpenCV XML cascade supported for LBP. The working haar models can be found at opencv_folder/data/haarcascades_cuda/

.. index:: pair: function; create
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a7ec814e7ff407203d8a2da290843f66c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<CascadeClassifier>
	create(const :ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& file)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; convert
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1aff325883052e446bb7a4cc85775beaa6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	convert(
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` gpu_objects,
		std::vector<:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`>& objects
		) = 0

Converts objects array from internal representation to standard vector.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- gpu_objects

		- Objects array in internal representation.

	*
		- objects

		- Resulting array.

.. index:: pair: function; detectMultiScale
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a182656b878046eb3f0e9c0f0ee327f08:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	detectMultiScale(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` objects,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		) = 0

Detects objects of different sizes in the input image.

To get final array of detected objects use :ref:`CascadeClassifier::convert <doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1aff325883052e446bb7a4cc85775beaa6>` method.

.. ref-code-block:: cpp

	Ptr<cuda::CascadeClassifier> cascade_gpu = cuda::CascadeClassifier::create(...);
	
	Mat image_cpu = imread(...)
	GpuMat image_gpu(image_cpu);
	
	GpuMat objbuf;
	cascade_gpu->detectMultiScale(image_gpu, objbuf);
	
	std::vector<Rect> faces;
	cascade_gpu->convert(objbuf, faces);
	
	for(int i = 0; i < detections_num; ++i)
	   cv::rectangle(image_cpu, faces[i], Scalar(255));
	
	imshow("Faces", image_cpu);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Matrix of type CV_8U containing an image where objects should be detected.

	*
		- objects

		- Buffer to store detected objects (rectangles).

	*
		- stream

		- CUDA stream.



.. rubric:: See also:

:ref:`CascadeClassifier::detectMultiScale <doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a182656b878046eb3f0e9c0f0ee327f08>`

.. index:: pair: function; setMaxObjectSize
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1ab48f89668d33f9a0db3979351b66da20:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setMaxObjectSize(:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` maxObjectSize) = 0

Maximum possible object size. Objects larger than that are ignored. Used for second signature and supported only for LBP cascades.

.. index:: pair: function; setMinNeighbors
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1ab46735fa5ab7d20672665fbfaa6a442b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setMinNeighbors(int minNeighbors) = 0

Parameter specifying how many neighbors each candidate rectangle should have to retain it.

.. index:: pair: function; setMinObjectSize
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1aedf17c846fbf3e80fd80f213d3daa600:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setMinObjectSize(:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` minSize) = 0

Minimum possible object size. Objects smaller than that are ignored.

.. index:: pair: function; setScaleFactor
.. _doxid-d1/d36/classcv_1_1cuda_1_1_cascade_classifier_1a0900d85125de1fa488c883e56547e351:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setScaleFactor(double scaleFactor) = 0

Parameter specifying how much the image size is reduced at each image scale.

