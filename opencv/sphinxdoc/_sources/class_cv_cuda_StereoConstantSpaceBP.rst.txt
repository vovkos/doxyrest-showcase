.. index:: pair: class; cv::cuda::StereoConstantSpaceBP
.. _doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p:

class cv::cuda::StereoConstantSpaceBP
=====================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Class computing stereo correspondence using the constant space belief propagation algorithm. : :ref:`More...<details-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <cudastereo.hpp>
	
	class StereoConstantSpaceBP: public :ref:`cv::cuda::StereoBeliefPropagation<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation>`
	{
	public:
		// methods
	
		virtual
		int
		:ref:`getNrPlane<doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1a37a1a94108b0ac9071ac861cd0bf7739>`() const = 0;
	
		virtual
		bool
		:target:`getUseLocalInitDataCost<doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1ada215d2d89113ed1403145bd91636ad3>`() const = 0;
	
		virtual
		void
		:target:`setNrPlane<doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1abedc3ed02f0c19eeed836d07317b30a5>`(int nr_plane) = 0;
	
		virtual
		void
		:target:`setUseLocalInitDataCost<doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1ad4a691146ff2c90cb401c5d2a6667fee>`(bool use_local_init_data_cost) = 0;
	
		static
		void
		:ref:`estimateRecommendedParams<doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1ac72baf7587fc27cb68df1039d173bb9e>`(
			int width,
			int height,
			int& ndisp,
			int& iters,
			int& levels,
			int& nr_plane
			);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum
		{
		    :ref:`DISP_SHIFT<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa6aadf3b0bd4503bde2531592e5f90e0b>` = 4,
		    :ref:`DISP_SCALE<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab69953c160bd7705ef0454aad36af73aa5b4b128a781d8002c3bc2640912295a4>` = (1 <<DISP_SHIFT),
		};

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`compute<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` left,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` right,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity
			) = 0;
	
		virtual
		int
		:ref:`getBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a9ab4290840ac7a9270af455f74b30b98>`() const = 0;
	
		virtual
		int
		:ref:`getDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a0ca2c2ab88e7ecac58720134867ea072>`() const = 0;
	
		virtual
		int
		:ref:`getMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abd790d22519d3c0d4fcb8e3210d11b13>`() const = 0;
	
		virtual
		int
		:ref:`getNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ab3a3d5f5a49f77be0b965557e17d9fdd>`() const = 0;
	
		virtual
		int
		:ref:`getSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1afb686d0de4551e86306f10509632fa24>`() const = 0;
	
		virtual
		int
		:ref:`getSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a1be922bd3111d427fd2ddc8448537c35>`() const = 0;
	
		virtual
		void
		:ref:`setBlockSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a38814e8a33d59f4eb5db33de04fe8c34>`(int blockSize) = 0;
	
		virtual
		void
		:ref:`setDisp12MaxDiff<doxid-dd/ddc/classcv_1_1_stereo_matcher_1aede8620506ff7f27d106fff25777514d>`(int disp12MaxDiff) = 0;
	
		virtual
		void
		:ref:`setMinDisparity<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ae67a506bfe7fbd37444b6713aea1c0ad>`(int minDisparity) = 0;
	
		virtual
		void
		:ref:`setNumDisparities<doxid-dd/ddc/classcv_1_1_stereo_matcher_1abacfe4e5760e86b48d0c19bd4106c2fc>`(int numDisparities) = 0;
	
		virtual
		void
		:ref:`setSpeckleRange<doxid-dd/ddc/classcv_1_1_stereo_matcher_1a3c9106923f87592b98bf53e90bcba020>`(int speckleRange) = 0;
	
		virtual
		void
		:ref:`setSpeckleWindowSize<doxid-dd/ddc/classcv_1_1_stereo_matcher_1ad21033d76ad7cdf36a5c8bb6cd946d43>`(int speckleWindowSize) = 0;
	
		virtual
		void
		:ref:`compute<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a3e67269c9b88e72d43708222e1372655>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` left,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` right,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity,
			:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream
			) = 0;
	
		virtual
		void
		:ref:`compute<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a381446ab436269d86cf6701b85387c02>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` disparity,
			:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
			) = 0;
	
		virtual
		double
		:ref:`getDataWeight<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a7f4bc465a6130e1a9d89ebfc4b42df55>`() const = 0;
	
		virtual
		double
		:ref:`getDiscSingleJump<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1af6bace2ee37ff8569f3f1e9ac58a016b>`() const = 0;
	
		virtual
		double
		:ref:`getMaxDataTerm<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a15bb3e862781ad50be2526271ff7d40e>`() const = 0;
	
		virtual
		double
		:ref:`getMaxDiscTerm<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1af7e4ad93b1bfe0d46d1de35ec1dc63ed>`() const = 0;
	
		virtual
		int
		:ref:`getMsgType<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a33808fc4c796cbdc60c39da83965215e>`() const = 0;
	
		virtual
		int
		:ref:`getNumIters<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a49e2e0700fe6ad51d80b34d4fdc9b2d2>`() const = 0;
	
		virtual
		int
		:ref:`getNumLevels<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a2ba96a6ab36a5c3355a3821c0522f753>`() const = 0;
	
		virtual
		void
		:ref:`setDataWeight<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1abbc588e1bbd3713e4520af5e349fd648>`(double data_weight) = 0;
	
		virtual
		void
		:ref:`setDiscSingleJump<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1ae26d0eca3406ae9449054de5531a4abd>`(double disc_single_jump) = 0;
	
		virtual
		void
		:ref:`setMaxDataTerm<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a170d8ce45fad99435290e7d6ca0c8968>`(double max_data_term) = 0;
	
		virtual
		void
		:ref:`setMaxDiscTerm<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1acbd5b1a9fc089e9ebed870d28a25579b>`(double max_disc_term) = 0;
	
		virtual
		void
		:ref:`setMsgType<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1acceee66fe8604d9293e12b498578a41e>`(int msg_type) = 0;
	
		virtual
		void
		:ref:`setNumIters<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1a600d2701f37f1247e1cba922c11eb827>`(int iters) = 0;
	
		virtual
		void
		:ref:`setNumLevels<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1ac346c8b7f7f2e200e8874c3399bf1000>`(int levels) = 0;
	
		static
		void
		:ref:`estimateRecommendedParams<doxid-d5/dec/classcv_1_1cuda_1_1_stereo_belief_propagation_1ae832759d923616b73102037c15c43b58>`(
			int width,
			int height,
			int& ndisp,
			int& iters,
			int& levels
			);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Class computing stereo correspondence using the constant space belief propagation algorithm. :

The class implements algorithm described in :ref:`[93] <doxid-d0/de3/citelist_1CITEREF_Yang2010>`. :ref:`StereoConstantSpaceBP <doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p>` supports both local minimum and global minimum data cost initialization algorithms. For more details, see the paper mentioned above. By default, a local algorithm is used. To enable a global algorithm, set use_local_init_data_cost to false .

:ref:`StereoConstantSpaceBP <doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p>` uses a truncated linear model for the data cost and discontinuity terms:

.. math::

	DataCost = data \_ weight \cdot \min ( \lvert I_2-I_1 \rvert , max \_ data \_ term)

.. math::

	DiscTerm = \min (disc \_ single \_ jump \cdot \lvert f_1-f_2 \rvert , max \_ disc \_ term)

For more details, see :ref:`[93] <doxid-d0/de3/citelist_1CITEREF_Yang2010>`.

By default, :ref:`StereoConstantSpaceBP <doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p>` uses floating-point arithmetics and the CV_32FC1 type for messages. But it can also use fixed-point arithmetics and the CV_16SC1 message type for better performance. To avoid an overflow in this case, the parameters must satisfy the following requirement:

.. math::

	10 \cdot 2^{levels-1} \cdot max \_ data \_ term < SHRT \_ MAX

Methods
-------

.. index:: pair: function; getNrPlane
.. _doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1a37a1a94108b0ac9071ac861cd0bf7739:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getNrPlane() const = 0

number of active disparity on the first level

.. index:: pair: function; estimateRecommendedParams
.. _doxid-d9/dab/classcv_1_1cuda_1_1_stereo_constant_space_b_p_1ac72baf7587fc27cb68df1039d173bb9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	estimateRecommendedParams(
		int width,
		int height,
		int& ndisp,
		int& iters,
		int& levels,
		int& nr_plane
		)

Uses a heuristic method to compute parameters (ndisp, iters, levelsand nrplane) for the specified image size (widthand height).

