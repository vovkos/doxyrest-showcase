.. index:: pair: class; cv::ml::DTrees
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees:

class cv::ml::DTrees
====================

.. toctree::
	:hidden:

	enum_cv_ml_DTrees_Flags.rst
	class_cv_ml_DTrees_Node.rst
	class_cv_ml_DTrees_Split.rst

Overview
~~~~~~~~

The class represents a single decision tree or a collection of decision trees. :ref:`More...<details-d1/d0c/classcv_1_1ml_1_1_d_trees>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ml.hpp>
	
	class DTrees: public :ref:`cv::ml::StatModel<doxid-d9/d36/classcv_1_1ml_1_1_stat_model>`
	{
	public:
		// enums
	
		enum :ref:`Flags<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a7afa5cd2289fb88989c0ab1b8b5d8ac2>`;

		// classes
	
		class :ref:`Node<doxid-db/d35/classcv_1_1ml_1_1_d_trees_1_1_node>`;
		class :ref:`Split<doxid-df/d74/classcv_1_1ml_1_1_d_trees_1_1_split>`;

		// methods
	
		virtual
		int
		:ref:`getCVFolds<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abfced3f2d3bf13b39c94e4a3fecc4309>`() const = 0;
	
		virtual
		int
		:ref:`getMaxCategories<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ad7dea805ae861c26fdd0b79eb34b3c24>`() const = 0;
	
		virtual
		int
		:ref:`getMaxDepth<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ac41b80cb9e2ea0d477425052f9692104>`() const = 0;
	
		virtual
		int
		:ref:`getMinSampleCount<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a277c2ccecfa7fc65d1d474b56450e126>`() const = 0;
	
		virtual
		const std::vector<:ref:`Node<doxid-db/d35/classcv_1_1ml_1_1_d_trees_1_1_node>`>&
		:ref:`getNodes<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ae4ffa17349a0094c5cded6e92042ffc2>`() const = 0;
	
		virtual
		:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getPriors<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a152badc1f5a4963ef9d43d7e7395bd3b>`() const = 0;
	
		virtual
		float
		:ref:`getRegressionAccuracy<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab7ec8342deddac53ebbb92145c992db7>`() const = 0;
	
		virtual
		const std::vector<int>&
		:ref:`getRoots<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1af99b15e5769c614bb1f1e16330b6fa4f>`() const = 0;
	
		virtual
		const std::vector<:ref:`Split<doxid-df/d74/classcv_1_1ml_1_1_d_trees_1_1_split>`>&
		:ref:`getSplits<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a23bd587736aa6c658966025cfff3f4a3>`() const = 0;
	
		virtual
		const std::vector<int>&
		:ref:`getSubsets<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab4edebdd513c1937dfa8f444931f6a7a>`() const = 0;
	
		virtual
		bool
		:ref:`getTruncatePrunedTree<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a905b23962a6c393a87b79bcc086cc6c2>`() const = 0;
	
		virtual
		bool
		:ref:`getUse1SERule<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a5d8bd6934507c56905f93b5b8c7d1584>`() const = 0;
	
		virtual
		bool
		:ref:`getUseSurrogates<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a566708bb8841067f146afae81b6219f4>`() const = 0;
	
		virtual
		void
		:ref:`setCVFolds<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a082ed33b1dd2101152dd33bdc2847404>`(int val) = 0;
	
		virtual
		void
		:ref:`setMaxCategories<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6d1571c10e5d72f8df7f102b916d704f>`(int val) = 0;
	
		virtual
		void
		:ref:`setMaxDepth<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab2192b5631da2d30eaaebdb12015f477>`(int val) = 0;
	
		virtual
		void
		:ref:`setMinSampleCount<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abe34fc6e9a172b9e334abcca94e28fb6>`(int val) = 0;
	
		virtual
		void
		:ref:`setPriors<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a66756433f31db77a5511fc3f85403bd9>`(const :ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`& val) = 0;
	
		virtual
		void
		:ref:`setRegressionAccuracy<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a936a3b56ccc5684f279dfd76bbea0247>`(float val) = 0;
	
		virtual
		void
		:ref:`setTruncatePrunedTree<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6f2663a08abc3e872bd3f3a53a84615c>`(bool val) = 0;
	
		virtual
		void
		:ref:`setUse1SERule<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a08089831f9a07e0ce6a5e5faccdf31f6>`(bool val) = 0;
	
		virtual
		void
		:ref:`setUseSurrogates<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a33d8fec217d423609a9f29a0a787111c>`(bool val) = 0;
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<DTrees>
		:ref:`create<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1aa0ae71ed85f63d2ea809402c0f19d602>`();
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<DTrees>
		:ref:`load<doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a9a13c065058afce14367ca44739fb4df>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	};

	// direct descendants

	class :ref:`Boost<doxid-d1/ddd/classcv_1_1ml_1_1_boost>`;
	class :ref:`RTrees<doxid-d4/d41/classcv_1_1ml_1_1_r_trees>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// enums
	
		enum :ref:`Flags<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af1ea864e1c19796e6264ebb3950c0b9a>`;

		// methods
	
		virtual
		void
		:ref:`clear<doxid-d1/d41/classcv_1_1_algorithm_1aec9c965448e4dc851d7cacd3abd84cd1>`();
	
		virtual
		bool
		:ref:`empty<doxid-d1/d41/classcv_1_1_algorithm_1ab6a18f1825475643e94381697d413972>`() const;
	
		virtual
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
		:ref:`getDefaultName<doxid-d1/d41/classcv_1_1_algorithm_1a286fc82744ccab3d248aca44524266a9>`() const;
	
		virtual
		void
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1aef2ad3f4145bd6e8c3664eb1c4b5e1e6>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		void
		:ref:`save<doxid-d1/d41/classcv_1_1_algorithm_1a0a880744bc4e3f45711444571df47d67>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename) const;
	
		virtual
		void
		:ref:`write<doxid-d1/d41/classcv_1_1_algorithm_1a1f8ad7b8add515077367fb9949a174d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`load<doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`loadFromString<doxid-d1/d41/classcv_1_1_algorithm_1a3ba305a10d02479c13cf7d169c321547>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& strModel,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& objname = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`read<doxid-d1/d41/classcv_1_1_algorithm_1ad8c591bacb34c485f5b7a250c314fc53>`(const :ref:`FileNode<doxid-dc/d21/classcv_1_1_file_node>`& fn);
	
		virtual
		float
		:ref:`calcError<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aa6a71b1ee5b7fa0b07b55e77106cda13>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			bool test,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` resp
			) const;
	
		virtual
		bool
		:ref:`empty<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a398fed53d9312b923e34aefd42f70e17>`() const;
	
		virtual
		int
		:ref:`getVarCount<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a783b92c436c7a2978e2d4bbb3cfb6e0c>`() const = 0;
	
		virtual
		bool
		:ref:`isClassifier<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1121a835feedefdcdb8624966567aec6>`() const = 0;
	
		virtual
		bool
		:ref:`isTrained<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aab380b59eb30b50254ef1b804774c4d8>`() const = 0;
	
		virtual
		float
		:ref:`predict<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1a1a7e49e1febd10392452727498771bc1>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` results = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			int flags = 0
			) const = 0;
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& trainData,
			int flags = 0
			);
	
		virtual
		bool
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1aeb25a75f438864fb25af182fb4b1b96f>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			int layout,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses
			);
	
		template <typename _Tp>
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<_Tp>
		:ref:`train<doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af93a21ea5866cd305936a03742f69af8>`(
			const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`TrainData<doxid-d3/daf/classcv_1_1ml_1_1_train_data>`>& data,
			int flags = 0
			);

	protected:
		// methods
	
		void
		:ref:`writeFormat<doxid-d1/d41/classcv_1_1_algorithm_1a68eeca71617474ad3d4561786f0289d2>`(:ref:`FileStorage<doxid-d9/df9/classcv_1_1_file_storage>`& fs) const;

.. _details-d1/d0c/classcv_1_1ml_1_1_d_trees:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The class represents a single decision tree or a collection of decision trees.

The current public interface of the class allows user to train only a single decision tree, however the class is capable of storing multiple decision trees and using them for prediction (by summing responses or using a voting schemes), and the derived from :ref:`DTrees <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees>` classes (such as :ref:`RTrees <doxid-d4/d41/classcv_1_1ml_1_1_r_trees>` and :ref:`Boost <doxid-d1/ddd/classcv_1_1ml_1_1_boost>`) use this capability to implement decision tree ensembles.



.. rubric:: See also:

:ref:`Decision Trees <doxid-dc/dd6/ml_intro_1ml_intro_trees>`

Methods
-------

.. index:: pair: function; getCVFolds
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abfced3f2d3bf13b39c94e4a3fecc4309:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getCVFolds() const = 0

If CVFolds > 1 then algorithms prunes the built decision tree using K-fold cross-validation procedure where K is equal to CVFolds. Default value is 10.



.. rubric:: See also:

:ref:`setCVFolds <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a082ed33b1dd2101152dd33bdc2847404>`

.. index:: pair: function; getMaxCategories
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ad7dea805ae861c26fdd0b79eb34b3c24:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getMaxCategories() const = 0

Cluster possible values of a categorical variable into K<=maxCategories clusters to find a suboptimal split. If a discrete variable, on which the training procedure tries to make a split, takes more than maxCategories values, the precise best subset estimation may take a very long time because the algorithm is exponential. Instead, many decision trees engines (including our implementation) try to find sub-optimal split in this case by clustering all the samples into maxCategories clusters that is some categories are merged together. The clustering is applied only in n > 2-class classification problems for categorical variables with N > max_categories possible values. In case of regression and 2-class classification the optimal split can be found efficiently without employing clustering, thus the parameter is not used in these cases. Default value is 10.



.. rubric:: See also:

:ref:`setMaxCategories <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6d1571c10e5d72f8df7f102b916d704f>`

.. index:: pair: function; getMaxDepth
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ac41b80cb9e2ea0d477425052f9692104:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getMaxDepth() const = 0

The maximum possible depth of the tree. That is the training algorithms attempts to split a node while its depth is less than maxDepth. The root node has zero depth. The actual depth may be smaller if the other termination criteria are met (see the outline of the training procedure :ref:`here <doxid-dc/dd6/ml_intro_1ml_intro_trees>`), and/or if the tree is pruned. Default value is INT_MAX.



.. rubric:: See also:

:ref:`setMaxDepth <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab2192b5631da2d30eaaebdb12015f477>`

.. index:: pair: function; getMinSampleCount
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a277c2ccecfa7fc65d1d474b56450e126:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	int
	getMinSampleCount() const = 0

If the number of samples in a node is less than this parameter then the node will not be split.

Default value is 10.



.. rubric:: See also:

:ref:`setMinSampleCount <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abe34fc6e9a172b9e334abcca94e28fb6>`

.. index:: pair: function; getNodes
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ae4ffa17349a0094c5cded6e92042ffc2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	const std::vector<:ref:`Node<doxid-db/d35/classcv_1_1ml_1_1_d_trees_1_1_node>`>&
	getNodes() const = 0

Returns all the nodes.

all the node indices are indices in the returned vector

.. index:: pair: function; getPriors
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a152badc1f5a4963ef9d43d7e7395bd3b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
	getPriors() const = 0

The array of a priori class probabilities, sorted by the class label value.

The parameter can be used to tune the decision tree preferences toward a certain class. For example, if you want to detect some rare anomaly occurrence, the training base will likely contain much more normal cases than anomalies, so a very good classification performance will be achieved just by considering every case as normal. To avoid this, the priors can be specified, where the anomaly probability is artificially increased (up to 0.5 or even greater), so the weight of the misclassified anomalies becomes much bigger, and the tree is adjusted properly.

You can also think about this parameter as weights of prediction categories which determine relative weights that you give to misclassification. That is, if the weight of the first category is 1 and the weight of the second category is 10, then each mistake in predicting the second category is equivalent to making 10 mistakes in predicting the first category. Default value is empty :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`.



.. rubric:: See also:

:ref:`setPriors <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a66756433f31db77a5511fc3f85403bd9>`

.. index:: pair: function; getRegressionAccuracy
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab7ec8342deddac53ebbb92145c992db7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	float
	getRegressionAccuracy() const = 0

Termination criteria for regression trees. If all absolute differences between an estimated value in a node and values of train samples in this node are less than this parameter then the node will not be split further. Default value is 0.01f



.. rubric:: See also:

:ref:`setRegressionAccuracy <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a936a3b56ccc5684f279dfd76bbea0247>`

.. index:: pair: function; getRoots
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1af99b15e5769c614bb1f1e16330b6fa4f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	const std::vector<int>&
	getRoots() const = 0

Returns indices of root nodes.

.. index:: pair: function; getSplits
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a23bd587736aa6c658966025cfff3f4a3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	const std::vector<:ref:`Split<doxid-df/d74/classcv_1_1ml_1_1_d_trees_1_1_split>`>&
	getSplits() const = 0

Returns all the splits.

all the split indices are indices in the returned vector

.. index:: pair: function; getSubsets
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab4edebdd513c1937dfa8f444931f6a7a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	const std::vector<int>&
	getSubsets() const = 0

Returns all the bitsets for categorical splits.

:ref:`Split::subsetOfs <doxid-df/d74/classcv_1_1ml_1_1_d_trees_1_1_split_1afd2ee09de243483ccbbd9bd5a0676f2f>` is an offset in the returned vector

.. index:: pair: function; getTruncatePrunedTree
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a905b23962a6c393a87b79bcc086cc6c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	getTruncatePrunedTree() const = 0

If true then pruned branches are physically removed from the tree. Otherwise they are retained and it is possible to get results from the original unpruned (or pruned less aggressively) tree. Default value is true.



.. rubric:: See also:

:ref:`setTruncatePrunedTree <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6f2663a08abc3e872bd3f3a53a84615c>`

.. index:: pair: function; getUse1SERule
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a5d8bd6934507c56905f93b5b8c7d1584:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	getUse1SERule() const = 0

If true then a pruning will be harsher. This will make a tree more compact and more resistant to the training data noise but a bit less accurate. Default value is true.



.. rubric:: See also:

:ref:`setUse1SERule <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a08089831f9a07e0ce6a5e5faccdf31f6>`

.. index:: pair: function; getUseSurrogates
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a566708bb8841067f146afae81b6219f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	getUseSurrogates() const = 0

If true then surrogate splits will be built. These splits allow to work with missing data and compute variable importance correctly. Default value is false. currently it's not implemented.



.. rubric:: See also:

:ref:`setUseSurrogates <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a33d8fec217d423609a9f29a0a787111c>`

.. index:: pair: function; setCVFolds
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a082ed33b1dd2101152dd33bdc2847404:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setCVFolds(int val) = 0



.. rubric:: See also:

:ref:`getCVFolds <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abfced3f2d3bf13b39c94e4a3fecc4309>`

.. index:: pair: function; setMaxCategories
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6d1571c10e5d72f8df7f102b916d704f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setMaxCategories(int val) = 0



.. rubric:: See also:

:ref:`getMaxCategories <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ad7dea805ae861c26fdd0b79eb34b3c24>`

.. index:: pair: function; setMaxDepth
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab2192b5631da2d30eaaebdb12015f477:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setMaxDepth(int val) = 0



.. rubric:: See also:

:ref:`getMaxDepth <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ac41b80cb9e2ea0d477425052f9692104>`

.. index:: pair: function; setMinSampleCount
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1abe34fc6e9a172b9e334abcca94e28fb6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setMinSampleCount(int val) = 0



.. rubric:: See also:

:ref:`getMinSampleCount <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a277c2ccecfa7fc65d1d474b56450e126>`

.. index:: pair: function; setPriors
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a66756433f31db77a5511fc3f85403bd9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setPriors(const :ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`& val) = 0

The array of a priori class probabilities, sorted by the class label value.



.. rubric:: See also:

:ref:`getPriors <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a152badc1f5a4963ef9d43d7e7395bd3b>`

.. index:: pair: function; setRegressionAccuracy
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a936a3b56ccc5684f279dfd76bbea0247:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setRegressionAccuracy(float val) = 0



.. rubric:: See also:

:ref:`getRegressionAccuracy <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1ab7ec8342deddac53ebbb92145c992db7>`

.. index:: pair: function; setTruncatePrunedTree
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a6f2663a08abc3e872bd3f3a53a84615c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setTruncatePrunedTree(bool val) = 0



.. rubric:: See also:

:ref:`getTruncatePrunedTree <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a905b23962a6c393a87b79bcc086cc6c2>`

.. index:: pair: function; setUse1SERule
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a08089831f9a07e0ce6a5e5faccdf31f6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setUse1SERule(bool val) = 0



.. rubric:: See also:

:ref:`getUse1SERule <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a5d8bd6934507c56905f93b5b8c7d1584>`

.. index:: pair: function; setUseSurrogates
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a33d8fec217d423609a9f29a0a787111c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setUseSurrogates(bool val) = 0



.. rubric:: See also:

:ref:`getUseSurrogates <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a566708bb8841067f146afae81b6219f4>`

.. index:: pair: function; create
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1aa0ae71ed85f63d2ea809402c0f19d602:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<DTrees>
	create()

Creates the empty model.

The static method creates empty decision tree with the specified parameters. It should be then trained using train method (see :ref:`StatModel::train <doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>`). Alternatively, you can load the model from file using :ref:`Algorithm::load <doxid-d1/d41/classcv_1_1_algorithm_1a623841c33b58ea9c4847da04607e067b>` <:ref:`DTrees <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees>`>(filename).

.. index:: pair: function; load
.. _doxid-d1/d0c/classcv_1_1ml_1_1_d_trees_1a9a13c065058afce14367ca44739fb4df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<DTrees>
	load(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filepath,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& nodeName = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`()
		)

Loads and creates a serialized :ref:`DTrees <doxid-d1/d0c/classcv_1_1ml_1_1_d_trees>` from a file.

Use DTree::save to serialize and store an DTree to disk. Load the DTree from this file again, by calling this function with the path to the file. Optionally specify the node for the file containing the classifier



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filepath

		- path to serialized DTree

	*
		- nodeName

		- name of node containing the classifier

