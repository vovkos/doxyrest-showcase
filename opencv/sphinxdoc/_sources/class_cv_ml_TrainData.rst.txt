.. index:: pair: class; cv::ml::TrainData
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data:

class cv::ml::TrainData
=======================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Class encapsulating training data. :ref:`More...<details-d3/daf/classcv_1_1ml_1_1_train_data>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ml.hpp>
	
	class TrainData
	{
	public:
		// methods
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<TrainData>
		:ref:`create<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a5e0c052f9aadce1f75cddbdbbf9c4f4d>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
			int layout,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` varIdx = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sampleIdx = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sampleWeights = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` varType = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
			);
	
		static
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getSubVector<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a3d01eda6a2eb795bd7ab223b6d065e52>`(
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& vec,
			const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& idx
			);
	
		static
		:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<TrainData>
		:ref:`loadFromCSV<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab3264a32194126ff8d6821e76018cde3>`(
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
			int headerLineCount,
			int responseStartIdx = -1,
			int responseEndIdx = -1,
			const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& varTypeSpec = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`(),
			char delimiter = ',',
			char missch = '?'
			);
	
		static
		float
		:target:`missingValue<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a852e02da238303d33fd5923b75657584>`();
	
		virtual
		int
		:target:`getCatCount<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a7e687b7ee8325380bced49f5cd5baf15>`(int vi) const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getCatMap<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a3c2c8c6bf46955d9c52f256fdfa9097c>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getCatOfs<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a65ad5f0565ffe9ac26fbff8026faec36>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getClassLabels<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0e40c6bd62aa9ad0ae6f5273d2bd824b>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getDefaultSubstValues<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab8c65d4efcb364be41febd8e3c2dae70>`() const = 0;
	
		virtual
		int
		:target:`getLayout<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1aa2d2889b6dddad5e663cb18b206ac3f1>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getMissing<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a71f13029c92961dc432fcfeec376ad9a>`() const = 0;
	
		virtual
		int
		:target:`getNAllVars<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a4c81aad5723a86d1f9f97e0ca2cf271b>`() const = 0;
	
		void
		:ref:`getNames<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1acf511cbd3ff8c682ccd6655b98ab9fb4>`(std::vector<:ref:`String<doxid-dc/d0e/classcv_1_1_string>`>& names) const;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getNormCatResponses<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a2f6bd6ae08ded472532b28e1b1266230>`() const = 0;
	
		virtual
		void
		:target:`getNormCatValues<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ac535b6932fa5bb7d89cd50f6d7b86dc7>`(
			int vi,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sidx,
			int* values
			) const = 0;
	
		virtual
		int
		:target:`getNSamples<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a38b6da04d4765000e890d614a01be446>`() const = 0;
	
		virtual
		int
		:target:`getNTestSamples<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0f3265d83658f7effd2cb4c05fe6b8c8>`() const = 0;
	
		virtual
		int
		:target:`getNTrainSamples<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ac34c8467851769cac20d99cde52f3812>`() const = 0;
	
		virtual
		int
		:target:`getNVars<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1acafca98ec8fb43ddcec59af1cc906611>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getResponses<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a10c5bb5ac7c4b70fbc9db0d3a94684e2>`() const = 0;
	
		virtual
		int
		:target:`getResponseType<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1afc86c4d4670e535dee2459742f87ea95>`() const = 0;
	
		virtual
		void
		:target:`getSample<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1acad3498d09f7d9b91fa9378b50a6c12a>`(
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` varIdx,
			int sidx,
			float* buf
			) const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getSamples<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a86fc3bbc9a6d0fef62ec97b28eb452fe>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getSampleWeights<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a7ab7348f09a9a44bf1e30df1b979e034>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getTestNormCatResponses<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a4fc48158587fe44f863788aefed5d245>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getTestResponses<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ae83fc71c776cd9971463c2e4dbab0427>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getTestSampleIdx<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a923fc78e64e96543bf8ebe87d179ea29>`() const = 0;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getTestSamples<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1aaa02ce76f50a1c8afe06791a18ce3e36>`() const;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getTestSampleWeights<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1acddb9c4642e9b4f39a4bf1337ceb06f7>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getTrainNormCatResponses<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0901c9bed4728e3fa29b93a0afa46371>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getTrainResponses<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ac248adbafbc43a1c00bfa32e2526cf4c>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getTrainSampleIdx<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1aaefa64f1e3c208d4dc38127b6739eff7>`() const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:ref:`getTrainSamples<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1af35073f4d4e0777159c57622df56117c>`(
			int layout = :ref:`ROW_SAMPLE<doxid-dd/ded/group__ml_1gga9c57a2b823008dda53d2c7f7059a8710ab8565ac2eb79152a4e3c80b0e9c9fd4c>`,
			bool compressSamples = true,
			bool compressVars = true
			) const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getTrainSampleWeights<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ad2de4f384f28259ac849e289be8d970d>`() const = 0;
	
		virtual
		void
		:target:`getValues<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a38d657b15e30bc94124c31cd3c23d816>`(
			int vi,
			:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sidx,
			float* values
			) const = 0;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getVarIdx<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1aee63a2fc0f0679e3f8dd65dbc2c2b571>`() const = 0;
	
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getVarSymbolFlags<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a56609d0b1e0b1b6d6c7c8e716d0ad457>`() const;
	
		virtual
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
		:target:`getVarType<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a56959ac3541cd7d8d3bbcba02f8a1308>`() const = 0;
	
		virtual
		void
		:ref:`setTrainTestSplit<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab444173f4d980bb3c18d856df706c920>`(
			int count,
			bool shuffle = true
			) = 0;
	
		virtual
		void
		:ref:`setTrainTestSplitRatio<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ad59c8df14e133ba492ff5cbfa21244cc>`(
			double ratio,
			bool shuffle = true
			) = 0;
	
		virtual
		void
		:target:`shuffleTrainTest<doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0515ddd44168aa5c42478536375c760b>`() = 0;
	};
.. _details-d3/daf/classcv_1_1ml_1_1_train_data:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Class encapsulating training data.

Please note that the class only specifies the interface of training data, but not implementation. All the statistical model classes in *ml* module accepts :ref:`Ptr <doxid-d2/d56/structcv_1_1_ptr>` <:ref:`TrainData <doxid-d3/daf/classcv_1_1ml_1_1_train_data>`> as parameter. In other words, you can create your own class derived from :ref:`TrainData <doxid-d3/daf/classcv_1_1ml_1_1_train_data>` and pass smart pointer to the instance of this class into :ref:`StatModel::train <doxid-d9/d36/classcv_1_1ml_1_1_stat_model_1af96a0e04f1677a835cc25263c7db3c0c>`.



.. rubric:: See also:

:ref:`Training Data <doxid-dc/dd6/ml_intro_1ml_intro_data>`

Methods
-------

.. index:: pair: function; create
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a5e0c052f9aadce1f75cddbdbbf9c4f4d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<TrainData>
	create(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		int layout,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` responses,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` varIdx = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sampleIdx = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` sampleWeights = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` varType = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Creates training data from in-memory arrays.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- matrix of samples. It should have CV_32F type.

	*
		- layout

		- see :ref:`ml::SampleTypes <doxid-dd/ded/group__ml_1ga9c57a2b823008dda53d2c7f7059a8710>`.

	*
		- responses

		- matrix of responses. If the responses are scalar, they should be stored as a single row or as a single column. The matrix should have type CV_32F or CV_32S (in the former case the responses are considered as ordered by default; in the latter case - as categorical)

	*
		- varIdx

		- vector specifying which variables to use for training. It can be an integer vector (CV_32S) containing 0-based variable indices or byte vector (CV_8U) containing a mask of active variables.

	*
		- sampleIdx

		- vector specifying which samples to use for training. It can be an integer vector (CV_32S) containing 0-based sample indices or byte vector (CV_8U) containing a mask of training samples.

	*
		- sampleWeights

		- optional vector with weights for each sample. It should have CV_32F type.

	*
		- varType

		- optional vector of type CV_8U and size ``<number_of_variables_in_samples> + <number_of_variables_in_responses>``, containing types of each input and output variable. See :ref:`ml::VariableTypes <doxid-dd/ded/group__ml_1gafd82a0e568907b8680027cb246a6eb06>`.

.. index:: pair: function; loadFromCSV
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab3264a32194126ff8d6821e76018cde3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<TrainData>
	loadFromCSV(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename,
		int headerLineCount,
		int responseStartIdx = -1,
		int responseEndIdx = -1,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& varTypeSpec = :ref:`String<doxid-dc/d0e/classcv_1_1_string>`(),
		char delimiter = ',',
		char missch = '?'
		)

Reads the dataset from a .csv file and returns the ready-to-use training data.

If the dataset only contains input variables and no responses, use responseStartIdx = -2 and responseEndIdx = 0. The output variables vector will just contain zeros.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- The input file name

	*
		- headerLineCount

		- The number of lines in the beginning to skip; besides the header, the function also skips empty lines and lines staring with ``#``

	*
		- responseStartIdx

		- Index of the first output variable. If -1, the function considers the last variable as the response

	*
		- responseEndIdx

		- Index of the last output variable + 1. If -1, then there is single response variable at responseStartIdx.

	*
		- varTypeSpec

		- 
		  The optional text string that specifies the variables' types. It has the format ``ord[n1-n2,n3,n4-n5,...]cat[n6,n7-n8,...]``. That is, variables from ``n1 to n2`` (inclusive range), ``n3``, ``n4 to n5``... are considered ordered and ``n6``, ``n7 to n8``... are considered as categorical. The range ``[n1..n2] + [n3] + [n4..n5] + ... + [n6] + [n7..n8]`` should cover all the variables. If varTypeSpec is not specified, then algorithm uses the following rules:
		  
		  * all input variables are considered ordered by default. If some column contains has non- numerical values, e.g. 'apple', 'pear', 'apple', 'apple', 'mango', the corresponding variable is considered categorical.
		  
		  * if there are several output variables, they are all considered as ordered. :ref:`Error <doxid-d6/d43/namespacecv_1_1_error>` is reported when non-numerical values are used.
		  
		  * if there is a single output variable, then if its values are non-numerical or are all integers, then it's considered categorical. Otherwise, it's considered ordered.

	*
		- delimiter

		- The character used to separate values in each line.

	*
		- missch

		- The character used to specify missing measurements. It should not be a digit. Although it's a non-numerical value, it surely does not affect the decision of whether the variable ordered or categorical.

.. index:: pair: function; getClassLabels
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0e40c6bd62aa9ad0ae6f5273d2bd824b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getClassLabels() const = 0

Returns the vector of class labels.

The function returns vector of unique labels occurred in the responses.

.. index:: pair: function; getNames
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1acf511cbd3ff8c682ccd6655b98ab9fb4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	getNames(std::vector<:ref:`String<doxid-dc/d0e/classcv_1_1_string>`>& names) const

Returns vector of symbolic names captured in :ref:`loadFromCSV() <doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab3264a32194126ff8d6821e76018cde3>`

.. index:: pair: function; getTestSamples
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1aaa02ce76f50a1c8afe06791a18ce3e36:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getTestSamples() const

Returns matrix of test samples.

.. index:: pair: function; getTrainNormCatResponses
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0901c9bed4728e3fa29b93a0afa46371:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getTrainNormCatResponses() const = 0

Returns the vector of normalized categorical responses.

The function returns vector of responses. Each response is integer from ``0`` to ``<number of classes>-1``. The actual label value can be retrieved then from the class label vector, see :ref:`TrainData::getClassLabels <doxid-d3/daf/classcv_1_1ml_1_1_train_data_1a0e40c6bd62aa9ad0ae6f5273d2bd824b>`.

.. index:: pair: function; getTrainResponses
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ac248adbafbc43a1c00bfa32e2526cf4c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getTrainResponses() const = 0

Returns the vector of responses.

The function returns ordered or the original categorical responses. Usually it's used in regression algorithms.

.. index:: pair: function; getTrainSamples
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1af35073f4d4e0777159c57622df56117c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	getTrainSamples(
		int layout = :ref:`ROW_SAMPLE<doxid-dd/ded/group__ml_1gga9c57a2b823008dda53d2c7f7059a8710ab8565ac2eb79152a4e3c80b0e9c9fd4c>`,
		bool compressSamples = true,
		bool compressVars = true
		) const = 0

Returns matrix of train samples.

In current implementation the function tries to avoid physical data copying and returns the matrix stored inside :ref:`TrainData <doxid-d3/daf/classcv_1_1ml_1_1_train_data>` (unless the transposition or compression is needed).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- layout

		- The requested layout. If it's different from the initial one, the matrix is transposed. See :ref:`ml::SampleTypes <doxid-dd/ded/group__ml_1ga9c57a2b823008dda53d2c7f7059a8710>`.

	*
		- compressSamples

		- if true, the function returns only the training samples (specified by sampleIdx)

	*
		- compressVars

		- if true, the function returns the shorter training samples, containing only the active variables.

.. index:: pair: function; setTrainTestSplit
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab444173f4d980bb3c18d856df706c920:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setTrainTestSplit(
		int count,
		bool shuffle = true
		) = 0

Splits the training data into the training and test parts.



.. rubric:: See also:

:ref:`TrainData::setTrainTestSplitRatio <doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ad59c8df14e133ba492ff5cbfa21244cc>`

.. index:: pair: function; setTrainTestSplitRatio
.. _doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ad59c8df14e133ba492ff5cbfa21244cc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setTrainTestSplitRatio(
		double ratio,
		bool shuffle = true
		) = 0

Splits the training data into the training and test parts.

The function selects a subset of specified relative size and then returns it as the training set. If the function is not called, all the data is used for training. Please, note that for each of TrainData::getTrain\* there is corresponding TrainData::getTest\*, so that the test subset can be retrieved and processed as well.



.. rubric:: See also:

:ref:`TrainData::setTrainTestSplit <doxid-d3/daf/classcv_1_1ml_1_1_train_data_1ab444173f4d980bb3c18d856df706c920>`

