.. index:: pair: class; cvflann::Heap
.. _doxid-df/d2f/classcvflann_1_1_heap:

template class cvflann::Heap
============================

.. toctree::
	:hidden:

	struct_cvflann_Heap_CompareT.rst

Overview
~~~~~~~~

Priority Queue Implementation

The priority queue is implemented with a heap. :ref:`More...<details-df/d2f/classcvflann_1_1_heap>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <heap.h>
	
	template <typename T>
	class Heap
	{
	public:
		// structs
	
		struct :ref:`CompareT<doxid-d0/d4d/structcvflann_1_1_heap_1_1_compare_t>`;

		// construction
	
		:ref:`Heap<doxid-df/d2f/classcvflann_1_1_heap_1a477eb646c7992fc9986c64b927f885fc>`(int sz);

		// methods
	
		void
		:ref:`clear<doxid-df/d2f/classcvflann_1_1_heap_1ae48047dff69cce90629cf8a8b4f6ab6d>`();
	
		bool
		:ref:`empty<doxid-df/d2f/classcvflann_1_1_heap_1ac10663597fecfcfc1d4b940c83eb687f>`();
	
		void
		:ref:`insert<doxid-df/d2f/classcvflann_1_1_heap_1abba4d73d454ec9324af80c299715067c>`(T value);
	
		bool
		:ref:`popMin<doxid-df/d2f/classcvflann_1_1_heap_1a6c6d2fd6b7522e13049389ab4ae0e0ab>`(T& value);
	
		int
		:ref:`size<doxid-df/d2f/classcvflann_1_1_heap_1ade1994ba5149445d0292804dea5fdc20>`();
	};
.. _details-df/d2f/classcvflann_1_1_heap:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Priority Queue Implementation

The priority queue is implemented with a heap. A heap is a complete (full) binary tree in which each parent is less than both of its children, but the order of the children is unspecified.

Construction
------------

.. index:: pair: function; Heap
.. _doxid-df/d2f/classcvflann_1_1_heap_1a477eb646c7992fc9986c64b927f885fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Heap(int sz)

Constructor.

Params: sz = heap size

Methods
-------

.. index:: pair: function; clear
.. _doxid-df/d2f/classcvflann_1_1_heap_1ae48047dff69cce90629cf8a8b4f6ab6d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	clear()

Clears the heap.

.. index:: pair: function; empty
.. _doxid-df/d2f/classcvflann_1_1_heap_1ac10663597fecfcfc1d4b940c83eb687f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	empty()

Tests if the heap is empty

Returns: true is heap empty, false otherwise

.. index:: pair: function; insert
.. _doxid-df/d2f/classcvflann_1_1_heap_1abba4d73d454ec9324af80c299715067c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	insert(T value)

Insert a new element in the heap.

We select the next empty leaf node, and then keep moving any larger parents down until the right location is found to store this element.

Params: value = the new element to be inserted in the heap

.. index:: pair: function; popMin
.. _doxid-df/d2f/classcvflann_1_1_heap_1a6c6d2fd6b7522e13049389ab4ae0e0ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	popMin(T& value)

Returns the node of minimum value from the heap (top of the heap).

Params: value = out parameter used to return the min element Returns: false if heap empty

.. index:: pair: function; size
.. _doxid-df/d2f/classcvflann_1_1_heap_1ade1994ba5149445d0292804dea5fdc20:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	size()

Returns: heap size

