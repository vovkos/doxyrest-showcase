.. index:: pair: example; cout_mat.cpp
.. _doxid-dc/d16/cout_mat_8cpp-example:

cout_mat.cpp
============

An example demonstrating the serial out capabilities of :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`

.. ref-code-block:: cpp

	/*
	 *
	 * cvout_sample just demonstrates the serial out capabilities of cv::Mat
	 *  That is, cv::Mat M(...); cout << M;  Now works.
	 *
	 */
	
	#include "opencv2/core.hpp"
	#include <iostream>
	
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	
	static void help()
	{
	    cout
	    << "\n------------------------------------------------------------------\n"
	    << " This program shows the serial out capabilities of cv::Mat\n"
	    << "That is, cv::Mat M(...); cout << M;  Now works.\n"
	    << "Output can be formated to OpenCV, matlab, python, numpy, csv and \n"
	    << "C styles Usage:\n"
	    << "./cvout_sample\n"
	    << "------------------------------------------------------------------\n\n"
	    << endl;
	}
	
	
	int main(int argc, char** argv)
	{
	    :ref:`cv::CommandLineParser <doxid-da/dd8/classcv_1_1_command_line_parser>` parser(argc, argv, "{help h||}");
	    if (parser.has("help"))
	    {
	        help();
	        return 0;
	    }
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` I = Mat::eye(4, 4, :ref:`CV_64F <doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`);
	    I.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<double>(1,1) = CV_PI;
	    cout << "I = \n" << I << ";" << endl << endl;
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` r = :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`(10, 3, :ref:`CV_8UC3 <doxid-d1/d1b/group__core__hal__interface_1ga88c4cd9de76f678f33928ef1e3f96047>`);
	    :ref:`randu <doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0>`(r, Scalar::all(0), Scalar::all(255));
	
	    cout << "r (default) = \n" << r << ";" << endl << endl;
	    cout << "r (matlab) = \n" << :ref:`format <doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409>`(r, Formatter::FMT_MATLAB) << ";" << endl << endl;
	    cout << "r (python) = \n" << :ref:`format <doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409>`(r, Formatter::FMT_PYTHON) << ";" << endl << endl;
	    cout << "r (numpy) = \n" << :ref:`format <doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409>`(r, Formatter::FMT_NUMPY) << ";" << endl << endl;
	    cout << "r (csv) = \n" << :ref:`format <doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409>`(r, Formatter::FMT_CSV) << ";" << endl << endl;
	    cout << "r (c) = \n" << :ref:`format <doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409>`(r, Formatter::FMT_C) << ";" << endl << endl;
	
	    Point2f p(5, 1);
	    cout << "p = " << p << ";" << endl;
	
	    Point3f p3f(2, 6, 7);
	    cout << "p3f = " << p3f << ";" << endl;
	
	    vector<float> v;
	    v.push_back(1);
	    v.push_back(2);
	    v.push_back(3);
	
	    cout << "shortvec = " << :ref:`Mat <doxid-db/de6/classcv_1_1_mat>`(v) << endl;
	
	    vector<Point2f> points(20);
	    for (size_t i = 0; i < points.size(); ++i)
	        points[i] = :ref:`Point2f <doxid-dc/d84/group__core__basic_1ga7d080aa40de011e4410bca63385ffe2a>`((float)(i * 5), (float)(i % 7));
	
	    cout << "points = " << points << ";" << endl;
	    return 0;
	}
