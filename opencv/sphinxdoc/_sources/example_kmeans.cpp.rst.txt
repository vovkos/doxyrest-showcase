.. index:: pair: example; kmeans.cpp
.. _doxid-de/d63/kmeans_8cpp-example:

kmeans.cpp
==========

An example on K-means clustering

.. ref-code-block:: cpp

	#include "opencv2/highgui.hpp"
	#include "opencv2/core.hpp"
	#include "opencv2/imgproc.hpp"
	#include <iostream>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	
	// static void help()
	// {
	//     cout << "\nThis program demonstrates kmeans clustering.\n"
	//             "It generates an image with random points, then assigns a random number of cluster\n"
	//             "centers and uses kmeans to move those cluster centers to their representitive location\n"
	//             "Call\n"
	//             "./kmeans\n" << endl;
	// }
	
	int main( int /*argc*/, char** /*argv*/ )
	{
	    const int MAX_CLUSTERS = 5;
	    Scalar colorTab[] =
	    {
	        :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(0, 0, 255),
	        :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(0,255,0),
	        :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(255,100,100),
	        :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(255,0,255),
	        :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(0,255,255)
	    };
	
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` img(500, 500, :ref:`CV_8UC3 <doxid-d1/d1b/group__core__hal__interface_1ga88c4cd9de76f678f33928ef1e3f96047>`);
	    :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>` rng(12345);
	
	    for(;;)
	    {
	        int k, clusterCount = rng.:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(2, MAX_CLUSTERS+1);
	        int i, sampleCount = rng.:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(1, 1001);
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` points(sampleCount, 1, :ref:`CV_32FC2 <doxid-d1/d1b/group__core__hal__interface_1ga15d6109d87682bf909122d0ce51c46a6>`), labels;
	
	        clusterCount = :ref:`MIN <doxid-db/de0/group__core__utils_1ga3acffbd305ee72dcd4593c0d8af64a4f>`(clusterCount, sampleCount);
	        :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` centers;
	
	        /* generate random sample from multigaussian distribution */
	        for( k = 0; k < clusterCount; k++ )
	        {
	            Point center;
	            center.:ref:`x <doxid-d9/d87/classcv_1_1_point___1a4c96fa7bdbfe390be5ed356edb274ff3>` = rng.:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(0, img.cols);
	            center.:ref:`y <doxid-d9/d87/classcv_1_1_point___1a157337197338ff199e5df1a393022f15>` = rng.:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(0, img.rows);
	            :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` pointChunk = points.rowRange(k*sampleCount/clusterCount,
	                                             k == clusterCount - 1 ? sampleCount :
	                                             (k+1)*sampleCount/clusterCount);
	            rng.:ref:`fill <doxid-d3/df8/classcv_1_1_r_n_g_1ad26f2b09d9868cf108e84c9814aa682d>`(pointChunk, :ref:`RNG::NORMAL <doxid-d3/df8/classcv_1_1_r_n_g_1af25905f7e5db288b4b78752e34a49c95a85da6d7bc413e10a648f638151129a91>`, :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(center.:ref:`x <doxid-d9/d87/classcv_1_1_point___1a4c96fa7bdbfe390be5ed356edb274ff3>`, center.:ref:`y <doxid-d9/d87/classcv_1_1_point___1a157337197338ff199e5df1a393022f15>`), Scalar(img.cols*0.05, img.rows*0.05));
	        }
	
	        :ref:`randShuffle <doxid-d2/de8/group__core__array_1ga6a789c8a5cb56c6dd62506179808f763>`(points, 1, &rng);
	
	        double compactness = :ref:`kmeans <doxid-d5/d38/group__core__cluster_1ga9a34dc06c6ec9460e90860f15bcd2f88>`(points, clusterCount, labels,
	            :ref:`TermCriteria <doxid-df/d8a/classcv_1_1_term_criteria>`( :ref:`TermCriteria::EPS <doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`+:ref:`TermCriteria::COUNT <doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57aeb9da694ea67b3ef7d524521b580867d>`, 10, 1.0),
	               3, :ref:`KMEANS_PP_CENTERS <doxid-d0/de1/group__core_1gga276000efe55ee2756e0c471c7b270949a78ddd00a99cd51db10ed63c024eb1e62>`, centers);
	
	        img = :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(0);
	
	        for( i = 0; i < sampleCount; i++ )
	        {
	            int clusterIdx = labels.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<int>(i);
	            Point ipt = points.at<Point2f>(i);
	            :ref:`circle <doxid-d6/d6e/group__imgproc__draw_1gaf10604b069374903dbd0f0488cb43670>`( img, ipt, 2, colorTab[clusterIdx], :ref:`FILLED <doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a89c5f6beef080e6df347167f85e07b9e>`, :ref:`LINE_AA <doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a85fdabe5335c9e6656563dfd7c94fb4f>` );
	        }
	        for (i = 0; i < centers.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>`; ++i)
	        {
	            Point2f c = centers.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<Point2f>(i);
	            :ref:`circle <doxid-d6/d6e/group__imgproc__draw_1gaf10604b069374903dbd0f0488cb43670>`( img, c, 40, colorTab[i], 1, :ref:`LINE_AA <doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a85fdabe5335c9e6656563dfd7c94fb4f>` );
	        }
	        cout << "Compactness: " << compactness << endl;
	
	        :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("clusters", img);
	
	        char key = (char):ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`();
	        if( key == 27 || key == 'q' || key == 'Q' ) // 'ESC'
	            break;
	    }
	
	    return 0;
	}
