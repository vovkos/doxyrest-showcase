.. index:: pair: example; morphology2.cpp
.. _doxid-d8/dc0/morphology2_8cpp-example:

morphology2.cpp
===============

An example using the morphological operations

.. ref-code-block:: cpp

	#include "opencv2/imgproc.hpp"
	#include "opencv2/imgcodecs.hpp"
	#include "opencv2/highgui.hpp"
	#include <stdlib.h>
	#include <stdio.h>
	#include <string>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	
	static void help()
	{
	
	printf("\nShow off image morphology: erosion, dialation, open and close\n"
	    "Call:\n   morphology2 [image]\n"
	    "This program also shows use of rect, ellipse and cross kernels\n\n");
	printf( "Hot keys: \n"
	    "\tESC - quit the program\n"
	    "\tr - use rectangle structuring element\n"
	    "\te - use elliptic structuring element\n"
	    "\tc - use cross-shaped structuring element\n"
	    "\tSPACE - loop through all the options\n" );
	}
	
	:ref:`Mat <doxid-db/de6/classcv_1_1_mat>` src, dst;
	
	int element_shape = :ref:`MORPH_RECT <doxid-d4/d86/group__imgproc__filter_1ggac2db39b56866583a95a5680313c314ada260c4cbde19a749726763c01a074c60f>`;
	
	//the address of variable which receives trackbar position update
	int max_iters = 10;
	int open_close_pos = 0;
	int erode_dilate_pos = 0;
	
	// callback function for open/close trackbar
	static void OpenClose(int, void*)
	{
	    int n = open_close_pos - max_iters;
	    int an = n > 0 ? n : -n;
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` element = :ref:`getStructuringElement <doxid-d4/d86/group__imgproc__filter_1gac342a1bb6eabf6f55c803b09268e36dc>`(element_shape, :ref:`Size <doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(an*2+1, an*2+1), :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`(an, an) );
	    if( n < 0 )
	        :ref:`morphologyEx <doxid-d4/d86/group__imgproc__filter_1ga67493776e3ad1a3df63883829375201f>`(src, dst, :ref:`MORPH_OPEN <doxid-d4/d86/group__imgproc__filter_1gga7be549266bad7b2e6a04db49827f9f32a08d3cc3a2ace00cec488966d31fa29ea>`, element);
	    else
	        :ref:`morphologyEx <doxid-d4/d86/group__imgproc__filter_1ga67493776e3ad1a3df63883829375201f>`(src, dst, :ref:`MORPH_CLOSE <doxid-d4/d86/group__imgproc__filter_1gga7be549266bad7b2e6a04db49827f9f32a68c4b9c6144a30bcd52d1cdf39bb30e1>`, element);
	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Open/Close",dst);
	}
	
	// callback function for erode/dilate trackbar
	static void ErodeDilate(int, void*)
	{
	    int n = erode_dilate_pos - max_iters;
	    int an = n > 0 ? n : -n;
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` element = :ref:`getStructuringElement <doxid-d4/d86/group__imgproc__filter_1gac342a1bb6eabf6f55c803b09268e36dc>`(element_shape, :ref:`Size <doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(an*2+1, an*2+1), :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`(an, an) );
	    if( n < 0 )
	        :ref:`erode <doxid-d4/d86/group__imgproc__filter_1gaeb1e0c1033e3f6b891a25d0511362aeb>`(src, dst, element);
	    else
	        :ref:`dilate <doxid-d4/d86/group__imgproc__filter_1ga4ff0f3318642c4f469d0e11f242f3b6c>`(src, dst, element);
	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Erode/Dilate",dst);
	}
	
	
	int main( int argc, char** argv )
	{
	    :ref:`cv::CommandLineParser <doxid-da/dd8/classcv_1_1_command_line_parser>` parser(argc, argv, "{help h||}{ @image | ../data/baboon.jpg | }");
	    if (parser.has("help"))
	    {
	        help();
	        return 0;
	    }
	    std::string filename = parser.get<std::string>("@image");
	    if( (src = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`(filename,:ref:`IMREAD_COLOR <doxid-d4/da8/group__imgcodecs_1gga61d9b0126a3e57d9277ac48327799c80af660544735200cbe942eea09232eb822>`)).empty() )
	    {
	        help();
	        return -1;
	    }
	
	    //create windows for output images
	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Open/Close",1);
	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Erode/Dilate",1);
	
	    open_close_pos = erode_dilate_pos = max_iters;
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("iterations", "Open/Close",&open_close_pos,max_iters*2+1,OpenClose);
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("iterations", "Erode/Dilate",&erode_dilate_pos,max_iters*2+1,ErodeDilate);
	
	    for(;;)
	    {
	        OpenClose(open_close_pos, 0);
	        ErodeDilate(erode_dilate_pos, 0);
	        char c = (char):ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`(0);
	
	        if( c == 27 )
	            break;
	        if( c == 'e' )
	            element_shape = :ref:`MORPH_ELLIPSE <doxid-d4/d86/group__imgproc__filter_1ggac2db39b56866583a95a5680313c314ada33a3c67a61f349d21c507d05c53a755f>`;
	        else if( c == 'r' )
	            element_shape = :ref:`MORPH_RECT <doxid-d4/d86/group__imgproc__filter_1ggac2db39b56866583a95a5680313c314ada260c4cbde19a749726763c01a074c60f>`;
	        else if( c == 'c' )
	            element_shape = :ref:`MORPH_CROSS <doxid-d4/d86/group__imgproc__filter_1ggac2db39b56866583a95a5680313c314ada318435753d0b9f7faa241a658ec2e191>`;
	        else if( c == ' ' )
	            element_shape = (element_shape + 1) % 3;
	    }
	
	    return 0;
	}
