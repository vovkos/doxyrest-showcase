.. index:: pair: example; watershed.cpp
.. _doxid-d8/da9/watershed_8cpp-example:

watershed.cpp
=============

An example using the watershed algorithm

.. ref-code-block:: cpp

	#include <opencv2/core/utility.hpp>
	#include "opencv2/imgproc.hpp"
	#include "opencv2/imgcodecs.hpp"
	#include "opencv2/highgui.hpp"
	
	#include <cstdio>
	#include <iostream>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	
	static void help()
	{
	    cout << "\nThis program demonstrates the famous watershed segmentation algorithm in OpenCV: watershed()\n"
	            "Usage:\n"
	            "./watershed [image_name -- default is ../data/fruits.jpg]\n" << endl;
	
	
	    cout << "Hot keys: \n"
	        "\tESC - quit the program\n"
	        "\tr - restore the original image\n"
	        "\tw or SPACE - run watershed segmentation algorithm\n"
	        "\t\t(before running it, *roughly* mark the areas to segment on the image)\n"
	        "\t  (before that, roughly outline several markers on the image)\n";
	}
	:ref:`Mat <doxid-db/de6/classcv_1_1_mat>` markerMask, img;
	Point prevPt(-1, -1);
	
	static void onMouse( int event, int x, int y, int flags, void* )
	{
	    if( x < 0 || x >= img.:ref:`cols <doxid-db/de6/classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e>` || y < 0 || y >= img.:ref:`rows <doxid-db/de6/classcv_1_1_mat_1abed816466c45234254d25bc59c31245e>` )
	        return;
	    if( event == :ref:`EVENT_LBUTTONUP <doxid-d7/dfc/group__highgui_1gga927593befdddc7e7013602bca9b079b0a59cad7ffe959adf2782a110196d47bf6>` || !(flags & :ref:`EVENT_FLAG_LBUTTON <doxid-d7/dfc/group__highgui_1ggaab4dc057947f70058c80626c9f1c25cead9b7a4f148eeff7eca24609f7a64adb1>`) )
	        prevPt = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`(-1,-1);
	    else if( event == :ref:`EVENT_LBUTTONDOWN <doxid-d7/dfc/group__highgui_1gga927593befdddc7e7013602bca9b079b0ad3419100fc2d7688c6dbe3da030fbfd9>` )
	        prevPt = :ref:`Point <doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`(x,y);
	    else if( event == :ref:`EVENT_MOUSEMOVE <doxid-d7/dfc/group__highgui_1gga927593befdddc7e7013602bca9b079b0a8f2ec5fd35fe3f4b696518b146dcf675>` && (flags & EVENT_FLAG_LBUTTON) )
	    {
	        Point pt(x, y);
	        if( prevPt.x < 0 )
	            prevPt = pt;
	        :ref:`line <doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2>`( markerMask, prevPt, pt, :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255), 5, 8, 0 );
	        :ref:`line <doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2>`( img, prevPt, pt, :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255), 5, 8, 0 );
	        prevPt = pt;
	        :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("image", img);
	    }
	}
	
	int main( int argc, char** argv )
	{
	    :ref:`cv::CommandLineParser <doxid-da/dd8/classcv_1_1_command_line_parser>` parser(argc, argv, "{help h | | }{ @input | ../data/fruits.jpg | }");
	    if (parser.has("help"))
	    {
	        help();
	        return 0;
	    }
	    string filename = parser.get<string>("@input");
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` img0 = :ref:`imread <doxid-d4/da8/group__imgcodecs_1ga288b8b3da0892bd651fce07b3bbd3a56>`(filename, 1), imgGray;
	
	    if( img0.empty() )
	    {
	        cout << "Couldn'g open image " << filename << ". Usage: watershed <image_name>\n";
	        return 0;
	    }
	    help();
	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`( "image", 1 );
	
	    img0.copyTo(img);
	    :ref:`cvtColor <doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>`(img, markerMask, :ref:`COLOR_BGR2GRAY <doxid-d7/d1b/group__imgproc__misc_1gga4e0972be5de079fed4e3a10e24ef5ef0a353a4b8db9040165db4dacb5bcefb6ea>`);
	    :ref:`cvtColor <doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>`(markerMask, imgGray, :ref:`COLOR_GRAY2BGR <doxid-d7/d1b/group__imgproc__misc_1gga4e0972be5de079fed4e3a10e24ef5ef0a869da65c045477f2f17d39395df65b2d>`);
	    markerMask = :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(0);
	    :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`( "image", img );
	    :ref:`setMouseCallback <doxid-d7/dfc/group__highgui_1ga89e7806b0a616f6f1d502bd8c183ad3e>`( "image", onMouse, 0 );
	
	    for(;;)
	    {
	        char c = (char):ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`(0);
	
	        if( c == 27 )
	            break;
	
	        if( c == 'r' )
	        {
	            markerMask = :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(0);
	            img0.copyTo(img);
	            :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`( "image", img );
	        }
	
	        if( c == 'w' || c == ' ' )
	        {
	            int i, j, compCount = 0;
	            vector<vector<Point> > contours;
	            vector<Vec4i> hierarchy;
	
	            :ref:`findContours <doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`(markerMask, contours, hierarchy, :ref:`RETR_CCOMP <doxid-d3/dc0/group__imgproc__shape_1gga819779b9857cc2f8601e6526a3a5bc71a7d1d4b509fb2a9a8dc2f960357748752>`, :ref:`CHAIN_APPROX_SIMPLE <doxid-d3/dc0/group__imgproc__shape_1gga4303f45752694956374734a03c54d5ffa5f2883048e654999209f88ba04c302f5>`);
	
	            if( contours.empty() )
	                continue;
	            :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` markers(markerMask.:ref:`size <doxid-db/de6/classcv_1_1_mat_1a146f8e8dda07d1365a575ab83d9828d1>`(), :ref:`CV_32S <doxid-d1/d1b/group__core__hal__interface_1ga4067910fc388075c3ea3aa14393e83b9>`);
	            markers = :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(0);
	            int idx = 0;
	            for( ; idx >= 0; idx = hierarchy[idx][0], compCount++ )
	                :ref:`drawContours <doxid-d6/d6e/group__imgproc__draw_1ga746c0625f1781f1ffc9056259103edbc>`(markers, contours, idx, :ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(compCount+1), -1, 8, hierarchy, INT_MAX);
	
	            if( compCount == 0 )
	                continue;
	
	            vector<Vec3b> colorTab;
	            for( i = 0; i < compCount; i++ )
	            {
	                int b = :ref:`theRNG <doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>`().:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(0, 255);
	                int g = :ref:`theRNG <doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>`().:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(0, 255);
	                int r = :ref:`theRNG <doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>`().:ref:`uniform <doxid-d3/df8/classcv_1_1_r_n_g_1acde197860cea91e5aa896be8719457ae>`(0, 255);
	
	                colorTab.push_back(:ref:`Vec3b <doxid-dc/d84/group__core__basic_1ga7e6060c0b8d48459964df6e1eb524c03>`((:ref:`uchar <doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`)b, (:ref:`uchar <doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`)g, (:ref:`uchar <doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`)r));
	            }
	
	            double t = (double):ref:`getTickCount <doxid-db/de0/group__core__utils_1gae73f58000611a1af25dd36d496bf4487>`();
	            :ref:`watershed <doxid-d7/d1b/group__imgproc__misc_1ga3267243e4d3f95165d55a618c65ac6e1>`( img0, markers );
	            t = (double):ref:`getTickCount <doxid-db/de0/group__core__utils_1gae73f58000611a1af25dd36d496bf4487>`() - t;
	            printf( "execution time = %gms\n", t*1000./:ref:`getTickFrequency <doxid-db/de0/group__core__utils_1ga705441a9ef01f47acdc55d87fbe5090c>`() );
	
	            :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` wshed(markers.size(), :ref:`CV_8UC3 <doxid-d1/d1b/group__core__hal__interface_1ga88c4cd9de76f678f33928ef1e3f96047>`);
	
	            // paint the watershed image
	            for( i = 0; i < markers.rows; i++ )
	                for( j = 0; j < markers.cols; j++ )
	                {
	                    int index = markers.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<int>(i,j);
	                    if( index == -1 )
	                        wshed.at<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(i,j) = :ref:`Vec3b <doxid-dc/d84/group__core__basic_1ga7e6060c0b8d48459964df6e1eb524c03>`(255,255,255);
	                    else if( index <= 0 || index > compCount )
	                        wshed.at<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(i,j) = :ref:`Vec3b <doxid-dc/d84/group__core__basic_1ga7e6060c0b8d48459964df6e1eb524c03>`(0,0,0);
	                    else
	                        wshed.at<:ref:`Vec3b <doxid-db/d93/classcv_1_1_vec>`>(i,j) = colorTab[index - 1];
	                }
	
	            wshed = wshed*0.5 + imgGray*0.5;
	            :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`( "watershed transform", wshed );
	        }
	    }
	
	    return 0;
	}
