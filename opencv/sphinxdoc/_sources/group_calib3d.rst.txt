.. index:: pair: group; Camera Calibration and 3D Reconstruction
.. _doxid-d9/d0c/group__calib3d:

Camera Calibration and 3D Reconstruction
========================================

.. toctree::
	:hidden:

	group_calib3d_c.rst
	group_calib3d_fisheye.rst
	struct_cv_CirclesGridFinderParameters.rst
	class_cv_StereoBM.rst
	class_cv_StereoMatcher.rst
	class_cv_StereoSGBM.rst

Overview
~~~~~~~~

The functions in this section use a so-called pinhole camera model. :ref:`More...<details-d9/d0c/group__calib3d>`

|	:ref:`C API<doxid-d5/db8/group__calib3d__c>`
|	:ref:`Fisheye camera model<doxid-db/d58/group__calib3d__fisheye>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum
	{
	    :ref:`cv::@142::LMEDS<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2dae59a3f6677ddd05b96a298a6c24fcbe6>`  = 4,
	    :ref:`cv::@142::RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>` = 8,
	    :ref:`cv::@142::RHO<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da6bba1f5405e6fcc199a6265d9b146359>`    = 16,
	};

	enum
	{
	    :target:`cv::@143::SOLVEPNP_ITERATIVE<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a9f589872a7f7d687dc58294e01ea33a5>` = 0,
	    :ref:`cv::@143::SOLVEPNP_EPNP<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9ae25763f5155defc67ef0f68b74d6c074>`      = 1,
	    :ref:`cv::@143::SOLVEPNP_P3P<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9af33a85ca698777ff9bd1de916bf5959a>`       = 2,
	    :ref:`cv::@143::SOLVEPNP_DLS<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9aa51f13248282b8778003b9a4cf8ac07e>`       = 3,
	    :ref:`cv::@143::SOLVEPNP_UPNP<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a2859c9ce1430662096d3cc3b5462847f>`      = 4,
	    :ref:`cv::@143::SOLVEPNP_AP3P<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a8d48dece2da6492d91fa2de0a04679f9>`      = 5,
	};

	enum
	{
	    :target:`cv::@144::CALIB_CB_ADAPTIVE_THRESH<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64ba9e296b20df217b62e581c56ad9359db5>` = 1,
	    :target:`cv::@144::CALIB_CB_NORMALIZE_IMAGE<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64baf54c37b53d4375f95e9b1a3d9846c97a>` = 2,
	    :target:`cv::@144::CALIB_CB_FILTER_QUADS<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64baa3481a374c81f6996c3c897fcf5b9b39>`    = 4,
	    :target:`cv::@144::CALIB_CB_FAST_CHECK<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64ba5b5ef5178c5c5d50cc15719aecc5fd25>`      = 8,
	};

	enum
	{
	    :target:`cv::@145::CALIB_CB_SYMMETRIC_GRID<doxid-d9/d0c/group__calib3d_1gga7041b2a9c8f9f8ee93a2796981bc5546a0f3929cc92e83ddce51ed008668db33a>`  = 1,
	    :target:`cv::@145::CALIB_CB_ASYMMETRIC_GRID<doxid-d9/d0c/group__calib3d_1gga7041b2a9c8f9f8ee93a2796981bc5546a2ef9eceaffccf6a70aea8cd9006bd235>` = 2,
	    :target:`cv::@145::CALIB_CB_CLUSTERING<doxid-d9/d0c/group__calib3d_1gga7041b2a9c8f9f8ee93a2796981bc5546ad85eb1e4aff97e844098e03e39efd744>`      = 4,
	};

	enum
	{
	    :target:`cv::@146::CALIB_USE_INTRINSIC_GUESS<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa6eedf3c8312d4b29edfe0a434722e2ef>` = 0x00001,
	    :target:`cv::@146::CALIB_FIX_ASPECT_RATIO<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa131c3576ad5c96991adea3a133b6ce65>`    = 0x00002,
	    :target:`cv::@146::CALIB_FIX_PRINCIPAL_POINT<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa564091bdcc5ab14785f185e16430ff62>` = 0x00004,
	    :target:`cv::@146::CALIB_ZERO_TANGENT_DIST<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa769b5792d4e9c4ae073eaf317aec73ef>`   = 0x00008,
	    :target:`cv::@146::CALIB_FIX_FOCAL_LENGTH<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa72b96c0777e60eda049e938b90c03e89>`    = 0x00010,
	    :target:`cv::@146::CALIB_FIX_K1<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aab4ac5ea2d2f2636ca8a384a5b717dd35>`              = 0x00020,
	    :target:`cv::@146::CALIB_FIX_K2<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa78351bf220ecb6e910e446e6cac3c1d6>`              = 0x00040,
	    :target:`cv::@146::CALIB_FIX_K3<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa5b447f4987f8a689cf7c618965a7a5a4>`              = 0x00080,
	    :target:`cv::@146::CALIB_FIX_K4<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aaeb20ea94650da0e7d429be719edf19b1>`              = 0x00800,
	    :target:`cv::@146::CALIB_FIX_K5<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa5e080a1f6b8e545196c2c2e874dce6ac>`              = 0x01000,
	    :target:`cv::@146::CALIB_FIX_K6<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa7d57502505ca433b25116aebadf33088>`              = 0x02000,
	    :target:`cv::@146::CALIB_RATIONAL_MODEL<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa204766e24f2e413e7a7c9f8b9e93f16c>`      = 0x04000,
	    :target:`cv::@146::CALIB_THIN_PRISM_MODEL<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aaa4ae44ce7bb854eabac902587af4dbe7>`    = 0x08000,
	    :target:`cv::@146::CALIB_FIX_S1_S2_S3_S4<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aac148a479e5098f8ebfa49343a247280a>`     = 0x10000,
	    :target:`cv::@146::CALIB_TILTED_MODEL<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aac87f64a9ebe7c605bc8e4dd6e355528d>`        = 0x40000,
	    :target:`cv::@146::CALIB_FIX_TAUX_TAUY<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa2c39f08cc098e2a79b13dfbad4e59317>`       = 0x80000,
	    :ref:`cv::@146::CALIB_USE_QR<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa6ee40ef8d871782b8d966eaf9ad29763>`              = 0x100000,
	    :target:`cv::@146::CALIB_FIX_INTRINSIC<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa51df9c05343c61ddb18324ded0fab86a>`       = 0x00100,
	    :target:`cv::@146::CALIB_SAME_FOCAL_LENGTH<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa53709cea2e0d6129e99606fe3d27385e>`   = 0x00200,
	    :target:`cv::@146::CALIB_ZERO_DISPARITY<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aae49985db1f4453c5dda1d701a3d8dd76>`      = 0x00400,
	    :ref:`cv::@146::CALIB_USE_LU<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa5c59485f1b5391cb3d7b2bfb1b7079a7>`              = (1 <<17),
	};

	enum
	{
	    :ref:`cv::@147::FM_7POINT<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746a8ccd232f3e7691efae984c76bb99e047>` = 1,
	    :ref:`cv::@147::FM_8POINT<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746a3960f8c87052a64c3297704db34aaedf>` = 2,
	    :ref:`cv::@147::FM_LMEDS<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746a8a81ff35b40a5de086bc91dbc1ef8bba>`  = 4,
	    :ref:`cv::@147::FM_RANSAC<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746aeb30cc6b8fc94600bc04f16c14644fdd>` = 8,
	};

	// structs

	struct :ref:`cv::CirclesGridFinderParameters<doxid-db/d1f/structcv_1_1_circles_grid_finder_parameters>`;

	// classes

	class :ref:`cv::StereoBM<doxid-d1/db9/classcv_1_1_stereo_b_m>`;
	class :ref:`cv::StereoMatcher<doxid-dd/ddc/classcv_1_1_stereo_matcher>`;
	class :ref:`cv::StereoSGBM<doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>`;

	// global functions

	double
	:ref:`cv::calibrateCamera<doxid-d9/d0c/group__calib3d_1ga3207604e4b1a1758aa66acb6ed5aa65d>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` rvecs,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` tvecs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stdDeviationsIntrinsics,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stdDeviationsExtrinsics,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` perViewErrors,
		int flags = 0,
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` criteria = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::COUNT<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57aeb9da694ea67b3ef7d524521b580867d>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 30, DBL_EPSILON)
		);

	double
	:target:`cv::calibrateCamera<doxid-d9/d0c/group__calib3d_1ga687a1ab946686f0d85ae0363b5af1d7b>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` rvecs,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` tvecs,
		int flags = 0,
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` criteria = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::COUNT<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57aeb9da694ea67b3ef7d524521b580867d>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 30, DBL_EPSILON)
		);

	void
	:ref:`cv::calibrationMatrixValues<doxid-d9/d0c/group__calib3d_1ga87955f4330d5c20e392b265b7f92f691>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		double apertureWidth,
		double apertureHeight,
		double& fovx,
		double& fovy,
		double& focalLength,
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`& principalPoint,
		double& aspectRatio
		);

	void
	:ref:`cv::composeRT<doxid-d9/d0c/group__calib3d_1ga044b03d81f99370db05c52c3d0b46599>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rvec1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` tvec1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rvec2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` tvec2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rvec3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tvec3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dr1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dt1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dr2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dt2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dr1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dt1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dr2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dt2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::computeCorrespondEpilines<doxid-d9/d0c/group__calib3d_1ga19e3401c94c44b47c229be6e51d158b7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		int whichImage,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` lines
		);

	void
	:ref:`cv::convertPointsFromHomogeneous<doxid-d9/d0c/group__calib3d_1gac42edda3a3a0f717979589fcd6ac0035>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::convertPointsHomogeneous<doxid-d9/d0c/group__calib3d_1gafa5aa3f40a472bda956b4c27bec67438>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::convertPointsToHomogeneous<doxid-d9/d0c/group__calib3d_1ga13159f129eec8a7d9bd8501f012d5543>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::correctMatches<doxid-d9/d0c/group__calib3d_1gaf32c99d17908e175ac71e7a08fad587b>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` newPoints1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` newPoints2
		);

	void
	:ref:`cv::decomposeEssentialMat<doxid-d9/d0c/group__calib3d_1ga54a2f5b3f8aeaf6c76d4a31dece85d5d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t
		);

	int
	:ref:`cv::decomposeHomographyMat<doxid-d9/d0c/group__calib3d_1ga7f60bdff78833d1e3fd6d9d0fd538d92>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` H,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` K,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` rotations,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` translations,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` normals
		);

	void
	:ref:`cv::decomposeProjectionMatrix<doxid-d9/d0c/group__calib3d_1gaaae5a7899faa1ffdf268cd9088940248>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` cameraMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` transVect,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrixX = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrixY = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrixZ = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eulerAngles = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::drawChessboardCorners<doxid-d9/d0c/group__calib3d_1ga6a10b0bb120c4907e5eabbcd22319022>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` corners,
		bool patternWasFound
		);

	:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::estimateAffine2D<doxid-d9/d0c/group__calib3d_1ga27865b1d26bac9ce91efaee83e94d4dd>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` from,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` to,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double ransacReprojThreshold = 3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` maxIters = 2000,
		double confidence = 0.99,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` refineIters = 10
		);

	int
	:ref:`cv::estimateAffine3D<doxid-d9/d0c/group__calib3d_1ga396afb6411b30770e56ab69548724715>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` dst,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` out,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers,
		double ransacThreshold = 3,
		double confidence = 0.99
		);

	:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::estimateAffinePartial2D<doxid-d9/d0c/group__calib3d_1gad767faff73e9cbd8b9d92b955b50062d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` from,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` to,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double ransacReprojThreshold = 3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` maxIters = 2000,
		double confidence = 0.99,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` refineIters = 10
		);

	void
	:ref:`cv::filterSpeckles<doxid-d9/d0c/group__calib3d_1gabe331f205a6dd7a9aa5db8a38157d25b>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		double newVal,
		int maxSpeckleSize,
		double maxDiff,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` buf = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	bool
	:ref:`cv::find4QuadCornerSubpix<doxid-d9/d0c/group__calib3d_1gab8816c8a176e1d78893b843b3f01557a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` img,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` corners,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` region_size
		);

	bool
	:ref:`cv::findChessboardCorners<doxid-d9/d0c/group__calib3d_1ga93efa9b0aa890de240ca32b11253dd4a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` corners,
		int flags = :ref:`CALIB_CB_ADAPTIVE_THRESH<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64ba9e296b20df217b62e581c56ad9359db5>`+:ref:`CALIB_CB_NORMALIZE_IMAGE<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64baf54c37b53d4375f95e9b1a3d9846c97a>`
		);

	bool
	:ref:`cv::findCirclesGrid<doxid-d9/d0c/group__calib3d_1gad1205c4b803a21597c7d6035f5efd775>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centers,
		int flags,
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`FeatureDetector<doxid-da/d9b/group__features2d_1ga15e1361bda978d83a2bea629b32dfd3c>`>& blobDetector,
		:ref:`CirclesGridFinderParameters<doxid-db/d1f/structcv_1_1_circles_grid_finder_parameters>` parameters
		);

	bool
	:ref:`cv::findCirclesGrid<doxid-d9/d0c/group__calib3d_1gac8fb88c7652a7699743aeb6073ef9b4a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centers,
		int flags = :ref:`CALIB_CB_SYMMETRIC_GRID<doxid-d9/d0c/group__calib3d_1gga7041b2a9c8f9f8ee93a2796981bc5546a0f3929cc92e83ddce51ed008668db33a>`,
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`FeatureDetector<doxid-da/d9b/group__features2d_1ga15e1361bda978d83a2bea629b32dfd3c>`>& blobDetector = :ref:`SimpleBlobDetector::create<doxid-df/d17/classcv_1_1_simple_blob_detector_1a1d7a06c8b8749207a978e42cd8d0cdf6>`()
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::findEssentialMat<doxid-d9/d0c/group__calib3d_1ga13f7e34de8fa516a686a56af1196247f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double prob = 0.999,
		double threshold = 1.0,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::findEssentialMat<doxid-d9/d0c/group__calib3d_1ga0c86f6478f36d5be6e450751bbf4fec0>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		double focal = 1.0,
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>` pp = :ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`(0, 0),
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double prob = 0.999,
		double threshold = 1.0,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::findFundamentalMat<doxid-d9/d0c/group__calib3d_1ga30ccb52f4e726daa039fd5cb5bf0822b>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		int method = :ref:`FM_RANSAC<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746aeb30cc6b8fc94600bc04f16c14644fdd>`,
		double param1 = 3.,
		double param2 = 0.99,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::findFundamentalMat<doxid-d9/d0c/group__calib3d_1ga8e25cb8c64d8baa4749ca28ff1b0866a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask,
		int method = :ref:`FM_RANSAC<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746aeb30cc6b8fc94600bc04f16c14644fdd>`,
		double param1 = 3.,
		double param2 = 0.99
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::findHomography<doxid-d9/d0c/group__calib3d_1ga4abc2ece9fab9398f2e560d53c8c9780>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` srcPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` dstPoints,
		int method = 0,
		double ransacReprojThreshold = 3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		const int maxIters = 2000,
		const double confidence = 0.995
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::findHomography<doxid-d9/d0c/group__calib3d_1gafd3ef89257e27d5235f4467cbb1b6a63>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` srcPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` dstPoints,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask,
		int method = 0,
		double ransacReprojThreshold = 3
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::getOptimalNewCameraMatrix<doxid-d9/d0c/group__calib3d_1ga7a6c4e032c97f03ba747966e6ad862b1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		double alpha,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` newImgSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* validPixROI = 0,
		bool centerPrincipalPoint = false
		);

	:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`
	:ref:`cv::getValidDisparityROI<doxid-d9/d0c/group__calib3d_1ga878ab147024a58af9488fa688a3bea0b>`(
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` roi1,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` roi2,
		int minDisparity,
		int numberOfDisparities,
		int SADWindowSize
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::initCameraMatrix2D<doxid-d9/d0c/group__calib3d_1ga8132c7dbbb61738cc3510bebbdffde55>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		double aspectRatio = 1.0
		);

	void
	:ref:`cv::matMulDeriv<doxid-d9/d0c/group__calib3d_1ga905541c1275852eabff7dbdfbc10d160>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` A,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` B,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dABdA,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dABdB
		);

	void
	:ref:`cv::projectPoints<doxid-d9/d0c/group__calib3d_1ga1019495a2c8d1743ed5cc23fa0daff8c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` objectPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rvec,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` tvec,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` imagePoints,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` jacobian = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		double aspectRatio = 0
		);

	int
	:ref:`cv::recoverPose<doxid-d9/d0c/group__calib3d_1gadb7d2dfcc184c1d2f496d8639f4371c0>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	int
	:ref:`cv::recoverPose<doxid-d9/d0c/group__calib3d_1ga40919d0c7eaf77b0df67dd76d5d24fa1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t,
		double focal = 1.0,
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>` pp = :ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`(0, 0),
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	int
	:ref:`cv::recoverPose<doxid-d9/d0c/group__calib3d_1ga2ee9f187170acece29c5172c2175e7ae>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t,
		double distanceThresh,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` triangulatedPoints = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	float
	:ref:`cv::rectify3Collinear<doxid-d9/d0c/group__calib3d_1gabd5437becb62abc0fe951c532a94b655>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix3,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs3,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imgpt1,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imgpt3,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` R12,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` T12,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` R13,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` T13,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Q,
		double alpha,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` newImgSize,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* roi1,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* roi2,
		int flags
		);

	void
	:ref:`cv::reprojectImageTo3D<doxid-d9/d0c/group__calib3d_1ga1bc1152bd57d63bc524204f21fde6e02>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` disparity,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` _3dImage,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` Q,
		bool handleMissingValues = false,
		int ddepth = -1
		);

	void
	:ref:`cv::Rodrigues<doxid-d9/d0c/group__calib3d_1ga61585db663d9da06b68e70cfbf6a1eac>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` jacobian = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	:ref:`Vec3d<doxid-dc/d84/group__core__basic_1ga370d94209693b5b13437ab4991cabf73>`
	:ref:`cv::RQDecomp3x3<doxid-d9/d0c/group__calib3d_1ga1aaacb6224ec7b99d34866f8f9baac83>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mtxR,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mtxQ,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Qx = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Qy = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Qz = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	double
	:ref:`cv::sampsonDistance<doxid-d9/d0c/group__calib3d_1gacbba2ee98258ca81d352a31faa15a021>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` pt1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` pt2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F
		);

	bool
	:ref:`cv::solvePnP<doxid-d9/d0c/group__calib3d_1ga549c2075fac14829ff4a58bc931c033d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` objectPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` imagePoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rvec,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tvec,
		bool useExtrinsicGuess = false,
		int flags = :ref:`SOLVEPNP_ITERATIVE<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a9f589872a7f7d687dc58294e01ea33a5>`
		);

	bool
	:ref:`cv::solvePnPRansac<doxid-d9/d0c/group__calib3d_1ga50620f0e26e02caa2e9adc07b5fbf24e>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` objectPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` imagePoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rvec,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tvec,
		bool useExtrinsicGuess = false,
		int iterationsCount = 100,
		float reprojectionError = 8.0,
		double confidence = 0.99,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int flags = :ref:`SOLVEPNP_ITERATIVE<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a9f589872a7f7d687dc58294e01ea33a5>`
		);

	double
	:ref:`cv::stereoCalibrate<doxid-d9/d0c/group__calib3d_1ga246253dcc6de2e0376c599e7d692303a>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints1,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints2,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix1,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs1,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix2,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs2,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` T,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` E,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` F,
		int flags = :ref:`CALIB_FIX_INTRINSIC<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa51df9c05343c61ddb18324ded0fab86a>`,
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` criteria = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::COUNT<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57aeb9da694ea67b3ef7d524521b580867d>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 30, 1e-6)
		);

	void
	:ref:`cv::stereoRectify<doxid-d9/d0c/group__calib3d_1ga617b1685d4059c6040827800e72ad2b6>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs2,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` R,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` T,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Q,
		int flags = :ref:`CALIB_ZERO_DISPARITY<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aae49985db1f4453c5dda1d701a3d8dd76>`,
		double alpha = -1,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` newImageSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* validPixROI1 = 0,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* validPixROI2 = 0
		);

	bool
	:ref:`cv::stereoRectifyUncalibrated<doxid-d9/d0c/group__calib3d_1gaadc5b14471ddc004939471339294f052>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imgSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` H1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` H2,
		double threshold = 5
		);

	void
	:ref:`cv::triangulatePoints<doxid-d9/d0c/group__calib3d_1gad3fc9a0c82b08df034234979960b778c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projMatr1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projMatr2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projPoints1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projPoints2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` points4D
		);

	void
	:ref:`cv::validateDisparity<doxid-d9/d0c/group__calib3d_1ga214b498b8d01d0417e0d08be64c54eb5>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` disparity,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cost,
		int minDisparity,
		int numberOfDisparities,
		int disp12MaxDisp = 1
		);

.. _details-d9/d0c/group__calib3d:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The functions in this section use a so-called pinhole camera model. In this model, a scene view is formed by projecting 3D points into the image plane using a perspective transformation.

.. math::

	s \; m' = A [R|t] M'

or

.. math::

	s \vecthree{u}{v}{1} = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1} \begin{bmatrix} r_{11} & r_{12} & r_{13} & t_1 \\ r_{21} & r_{22} & r_{23} & t_2 \\ r_{31} & r_{32} & r_{33} & t_3 \end{bmatrix} \begin{bmatrix} X \\ Y \\ Z \\ 1 \end{bmatrix}

where:

* :math:`(X, Y, Z)` are the coordinates of a 3D point in the world coordinate space

* :math:`(u, v)` are the coordinates of the projection point in pixels

* :math:`A` is a camera matrix, or a matrix of intrinsic parameters

* :math:`(cx, cy)` is a principal point that is usually at the image center

* :math:`fx, fy` are the focal lengths expressed in pixel units.

Thus, if an image from the camera is scaled by a factor, all of these parameters should be scaled (multiplied/divided, respectively) by the same factor. The matrix of intrinsic parameters does not depend on the scene viewed. So, once estimated, it can be re-used as long as the focal length is fixed (in case of zoom lens). The joint rotation-translation matrix :math:`[R|t]` is called a matrix of extrinsic parameters. It is used to describe the camera motion around a static scene, or vice versa, rigid motion of an object in front of a still camera. That is, :math:`[R|t]` translates coordinates of a point :math:`(X, Y, Z)` to a coordinate system, fixed with respect to the camera. The transformation above is equivalent to the following (when :math:`z \ne 0`):

.. math::

	\begin{array}{l} \vecthree{x}{y}{z} = R \vecthree{X}{Y}{Z} + t \\ x' = x/z \\ y' = y/z \\ u = f_x*x' + c_x \\ v = f_y*y' + c_y \end{array}

The following figure illustrates the pinhole camera model.

.. image:: pinhole_camera_model.png
	:alt: Pinhole camera model

Real lenses usually have some distortion, mostly radial distortion and slight tangential distortion. So, the above model is extended as:

.. math::

	\begin{array}{l} \vecthree{x}{y}{z} = R \vecthree{X}{Y}{Z} + t \\ x' = x/z \\ y' = y/z \\ x'' = x' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + 2 p_1 x' y' + p_2(r^2 + 2 x'^2) + s_1 r^2 + s_2 r^4 \\ y'' = y' \frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6} + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\ \text{where} \quad r^2 = x'^2 + y'^2 \\ u = f_x*x'' + c_x \\ v = f_y*y'' + c_y \end{array}

:math:`k_1`, :math:`k_2`, :math:`k_3`, :math:`k_4`, :math:`k_5`, and :math:`k_6` are radial distortion coefficients. :math:`p_1` and :math:`p_2` are tangential distortion coefficients. :math:`s_1`, :math:`s_2`, :math:`s_3`, and :math:`s_4`, are the thin prism distortion coefficients. Higher-order coefficients are not considered in OpenCV.

The next figure shows two common types of radial distortion: barrel distortion (typically :math:`k_1 > 0` and pincushion distortion (typically :math:`k_1 < 0`).

.. image:: distortion_examples.png

In some cases the image sensor may be tilted in order to focus an oblique plane in front of the camera (Scheimpfug condition). This can be useful for particle image velocimetry (PIV) or triangulation with a laser fan. The tilt causes a perspective distortion of :math:`x''` and :math:`y''`. This distortion can be modelled in the following way, see e.g. :ref:`[50] <doxid-d0/de3/citelist_1CITEREF_Louhichi07>`.

.. math::

	\begin{array}{l} s\vecthree{x'''}{y'''}{1} = \vecthreethree{R_{33}(\tau_x, \tau_y)}{0}{-R_{13}(\tau_x, \tau_y)} {0}{R_{33}(\tau_x, \tau_y)}{-R_{23}(\tau_x, \tau_y)} {0}{0}{1} R(\tau_x, \tau_y) \vecthree{x''}{y''}{1}\\ u = f_x*x''' + c_x \\ v = f_y*y''' + c_y \end{array}

where the matrix :math:`R(\tau_x, \tau_y)` is defined by two rotations with angular parameter :math:`\tau_x` and :math:`\tau_y`, respectively,

.. math::

	R(\tau_x, \tau_y) = \vecthreethree{\cos(\tau_y)}{0}{-\sin(\tau_y)}{0}{1}{0}{\sin(\tau_y)}{0}{\cos(\tau_y)} \vecthreethree{1}{0}{0}{0}{\cos(\tau_x)}{\sin(\tau_x)}{0}{-\sin(\tau_x)}{\cos(\tau_x)} = \vecthreethree{\cos(\tau_y)}{\sin(\tau_y)\sin(\tau_x)}{-\sin(\tau_y)\cos(\tau_x)} {0}{\cos(\tau_x)}{\sin(\tau_x)} {\sin(\tau_y)}{-\cos(\tau_y)\sin(\tau_x)}{\cos(\tau_y)\cos(\tau_x)}.

In the functions below the coefficients are passed or returned as

.. math::

	(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])

vector. That is, if the vector contains four elements, it means that :math:`k_3=0`. The distortion coefficients do not depend on the scene viewed. Thus, they also belong to the intrinsic camera parameters. And they remain the same regardless of the captured image resolution. If, for example, a camera has been calibrated on images of 320 x 240 resolution, absolutely the same distortion coefficients can be used for 640 x 480 images from the same camera while :math:`f_x`, :math:`f_y`, :math:`c_x`, and :math:`c_y` need to be scaled appropriately.

The functions below use the above model to do the following:

* Project 3D points to the image plane given intrinsic and extrinsic parameters.

* Compute extrinsic parameters given intrinsic parameters, a few 3D points, and their projections.

* Estimate intrinsic and extrinsic camera parameters from several views of a known calibration pattern (every view is described by several 3D-2D point correspondences).

* Estimate the relative position and orientation of the stereo camera "heads" and compute the rectification\* transformation that makes the camera optical axes parallel.

* A calibration sample for 3 cameras in horizontal position can be found at opencv_source_code/samples/cpp/3calibration.cpp
  
  * A calibration sample based on a sequence of images can be found at opencv_source_code/samples/cpp/calibration.cpp
  
  * A calibration sample in order to do 3D reconstruction can be found at opencv_source_code/samples/cpp/build3dmodel.cpp
  
  * A calibration sample of an artificially generated camera and chessboard patterns can be found at opencv_source_code/samples/cpp/calibration_artificial.cpp
  
  * A calibration example on stereo calibration can be found at opencv_source_code/samples/cpp/stereo_calib.cpp
  
  * A calibration example on stereo matching can be found at opencv_source_code/samples/cpp/stereo_match.cpp
  
  * (Python) A camera calibration sample can be found at opencv_source_code/samples/python/calibrate.py

Enum Values
-----------

.. index:: pair: enumvalue; LMEDS
.. _doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2dae59a3f6677ddd05b96a298a6c24fcbe6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	LMEDS

least-median algorithm

.. index:: pair: enumvalue; RANSAC
.. _doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	RANSAC

RANSAC algorithm.

.. index:: pair: enumvalue; RHO
.. _doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da6bba1f5405e6fcc199a6265d9b146359:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	RHO

RHO algorithm.

.. index:: pair: enumvalue; SOLVEPNP_EPNP
.. _doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9ae25763f5155defc67ef0f68b74d6c074:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SOLVEPNP_EPNP

EPnP: Efficient Perspective-n-Point Camera Pose Estimation :ref:`[45] <doxid-d0/de3/citelist_1CITEREF_lepetit2009epnp>`.

.. index:: pair: enumvalue; SOLVEPNP_P3P
.. _doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9af33a85ca698777ff9bd1de916bf5959a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SOLVEPNP_P3P

Complete Solution Classification for the Perspective-Three-Point Problem :ref:`[30] <doxid-d0/de3/citelist_1CITEREF_gao2003complete>`.

.. index:: pair: enumvalue; SOLVEPNP_DLS
.. _doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9aa51f13248282b8778003b9a4cf8ac07e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SOLVEPNP_DLS

A Direct Least-Squares (DLS) Method for PnP :ref:`[38] <doxid-d0/de3/citelist_1CITEREF_hesch2011direct>`.

.. index:: pair: enumvalue; SOLVEPNP_UPNP
.. _doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a2859c9ce1430662096d3cc3b5462847f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SOLVEPNP_UPNP

Exhaustive Linearization for Robust Camera Pose and Focal Length Estimation :ref:`[65] <doxid-d0/de3/citelist_1CITEREF_penate2013exhaustive>`.

.. index:: pair: enumvalue; SOLVEPNP_AP3P
.. _doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a8d48dece2da6492d91fa2de0a04679f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SOLVEPNP_AP3P

An Efficient Algebraic Solution to the Perspective-Three-Point Problem :ref:`[42] <doxid-d0/de3/citelist_1CITEREF_Ke17>`.

.. index:: pair: enumvalue; CALIB_USE_QR
.. _doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa6ee40ef8d871782b8d966eaf9ad29763:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CALIB_USE_QR

use QR instead of :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` decomposition for solving. Faster but potentially less precise

.. index:: pair: enumvalue; CALIB_USE_LU
.. _doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa5c59485f1b5391cb3d7b2bfb1b7079a7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CALIB_USE_LU

use LU instead of :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` decomposition for solving. much faster but potentially less precise

.. index:: pair: enumvalue; FM_7POINT
.. _doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746a8ccd232f3e7691efae984c76bb99e047:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	FM_7POINT

7-point algorithm

.. index:: pair: enumvalue; FM_8POINT
.. _doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746a3960f8c87052a64c3297704db34aaedf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	FM_8POINT

8-point algorithm

.. index:: pair: enumvalue; FM_LMEDS
.. _doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746a8a81ff35b40a5de086bc91dbc1ef8bba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	FM_LMEDS

least-median algorithm

.. index:: pair: enumvalue; FM_RANSAC
.. _doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746aeb30cc6b8fc94600bc04f16c14644fdd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	FM_RANSAC

RANSAC algorithm.

Global Functions
----------------

.. index:: pair: function; calibrateCamera
.. _doxid-d9/d0c/group__calib3d_1ga3207604e4b1a1758aa66acb6ed5aa65d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::calibrateCamera(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` rvecs,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` tvecs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stdDeviationsIntrinsics,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stdDeviationsExtrinsics,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` perViewErrors,
		int flags = 0,
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` criteria = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::COUNT<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57aeb9da694ea67b3ef7d524521b580867d>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 30, DBL_EPSILON)
		)

Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.

The function estimates the intrinsic camera parameters and extrinsic parameters for each of the views. The algorithm is based on :ref:`[96] <doxid-d0/de3/citelist_1CITEREF_Zhang2000>` and :ref:`[8] <doxid-d0/de3/citelist_1CITEREF_BouguetMCT>`. The coordinates of 3D object points and their corresponding 2D projections in each view must be specified. That may be achieved by using an object with a known geometry and easily detectable feature points. Such an object is called a calibration rig or calibration pattern, and OpenCV has built-in support for a chessboard as a calibration rig (see findChessboardCorners ). Currently, initialization of intrinsic parameters (when CALIB_USE_INTRINSIC_GUESS is not set) is only implemented for planar calibration patterns (where Z-coordinates of the object points must be all zeros). 3D calibration rigs can also be used as long as initial cameraMatrix is provided.

The algorithm performs the following steps:

* Compute the initial intrinsic parameters (the option only available for planar calibration patterns) or read them from the input parameters. The distortion coefficients are all set to zeros initially unless some of CALIB_FIX_K? are specified.

* Estimate the initial camera pose as if the intrinsic parameters have been already known. This is done using solvePnP .

* Run the global Levenberg-Marquardt optimization algorithm to minimize the reprojection error, that is, the total sum of squared distances between the observed feature points imagePoints and the projected (using the current estimates for camera parameters and the poses) object points objectPoints. See projectPoints for details.

If you use a non-square (=non-NxN) grid and findChessboardCorners for calibration, and calibrateCamera returns bad values (zero distortion coefficients, an image center very far from (w/2-0.5,h/2-0.5), and/or large differences between :math:`f_x` and :math:`f_y` (ratios of 10:1 or more)), then you have probably used patternSize=cvSize(rows,cols) instead of using patternSize=cvSize(cols,rows) in findChessboardCorners .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- objectPoints

		- In the new interface it is a vector of vectors of calibration pattern points in the calibration pattern coordinate space (e.g. std::vector<std::vector<cv::Vec3f>>). The outer vector contains as many elements as the number of the pattern views. If the same calibration pattern is shown in each view and it is fully visible, all the vectors will be the same. Although, it is possible to use partially occluded patterns, or even different patterns in different views. Then, the vectors will be different. The points are 3D, but since they are in a pattern coordinate system, then, if the rig is planar, it may make sense to put the model to a XY coordinate plane so that Z-coordinate of each input object point is 0. In the old interface all the vectors of object points from different views are concatenated together.

	*
		- imagePoints

		- In the new interface it is a vector of vectors of the projections of calibration pattern points (e.g. std::vector<std::vector<cv::Vec2f>>). imagePoints.size() and objectPoints.size() and imagePoints[i].size() must be equal to objectPoints[i].size() for each i. In the old interface all the vectors of object points from different views are concatenated together.

	*
		- imageSize

		- Size of the image used only to initialize the intrinsic camera matrix.

	*
		- cameraMatrix

		- Output 3x3 floating-point camera matrix :math:`A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}`. If CV_CALIB_USE_INTRINSIC_GUESS and/or CALIB_FIX_ASPECT_RATIO are specified, some or all of fx, fy, cx, cy must be initialized before calling the function.

	*
		- distCoeffs

		- Output vector of distortion coefficients :math:`(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])` of 4, 5, 8, 12 or 14 elements.

	*
		- rvecs

		- Output vector of rotation vectors (see Rodrigues ) estimated for each pattern view (e.g. std::vector<cv::Mat>>). That is, each k-th rotation vector together with the corresponding k-th translation vector (see the next output parameter description) brings the calibration pattern from the model coordinate space (in which object points are specified) to the world coordinate space, that is, a real position of the calibration pattern in the k-th pattern view (k=0.. *M* -1).

	*
		- tvecs

		- Output vector of translation vectors estimated for each pattern view.

	*
		- stdDeviationsIntrinsics

		- Output vector of standard deviations estimated for intrinsic parameters. Order of deviations values: :math:`(f_x, f_y, c_x, c_y, k_1, k_2, p_1, p_2, k_3, k_4, k_5, k_6 , s_1, s_2, s_3, s_4, \tau_x, \tau_y)` If one of parameters is not estimated, it's deviation is equals to zero.

	*
		- stdDeviationsExtrinsics

		- Output vector of standard deviations estimated for extrinsic parameters. Order of deviations values: :math:`(R_1, T_1, \dotsc , R_M, T_M)` where M is number of pattern views, :math:`R_i, T_i` are concatenated 1x3 vectors.

	*
		- perViewErrors

		- Output vector of the RMS re-projection error estimated for each pattern view.

	*
		- flags

		- 
		  Different flags that may be zero or a combination of the following values:
		  
		  * **CALIB_USE_INTRINSIC_GUESS** cameraMatrix contains valid initial values of fx, fy, cx, cy that are optimized further. Otherwise, (cx, cy) is initially set to the image center ( imageSize is used), and focal distances are computed in a least-squares fashion. Note, that if intrinsic parameters are known, there is no need to use this function just to estimate extrinsic parameters. Use solvePnP instead.
		  
		  * **CALIB_FIX_PRINCIPAL_POINT** The principal point is not changed during the global optimization. It stays at the center or at a different location specified when CALIB_USE_INTRINSIC_GUESS is set too.
		  
		  * **CALIB_FIX_ASPECT_RATIO** The functions considers only fy as a free parameter. The ratio fx/fy stays the same as in the input cameraMatrix . When CALIB_USE_INTRINSIC_GUESS is not set, the actual input values of fx and fy are ignored, only their ratio is computed and used further.
		  
		  * **CALIB_ZERO_TANGENT_DIST** Tangential distortion coefficients :math:`(p_1, p_2)` are set to zeros and stay zero.
		  
		  * **CALIB_FIX_K1,...,CALIB_FIX_K6** The corresponding radial distortion coefficient is not changed during the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.
		  
		  * **CALIB_RATIONAL_MODEL** Coefficients k4, k5, and k6 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the rational model and return 8 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients.
		  
		  * **CALIB_THIN_PRISM_MODEL** Coefficients s1, s2, s3 and s4 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the thin prism model and return 12 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients.
		  
		  * **CALIB_FIX_S1_S2_S3_S4** The thin prism distortion coefficients are not changed during the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.
		  
		  * **CALIB_TILTED_MODEL** Coefficients tauX and tauY are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the tilted sensor model and return 14 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients.
		  
		  * **CALIB_FIX_TAUX_TAUY** The coefficients of the tilted sensor model are not changed during the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.

	*
		- criteria

		- Termination criteria for the iterative optimization algorithm.



.. rubric:: Returns:

the overall RMS re-projection error.



.. rubric:: See also:

:ref:`findChessboardCorners <doxid-d9/d0c/group__calib3d_1ga93efa9b0aa890de240ca32b11253dd4a>`, :ref:`solvePnP <doxid-d9/d0c/group__calib3d_1ga549c2075fac14829ff4a58bc931c033d>`, :ref:`initCameraMatrix2D <doxid-d9/d0c/group__calib3d_1ga8132c7dbbb61738cc3510bebbdffde55>`, :ref:`stereoCalibrate <doxid-d9/d0c/group__calib3d_1ga246253dcc6de2e0376c599e7d692303a>`, :ref:`undistort <doxid-da/d54/group__imgproc__transform_1ga69f2545a8b62a6b0fc2ee060dc30559d>`

.. index:: pair: function; calibrationMatrixValues
.. _doxid-d9/d0c/group__calib3d_1ga87955f4330d5c20e392b265b7f92f691:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::calibrationMatrixValues(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		double apertureWidth,
		double apertureHeight,
		double& fovx,
		double& fovy,
		double& focalLength,
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`& principalPoint,
		double& aspectRatio
		)

Computes useful camera characteristics from the camera matrix.

The function computes various useful camera characteristics from the previously estimated camera matrix.

Do keep in mind that the unity measure 'mm' stands for whatever unit of measure one chooses for the chessboard pitch (it can thus be any value).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- cameraMatrix

		- Input camera matrix that can be estimated by calibrateCamera or stereoCalibrate .

	*
		- imageSize

		- Input image size in pixels.

	*
		- apertureWidth

		- Physical width in mm of the sensor.

	*
		- apertureHeight

		- Physical height in mm of the sensor.

	*
		- fovx

		- Output field of view in degrees along the horizontal sensor axis.

	*
		- fovy

		- Output field of view in degrees along the vertical sensor axis.

	*
		- focalLength

		- Focal length of the lens in mm.

	*
		- principalPoint

		- Principal point in mm.

	*
		- aspectRatio

		- :math:`f_y/f_x`

.. index:: pair: function; composeRT
.. _doxid-d9/d0c/group__calib3d_1ga044b03d81f99370db05c52c3d0b46599:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::composeRT(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rvec1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` tvec1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rvec2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` tvec2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rvec3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tvec3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dr1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dt1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dr2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dr3dt2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dr1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dt1 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dr2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dt3dt2 = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Combines two rotation-and-shift transformations.

The functions compute:

.. math::

	\begin{array}{l} \texttt{rvec3} = \mathrm{rodrigues} ^{-1} \left ( \mathrm{rodrigues} ( \texttt{rvec2} ) \cdot \mathrm{rodrigues} ( \texttt{rvec1} ) \right ) \\ \texttt{tvec3} = \mathrm{rodrigues} ( \texttt{rvec2} ) \cdot \texttt{tvec1} + \texttt{tvec2} \end{array} ,

where :math:`\mathrm{rodrigues}` denotes a rotation vector to a rotation matrix transformation, and :math:`\mathrm{rodrigues}^{-1}` denotes the inverse transformation. See Rodrigues for details.

Also, the functions can compute the derivatives of the output vectors with regards to the input vectors (see matMulDeriv ). The functions are used inside stereoCalibrate but can also be used in your own code where Levenberg-Marquardt or another gradient-based solver is used to optimize a function that contains a matrix multiplication.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rvec1

		- First rotation vector.

	*
		- tvec1

		- First translation vector.

	*
		- rvec2

		- Second rotation vector.

	*
		- tvec2

		- Second translation vector.

	*
		- rvec3

		- Output rotation vector of the superposition.

	*
		- tvec3

		- Output translation vector of the superposition.

	*
		- dr3dr1

		- 

	*
		- dr3dt1

		- 

	*
		- dr3dr2

		- 

	*
		- dr3dt2

		- 

	*
		- dt3dr1

		- 

	*
		- dt3dt1

		- 

	*
		- dt3dr2

		- 

	*
		- dt3dt2

		- Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.

.. index:: pair: function; computeCorrespondEpilines
.. _doxid-d9/d0c/group__calib3d_1ga19e3401c94c44b47c229be6e51d158b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::computeCorrespondEpilines(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		int whichImage,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` lines
		)

For points in an image of a stereo pair, computes the corresponding epilines in the other image.

For every point in one of the two images of a stereo pair, the function finds the equation of the corresponding epipolar line in the other image.

From the fundamental matrix definition (see findFundamentalMat ), line :math:`l^{(2)}_i` in the second image for the point :math:`p^{(1)}_i` in the first image (when whichImage=1 ) is computed as:

.. math::

	l^{(2)}_i = F p^{(1)}_i

And vice versa, when whichImage=2, :math:`l^{(1)}_i` is computed from :math:`p^{(2)}_i` as:

.. math::

	l^{(1)}_i = F^T p^{(2)}_i

Line coefficients are defined up to a scale. They are normalized so that :math:`a_i^2+b_i^2=1`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points

		- Input points. :math:`N \times 1` or :math:`1 \times N` matrix of type CV_32FC2 or vector<Point2f> .

	*
		- whichImage

		- Index of the image (1 or 2) that contains the points .

	*
		- F

		- Fundamental matrix that can be estimated using findFundamentalMat or stereoRectify .

	*
		- lines

		- Output vector of the epipolar lines corresponding to the points in the other image. Each line :math:`ax + by + c=0` is encoded by 3 numbers :math:`(a, b, c)`.

.. index:: pair: function; convertPointsFromHomogeneous
.. _doxid-d9/d0c/group__calib3d_1gac42edda3a3a0f717979589fcd6ac0035:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convertPointsFromHomogeneous(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Converts points from homogeneous to Euclidean space.

The function converts points homogeneous to Euclidean space using perspective projection. That is, each point (x1, x2, ... x(n-1), xn) is converted to (x1/xn, x2/xn, ..., x(n-1)/xn). When xn=0, the output point coordinates will be (0,0,0,...).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Input vector of N-dimensional points.

	*
		- dst

		- Output vector of N-1-dimensional points.

.. index:: pair: function; convertPointsHomogeneous
.. _doxid-d9/d0c/group__calib3d_1gafa5aa3f40a472bda956b4c27bec67438:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convertPointsHomogeneous(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Converts points to/from homogeneous coordinates.

The function converts 2D or 3D points from/to homogeneous coordinates by calling either convertPointsToHomogeneous or convertPointsFromHomogeneous.

The function is obsolete. Use one of the previous two functions instead.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Input array or vector of 2D, 3D, or 4D points.

	*
		- dst

		- Output vector of 2D, 3D, or 4D points.

.. index:: pair: function; convertPointsToHomogeneous
.. _doxid-d9/d0c/group__calib3d_1ga13159f129eec8a7d9bd8501f012d5543:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convertPointsToHomogeneous(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Converts points from Euclidean to homogeneous space.

The function converts points from Euclidean to homogeneous space by appending 1's to the tuple of point coordinates. That is, each point (x1, x2, ..., xn) is converted to (x1, x2, ..., xn, 1).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Input vector of N-dimensional points.

	*
		- dst

		- Output vector of N+1-dimensional points.

.. index:: pair: function; correctMatches
.. _doxid-d9/d0c/group__calib3d_1gaf32c99d17908e175ac71e7a08fad587b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::correctMatches(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` newPoints1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` newPoints2
		)

Refines coordinates of corresponding points.

The function implements the Optimal Triangulation Method (see Multiple View Geometry for details). For each given point correspondence points1[i] <-> points2[i], and a fundamental matrix F, it computes the corrected correspondences newPoints1[i] <-> newPoints2[i] that minimize the geometric error :math:`d(points1[i], newPoints1[i])^2 + d(points2[i],newPoints2[i])^2` (where :math:`d(a,b)` is the geometric distance between points :math:`a` and :math:`b`) subject to the epipolar constraint :math:`newPoints2^T * F * newPoints1 = 0`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- F

		- 3x3 fundamental matrix.

	*
		- points1

		- 1xN array containing the first set of points.

	*
		- points2

		- 1xN array containing the second set of points.

	*
		- newPoints1

		- The optimized points1.

	*
		- newPoints2

		- The optimized points2.

.. index:: pair: function; decomposeEssentialMat
.. _doxid-d9/d0c/group__calib3d_1ga54a2f5b3f8aeaf6c76d4a31dece85d5d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::decomposeEssentialMat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t
		)

Decompose an essential matrix to possible rotations and translation.

This function decompose an essential matrix E using svd decomposition :ref:`[36] <doxid-d0/de3/citelist_1CITEREF_HartleyZ00>`. Generally 4 possible poses exists for a given E. They are :math:`[R_1, t]`, :math:`[R_1, -t]`, :math:`[R_2, t]`, :math:`[R_2, -t]`. By decomposing E, you can only get the direction of the translation, so the function returns unit t.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- E

		- The input essential matrix.

	*
		- R1

		- One possible rotation matrix.

	*
		- R2

		- Another possible rotation matrix.

	*
		- t

		- One possible translation.

.. index:: pair: function; decomposeHomographyMat
.. _doxid-d9/d0c/group__calib3d_1ga7f60bdff78833d1e3fd6d9d0fd538d92:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::decomposeHomographyMat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` H,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` K,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` rotations,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` translations,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` normals
		)

Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).

This function extracts relative camera motion between two views observing a planar object from the homography H induced by the plane. The intrinsic camera matrix K must also be provided. The function may return up to four mathematical solution sets. At least two of the solutions may further be invalidated if point correspondences are available by applying positive depth constraint (all points must be in front of the camera). The decomposition method is described in detail in :ref:`[53] <doxid-d0/de3/citelist_1CITEREF_Malis>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- H

		- The input homography matrix between two images.

	*
		- K

		- The input intrinsic camera calibration matrix.

	*
		- rotations

		- Array of rotation matrices.

	*
		- translations

		- Array of translation matrices.

	*
		- normals

		- Array of plane normal matrices.

.. index:: pair: function; decomposeProjectionMatrix
.. _doxid-d9/d0c/group__calib3d_1gaaae5a7899faa1ffdf268cd9088940248:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::decomposeProjectionMatrix(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` cameraMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` transVect,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrixX = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrixY = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rotMatrixZ = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eulerAngles = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Decomposes a projection matrix into a rotation matrix and a camera matrix.

The function computes a decomposition of a projection matrix into a calibration and a rotation matrix and the position of a camera.

It optionally returns three rotation matrices, one for each axis, and three Euler angles that could be used in OpenGL. Note, there is always more than one sequence of rotations about the three principal axes that results in the same orientation of an object, eg. see :ref:`[78] <doxid-d0/de3/citelist_1CITEREF_Slabaugh>`. Returned tree rotation matrices and corresponding three Euler angules are only one of the possible solutions.

The function is based on RQDecomp3x3 .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- projMatrix

		- 3x4 input projection matrix P.

	*
		- cameraMatrix

		- Output 3x3 camera matrix K.

	*
		- rotMatrix

		- Output 3x3 external rotation matrix R.

	*
		- transVect

		- Output 4x1 translation vector T.

	*
		- rotMatrixX

		- Optional 3x3 rotation matrix around x-axis.

	*
		- rotMatrixY

		- Optional 3x3 rotation matrix around y-axis.

	*
		- rotMatrixZ

		- Optional 3x3 rotation matrix around z-axis.

	*
		- eulerAngles

		- Optional three-element vector containing three Euler angles of rotation in degrees.

.. index:: pair: function; drawChessboardCorners
.. _doxid-d9/d0c/group__calib3d_1ga6a10b0bb120c4907e5eabbcd22319022:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::drawChessboardCorners(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` corners,
		bool patternWasFound
		)

Renders the detected chessboard corners.

The function draws individual chessboard corners detected either as red circles if the board was not found, or as colored corners connected with lines if the board was found.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Destination image. It must be an 8-bit color image.

	*
		- patternSize

		- Number of inner corners per a chessboard row and column (patternSize = cv::Size(points_per_row,points_per_column)).

	*
		- corners

		- Array of detected corners, the output of findChessboardCorners.

	*
		- patternWasFound

		- Parameter indicating whether the complete board was found or not. The return value of findChessboardCorners should be passed here.

.. index:: pair: function; estimateAffine2D
.. _doxid-d9/d0c/group__calib3d_1ga27865b1d26bac9ce91efaee83e94d4dd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::estimateAffine2D(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` from,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` to,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double ransacReprojThreshold = 3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` maxIters = 2000,
		double confidence = 0.99,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` refineIters = 10
		)

Computes an optimal affine transformation between two 2D point sets.

The function estimates an optimal 2D affine transformation between two 2D point sets using the selected robust algorithm.

The computed transformation is then refined further (using only inliers) with the Levenberg-Marquardt method to reduce the re-projection error even more.

The RANSAC method can handle practically any ratio of outliers but need a threshold to distinguish inliers from outliers. The method LMeDS does not need any threshold but it works correctly only when there are more than 50% of inliers.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- from

		- First input 2D point set.

	*
		- to

		- Second input 2D point set.

	*
		- inliers

		- Output vector indicating which points are inliers.

	*
		- method

		- 
		  Robust method used to compute tranformation. The following methods are possible:
		  
		  * :ref:`cv::RANSAC <doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>` - RANSAC-based robust method
		  
		  * :ref:`cv::LMEDS <doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2dae59a3f6677ddd05b96a298a6c24fcbe6>` - Least-Median robust method RANSAC is the default method.

	*
		- ransacReprojThreshold

		- Maximum reprojection error in the RANSAC algorithm to consider a point as an inlier. Applies only to RANSAC.

	*
		- maxIters

		- The maximum number of robust method iterations, 2000 is the maximum it can be.

	*
		- confidence

		- Confidence level, between 0 and 1, for the estimated transformation. Anything between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.

	*
		- refineIters

		- Maximum number of iterations of refining algorithm (Levenberg-Marquardt). Passing 0 will disable refining, so the output matrix will be output of robust method.



.. rubric:: Returns:

Output 2D affine transformation matrix :math:`2 \times 3` or empty matrix if transformation could not be estimated.



.. rubric:: See also:

:ref:`estimateAffinePartial2D <doxid-d9/d0c/group__calib3d_1gad767faff73e9cbd8b9d92b955b50062d>`, :ref:`getAffineTransform <doxid-da/d54/group__imgproc__transform_1ga8f6d378f9f8eebb5cb55cd3ae295a999>`

.. index:: pair: function; estimateAffine3D
.. _doxid-d9/d0c/group__calib3d_1ga396afb6411b30770e56ab69548724715:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::estimateAffine3D(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` dst,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` out,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers,
		double ransacThreshold = 3,
		double confidence = 0.99
		)

Computes an optimal affine transformation between two 3D point sets.

The function estimates an optimal 3D affine transformation between two 3D point sets using the RANSAC algorithm.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- First input 3D point set.

	*
		- dst

		- Second input 3D point set.

	*
		- out

		- Output 3D affine transformation matrix :math:`3 \times 4`.

	*
		- inliers

		- Output vector indicating which points are inliers.

	*
		- ransacThreshold

		- Maximum reprojection error in the RANSAC algorithm to consider a point as an inlier.

	*
		- confidence

		- Confidence level, between 0 and 1, for the estimated transformation. Anything between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.

.. index:: pair: function; estimateAffinePartial2D
.. _doxid-d9/d0c/group__calib3d_1gad767faff73e9cbd8b9d92b955b50062d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`cv::Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::estimateAffinePartial2D(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` from,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` to,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double ransacReprojThreshold = 3,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` maxIters = 2000,
		double confidence = 0.99,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` refineIters = 10
		)

Computes an optimal limited affine transformation with 4 degrees of freedom between two 2D point sets.

The function estimates an optimal 2D affine transformation with 4 degrees of freedom limited to combinations of translation, rotation, and uniform scaling. Uses the selected algorithm for robust estimation.

The computed transformation is then refined further (using only inliers) with the Levenberg-Marquardt method to reduce the re-projection error even more.

Estimated transformation matrix is:

.. math::

	\begin{bmatrix} \cos(\theta)s & -\sin(\theta)s & tx \\ \sin(\theta)s & \cos(\theta)s & ty \end{bmatrix}

Where :math:`\theta` is the rotation angle, :math:`s` the scaling factor and :math:`tx, ty` are translations in :math:`x, y` axes respectively.

The RANSAC method can handle practically any ratio of outliers but need a threshold to distinguish inliers from outliers. The method LMeDS does not need any threshold but it works correctly only when there are more than 50% of inliers.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- from

		- First input 2D point set.

	*
		- to

		- Second input 2D point set.

	*
		- inliers

		- Output vector indicating which points are inliers.

	*
		- method

		- 
		  Robust method used to compute tranformation. The following methods are possible:
		  
		  * :ref:`cv::RANSAC <doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>` - RANSAC-based robust method
		  
		  * :ref:`cv::LMEDS <doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2dae59a3f6677ddd05b96a298a6c24fcbe6>` - Least-Median robust method RANSAC is the default method.

	*
		- ransacReprojThreshold

		- Maximum reprojection error in the RANSAC algorithm to consider a point as an inlier. Applies only to RANSAC.

	*
		- maxIters

		- The maximum number of robust method iterations, 2000 is the maximum it can be.

	*
		- confidence

		- Confidence level, between 0 and 1, for the estimated transformation. Anything between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.

	*
		- refineIters

		- Maximum number of iterations of refining algorithm (Levenberg-Marquardt). Passing 0 will disable refining, so the output matrix will be output of robust method.



.. rubric:: Returns:

Output 2D affine transformation (4 degrees of freedom) matrix :math:`2 \times 3` or empty matrix if transformation could not be estimated.



.. rubric:: See also:

:ref:`estimateAffine2D <doxid-d9/d0c/group__calib3d_1ga27865b1d26bac9ce91efaee83e94d4dd>`, :ref:`getAffineTransform <doxid-da/d54/group__imgproc__transform_1ga8f6d378f9f8eebb5cb55cd3ae295a999>`

.. index:: pair: function; filterSpeckles
.. _doxid-d9/d0c/group__calib3d_1gabe331f205a6dd7a9aa5db8a38157d25b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::filterSpeckles(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		double newVal,
		int maxSpeckleSize,
		double maxDiff,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` buf = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Filters off small noise blobs (speckles) in the disparity map.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- The input 16-bit signed disparity image

	*
		- newVal

		- The disparity value used to paint-off the speckles

	*
		- maxSpeckleSize

		- The maximum speckle size to consider it a speckle. Larger blobs are not affected by the algorithm

	*
		- maxDiff

		- Maximum difference between neighbor disparity pixels to put them into the same blob. Note that since :ref:`StereoBM <doxid-d1/db9/classcv_1_1_stereo_b_m>`, :ref:`StereoSGBM <doxid-d4/d35/classcv_1_1_stereo_s_g_b_m>` and may be other algorithms return a fixed-point disparity map, where disparity values are multiplied by 16, this scale factor should be taken into account when specifying this parameter value.

	*
		- buf

		- The optional temporary buffer to avoid memory allocation within the function.

.. index:: pair: function; find4QuadCornerSubpix
.. _doxid-d9/d0c/group__calib3d_1gab8816c8a176e1d78893b843b3f01557a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::find4QuadCornerSubpix(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` img,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` corners,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` region_size
		)

finds subpixel-accurate positions of the chessboard corners

.. index:: pair: function; findChessboardCorners
.. _doxid-d9/d0c/group__calib3d_1ga93efa9b0aa890de240ca32b11253dd4a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::findChessboardCorners(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` corners,
		int flags = :ref:`CALIB_CB_ADAPTIVE_THRESH<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64ba9e296b20df217b62e581c56ad9359db5>`+:ref:`CALIB_CB_NORMALIZE_IMAGE<doxid-d9/d0c/group__calib3d_1gga80a507de0875ee8ac3028ee60071f64baf54c37b53d4375f95e9b1a3d9846c97a>`
		)

Finds the positions of internal corners of the chessboard.

The function attempts to determine whether the input image is a view of the chessboard pattern and locate the internal chessboard corners. The function returns a non-zero value if all of the corners are found and they are placed in a certain order (row by row, left to right in every row). Otherwise, if the function fails to find all the corners or reorder them, it returns 0. For example, a regular chessboard has 8 x 8 squares and 7 x 7 internal corners, that is, points where the black squares touch each other. The detected coordinates are approximate, and to determine their positions more accurately, the function calls cornerSubPix. You also may use the function cornerSubPix with different parameters if returned coordinates are not accurate enough.

Sample usage of detecting and drawing chessboard corners: :

.. ref-code-block:: cpp

	Size patternsize(8,6); //interior number of corners
	Mat gray = ....; //source image
	vector<Point2f> corners; //this will be filled by the detected corners
	
	//CALIB_CB_FAST_CHECK saves a lot of time on images
	//that do not contain any chessboard corners
	bool patternfound = findChessboardCorners(gray, patternsize, corners,
	        CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE
	        + CALIB_CB_FAST_CHECK);
	
	if(patternfound)
	  cornerSubPix(gray, corners, Size(11, 11), Size(-1, -1),
	    TermCriteria(CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 30, 0.1));
	
	drawChessboardCorners(img, patternsize, Mat(corners), patternfound);

The function requires white space (like a square-thick border, the wider the better) around the board to make the detection more robust in various environments. Otherwise, if there is no border and the background is dark, the outer black squares cannot be segmented properly and so the square grouping and ordering algorithm fails.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Source chessboard view. It must be an 8-bit grayscale or color image.

	*
		- patternSize

		- Number of inner corners per a chessboard row and column ( patternSize = cvSize(points_per_row,points_per_colum) = cvSize(columns,rows) ).

	*
		- corners

		- Output array of detected corners.

	*
		- flags

		- 
		  Various operation flags that can be zero or a combination of the following values:
		  
		  * **CALIB_CB_ADAPTIVE_THRESH** Use adaptive thresholding to convert the image to black and white, rather than a fixed threshold level (computed from the average image brightness).
		  
		  * **CALIB_CB_NORMALIZE_IMAGE** Normalize the image gamma with equalizeHist before applying fixed or adaptive thresholding.
		  
		  * **CALIB_CB_FILTER_QUADS** Use additional criteria (like contour area, perimeter, square-like shape) to filter out false quads extracted at the contour retrieval stage.
		  
		  * **CALIB_CB_FAST_CHECK** Run a fast check on the image that looks for chessboard corners, and shortcut the call if none is found. This can drastically speed up the call in the degenerate condition when no chessboard is observed.

.. index:: pair: function; findCirclesGrid
.. _doxid-d9/d0c/group__calib3d_1gad1205c4b803a21597c7d6035f5efd775:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::findCirclesGrid(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centers,
		int flags,
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`FeatureDetector<doxid-da/d9b/group__features2d_1ga15e1361bda978d83a2bea629b32dfd3c>`>& blobDetector,
		:ref:`CirclesGridFinderParameters<doxid-db/d1f/structcv_1_1_circles_grid_finder_parameters>` parameters
		)

Finds centers in the grid of circles.

The function attempts to determine whether the input image contains a grid of circles. If it is, the function locates centers of the circles. The function returns a non-zero value if all of the centers have been found and they have been placed in a certain order (row by row, left to right in every row). Otherwise, if the function fails to find all the corners or reorder them, it returns 0.

Sample usage of detecting and drawing the centers of circles: :

.. ref-code-block:: cpp

	Size patternsize(7,7); //number of centers
	Mat gray = ....; //source image
	vector<Point2f> centers; //this will be filled by the detected centers
	
	bool patternfound = findCirclesGrid(gray, patternsize, centers);
	
	drawChessboardCorners(img, patternsize, Mat(centers), patternfound);

The function requires white space (like a square-thick border, the wider the better) around the board to make the detection more robust in various environments.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- grid view of input circles; it must be an 8-bit grayscale or color image.

	*
		- patternSize

		- number of circles per row and column ( patternSize = Size(points_per_row, points_per_colum) ).

	*
		- centers

		- output array of detected centers.

	*
		- flags

		- 
		  various operation flags that can be one of the following values:
		  
		  * **CALIB_CB_SYMMETRIC_GRID** uses symmetric pattern of circles.
		  
		  * **CALIB_CB_ASYMMETRIC_GRID** uses asymmetric pattern of circles.
		  
		  * **CALIB_CB_CLUSTERING** uses a special algorithm for grid detection. It is more robust to perspective distortions but much more sensitive to background clutter.

	*
		- blobDetector

		- feature detector that finds blobs like dark circles on light background.

	*
		- parameters

		- struct for finding circles in a grid pattern.

.. index:: pair: function; findCirclesGrid
.. _doxid-d9/d0c/group__calib3d_1gac8fb88c7652a7699743aeb6073ef9b4a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::findCirclesGrid(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` patternSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` centers,
		int flags = :ref:`CALIB_CB_SYMMETRIC_GRID<doxid-d9/d0c/group__calib3d_1gga7041b2a9c8f9f8ee93a2796981bc5546a0f3929cc92e83ddce51ed008668db33a>`,
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`FeatureDetector<doxid-da/d9b/group__features2d_1ga15e1361bda978d83a2bea629b32dfd3c>`>& blobDetector = :ref:`SimpleBlobDetector::create<doxid-df/d17/classcv_1_1_simple_blob_detector_1a1d7a06c8b8749207a978e42cd8d0cdf6>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; findEssentialMat
.. _doxid-d9/d0c/group__calib3d_1ga13f7e34de8fa516a686a56af1196247f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::findEssentialMat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double prob = 0.999,
		double threshold = 1.0,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates an essential matrix from the corresponding points in two images.

This function estimates essential matrix based on the five-point algorithm solver in :ref:`[63] <doxid-d0/de3/citelist_1CITEREF_Nister03>`. :ref:`[79] <doxid-d0/de3/citelist_1CITEREF_SteweniusCFS>` is also a related. The epipolar geometry is described by the following equation:

.. math::

	[p_2; 1]^T K^{-T} E K^{-1} [p_1; 1] = 0

where :math:`E` is an essential matrix, :math:`p_1` and :math:`p_2` are corresponding points in the first and the second images, respectively. The result of this function may be passed further to decomposeEssentialMat or recoverPose to recover the relative pose between cameras.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points1

		- Array of N (N >= 5) 2D points from the first image. The point coordinates should be floating-point (single or double precision).

	*
		- points2

		- Array of the second image points of the same size and format as points1 .

	*
		- cameraMatrix

		- Camera matrix :math:`K = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}`. Note that this function assumes that points1 and points2 are feature points from cameras with the same camera matrix.

	*
		- method

		- 
		  Method for computing a fundamental matrix.
		  
		  * **RANSAC** for the RANSAC algorithm.
		  
		  * **MEDS** for the LMedS algorithm.

	*
		- prob

		- Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of confidence (probability) that the estimated matrix is correct.

	*
		- threshold

		- Parameter used for RANSAC. It is the maximum distance from a point to an epipolar line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the point localization, image resolution, and the image noise.

	*
		- mask

		- Output array of N elements, every element of which is set to 0 for outliers and to 1 for the other points. The array is computed only in the RANSAC and LMedS methods.

.. index:: pair: function; findEssentialMat
.. _doxid-d9/d0c/group__calib3d_1ga0c86f6478f36d5be6e450751bbf4fec0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::findEssentialMat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		double focal = 1.0,
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>` pp = :ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`(0, 0),
		int method = :ref:`RANSAC<doxid-d9/d0c/group__calib3d_1gga96ccbb3198badce31862120414bc0d2da724159df258a5d7e29410a6a2f4e6c87>`,
		double prob = 0.999,
		double threshold = 1.0,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function differs from the one above that it computes camera matrix from focal length and principal point:

.. math::

	K = \begin{bmatrix} f & 0 & x_{pp} \\ 0 & f & y_{pp} \\ 0 & 0 & 1 \end{bmatrix}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points1

		- Array of N (N >= 5) 2D points from the first image. The point coordinates should be floating-point (single or double precision).

	*
		- points2

		- Array of the second image points of the same size and format as points1 .

	*
		- focal

		- focal length of the camera. Note that this function assumes that points1 and points2 are feature points from cameras with same focal length and principal point.

	*
		- pp

		- principal point of the camera.

	*
		- method

		- 
		  Method for computing a fundamental matrix.
		  
		  * **RANSAC** for the RANSAC algorithm.
		  
		  * **LMEDS** for the LMedS algorithm.

	*
		- threshold

		- Parameter used for RANSAC. It is the maximum distance from a point to an epipolar line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the point localization, image resolution, and the image noise.

	*
		- prob

		- Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of confidence (probability) that the estimated matrix is correct.

	*
		- mask

		- Output array of N elements, every element of which is set to 0 for outliers and to 1 for the other points. The array is computed only in the RANSAC and LMedS methods.

.. index:: pair: function; findFundamentalMat
.. _doxid-d9/d0c/group__calib3d_1ga30ccb52f4e726daa039fd5cb5bf0822b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::findFundamentalMat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		int method = :ref:`FM_RANSAC<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746aeb30cc6b8fc94600bc04f16c14644fdd>`,
		double param1 = 3.,
		double param2 = 0.99,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates a fundamental matrix from the corresponding points in two images.

.. math::

	[p_2; 1]^T F [p_1; 1] = 0

where :math:`F` is a fundamental matrix, :math:`p_1` and :math:`p_2` are corresponding points in the first and the second images, respectively.

The function calculates the fundamental matrix using one of four methods listed above and returns the found fundamental matrix. Normally just one matrix is found. But in case of the 7-point algorithm, the function may return up to 3 solutions (:math:`9 \times 3` matrix that stores all 3 matrices sequentially).

The calculated fundamental matrix may be passed further to computeCorrespondEpilines that finds the epipolar lines corresponding to the specified points. It can also be passed to stereoRectifyUncalibrated to compute the rectification transformation. :

.. ref-code-block:: cpp

	// Example. Estimation of fundamental matrix using the RANSAC algorithm
	int point_count = 100;
	vector<Point2f> points1(point_count);
	vector<Point2f> points2(point_count);
	
	// initialize the points here ...
	for( int i = 0; i < point_count; i++ )
	{
	    points1[i] = ...;
	    points2[i] = ...;
	}
	
	Mat fundamental_matrix =
	 findFundamentalMat(points1, points2, FM_RANSAC, 3, 0.99);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points1

		- Array of N points from the first image. The point coordinates should be floating-point (single or double precision).

	*
		- points2

		- Array of the second image points of the same size and format as points1 .

	*
		- method

		- 
		  Method for computing a fundamental matrix.
		  
		  * **CV_FM_7POINT** for a 7-point algorithm. :math:`N = 7`
		  
		  * **CV_FM_8POINT** for an 8-point algorithm. :math:`N \ge 8`
		  
		  * **CV_FM_RANSAC** for the RANSAC algorithm. :math:`N \ge 8`
		  
		  * **CV_FM_LMEDS** for the LMedS algorithm. :math:`N \ge 8`

	*
		- param1

		- Parameter used for RANSAC. It is the maximum distance from a point to an epipolar line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the point localization, image resolution, and the image noise.

	*
		- param2

		- Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of confidence (probability) that the estimated matrix is correct.

	*
		- mask

		- The epipolar geometry is described by the following equation:

.. index:: pair: function; findFundamentalMat
.. _doxid-d9/d0c/group__calib3d_1ga8e25cb8c64d8baa4749ca28ff1b0866a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::findFundamentalMat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask,
		int method = :ref:`FM_RANSAC<doxid-d9/d0c/group__calib3d_1gga6a0e727e07d18ebc315bfe86a01f7746aeb30cc6b8fc94600bc04f16c14644fdd>`,
		double param1 = 3.,
		double param2 = 0.99
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; findHomography
.. _doxid-d9/d0c/group__calib3d_1ga4abc2ece9fab9398f2e560d53c8c9780:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::findHomography(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` srcPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` dstPoints,
		int method = 0,
		double ransacReprojThreshold = 3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		const int maxIters = 2000,
		const double confidence = 0.995
		)

Finds a perspective transformation between two planes.

The function finds and returns the perspective transformation :math:`H` between the source and the destination planes:

.. math::

	s_i \vecthree{x'_i}{y'_i}{1} \sim H \vecthree{x_i}{y_i}{1}

so that the back-projection error

.. math::

	\sum _i \left ( x'_i- \frac{h_{11} x_i + h_{12} y_i + h_{13}}{h_{31} x_i + h_{32} y_i + h_{33}} \right )^2+ \left ( y'_i- \frac{h_{21} x_i + h_{22} y_i + h_{23}}{h_{31} x_i + h_{32} y_i + h_{33}} \right )^2

is minimized. If the parameter method is set to the default value 0, the function uses all the point pairs to compute an initial homography estimate with a simple least-squares scheme.

However, if not all of the point pairs (:math:`srcPoints_i`, :math:`dstPoints_i`) fit the rigid perspective transformation (that is, there are some outliers), this initial estimate will be poor. In this case, you can use one of the three robust methods. The methods RANSAC, LMeDS and RHO try many different random subsets of the corresponding point pairs (of four pairs each), estimate the homography matrix using this subset and a simple least-square algorithm, and then compute the quality/goodness of the computed homography (which is the number of inliers for RANSAC or the median re-projection error for LMeDs). The best subset is then used to produce the initial estimate of the homography matrix and the mask of inliers/outliers.

Regardless of the method, robust or not, the computed homography matrix is refined further (using inliers only in case of a robust method) with the Levenberg-Marquardt method to reduce the re-projection error even more.

The methods RANSAC and RHO can handle practically any ratio of outliers but need a threshold to distinguish inliers from outliers. The method LMeDS does not need any threshold but it works correctly only when there are more than 50% of inliers. Finally, if there are no outliers and the noise is rather small, use the default method (method=0).

The function is used to find initial intrinsic and extrinsic matrices. Homography matrix is determined up to a scale. Thus, it is normalized so that :math:`h_{33}=1`. Note that whenever an H matrix cannot be estimated, an empty one will be returned.

* A example on calculating a homography for image matching can be found at opencv_source_code/samples/cpp/video_homography.cpp



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- srcPoints

		- Coordinates of the points in the original plane, a matrix of the type CV_32FC2 or vector<Point2f> .

	*
		- dstPoints

		- Coordinates of the points in the target plane, a matrix of the type CV_32FC2 or a vector<Point2f> .

	*
		- method

		- 
		  Method used to computed a homography matrix. The following methods are possible:
		  
		  * **0** - a regular method using all the points
		  
		  * **RANSAC** - RANSAC-based robust method
		  
		  * **LMEDS** - Least-Median robust method
		  
		  * **RHO** - PROSAC-based robust method

	*
		- ransacReprojThreshold

		- 
		  Maximum allowed reprojection error to treat a point pair as an inlier (used in the RANSAC and RHO methods only). That is, if
		  
		  .. math::
		  
		  	\| \texttt{dstPoints} _i - \texttt{convertPointsHomogeneous} ( \texttt{H} * \texttt{srcPoints} _i) \| > \texttt{ransacReprojThreshold}
		  
		  then the point :math:`i` is considered an outlier. If srcPoints and dstPoints are measured in pixels, it usually makes sense to set this parameter somewhere in the range of 1 to 10.

	*
		- mask

		- Optional output mask set by a robust method ( RANSAC or LMEDS ). Note that the input mask values are ignored.

	*
		- maxIters

		- The maximum number of RANSAC iterations, 2000 is the maximum it can be.

	*
		- confidence

		- Confidence level, between 0 and 1.



.. rubric:: See also:

:ref:`getAffineTransform <doxid-da/d54/group__imgproc__transform_1ga8f6d378f9f8eebb5cb55cd3ae295a999>`, :ref:`estimateAffine2D <doxid-d9/d0c/group__calib3d_1ga27865b1d26bac9ce91efaee83e94d4dd>`, :ref:`estimateAffinePartial2D <doxid-d9/d0c/group__calib3d_1gad767faff73e9cbd8b9d92b955b50062d>`, :ref:`getPerspectiveTransform <doxid-da/d54/group__imgproc__transform_1ga8c1ae0e3589a9d77fffc962c49b22043>`, :ref:`warpPerspective <doxid-da/d54/group__imgproc__transform_1gaf73673a7e8e18ec6963e3774e6a94b87>`, :ref:`perspectiveTransform <doxid-d2/de8/group__core__array_1gad327659ac03e5fd6894b90025e6900a7>`

.. index:: pair: function; findHomography
.. _doxid-d9/d0c/group__calib3d_1gafd3ef89257e27d5235f4467cbb1b6a63:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::findHomography(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` srcPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` dstPoints,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mask,
		int method = 0,
		double ransacReprojThreshold = 3
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; getOptimalNewCameraMatrix
.. _doxid-d9/d0c/group__calib3d_1ga7a6c4e032c97f03ba747966e6ad862b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::getOptimalNewCameraMatrix(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		double alpha,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` newImgSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* validPixROI = 0,
		bool centerPrincipalPoint = false
		)

Returns the new camera matrix based on the free scaling parameter.

The function computes and returns the optimal new camera matrix based on the free scaling parameter. By varying this parameter, you may retrieve only sensible pixels alpha=0 , keep all the original image pixels if there is valuable information in the corners alpha=1 , or get something in between. When alpha>0 , the undistortion result is likely to have some black pixels corresponding to "virtual" pixels outside of the captured distorted image. The original camera matrix, distortion coefficients, the computed new camera matrix, and newImageSize should be passed to initUndistortRectifyMap to produce the maps for remap .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- cameraMatrix

		- Input camera matrix.

	*
		- distCoeffs

		- Input vector of distortion coefficients :math:`(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])` of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.

	*
		- imageSize

		- Original image size.

	*
		- alpha

		- Free scaling parameter between 0 (when all the pixels in the undistorted image are valid) and 1 (when all the source image pixels are retained in the undistorted image). See stereoRectify for details.

	*
		- newImgSize

		- Image size after rectification. By default,it is set to imageSize .

	*
		- validPixROI

		- Optional output rectangle that outlines all-good-pixels region in the undistorted image. See roi1, roi2 description in stereoRectify .

	*
		- centerPrincipalPoint

		- Optional flag that indicates whether in the new camera matrix the principal point should be at the image center or not. By default, the principal point is chosen to best fit a subset of the source image (determined by alpha) to the corrected image.



.. rubric:: Returns:

new_camera_matrix Output new camera matrix.

.. index:: pair: function; getValidDisparityROI
.. _doxid-d9/d0c/group__calib3d_1ga878ab147024a58af9488fa688a3bea0b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`
	cv::getValidDisparityROI(
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` roi1,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` roi2,
		int minDisparity,
		int numberOfDisparities,
		int SADWindowSize
		)

computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by :ref:`cv::stereoRectify() <doxid-d9/d0c/group__calib3d_1ga617b1685d4059c6040827800e72ad2b6>`)

.. index:: pair: function; initCameraMatrix2D
.. _doxid-d9/d0c/group__calib3d_1ga8132c7dbbb61738cc3510bebbdffde55:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::initCameraMatrix2D(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		double aspectRatio = 1.0
		)

Finds an initial camera matrix from 3D-2D point correspondences.

The function estimates and returns an initial camera matrix for the camera calibration process. Currently, the function only supports planar calibration patterns, which are patterns where each object point has z-coordinate =0.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- objectPoints

		- Vector of vectors of the calibration pattern points in the calibration pattern coordinate space. In the old interface all the per-view vectors are concatenated. See calibrateCamera for details.

	*
		- imagePoints

		- Vector of vectors of the projections of the calibration pattern points. In the old interface all the per-view vectors are concatenated.

	*
		- imageSize

		- Image size in pixels used to initialize the principal point.

	*
		- aspectRatio

		- If it is zero or negative, both :math:`f_x` and :math:`f_y` are estimated independently. Otherwise, :math:`f_x = f_y * \texttt{aspectRatio}`.

.. index:: pair: function; matMulDeriv
.. _doxid-d9/d0c/group__calib3d_1ga905541c1275852eabff7dbdfbc10d160:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::matMulDeriv(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` A,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` B,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dABdA,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dABdB
		)

Computes partial derivatives of the matrix product for each multiplied matrix.

The function computes partial derivatives of the elements of the matrix product :math:`A*B` with regard to the elements of each of the two input matrices. The function is used to compute the Jacobian matrices in stereoCalibrate but can also be used in any other similar optimization function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- A

		- First multiplied matrix.

	*
		- B

		- Second multiplied matrix.

	*
		- dABdA

		- First output derivative matrix d(A\*B)/dA of size :math:`\texttt{A.rows*B.cols} \times {A.rows*A.cols}`.

	*
		- dABdB

		- Second output derivative matrix d(A\*B)/dB of size :math:`\texttt{A.rows*B.cols} \times {B.rows*B.cols}`.

.. index:: pair: function; projectPoints
.. _doxid-d9/d0c/group__calib3d_1ga1019495a2c8d1743ed5cc23fa0daff8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::projectPoints(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` objectPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rvec,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` tvec,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` imagePoints,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` jacobian = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		double aspectRatio = 0
		)

Projects 3D points to an image plane.

The function computes projections of 3D points to the image plane given intrinsic and extrinsic camera parameters. Optionally, the function computes Jacobians - matrices of partial derivatives of image points coordinates (as functions of all the input parameters) with respect to the particular parameters, intrinsic and/or extrinsic. The Jacobians are used during the global optimization in calibrateCamera, solvePnP, and stereoCalibrate . The function itself can also be used to compute a re-projection error given the current intrinsic and extrinsic parameters.

By setting rvec=tvec=(0,0,0) or by setting cameraMatrix to a 3x3 identity matrix, or by passing zero distortion coefficients, you can get various useful partial cases of the function. This means that you can compute the distorted coordinates for a sparse set of points or apply a perspective transformation (and also compute the derivatives) in the ideal zero-distortion setup.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- objectPoints

		- Array of object points, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel (or vector<Point3f> ), where N is the number of points in the view.

	*
		- rvec

		- Rotation vector. See Rodrigues for details.

	*
		- tvec

		- Translation vector.

	*
		- cameraMatrix

		- Camera matrix :math:`A = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{_1}`.

	*
		- distCoeffs

		- Input vector of distortion coefficients :math:`(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])` of 4, 5, 8, 12 or 14 elements. If the vector is empty, the zero distortion coefficients are assumed.

	*
		- imagePoints

		- Output array of image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, or vector<Point2f> .

	*
		- jacobian

		- Optional output 2Nx(10+<numDistCoeffs>) jacobian matrix of derivatives of image points with respect to components of the rotation vector, translation vector, focal lengths, coordinates of the principal point and the distortion coefficients. In the old interface different components of the jacobian are returned via different output parameters.

	*
		- aspectRatio

		- Optional "fixed aspect ratio" parameter. If the parameter is not 0, the function assumes that the aspect ratio (*fx/fy*) is fixed and correspondingly adjusts the jacobian matrix.

.. index:: pair: function; recoverPose
.. _doxid-d9/d0c/group__calib3d_1gadb7d2dfcc184c1d2f496d8639f4371c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::recoverPose(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Recover relative camera rotation and translation from an estimated essential matrix and the corresponding points in two images, using cheirality check. Returns the number of inliers which pass the check.

This function can be used to process output E and mask from findEssentialMat. In this scenario, points1 and points2 are the same input for findEssentialMat. :

.. ref-code-block:: cpp

	// Example. Estimation of fundamental matrix using the RANSAC algorithm
	int point_count = 100;
	vector<Point2f> points1(point_count);
	vector<Point2f> points2(point_count);
	
	// initialize the points here ...
	for( int i = 0; i < point_count; i++ )
	{
	    points1[i] = ...;
	    points2[i] = ...;
	}
	
	// cametra matrix with both focal lengths = 1, and principal point = (0, 0)
	Mat cameraMatrix = Mat::eye(3, 3, CV_64F);
	
	Mat E, R, t, mask;
	
	E = findEssentialMat(points1, points2, cameraMatrix, RANSAC, 0.999, 1.0, mask);
	recoverPose(E, points1, points2, cameraMatrix, R, t, mask);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- E

		- The input essential matrix.

	*
		- points1

		- Array of N 2D points from the first image. The point coordinates should be floating-point (single or double precision).

	*
		- points2

		- Array of the second image points of the same size and format as points1 .

	*
		- cameraMatrix

		- Camera matrix :math:`K = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}`. Note that this function assumes that points1 and points2 are feature points from cameras with the same camera matrix.

	*
		- R

		- Recovered relative rotation.

	*
		- t

		- Recoverd relative translation.

	*
		- mask

		- Input/output mask for inliers in points1 and points2. : If it is not empty, then it marks inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to recover pose. In the output mask only inliers which pass the cheirality check. This function decomposes an essential matrix using decomposeEssentialMat and then verifies possible pose hypotheses by doing cheirality check. The cheirality check basically means that the triangulated 3D points should have positive depth. Some details can be found in :ref:`[63] <doxid-d0/de3/citelist_1CITEREF_Nister03>`.

.. index:: pair: function; recoverPose
.. _doxid-d9/d0c/group__calib3d_1ga40919d0c7eaf77b0df67dd76d5d24fa1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::recoverPose(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t,
		double focal = 1.0,
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>` pp = :ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`(0, 0),
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function differs from the one above that it computes camera matrix from focal length and principal point:

.. math::

	K = \begin{bmatrix} f & 0 & x_{pp} \\ 0 & f & y_{pp} \\ 0 & 0 & 1 \end{bmatrix}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- E

		- The input essential matrix.

	*
		- points1

		- Array of N 2D points from the first image. The point coordinates should be floating-point (single or double precision).

	*
		- points2

		- Array of the second image points of the same size and format as points1 .

	*
		- R

		- Recovered relative rotation.

	*
		- t

		- Recoverd relative translation.

	*
		- focal

		- Focal length of the camera. Note that this function assumes that points1 and points2 are feature points from cameras with same focal length and principal point.

	*
		- pp

		- principal point of the camera.

	*
		- mask

		- Input/output mask for inliers in points1 and points2. : If it is not empty, then it marks inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to recover pose. In the output mask only inliers which pass the cheirality check.

.. index:: pair: function; recoverPose
.. _doxid-d9/d0c/group__calib3d_1ga2ee9f187170acece29c5172c2175e7ae:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::recoverPose(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` E,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` t,
		double distanceThresh,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` triangulatedPoints = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- E

		- The input essential matrix.

	*
		- points1

		- Array of N 2D points from the first image. The point coordinates should be floating-point (single or double precision).

	*
		- points2

		- Array of the second image points of the same size and format as points1.

	*
		- cameraMatrix

		- Camera matrix :math:`K = \vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}`. Note that this function assumes that points1 and points2 are feature points from cameras with the same camera matrix.

	*
		- R

		- Recovered relative rotation.

	*
		- t

		- Recoverd relative translation.

	*
		- distanceThresh

		- threshold distance which is used to filter out far away points (i.e. infinite points).

	*
		- mask

		- Input/output mask for inliers in points1 and points2. : If it is not empty, then it marks inliers in points1 and points2 for then given essential matrix E. Only these inliers will be used to recover pose. In the output mask only inliers which pass the cheirality check.

	*
		- triangulatedPoints

		- 3d points which were reconstructed by triangulation.

.. index:: pair: function; rectify3Collinear
.. _doxid-d9/d0c/group__calib3d_1gabd5437becb62abc0fe951c532a94b655:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	cv::rectify3Collinear(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix3,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs3,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imgpt1,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imgpt3,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` R12,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` T12,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` R13,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` T13,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P3,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Q,
		double alpha,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` newImgSize,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* roi1,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* roi2,
		int flags
		)

computes the rectification transformations for 3-head camera, where all the heads are on the same line.

.. index:: pair: function; reprojectImageTo3D
.. _doxid-d9/d0c/group__calib3d_1ga1bc1152bd57d63bc524204f21fde6e02:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::reprojectImageTo3D(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` disparity,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` _3dImage,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` Q,
		bool handleMissingValues = false,
		int ddepth = -1
		)

Reprojects a disparity image to 3D space.

The function transforms a single-channel disparity map to a 3-channel image representing a 3D surface. That is, for each pixel (x,y) andthe corresponding disparity d=disparity(x,y) , it computes:

.. math::

	\begin{array}{l} [X \; Y \; Z \; W]^T = \texttt{Q} *[x \; y \; \texttt{disparity} (x,y) \; 1]^T \\ \texttt{\_3dImage} (x,y) = (X/W, \; Y/W, \; Z/W) \end{array}

The matrix Q can be an arbitrary :math:`4 \times 4` matrix (for example, the one computed by stereoRectify). To reproject a sparse set of points {(x,y,d),...} to 3D space, use perspectiveTransform .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- disparity

		- Input single-channel 8-bit unsigned, 16-bit signed, 32-bit signed or 32-bit floating-point disparity image. If 16-bit signed format is used, the values are assumed to have no fractional bits.

	*
		- _3dImage

		- Output 3-channel floating-point image of the same size as disparity . Each element of _3dImage(x,y) contains 3D coordinates of the point (x,y) computed from the disparity map.

	*
		- Q

		- :math:`4 \times 4` perspective transformation matrix that can be obtained with stereoRectify.

	*
		- handleMissingValues

		- Indicates, whether the function should handle missing values (i.e. points where the disparity was not computed). If handleMissingValues=true, then pixels with the minimal disparity that corresponds to the outliers (see :ref:`StereoMatcher::compute <doxid-dd/ddc/classcv_1_1_stereo_matcher_1a03f7087df1b2c618462eb98898841345>`) are transformed to 3D points with a very large Z value (currently set to 10000).

	*
		- ddepth

		- The optional output array depth. If it is -1, the output image will have CV_32F depth. ddepth can also be set to CV_16S, CV_32S or CV_32F.

.. index:: pair: function; Rodrigues
.. _doxid-d9/d0c/group__calib3d_1ga61585db663d9da06b68e70cfbf6a1eac:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::Rodrigues(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` jacobian = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Converts a rotation matrix to a rotation vector or vice versa.

.. math::

	\begin{array}{l} \theta \leftarrow norm(r) \\ r \leftarrow r/ \theta \\ R = \cos{\theta} I + (1- \cos{\theta} ) r r^T + \sin{\theta} \vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} \end{array}

Inverse transformation can be also done easily, since

.. math::

	\sin ( \theta ) \vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} = \frac{R - R^T}{2}

A rotation vector is a convenient and most compact representation of a rotation matrix (since any rotation matrix has just 3 degrees of freedom). The representation is used in the global 3D geometry optimization procedures like calibrateCamera, stereoCalibrate, or solvePnP .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Input rotation vector (3x1 or 1x3) or rotation matrix (3x3).

	*
		- dst

		- Output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively.

	*
		- jacobian

		- Optional output Jacobian matrix, 3x9 or 9x3, which is a matrix of partial derivatives of the output array components with respect to the input array components.

.. index:: pair: function; RQDecomp3x3
.. _doxid-d9/d0c/group__calib3d_1ga1aaacb6224ec7b99d34866f8f9baac83:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Vec3d<doxid-dc/d84/group__core__basic_1ga370d94209693b5b13437ab4991cabf73>`
	cv::RQDecomp3x3(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mtxR,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mtxQ,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Qx = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Qy = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Qz = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Computes an RQ decomposition of 3x3 matrices.

The function computes a RQ decomposition using the given rotations. This function is used in decomposeProjectionMatrix to decompose the left 3x3 submatrix of a projection matrix into a camera and a rotation matrix.

It optionally returns three rotation matrices, one for each axis, and the three Euler angles in degrees (as the return value) that could be used in OpenGL. Note, there is always more than one sequence of rotations about the three principal axes that results in the same orientation of an object, eg. see :ref:`[78] <doxid-d0/de3/citelist_1CITEREF_Slabaugh>`. Returned tree rotation matrices and corresponding three Euler angules are only one of the possible solutions.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- 3x3 input matrix.

	*
		- mtxR

		- Output 3x3 upper-triangular matrix.

	*
		- mtxQ

		- Output 3x3 orthogonal matrix.

	*
		- Qx

		- Optional output 3x3 rotation matrix around x-axis.

	*
		- Qy

		- Optional output 3x3 rotation matrix around y-axis.

	*
		- Qz

		- Optional output 3x3 rotation matrix around z-axis.

.. index:: pair: function; sampsonDistance
.. _doxid-d9/d0c/group__calib3d_1gacbba2ee98258ca81d352a31faa15a021:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::sampsonDistance(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` pt1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` pt2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F
		)

Calculates the Sampson Distance between two points.

The function sampsonDistance calculates and returns the first order approximation of the geometric error as:

.. math::

	sd( \texttt{pt1} , \texttt{pt2} )= \frac{(\texttt{pt2}^t \cdot \texttt{F} \cdot \texttt{pt1})^2}{(\texttt{F} \cdot \texttt{pt1})(0) + (\texttt{F} \cdot \texttt{pt1})(1) + (\texttt{F}^t \cdot \texttt{pt2})(0) + (\texttt{F}^t \cdot \texttt{pt2})(1)}

The fundamental matrix may be calculated using the :ref:`cv::findFundamentalMat <doxid-d9/d0c/group__calib3d_1ga30ccb52f4e726daa039fd5cb5bf0822b>` function. See HZ 11.4.3 for details.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- pt1

		- first homogeneous 2d point

	*
		- pt2

		- second homogeneous 2d point

	*
		- F

		- fundamental matrix

.. index:: pair: function; solvePnP
.. _doxid-d9/d0c/group__calib3d_1ga549c2075fac14829ff4a58bc931c033d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::solvePnP(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` objectPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` imagePoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rvec,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tvec,
		bool useExtrinsicGuess = false,
		int flags = :ref:`SOLVEPNP_ITERATIVE<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a9f589872a7f7d687dc58294e01ea33a5>`
		)

Finds an object pose from 3D-2D point correspondences.

The function estimates the object pose given a set of object points, their corresponding image projections, as well as the camera matrix and the distortion coefficients.

* An example of how to use solvePnP for planar augmented reality can be found at opencv_source_code/samples/python/plane_ar.py

* If you are using Python:
  
  * Numpy array slices won't work as input because solvePnP requires contiguous arrays (enforced by the assertion using :ref:`cv::Mat::checkVector() <doxid-db/de6/classcv_1_1_mat_1a167a8e0a3a3d86e84b70e33483af4466>` around line 55 of modules/calib3d/src/solvepnp.cpp version 2.4.9)
  
  * The P3P algorithm requires image points to be in an array of shape (N,1,2) due to its calling of :ref:`cv::undistortPoints <doxid-da/d54/group__imgproc__transform_1ga55c716492470bfe86b0ee9bf3a1f0f7e>` (around line 75 of modules/calib3d/src/solvepnp.cpp version 2.4.9) which requires 2-channel information.
  
  * Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints = np.ascontiguousarray(D[:,:2]).reshape((N,1,2))

* The methods **SOLVEPNP_DLS** and **SOLVEPNP_UPNP** cannot be used as the current implementations are unstable and sometimes give completly wrong results. If you pass one of these two flags, **SOLVEPNP_EPNP** method will be used instead.

* The minimum number of points is 4. In the case of **SOLVEPNP_P3P** and **SOLVEPNP_AP3P** methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- objectPoints

		- Array of object points in the object coordinate space, Nx3 1-channel or 1xN/Nx1 3-channel, where N is the number of points. vector<Point3f> can be also passed here.

	*
		- imagePoints

		- Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel, where N is the number of points. vector<Point2f> can be also passed here.

	*
		- cameraMatrix

		- Input camera matrix :math:`A = \vecthreethree{fx}{0}{cx}{0}{fy}{cy}{0}{0}{1}`.

	*
		- distCoeffs

		- Input vector of distortion coefficients :math:`(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])` of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.

	*
		- rvec

		- Output rotation vector (see :ref:`Rodrigues <doxid-d9/d0c/group__calib3d_1ga61585db663d9da06b68e70cfbf6a1eac>`) that, together with tvec , brings points from the model coordinate system to the camera coordinate system.

	*
		- tvec

		- Output translation vector.

	*
		- useExtrinsicGuess

		- Parameter used for :ref:`SOLVEPNP_ITERATIVE <doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a9f589872a7f7d687dc58294e01ea33a5>`. If true (1), the function uses the provided rvec and tvec values as initial approximations of the rotation and translation vectors, respectively, and further optimizes them.

	*
		- flags

		- 
		  Method for solving a PnP problem:
		  
		  * **SOLVEPNP_ITERATIVE** Iterative method is based on Levenberg-Marquardt optimization. In this case the function finds such a pose that minimizes reprojection error, that is the sum of squared distances between the observed projections imagePoints and the projected (using projectPoints ) objectPoints .
		  
		  * **SOLVEPNP_P3P** Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang "Complete Solution Classification for the Perspective-Three-Point Problem" (:ref:`[30] <doxid-d0/de3/citelist_1CITEREF_gao2003complete>`). In this case the function requires exactly four object and image points.
		  
		  * **SOLVEPNP_AP3P** Method is based on the paper of T. Ke, S. Roumeliotis "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (:ref:`[42] <doxid-d0/de3/citelist_1CITEREF_Ke17>`). In this case the function requires exactly four object and image points.
		  
		  * **SOLVEPNP_EPNP** Method has been introduced by F.Moreno-Noguer, V.Lepetit and P.Fua in the paper "EPnP: Efficient Perspective-n-Point Camera Pose Estimation" (:ref:`[45] <doxid-d0/de3/citelist_1CITEREF_lepetit2009epnp>`).
		  
		  * **SOLVEPNP_DLS** Method is based on the paper of Joel A. Hesch and Stergios I. Roumeliotis. "A Direct Least-Squares (DLS) Method for PnP" (:ref:`[38] <doxid-d0/de3/citelist_1CITEREF_hesch2011direct>`).
		  
		  * **SOLVEPNP_UPNP** Method is based on the paper of A.Penate-Sanchez, J.Andrade-Cetto, F.Moreno-Noguer. "Exhaustive Linearization for Robust Camera Pose and Focal Length
		    Estimation" (:ref:`[65] <doxid-d0/de3/citelist_1CITEREF_penate2013exhaustive>`). In this case the function also estimates the parameters :math:`f_x` and :math:`f_y` assuming that both have the same value. Then the cameraMatrix is updated with the estimated focal length.

.. index:: pair: function; solvePnPRansac
.. _doxid-d9/d0c/group__calib3d_1ga50620f0e26e02caa2e9adc07b5fbf24e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::solvePnPRansac(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` objectPoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` imagePoints,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` rvec,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tvec,
		bool useExtrinsicGuess = false,
		int iterationsCount = 100,
		float reprojectionError = 8.0,
		double confidence = 0.99,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` inliers = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int flags = :ref:`SOLVEPNP_ITERATIVE<doxid-d9/d0c/group__calib3d_1ggad992e8239ec2871d59eed666ac8418f9a9f589872a7f7d687dc58294e01ea33a5>`
		)

Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.

The function estimates an object pose given a set of object points, their corresponding image projections, as well as the camera matrix and the distortion coefficients. This function finds such a pose that minimizes reprojection error, that is, the sum of squared distances between the observed projections imagePoints and the projected (using projectPoints ) objectPoints. The use of RANSAC makes the function resistant to outliers.

* An example of how to use solvePNPRansac for object detection can be found at opencv_source_code/samples/cpp/tutorial_code/calib3d/real_time_pose_estimation/



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- objectPoints

		- Array of object points in the object coordinate space, Nx3 1-channel or 1xN/Nx1 3-channel, where N is the number of points. vector<Point3f> can be also passed here.

	*
		- imagePoints

		- Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel, where N is the number of points. vector<Point2f> can be also passed here.

	*
		- cameraMatrix

		- Input camera matrix :math:`A = \vecthreethree{fx}{0}{cx}{0}{fy}{cy}{0}{0}{1}`.

	*
		- distCoeffs

		- Input vector of distortion coefficients :math:`(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])` of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.

	*
		- rvec

		- Output rotation vector (see Rodrigues ) that, together with tvec , brings points from the model coordinate system to the camera coordinate system.

	*
		- tvec

		- Output translation vector.

	*
		- useExtrinsicGuess

		- Parameter used for SOLVEPNP_ITERATIVE. If true (1), the function uses the provided rvec and tvec values as initial approximations of the rotation and translation vectors, respectively, and further optimizes them.

	*
		- iterationsCount

		- Number of iterations.

	*
		- reprojectionError

		- Inlier threshold value used by the RANSAC procedure. The parameter value is the maximum allowed distance between the observed and computed point projections to consider it an inlier.

	*
		- confidence

		- The probability that the algorithm produces a useful result.

	*
		- inliers

		- Output vector that contains indices of inliers in objectPoints and imagePoints .

	*
		- flags

		- Method for solving a PnP problem (see solvePnP ).

.. index:: pair: function; stereoCalibrate
.. _doxid-d9/d0c/group__calib3d_1ga246253dcc6de2e0376c599e7d692303a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::stereoCalibrate(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` objectPoints,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints1,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` imagePoints2,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix1,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs1,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` cameraMatrix2,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` distCoeffs2,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` T,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` E,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` F,
		int flags = :ref:`CALIB_FIX_INTRINSIC<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aa51df9c05343c61ddb18324ded0fab86a>`,
		:ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>` criteria = :ref:`TermCriteria<doxid-df/d8a/classcv_1_1_term_criteria>`(:ref:`TermCriteria::COUNT<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57aeb9da694ea67b3ef7d524521b580867d>`+:ref:`TermCriteria::EPS<doxid-df/d8a/classcv_1_1_term_criteria_1a56fecdc291ccaba8aad27d67ccf72c57a857609e73e7028e638d2ea649f3b45d5>`, 30, 1e-6)
		)

Calibrates the stereo camera.

The function estimates transformation between two cameras making a stereo pair. If you have a stereo camera where the relative position and orientation of two cameras is fixed, and if you computed poses of an object relative to the first camera and to the second camera, (R1, T1) and (R2, T2), respectively (this can be done with solvePnP ), then those poses definitely relate to each other. This means that, given (:math:`R_1`, :math:`T_1`), it should be possible to compute (:math:`R_2`, :math:`T_2`). You only need to know the position and orientation of the second camera relative to the first camera. This is what the described function does. It computes (:math:`R`, :math:`T`) so that:

.. math::

	R_2=R*R_1



.. math::

	T_2=R*T_1 + T,

Optionally, it computes the essential matrix E:

.. math::

	E= \vecthreethree{0}{-T_2}{T_1}{T_2}{0}{-T_0}{-T_1}{T_0}{0} *R

where :math:`T_i` are components of the translation vector :math:`T` : :math:`T=[T_0, T_1, T_2]^T`. And the function can also compute the fundamental matrix F:

.. math::

	F = cameraMatrix2^{-T} E cameraMatrix1^{-1}

Besides the stereo-related information, the function can also perform a full calibration of each of two cameras. However, due to the high dimensionality of the parameter space and noise in the input data, the function can diverge from the correct solution. If the intrinsic parameters can be estimated with high accuracy for each of the cameras individually (for example, using calibrateCamera ), you are recommended to do so and then pass CALIB_FIX_INTRINSIC flag to the function along with the computed intrinsic parameters. Otherwise, if all the parameters are estimated at once, it makes sense to restrict some parameters, for example, pass CALIB_SAME_FOCAL_LENGTH and CALIB_ZERO_TANGENT_DIST flags, which is usually a reasonable assumption.

Similarly to calibrateCamera , the function minimizes the total re-projection error for all the points in all the available views from both cameras. The function returns the final value of the re-projection error.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- objectPoints

		- Vector of vectors of the calibration pattern points.

	*
		- imagePoints1

		- Vector of vectors of the projections of the calibration pattern points, observed by the first camera.

	*
		- imagePoints2

		- Vector of vectors of the projections of the calibration pattern points, observed by the second camera.

	*
		- cameraMatrix1

		- Input/output first camera matrix: :math:`\vecthreethree{f_x^{(j)}}{0}{c_x^{(j)}}{0}{f_y^{(j)}}{c_y^{(j)}}{0}{0}{1}`, :math:`j = 0,\, 1`. If any of CALIB_USE_INTRINSIC_GUESS , CALIB_FIX_ASPECT_RATIO , CALIB_FIX_INTRINSIC , or CALIB_FIX_FOCAL_LENGTH are specified, some or all of the matrix components must be initialized. See the flags description for details.

	*
		- distCoeffs1

		- Input/output vector of distortion coefficients :math:`(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])` of 4, 5, 8, 12 or 14 elements. The output vector length depends on the flags.

	*
		- cameraMatrix2

		- Input/output second camera matrix. The parameter is similar to cameraMatrix1

	*
		- distCoeffs2

		- Input/output lens distortion coefficients for the second camera. The parameter is similar to distCoeffs1 .

	*
		- imageSize

		- Size of the image used only to initialize intrinsic camera matrix.

	*
		- R

		- Output rotation matrix between the 1st and the 2nd camera coordinate systems.

	*
		- T

		- Output translation vector between the coordinate systems of the cameras.

	*
		- E

		- Output essential matrix.

	*
		- F

		- Output fundamental matrix.

	*
		- flags

		- 
		  Different flags that may be zero or a combination of the following values:
		  
		  * **CALIB_FIX_INTRINSIC** Fix cameraMatrix? and distCoeffs? so that only R, T, E , and F matrices are estimated.
		  
		  * **CALIB_USE_INTRINSIC_GUESS** Optimize some or all of the intrinsic parameters according to the specified flags. Initial values are provided by the user.
		  
		  * **CALIB_FIX_PRINCIPAL_POINT** Fix the principal points during the optimization.
		  
		  * **CALIB_FIX_FOCAL_LENGTH** Fix :math:`f^{(j)}_x` and :math:`f^{(j)}_y`.
		  
		  * **CALIB_FIX_ASPECT_RATIO** Optimize :math:`f^{(j)}_y`. Fix the ratio :math:`f^{(j)}_x/f^{(j)}_y`
		  
		  
		  
		  * **CALIB_SAME_FOCAL_LENGTH** Enforce :math:`f^{(0)}_x=f^{(1)}_x` and :math:`f^{(0)}_y=f^{(1)}_y`.
		  
		  * **CALIB_ZERO_TANGENT_DIST** Set tangential distortion coefficients for each camera to zeros and fix there.
		  
		  * **CALIB_FIX_K1,...,CALIB_FIX_K6** Do not change the corresponding radial distortion coefficient during the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.
		  
		  * **CALIB_RATIONAL_MODEL** Enable coefficients k4, k5, and k6. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the rational model and return 8 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients.
		  
		  * **CALIB_THIN_PRISM_MODEL** Coefficients s1, s2, s3 and s4 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the thin prism model and return 12 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients.
		  
		  * **CALIB_FIX_S1_S2_S3_S4** The thin prism distortion coefficients are not changed during the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.
		  
		  * **CALIB_TILTED_MODEL** Coefficients tauX and tauY are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the tilted sensor model and return 14 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients.
		  
		  * **CALIB_FIX_TAUX_TAUY** The coefficients of the tilted sensor model are not changed during the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.

	*
		- criteria

		- Termination criteria for the iterative optimization algorithm.

.. index:: pair: function; stereoRectify
.. _doxid-d9/d0c/group__calib3d_1ga617b1685d4059c6040827800e72ad2b6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::stereoRectify(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cameraMatrix2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` distCoeffs2,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imageSize,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` R,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` T,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` R2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` P2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` Q,
		int flags = :ref:`CALIB_ZERO_DISPARITY<doxid-d9/d0c/group__calib3d_1gga46db002545a3b6c1904b7a0a8694b66aae49985db1f4453c5dda1d701a3d8dd76>`,
		double alpha = -1,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` newImageSize = :ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`(),
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* validPixROI1 = 0,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* validPixROI2 = 0
		)

Computes rectification transforms for each head of a calibrated stereo camera.

The function computes the rotation matrices for each camera that (virtually) make both camera image planes the same plane. Consequently, this makes all the epipolar lines parallel and thus simplifies the dense stereo correspondence problem. The function takes the matrices computed by stereoCalibrate as input. As output, it provides two rotation matrices and also two projection matrices in the new coordinates. The function distinguishes the following two cases:

* **Horizontal stereo** : the first and the second camera views are shifted relative to each other mainly along the x axis (with possible small vertical shift). In the rectified images, the corresponding epipolar lines in the left and right cameras are horizontal and have the same y-coordinate. P1 and P2 look like:
  
  .. math::
  
  	\texttt{P1} = \begin{bmatrix} f & 0 & cx_1 & 0 \\ 0 & f & cy & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix}
  
  .. math::
  
  	\texttt{P2} = \begin{bmatrix} f & 0 & cx_2 & T_x*f \\ 0 & f & cy & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix} ,
  
  where :math:`T_x` is a horizontal shift between the cameras and :math:`cx_1=cx_2` if CALIB_ZERO_DISPARITY is set.

* **Vertical stereo** : the first and the second camera views are shifted relative to each other mainly in vertical direction (and probably a bit in the horizontal direction too). The epipolar lines in the rectified images are vertical and have the same x-coordinate. P1 and P2 look like:
  
  .. math::
  
  	\texttt{P1} = \begin{bmatrix} f & 0 & cx & 0 \\ 0 & f & cy_1 & 0 \\ 0 & 0 & 1 & 0 \end{bmatrix}
  
  .. math::
  
  	\texttt{P2} = \begin{bmatrix} f & 0 & cx & 0 \\ 0 & f & cy_2 & T_y*f \\ 0 & 0 & 1 & 0 \end{bmatrix} ,
  
  where :math:`T_y` is a vertical shift between the cameras and :math:`cy_1=cy_2` if CALIB_ZERO_DISPARITY is set.

As you can see, the first three columns of P1 and P2 will effectively be the new "rectified" camera matrices. The matrices, together with R1 and R2 , can then be passed to initUndistortRectifyMap to initialize the rectification map for each camera.

See below the screenshot from the stereo_calib.cpp sample. Some red horizontal lines pass through the corresponding image regions. This means that the images are well rectified, which is what most stereo correspondence algorithms rely on. The green rectangles are roi1 and roi2 . You see that their interiors are all valid pixels.

.. image:: stereo_undistort.jpg
	:alt: image



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- cameraMatrix1

		- First camera matrix.

	*
		- distCoeffs1

		- First camera distortion parameters.

	*
		- cameraMatrix2

		- Second camera matrix.

	*
		- distCoeffs2

		- Second camera distortion parameters.

	*
		- imageSize

		- Size of the image used for stereo calibration.

	*
		- R

		- Rotation matrix between the coordinate systems of the first and the second cameras.

	*
		- T

		- Translation vector between coordinate systems of the cameras.

	*
		- R1

		- Output 3x3 rectification transform (rotation matrix) for the first camera.

	*
		- R2

		- Output 3x3 rectification transform (rotation matrix) for the second camera.

	*
		- P1

		- Output 3x4 projection matrix in the new (rectified) coordinate systems for the first camera.

	*
		- P2

		- Output 3x4 projection matrix in the new (rectified) coordinate systems for the second camera.

	*
		- Q

		- Output :math:`4 \times 4` disparity-to-depth mapping matrix (see reprojectImageTo3D ).

	*
		- flags

		- Operation flags that may be zero or CALIB_ZERO_DISPARITY . If the flag is set, the function makes the principal points of each camera have the same pixel coordinates in the rectified views. And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area.

	*
		- alpha

		- Free scaling parameter. If it is -1 or absent, the function performs the default scaling. Otherwise, the parameter should be between 0 and 1. alpha=0 means that the rectified images are zoomed and shifted so that only valid pixels are visible (no black areas after rectification). alpha=1 means that the rectified image is decimated and shifted so that all the pixels from the original images from the cameras are retained in the rectified images (no source image pixels are lost). Obviously, any intermediate value yields an intermediate result between those two extreme cases.

	*
		- newImageSize

		- New image resolution after rectification. The same size should be passed to initUndistortRectifyMap (see the stereo_calib.cpp sample in OpenCV samples directory). When (0,0) is passed (default), it is set to the original imageSize . Setting it to larger value can help you preserve details in the original image, especially when there is a big radial distortion.

	*
		- validPixROI1

		- Optional output rectangles inside the rectified images where all the pixels are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller (see the picture below).

	*
		- validPixROI2

		- Optional output rectangles inside the rectified images where all the pixels are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller (see the picture below).

.. index:: pair: function; stereoRectifyUncalibrated
.. _doxid-d9/d0c/group__calib3d_1gaadc5b14471ddc004939471339294f052:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::stereoRectifyUncalibrated(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` F,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imgSize,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` H1,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` H2,
		double threshold = 5
		)

Computes a rectification transform for an uncalibrated stereo camera.

The function computes the rectification transformations without knowing intrinsic parameters of the cameras and their relative position in the space, which explains the suffix "uncalibrated". Another related difference from stereoRectify is that the function outputs not the rectification transformations in the object (3D) space, but the planar perspective transformations encoded by the homography matrices H1 and H2 . The function implements the algorithm :ref:`[37] <doxid-d0/de3/citelist_1CITEREF_Hartley99>`.

While the algorithm does not need to know the intrinsic parameters of the cameras, it heavily depends on the epipolar geometry. Therefore, if the camera lenses have a significant distortion, it would be better to correct it before computing the fundamental matrix and calling this function. For example, distortion coefficients can be estimated for each head of stereo camera separately by using calibrateCamera . Then, the images can be corrected using undistort , or just the point coordinates can be corrected with undistortPoints .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- points1

		- Array of feature points in the first image.

	*
		- points2

		- The corresponding points in the second image. The same formats as in findFundamentalMat are supported.

	*
		- F

		- Input fundamental matrix. It can be computed from the same set of point pairs using findFundamentalMat .

	*
		- imgSize

		- Size of the image.

	*
		- H1

		- Output rectification homography matrix for the first image.

	*
		- H2

		- Output rectification homography matrix for the second image.

	*
		- threshold

		- Optional threshold used to filter out the outliers. If the parameter is greater than zero, all the point pairs that do not comply with the epipolar geometry (that is, the points for which :math:`|\texttt{points2[i]}^T*\texttt{F}*\texttt{points1[i]}|>\texttt{threshold}`) are rejected prior to computing the homographies. Otherwise,all the points are considered inliers.

.. index:: pair: function; triangulatePoints
.. _doxid-d9/d0c/group__calib3d_1gad3fc9a0c82b08df034234979960b778c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::triangulatePoints(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projMatr1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projMatr2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projPoints1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` projPoints2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` points4D
		)

Reconstructs points by triangulation.

The function reconstructs 3-dimensional points (in homogeneous coordinates) by using their observations with a stereo camera. Projections matrices can be obtained from stereoRectify.

Keep in mind that all input data should be of float type in order for this function to work.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- projMatr1

		- 3x4 projection matrix of the first camera.

	*
		- projMatr2

		- 3x4 projection matrix of the second camera.

	*
		- projPoints1

		- 2xN array of feature points in the first image. In case of c++ version it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.

	*
		- projPoints2

		- 2xN array of corresponding points in the second image. In case of c++ version it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.

	*
		- points4D

		- 4xN array of reconstructed points in homogeneous coordinates.



.. rubric:: See also:

:ref:`reprojectImageTo3D <doxid-d9/d0c/group__calib3d_1ga1bc1152bd57d63bc524204f21fde6e02>`

.. index:: pair: function; validateDisparity
.. _doxid-d9/d0c/group__calib3d_1ga214b498b8d01d0417e0d08be64c54eb5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::validateDisparity(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` disparity,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` cost,
		int minDisparity,
		int numberOfDisparities,
		int disp12MaxDisp = 1
		)

validates disparity using the left-right check. The matrix "cost" should be computed by the stereo correspondence algorithm

