.. index:: pair: group; Operations on arrays
.. _doxid-d2/de8/group__core__array:

Operations on arrays
====================

.. toctree::
	:hidden:

	enum_cv_BorderTypes.rst
	enum_cv_CmpTypes.rst
	enum_cv_DecompTypes.rst
	enum_cv_DftFlags.rst
	enum_cv_GemmFlags.rst
	enum_cv_NormTypes.rst
	enum_cv_RotateFlags.rst
	class_cv_LDA.rst
	class_cv_PCA.rst
	class_cv_RNG.rst
	class_cv_RNG_MT19937.rst
	class_cv_SVD.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::BorderTypes<doxid-d2/de8/group__core__array_1ga209f2f4869e304c82d07739337eae7c5>`;
	enum :ref:`cv::CmpTypes<doxid-d2/de8/group__core__array_1ga0cc47ff833d40b58ecbe1d609a53d784>`;
	enum :ref:`cv::DecompTypes<doxid-d2/de8/group__core__array_1gaaf9ea5dcc392d5ae04eacb9920b9674c>`;
	enum :ref:`cv::DftFlags<doxid-d2/de8/group__core__array_1gaf4dde112b483b38175621befedda1f1c>`;
	enum :ref:`cv::GemmFlags<doxid-d2/de8/group__core__array_1ga66643400559695a653d08e2000809060>`;
	enum :ref:`cv::NormTypes<doxid-d2/de8/group__core__array_1gad12cefbcb5291cf958a85b4b67b6149f>`;
	enum :ref:`cv::RotateFlags<doxid-d2/de8/group__core__array_1ga6f45d55c0b1cc9d97f5353a7c8a7aac2>`;

	// classes

	class :ref:`cv::LDA<doxid-d4/d0c/classcv_1_1_l_d_a>`;
	class :ref:`cv::PCA<doxid-d3/d39/classcv_1_1_p_c_a>`;
	class :ref:`cv::RNG<doxid-d3/df8/classcv_1_1_r_n_g>`;
	class :ref:`cv::RNG_MT19937<doxid-d4/dc1/classcv_1_1_r_n_g___m_t19937>`;
	class :ref:`cv::SVD<doxid-d6/d55/classcv_1_1_s_v_d>`;

	// global functions

	void
	:ref:`cv::absdiff<doxid-d2/de8/group__core__array_1ga6fef31bc8c4071cbc114a758a2b79c14>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::add<doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1
		);

	void
	:ref:`cv::addWeighted<doxid-d2/de8/group__core__array_1gafafb2513349db3bcff51f54ee5592a19>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double beta,
		double gamma,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dtype = -1
		);

	void
	:ref:`cv::batchDistance<doxid-d2/de8/group__core__array_1ga4ba778a1c57f83233b1d851c83f5a622>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dist,
		int dtype,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` nidx,
		int normType = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		int K = 0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int update = 0,
		bool crosscheck = false
		);

	void
	:ref:`cv::bitwise_and<doxid-d2/de8/group__core__array_1ga60b4d04b251ba5eb1392c34425497e14>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::bitwise_not<doxid-d2/de8/group__core__array_1ga0002cf8b418479f4cb49a75442baee2f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::bitwise_or<doxid-d2/de8/group__core__array_1gab85523db362a4e26ff0c703793a719b4>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::bitwise_xor<doxid-d2/de8/group__core__array_1ga84b2d8188ce506593dcc3f8cd00e8e2c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	int
	:ref:`cv::borderInterpolate<doxid-d2/de8/group__core__array_1ga247f571aa6244827d3d798f13892da58>`(
		int p,
		int len,
		int borderType
		);

	void
	:ref:`cv::calcCovarMatrix<doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* samples,
		int nsamples,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& covar,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& mean,
		int flags,
		int ctype = :ref:`CV_64F<doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`
		);

	void
	:ref:`cv::calcCovarMatrix<doxid-d2/de8/group__core__array_1ga017122d912af19d7d0d2cccc2d63819f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` covar,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mean,
		int flags,
		int ctype = :ref:`CV_64F<doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`
		);

	void
	:ref:`cv::cartToPolar<doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false
		);

	bool
	:ref:`cv::checkRange<doxid-d2/de8/group__core__array_1ga2bd19d89cae59361416736f87e3c7a64>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` a,
		bool quiet = true,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* pos = 0,
		double minVal = -DBL_MAX,
		double maxVal = DBL_MAX
		);

	void
	:ref:`cv::compare<doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int cmpop
		);

	void
	:ref:`cv::completeSymm<doxid-d2/de8/group__core__array_1gaa9d88dcd0e54b6d1af38d41f2a3e3d25>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mtx,
		bool lowerToUpper = false
		);

	void
	:ref:`cv::convertFp16<doxid-d2/de8/group__core__array_1ga9c25d9ef44a2a48ecc3774b30cb80082>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::convertScaleAbs<doxid-d2/de8/group__core__array_1ga3460e9c9f37b563ab9dd550c4d8c4e7d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double alpha = 1,
		double beta = 0
		);

	void
	:ref:`cv::copyMakeBorder<doxid-d2/de8/group__core__array_1ga2ac1049c2c3dd25c2b41bffe17658a36>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int top,
		int bottom,
		int left,
		int right,
		int borderType,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& value = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`()
		);

	int
	:ref:`cv::countNonZero<doxid-d2/de8/group__core__array_1gaa4b89393263bb4d604e0fe5986723914>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src);

	void
	:ref:`cv::dct<doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0
		);

	double
	:ref:`cv::determinant<doxid-d2/de8/group__core__array_1gaf802bd9ca3e07b8b6170645ef0611d0c>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mtx);

	void
	:ref:`cv::dft<doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0,
		int nonzeroRows = 0
		);

	void
	:ref:`cv::divide<doxid-d2/de8/group__core__array_1ga6db555d30115642fedae0cda05604874>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1
		);

	void
	:ref:`cv::divide<doxid-d2/de8/group__core__array_1ga1f96b569cac4c286642b34eff098138e>`(
		double scale,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dtype = -1
		);

	bool
	:ref:`cv::eigen<doxid-d2/de8/group__core__array_1ga9fa0d58657f60eaa6c71f6fbb40456e3>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvalues,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvectors = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::exp<doxid-d2/de8/group__core__array_1ga3e10108e2162c338f1b848af619f39e5>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::extractChannel<doxid-d2/de8/group__core__array_1gacc6158574aa1f0281878c955bcf35642>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int coi
		);

	void
	:ref:`cv::findNonZero<doxid-d2/de8/group__core__array_1gaed7df59a3539b4cc0fe5c9c8d7586190>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` idx
		);

	void
	:ref:`cv::flip<doxid-d2/de8/group__core__array_1gaca7be533e3dac7feb70fc60635adf441>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flipCode
		);

	void
	:ref:`cv::gemm<doxid-d2/de8/group__core__array_1gacb6e64071dffe36434e1e7ee79e7cb35>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3,
		double beta,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0
		);

	int
	:ref:`cv::getOptimalDFTSize<doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299>`(int vecsize);

	void
	:ref:`cv::hconcat<doxid-d2/de8/group__core__array_1gaf9771c991763233866bf76b5b5d1776f>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* src,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nsrc,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::hconcat<doxid-d2/de8/group__core__array_1gaab5ceee39e0580f879df645a872c6bf7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::hconcat<doxid-d2/de8/group__core__array_1ga4676b1376cdc4e528dab6bd9edc51c1a>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::idct<doxid-d2/de8/group__core__array_1ga77b168d84e564c50228b69730a227ef2>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0
		);

	void
	:ref:`cv::idft<doxid-d2/de8/group__core__array_1gaa708aa2d2e57a508f968eb0f69aa5ff1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0,
		int nonzeroRows = 0
		);

	void
	:ref:`cv::inRange<doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` lowerb,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` upperb,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::insertChannel<doxid-d2/de8/group__core__array_1ga1d4bd886d35b00ec0b764cb4ce6eb515>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		int coi
		);

	double
	:ref:`cv::invert<doxid-d2/de8/group__core__array_1gad278044679d4ecf20f7622cc151aaaa2>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`
		);

	void
	:ref:`cv::log<doxid-d2/de8/group__core__array_1ga937ecdce4679a77168730830a955bea7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::LUT<doxid-d2/de8/group__core__array_1gab55b8d062b7f5587720ede032d34156f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` lut,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::magnitude<doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude
		);

	double
	:ref:`cv::Mahalanobis<doxid-d2/de8/group__core__array_1ga4493aee129179459cbfc6064f051aa7d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` v1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` v2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` icovar
		);

	void
	:ref:`cv::max<doxid-d2/de8/group__core__array_1gacc40fa15eac0fb83f8ca70b7cc0b588d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::max<doxid-d2/de8/group__core__array_1gad81c37ed0b0fd23ede0cefadbf04af44>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src1,
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src2,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& dst
		);

	void
	:ref:`cv::max<doxid-d2/de8/group__core__array_1ga6eefd595055bf1ea4ba3d12f70531511>`(
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src1,
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src2,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		);

	:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`
	:ref:`cv::mean<doxid-d2/de8/group__core__array_1ga191389f8a0e58180bb13a727782cd461>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::meanStdDev<doxid-d2/de8/group__core__array_1ga846c858f4004d59493d7c6a4354b301d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mean,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stddev,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::merge<doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* mv,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` count,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::merge<doxid-d2/de8/group__core__array_1ga61f2f2bde4a0a0154b2333ea504fab1d>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` mv,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::min<doxid-d2/de8/group__core__array_1ga9af368f182ee76d0463d0d8d5330b764>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::min<doxid-d2/de8/group__core__array_1ga0b8852cd1a92366860e390e8abbe78dc>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src1,
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src2,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& dst
		);

	void
	:ref:`cv::min<doxid-d2/de8/group__core__array_1gaa83bf3dce9a4a488675347fff6692cb9>`(
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src1,
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src2,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		);

	void
	:ref:`cv::minMaxIdx<doxid-d2/de8/group__core__array_1ga7622c466c628a75d9ed008b42250a73f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double* minVal,
		double* maxVal = 0,
		int* minIdx = 0,
		int* maxIdx = 0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::minMaxLoc<doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double* minVal,
		double* maxVal = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* minLoc = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* maxLoc = 0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::minMaxLoc<doxid-d2/de8/group__core__array_1ga8873b86a29c5af51cafdcee82f8150a7>`(
		const :ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& a,
		double* minVal,
		double* maxVal,
		int* minIdx = 0,
		int* maxIdx = 0
		);

	void
	:ref:`cv::mixChannels<doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* src,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nsrcs,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* dst,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` ndsts,
		const int* fromTo,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` npairs
		);

	void
	:ref:`cv::mixChannels<doxid-d2/de8/group__core__array_1ga89dd05fd8fe54f5b7b5d89bca21153a1>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`InputOutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga8899575c0929a56ab8bdd01cf34ebcb1>` dst,
		const int* fromTo,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` npairs
		);

	void
	:ref:`cv::mixChannels<doxid-d2/de8/group__core__array_1ga83b61f9875e6618ee08487b21ec71ab1>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`InputOutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga8899575c0929a56ab8bdd01cf34ebcb1>` dst,
		const std::vector<int>& fromTo
		);

	void
	:ref:`cv::mulSpectrums<doxid-d2/de8/group__core__array_1ga3ab38646463c59bf0ce962a9d51db64f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` a,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` b,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` c,
		int flags,
		bool conjB = false
		);

	void
	:ref:`cv::multiply<doxid-d2/de8/group__core__array_1ga979d898a58d7f61c53003e162e7ad89f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1
		);

	void
	:ref:`cv::mulTransposed<doxid-d2/de8/group__core__array_1gadc4e49f8f7a155044e3be1b9e3b270ab>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		bool aTa,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` delta = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		double scale = 1,
		int dtype = -1
		);

	double
	:ref:`cv::norm<doxid-d2/de8/group__core__array_1ga55a581f0accd8d990af775d378e7e46c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		int normType = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	double
	:ref:`cv::norm<doxid-d2/de8/group__core__array_1gae15fc2d956eb3a93ec65339a50dc7b6a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		int normType = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	double
	:ref:`cv::norm<doxid-d2/de8/group__core__array_1ga7c331fb8dd951707e184ef4e3f21dd33>`(
		const :ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& src,
		int normType
		);

	void
	:ref:`cv::normalize<doxid-d2/de8/group__core__array_1ga87eef7ee3970f86906d69a92cbf064bd>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		double alpha = 1,
		double beta = 0,
		int norm_type = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		int dtype = -1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		);

	void
	:ref:`cv::normalize<doxid-d2/de8/group__core__array_1ga7bcf47a1df78cf575162e0aed44960cb>`(
		const :ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& src,
		:ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& dst,
		double alpha,
		int normType
		);

	void
	:ref:`cv::patchNaNs<doxid-d2/de8/group__core__array_1ga62286befb7cde3568ff8c7d14d5079da>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` a,
		double val = 0
		);

	void
	:ref:`cv::PCABackProject<doxid-d2/de8/group__core__array_1gab26049f30ee8e94f7d69d82c124faafc>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` eigenvectors,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
		);

	void
	:ref:`cv::PCACompute<doxid-d2/de8/group__core__array_1ga4e2073c7311f292a0648f04c37b73781>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mean,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvectors,
		int maxComponents = 0
		);

	void
	:ref:`cv::PCACompute<doxid-d2/de8/group__core__array_1ga0ad1147fbcdb256f2e14ae2bfb8c991d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mean,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvectors,
		double retainedVariance
		);

	void
	:ref:`cv::PCAProject<doxid-d2/de8/group__core__array_1ga6b9fbc7b3a99ebfd441bbec0a6bc4f88>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` eigenvectors,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
		);

	void
	:ref:`cv::perspectiveTransform<doxid-d2/de8/group__core__array_1gad327659ac03e5fd6894b90025e6900a7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m
		);

	void
	:ref:`cv::phase<doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false
		);

	void
	:ref:`cv::polarToCart<doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` magnitude,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` angle,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` x,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` y,
		bool angleInDegrees = false
		);

	void
	:ref:`cv::pow<doxid-d2/de8/group__core__array_1gaf0d056b5bd1dc92500d6f6cf6bac41ef>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double power,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	double
	:ref:`cv::PSNR<doxid-d2/de8/group__core__array_1ga07aaf34ae31d226b1b847d8bcff3698f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2
		);

	void
	:ref:`cv::randn<doxid-d2/de8/group__core__array_1gaeff1f61e972d133a04ce3a5f81cf6808>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` stddev
		);

	void
	:ref:`cv::randShuffle<doxid-d2/de8/group__core__array_1ga6a789c8a5cb56c6dd62506179808f763>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		double iterFactor = 1.,
		:ref:`RNG<doxid-d3/df8/classcv_1_1_r_n_g>`* rng = 0
		);

	void
	:ref:`cv::randu<doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` low,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` high
		);

	void
	:ref:`cv::reduce<doxid-d2/de8/group__core__array_1ga4b78072a303f29d9031d56e5638da78e>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dim,
		int rtype,
		int dtype = -1
		);

	void
	:ref:`cv::repeat<doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		int ny,
		int nx,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	:ref:`cv::repeat<doxid-d2/de8/group__core__array_1ga8e9c4ef56a85c58332c63997c10a51d8>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src,
		int ny,
		int nx
		);

	void
	:ref:`cv::rotate<doxid-d2/de8/group__core__array_1ga4ad01c0978b0ce64baa246811deeac24>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int rotateCode
		);

	void
	:ref:`cv::scaleAdd<doxid-d2/de8/group__core__array_1ga9e0845db4135f55dcf20227402f00d98>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::setIdentity<doxid-d2/de8/group__core__array_1ga388d7575224a4a277ceb98ccaa327c99>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mtx,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(1)
		);

	void
	:ref:`cv::setRNGSeed<doxid-d2/de8/group__core__array_1ga757e657c037410d9e19e819569e7de0f>`(int seed);

	bool
	:ref:`cv::solve<doxid-d2/de8/group__core__array_1ga12b43690dbd31fed96f213eefead2373>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`
		);

	int
	:ref:`cv::solveCubic<doxid-d2/de8/group__core__array_1ga1c3b0b925b085b6e96931ee309e6a1da>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` coeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` roots
		);

	double
	:ref:`cv::solvePoly<doxid-d2/de8/group__core__array_1gac2f5e953016fabcdf793d762f4ec5dce>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` coeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` roots,
		int maxIters = 300
		);

	void
	:ref:`cv::sort<doxid-d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags
		);

	void
	:ref:`cv::sortIdx<doxid-d2/de8/group__core__array_1gadf35157cbf97f3cb85a545380e383506>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags
		);

	void
	:ref:`cv::split<doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* mvbegin
		);

	void
	:ref:`cv::split<doxid-d2/de8/group__core__array_1ga8027f9deee1e42716be8039e5863fbd9>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` mv
		);

	void
	:ref:`cv::sqrt<doxid-d2/de8/group__core__array_1ga186222c3919657890f88df5a1f64a7d7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::subtract<doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1
		);

	:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`
	:ref:`cv::sum<doxid-d2/de8/group__core__array_1ga716e10a2dd9e228e4d3c95818f106722>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src);

	void
	:ref:`cv::SVBackSubst<doxid-d2/de8/group__core__array_1gab4e620e6fc6c8a27bb2be3d50a840c0b>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` w,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` u,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vt,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rhs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::SVDecomp<doxid-d2/de8/group__core__array_1gab477b5b7b39b370bb03e75b19d2d5109>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` w,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` u,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` vt,
		int flags = 0
		);

	:ref:`RNG<doxid-d3/df8/classcv_1_1_r_n_g>`&
	:ref:`cv::theRNG<doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>`();

	:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`
	:ref:`cv::trace<doxid-d2/de8/group__core__array_1ga3419ac19c7dcd2be4bd552a23e147dd8>`(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mtx);

	void
	:ref:`cv::transform<doxid-d2/de8/group__core__array_1ga393164aa54bb9169ce0a8cc44e08ff22>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m
		);

	void
	:ref:`cv::transpose<doxid-d2/de8/group__core__array_1ga46630ed6c0ea6254a35f447289bd7404>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::vconcat<doxid-d2/de8/group__core__array_1ga744f53b69f6e4f12156cdde4e76aed27>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* src,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nsrc,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::vconcat<doxid-d2/de8/group__core__array_1gaad07cede730cdde64b90e987aad179b8>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::vconcat<doxid-d2/de8/group__core__array_1ga558e169e15adcc46b8cdcc6cd215070f>`(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

.. _details-d2/de8/group__core__array:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; absdiff
.. _doxid-d2/de8/group__core__array_1ga6fef31bc8c4071cbc114a758a2b79c14:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::absdiff(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates the per-element absolute difference between two arrays or between an array and a scalar.

The function :ref:`cv::absdiff <doxid-d2/de8/group__core__array_1ga6fef31bc8c4071cbc114a758a2b79c14>` calculates: Absolute difference between two arrays when they have the same size and type:

.. math::

	\texttt{dst}(I) = \texttt{saturate} (| \texttt{src1}(I) - \texttt{src2}(I)|)

Absolute difference between an array and a scalar when the second array is constructed from Scalar or has as many elements as the number of channels in ``src1`` :

.. math::

	\texttt{dst}(I) = \texttt{saturate} (| \texttt{src1}(I) - \texttt{src2} |)

Absolute difference between a scalar and an array when the first array is constructed from Scalar or has as many elements as the number of channels in ``src2`` :

.. math::

	\texttt{dst}(I) = \texttt{saturate} (| \texttt{src1} - \texttt{src2}(I) |)

where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. Saturation is not applied when the arrays have the depth CV_32S. You may even get a negative value in the case of overflow.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar.

	*
		- src2

		- second input array or a scalar.

	*
		- dst

		- output array that has the same size and type as input arrays.



.. rubric:: See also:

cv::abs(const Mat&)

.. index:: pair: function; add
.. _doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::add(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1
		)

Calculates the per-element sum of two arrays or an array and a scalar.

The function add calculates:

* Sum of two arrays when both input arrays have the same size and the same number of channels:
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src1}(I) + \texttt{src2}(I)) \quad \texttt{if mask}(I) \ne0

* Sum of an array and a scalar when src2 is constructed from Scalar or has the same number of elements as ``src1.channels()`` :
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src1}(I) + \texttt{src2} ) \quad \texttt{if mask}(I) \ne0

* Sum of a scalar and an array when src1 is constructed from Scalar or has the same number of elements as ``src2.channels()`` :
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src1} + \texttt{src2}(I) ) \quad \texttt{if mask}(I) \ne0
  
  where ``I`` is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently.

The first function in the list above can be replaced with matrix expressions:

.. ref-code-block:: cpp

	dst = src1 + src2;
	dst += src1; // equivalent to add(dst, src1, dst);

The input arrays and the output array can all have the same or different depths. For example, you can add a 16-bit unsigned array to a 8-bit signed array and store the sum as a 32-bit floating-point array. Depth of the output array is determined by the dtype parameter. In the second and third cases above, as well as in the first case, when src1.depth() == src2.depth(), dtype can be set to the default -1. In this case, the output array will have the same depth as the input array, be it src1, src2 or both. Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar.

	*
		- src2

		- second input array or a scalar.

	*
		- dst

		- output array that has the same size and number of channels as the input array(s); the depth is defined by dtype or src1/src2.

	*
		- mask

		- optional operation mask - 8-bit single channel array, that specifies elements of the output array to be changed.

	*
		- dtype

		- optional depth of the output array (see the discussion below).



.. rubric:: See also:

:ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`, :ref:`addWeighted <doxid-d2/de8/group__core__array_1gafafb2513349db3bcff51f54ee5592a19>`, :ref:`scaleAdd <doxid-d2/de8/group__core__array_1ga9e0845db4135f55dcf20227402f00d98>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; addWeighted
.. _doxid-d2/de8/group__core__array_1gafafb2513349db3bcff51f54ee5592a19:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::addWeighted(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double beta,
		double gamma,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dtype = -1
		)

Calculates the weighted sum of two arrays.

The function addWeighted calculates the weighted sum of two arrays as follows:

.. math::

	\texttt{dst} (I)= \texttt{saturate} ( \texttt{src1} (I)* \texttt{alpha} + \texttt{src2} (I)* \texttt{beta} + \texttt{gamma} )

where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently. The function can be replaced with a matrix expression:

.. ref-code-block:: cpp

	dst = src1*alpha + src2*beta + gamma;

Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- alpha

		- weight of the first array elements.

	*
		- src2

		- second input array of the same size and channel number as src1.

	*
		- beta

		- weight of the second array elements.

	*
		- gamma

		- scalar added to each sum.

	*
		- dst

		- output array that has the same size and number of channels as the input arrays.

	*
		- dtype

		- optional depth of the output array; when both input arrays have the same depth, dtype can be set to -1, which will be equivalent to src1.depth().



.. rubric:: See also:

:ref:`add <doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`, :ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`, :ref:`scaleAdd <doxid-d2/de8/group__core__array_1ga9e0845db4135f55dcf20227402f00d98>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; batchDistance
.. _doxid-d2/de8/group__core__array_1ga4ba778a1c57f83233b1d851c83f5a622:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::batchDistance(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dist,
		int dtype,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` nidx,
		int normType = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		int K = 0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int update = 0,
		bool crosscheck = false
		)

naive nearest neighbor finder

see `http://en.wikipedia.org/wiki/Nearest_neighbor_search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`__ Todo document

.. index:: pair: function; bitwise_and
.. _doxid-d2/de8/group__core__array_1ga60b4d04b251ba5eb1392c34425497e14:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::bitwise_and(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

computes bitwise conjunction of the two arrays (dst = src1 & src2) Calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.

The function :ref:`cv::bitwise_and <doxid-d2/de8/group__core__array_1ga60b4d04b251ba5eb1392c34425497e14>` calculates the per-element bit-wise logical conjunction for: Two arrays when src1 and src2 have the same size:

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \wedge \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0

An array and a scalar when src2 is constructed from Scalar or has the same number of elements as ``src1.channels()`` :

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \wedge \texttt{src2} \quad \texttt{if mask} (I) \ne0

A scalar and an array when src1 is constructed from Scalar or has the same number of elements as ``src2.channels()`` :

.. math::

	\texttt{dst} (I) = \texttt{src1} \wedge \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0

In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the second and third cases above, the scalar is first converted to the array type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar.

	*
		- src2

		- second input array or a scalar.

	*
		- dst

		- output array that has the same size and type as the input arrays.

	*
		- mask

		- optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.

.. index:: pair: function; bitwise_not
.. _doxid-d2/de8/group__core__array_1ga0002cf8b418479f4cb49a75442baee2f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::bitwise_not(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Inverts every bit of an array.

The function :ref:`cv::bitwise_not <doxid-d2/de8/group__core__array_1ga0002cf8b418479f4cb49a75442baee2f>` calculates per-element bit-wise inversion of the input array:

.. math::

	\texttt{dst} (I) = \neg \texttt{src} (I)

In case of a floating-point input array, its machine-specific bit representation (usually IEEE754-compliant) is used for the operation. In case of multi-channel arrays, each channel is processed independently.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array that has the same size and type as the input array.

	*
		- mask

		- optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.

.. index:: pair: function; bitwise_or
.. _doxid-d2/de8/group__core__array_1gab85523db362a4e26ff0c703793a719b4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::bitwise_or(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates the per-element bit-wise disjunction of two arrays or an array and a scalar.

The function :ref:`cv::bitwise_or <doxid-d2/de8/group__core__array_1gab85523db362a4e26ff0c703793a719b4>` calculates the per-element bit-wise logical disjunction for: Two arrays when src1 and src2 have the same size:

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \vee \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0

An array and a scalar when src2 is constructed from Scalar or has the same number of elements as ``src1.channels()`` :

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \vee \texttt{src2} \quad \texttt{if mask} (I) \ne0

A scalar and an array when src1 is constructed from Scalar or has the same number of elements as ``src2.channels()`` :

.. math::

	\texttt{dst} (I) = \texttt{src1} \vee \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0

In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the second and third cases above, the scalar is first converted to the array type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar.

	*
		- src2

		- second input array or a scalar.

	*
		- dst

		- output array that has the same size and type as the input arrays.

	*
		- mask

		- optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.

.. index:: pair: function; bitwise_xor
.. _doxid-d2/de8/group__core__array_1ga84b2d8188ce506593dcc3f8cd00e8e2c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::bitwise_xor(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates the per-element bit-wise "exclusive or" operation on two arrays or an array and a scalar.

The function :ref:`cv::bitwise_xor <doxid-d2/de8/group__core__array_1ga84b2d8188ce506593dcc3f8cd00e8e2c>` calculates the per-element bit-wise logical "exclusive-or" operation for: Two arrays when src1 and src2 have the same size:

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \oplus \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0

An array and a scalar when src2 is constructed from Scalar or has the same number of elements as ``src1.channels()`` :

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \oplus \texttt{src2} \quad \texttt{if mask} (I) \ne0

A scalar and an array when src1 is constructed from Scalar or has the same number of elements as ``src2.channels()`` :

.. math::

	\texttt{dst} (I) = \texttt{src1} \oplus \texttt{src2} (I) \quad \texttt{if mask} (I) \ne0

In case of floating-point arrays, their machine-specific bit representations (usually IEEE754-compliant) are used for the operation. In case of multi-channel arrays, each channel is processed independently. In the 2nd and 3rd cases above, the scalar is first converted to the array type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar.

	*
		- src2

		- second input array or a scalar.

	*
		- dst

		- output array that has the same size and type as the input arrays.

	*
		- mask

		- optional operation mask, 8-bit single channel array, that specifies elements of the output array to be changed.

.. index:: pair: function; borderInterpolate
.. _doxid-d2/de8/group__core__array_1ga247f571aa6244827d3d798f13892da58:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::borderInterpolate(
		int p,
		int len,
		int borderType
		)

Computes the source location of an extrapolated pixel.

The function computes and returns the coordinate of a donor pixel corresponding to the specified extrapolated pixel when using the specified extrapolation border mode. For example, if you use :ref:`cv::BORDER_WRAP <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5a697c1b011884a7c2bdc0e5caf7955661>` mode in the horizontal direction, :ref:`cv::BORDER_REFLECT_101 <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5ab3c5a6143d8120b95005fa7105a10bb4>` in the vertical direction and want to compute value of the "virtual" pixel Point(-5, 100) in a floating-point image img , it looks like:

.. ref-code-block:: cpp

	float val = img.at<float>(:ref:`borderInterpolate <doxid-d2/de8/group__core__array_1ga247f571aa6244827d3d798f13892da58>`(100, img.rows, :ref:`cv::BORDER_REFLECT_101 <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5ab3c5a6143d8120b95005fa7105a10bb4>`),
	                          :ref:`borderInterpolate <doxid-d2/de8/group__core__array_1ga247f571aa6244827d3d798f13892da58>`(-5, img.cols, :ref:`cv::BORDER_WRAP <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5a697c1b011884a7c2bdc0e5caf7955661>`));

Normally, the function is not called directly. It is used inside filtering functions and also in copyMakeBorder.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- p

		- 0-based coordinate of the extrapolated pixel along one of the axes, likely <0 or >= len

	*
		- len

		- Length of the array along the corresponding axis.

	*
		- borderType

		- Border type, one of the :ref:`cv::BorderTypes <doxid-d2/de8/group__core__array_1ga209f2f4869e304c82d07739337eae7c5>`, except for :ref:`cv::BORDER_TRANSPARENT <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5a886a5eb6b466854d63f9e742d5c8eefe>` and :ref:`cv::BORDER_ISOLATED <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5a4fcb77ae62e1e1336c1c2b24a441995c>`. When borderType== :ref:`cv::BORDER_CONSTANT <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5aed2e4346047e265c8c5a6d0276dcd838>`, the function always returns -1, regardless of p and len.



.. rubric:: See also:

:ref:`copyMakeBorder <doxid-d2/de8/group__core__array_1ga2ac1049c2c3dd25c2b41bffe17658a36>`

.. index:: pair: function; calcCovarMatrix
.. _doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::calcCovarMatrix(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* samples,
		int nsamples,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& covar,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& mean,
		int flags,
		int ctype = :ref:`CV_64F<doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`
		)

Calculates the covariance matrix of a set of vectors.

The function :ref:`cv::calcCovarMatrix <doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>` calculates the covariance matrix and, optionally, the mean vector of the set of input vectors. Todo InputArrayOfArrays



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- samples stored as separate matrices

	*
		- nsamples

		- number of samples

	*
		- covar

		- output covariance matrix of the type ctype and square size.

	*
		- mean

		- input or output (depending on the flags) array as the average value of the input vectors.

	*
		- flags

		- operation flags as a combination of :ref:`cv::CovarFlags <doxid-d0/de1/group__core_1ga719ebd4a73f30f4fab258ab7616d0f0f>`

	*
		- ctype

		- type of the matrixl; it equals 'CV_64F' by default.



.. rubric:: See also:

:ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>`, :ref:`mulTransposed <doxid-d2/de8/group__core__array_1gadc4e49f8f7a155044e3be1b9e3b270ab>`, :ref:`Mahalanobis <doxid-d2/de8/group__core__array_1ga4493aee129179459cbfc6064f051aa7d>`

.. index:: pair: function; calcCovarMatrix
.. _doxid-d2/de8/group__core__array_1ga017122d912af19d7d0d2cccc2d63819f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::calcCovarMatrix(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` samples,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` covar,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mean,
		int flags,
		int ctype = :ref:`CV_64F<doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. use :ref:`cv::COVAR_ROWS <doxid-d0/de1/group__core_1gga719ebd4a73f30f4fab258ab7616d0f0fadbac775ac8245aad5bfef994731c635f>` or :ref:`cv::COVAR_COLS <doxid-d0/de1/group__core_1gga719ebd4a73f30f4fab258ab7616d0f0fac8cc5a80914e18d6100184a2829aa3c0>` flag



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- samples

		- samples stored as rows/columns of a single matrix.

	*
		- covar

		- output covariance matrix of the type ctype and square size.

	*
		- mean

		- input or output (depending on the flags) array as the average value of the input vectors.

	*
		- flags

		- operation flags as a combination of :ref:`cv::CovarFlags <doxid-d0/de1/group__core_1ga719ebd4a73f30f4fab258ab7616d0f0f>`

	*
		- ctype

		- type of the matrixl; it equals 'CV_64F' by default.

.. index:: pair: function; cartToPolar
.. _doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cartToPolar(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false
		)

Calculates the magnitude and angle of 2D vectors.

The function :ref:`cv::cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>` calculates either the magnitude, angle, or both for every 2D vector (x(I),y(I)):

.. math::

	\begin{array}{l} \texttt{magnitude} (I)= \sqrt{\texttt{x}(I)^2+\texttt{y}(I)^2} , \\ \texttt{angle} (I)= \texttt{atan2} ( \texttt{y} (I), \texttt{x} (I))[ \cdot180 / \pi ] \end{array}

The angles are calculated with accuracy about 0.3 degrees. For the point (0,0), the angle is set to 0.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- array of x-coordinates; this must be a single-precision or double-precision floating-point array.

	*
		- y

		- array of y-coordinates, that must have the same size and same type as x.

	*
		- magnitude

		- output array of magnitudes of the same size and type as x.

	*
		- angle

		- output array of angles that has the same size and type as x; the angles are measured in radians (from 0 to 2\*Pi) or in degrees (0 to 360 degrees).

	*
		- angleInDegrees

		- a flag, indicating whether the angles are measured in radians (which is by default), or in degrees.



.. rubric:: See also:

:ref:`Sobel <doxid-d4/d86/group__imgproc__filter_1gacea54f142e81b6758cb6f375ce782c8d>`, :ref:`Scharr <doxid-d4/d86/group__imgproc__filter_1gaa13106761eedf14798f37aa2d60404c9>`

.. index:: pair: function; checkRange
.. _doxid-d2/de8/group__core__array_1ga2bd19d89cae59361416736f87e3c7a64:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::checkRange(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` a,
		bool quiet = true,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* pos = 0,
		double minVal = -DBL_MAX,
		double maxVal = DBL_MAX
		)

Checks every element of an input array for invalid values.

The function :ref:`cv::checkRange <doxid-d2/de8/group__core__array_1ga2bd19d89cae59361416736f87e3c7a64>` checks that every array element is neither NaN nor infinite. When minVal > -DBL_MAX and maxVal < DBL_MAX, the function also checks that each value is between minVal and maxVal. In case of multi-channel arrays, each channel is processed independently. If some values are out of range, position of the first outlier is stored in pos (when pos != NULL). Then, the function either returns false (when quiet=true) or throws an exception.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- input array.

	*
		- quiet

		- a flag, indicating whether the functions quietly return false when the array elements are out of range or they throw an exception.

	*
		- pos

		- optional output parameter, when not NULL, must be a pointer to array of src.dims elements.

	*
		- minVal

		- inclusive lower boundary of valid values range.

	*
		- maxVal

		- exclusive upper boundary of valid values range.

.. index:: pair: function; compare
.. _doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::compare(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int cmpop
		)

Performs the per-element comparison of two arrays or an array and scalar value.

The function compares: Elements of two arrays when src1 and src2 have the same size:

.. math::

	\texttt{dst} (I) = \texttt{src1} (I) \,\texttt{cmpop}\, \texttt{src2} (I)

Elements of src1 with a scalar src2 when src2 is constructed from Scalar or has a single element:

.. math::

	\texttt{dst} (I) = \texttt{src1}(I) \,\texttt{cmpop}\, \texttt{src2}

src1 with elements of src2 when src1 is constructed from Scalar or has a single element:

.. math::

	\texttt{dst} (I) = \texttt{src1} \,\texttt{cmpop}\, \texttt{src2} (I)

When the comparison result is true, the corresponding element of output array is set to 255. The comparison operations can be replaced with the equivalent matrix expressions:

.. ref-code-block:: cpp

	Mat dst1 = src1 >= src2;
	Mat dst2 = src1 < 8;
	...



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar; when it is an array, it must have a single channel.

	*
		- src2

		- second input array or a scalar; when it is an array, it must have a single channel.

	*
		- dst

		- output array of type ref CV_8U that has the same size and the same number of channels as the input arrays.

	*
		- cmpop

		- a flag, that specifies correspondence between the arrays (:ref:`cv::CmpTypes <doxid-d2/de8/group__core__array_1ga0cc47ff833d40b58ecbe1d609a53d784>`)



.. rubric:: See also:

:ref:`checkRange <doxid-d2/de8/group__core__array_1ga2bd19d89cae59361416736f87e3c7a64>`, :ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`, :ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`, :ref:`threshold <doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57>`

.. index:: pair: function; completeSymm
.. _doxid-d2/de8/group__core__array_1gaa9d88dcd0e54b6d1af38d41f2a3e3d25:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::completeSymm(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mtx,
		bool lowerToUpper = false
		)

Copies the lower or the upper half of a square matrix to another half.

The function :ref:`cv::completeSymm <doxid-d2/de8/group__core__array_1gaa9d88dcd0e54b6d1af38d41f2a3e3d25>` copies the lower half of a square matrix to its another half. The matrix diagonal remains unchanged: :math:`\texttt{mtx}_{ij}=\texttt{mtx}_{ji}` for :math:`i > j` if lowerToUpper=false :math:`\texttt{mtx}_{ij}=\texttt{mtx}_{ji}` for :math:`i < j` if lowerToUpper=true



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mtx

		- input-output floating-point square matrix.

	*
		- lowerToUpper

		- operation flag; if true, the lower half is copied to the upper half. Otherwise, the upper half is copied to the lower half.



.. rubric:: See also:

:ref:`flip <doxid-d2/de8/group__core__array_1gaca7be533e3dac7feb70fc60635adf441>`, :ref:`transpose <doxid-d2/de8/group__core__array_1ga46630ed6c0ea6254a35f447289bd7404>`

.. index:: pair: function; convertFp16
.. _doxid-d2/de8/group__core__array_1ga9c25d9ef44a2a48ecc3774b30cb80082:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convertFp16(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Converts an array to half precision floating number.

This function converts FP32 (single precision floating point) from/to FP16 (half precision floating point). The input array has to have type of CV_32F or CV_16S to represent the bit depth. If the input array is neither of them, the function will raise an error. The format of half precision floating point is defined in IEEE 754-2008.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array.

.. index:: pair: function; convertScaleAbs
.. _doxid-d2/de8/group__core__array_1ga3460e9c9f37b563ab9dd550c4d8c4e7d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::convertScaleAbs(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double alpha = 1,
		double beta = 0
		)

Scales, calculates absolute values, and converts the result to 8-bit.

On each element of the input array, the function convertScaleAbs performs three operations sequentially: scaling, taking an absolute value, conversion to an unsigned 8-bit type:

.. math::

	\texttt{dst} (I)= \texttt{saturate\_cast<uchar>} (| \texttt{src} (I)* \texttt{alpha} + \texttt{beta} |)

In case of multi-channel arrays, the function processes each channel independently. When the output is not 8-bit, the operation can be emulated by calling the :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>` method (or by using matrix expressions) and then by calculating an absolute value of the result. For example:

.. ref-code-block:: cpp

	Mat_<float> A(30,30);
	:ref:`randu <doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0>`(A, :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(-100), :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(100));
	Mat_<float> B = A*5 + 3;
	B = :ref:`abs <doxid-d2/d75/namespacecv_1af6df65b17fb11af6d34634b6dfa44683>`(B);
	// Mat_<float> B = abs(A*5+3) will also do the job,
	// but it will allocate a temporary matrix



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array.

	*
		- alpha

		- optional scale factor.

	*
		- beta

		- optional delta added to the scaled values.



.. rubric:: See also:

:ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`, cv::abs(const Mat&)

.. index:: pair: function; copyMakeBorder
.. _doxid-d2/de8/group__core__array_1ga2ac1049c2c3dd25c2b41bffe17658a36:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::copyMakeBorder(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int top,
		int bottom,
		int left,
		int right,
		int borderType,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& value = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`()
		)

Forms a border around an image.

The function copies the source image into the middle of the destination image. The areas to the left, to the right, above and below the copied source image will be filled with extrapolated pixels. This is not what filtering functions based on it do (they extrapolate pixels on-fly), but what other more complex functions, including your own, may do to simplify image boundary handling.

The function supports the mode when src is already in the middle of dst . In this case, the function does not copy src itself but simply constructs the border, for example:

.. ref-code-block:: cpp

	// let border be the same in all directions
	int border=2;
	// constructs a larger image to fit both the image and the border
	Mat gray_buf(rgb.rows + border*2, rgb.cols + border*2, rgb.depth());
	// select the middle part of it w/o copying data
	Mat gray(gray_canvas, :ref:`Rect <doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`(border, border, rgb.cols, rgb.rows));
	// convert image from RGB to grayscale
	:ref:`cvtColor <doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>`(rgb, gray, :ref:`COLOR_RGB2GRAY <doxid-d7/d1b/group__imgproc__misc_1gga4e0972be5de079fed4e3a10e24ef5ef0ae50d0c66ee53e974234ac84cf51d1d4e>`);
	// form a border in-place
	:ref:`copyMakeBorder <doxid-d2/de8/group__core__array_1ga2ac1049c2c3dd25c2b41bffe17658a36>`(gray, gray_buf, border, border,
	               border, border, :ref:`BORDER_REPLICATE <doxid-d2/de8/group__core__array_1gga209f2f4869e304c82d07739337eae7c5aa1de4cff95e3377d6d0cbe7569bd4e9f>`);
	// now do some custom filtering ...
	...

When the source image is a part (ROI) of a bigger image, the function will try to use the pixels outside of the ROI to form a border. To disable this feature and always do extrapolation, as if src was not a ROI, use borderType \| BORDER_ISOLATED.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source image.

	*
		- dst

		- Destination image of the same type as src and the size Size(src.cols+left+right, src.rows+top+bottom) .

	*
		- top

		- 

	*
		- bottom

		- 

	*
		- left

		- 

	*
		- right

		- Parameter specifying how many pixels in each direction from the source image rectangle to extrapolate. For example, top=1, bottom=1, left=1, right=1 mean that 1 pixel-wide border needs to be built.

	*
		- borderType

		- Border type. See borderInterpolate for details.

	*
		- value

		- Border value if borderType==BORDER_CONSTANT .



.. rubric:: See also:

:ref:`borderInterpolate <doxid-d2/de8/group__core__array_1ga247f571aa6244827d3d798f13892da58>`

.. index:: pair: function; countNonZero
.. _doxid-d2/de8/group__core__array_1gaa4b89393263bb4d604e0fe5986723914:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::countNonZero(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src)

Counts non-zero array elements.

The function returns the number of non-zero elements in src :

.. math::

	\sum _{I: \; \texttt{src} (I) \ne0 } 1



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- single-channel array.



.. rubric:: See also:

:ref:`mean <doxid-d2/de8/group__core__array_1ga191389f8a0e58180bb13a727782cd461>`, :ref:`meanStdDev <doxid-d2/de8/group__core__array_1ga846c858f4004d59493d7c6a4354b301d>`, :ref:`norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>`, :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`, :ref:`calcCovarMatrix <doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>`

.. index:: pair: function; dct
.. _doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::dct(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0
		)

Performs a forward or inverse discrete Cosine transform of 1D or 2D array.

The function :ref:`cv::dct <doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>` performs a forward or inverse discrete Cosine transform (DCT) of a 1D or 2D floating-point array:

* Forward Cosine transform of a 1D vector of N elements:
  
  .. math::
  
  	Y = C^{(N)} \cdot X
  
  where
  
  .. math::
  
  	C^{(N)}_{jk}= \sqrt{\alpha_j/N} \cos \left ( \frac{\pi(2k+1)j}{2N} \right )
  
  and :math:`\alpha_0=1`, :math:`\alpha_j=2` for *j > 0*.

* Inverse Cosine transform of a 1D vector of N elements:
  
  .. math::
  
  	X = \left (C^{(N)} \right )^{-1} \cdot Y = \left (C^{(N)} \right )^T \cdot Y
  
  (since :math:`C^{(N)}` is an orthogonal matrix, :math:`C^{(N)} \cdot \left(C^{(N)}\right)^T = I`)

* Forward 2D Cosine transform of M x N matrix:
  
  .. math::
  
  	Y = C^{(N)} \cdot X \cdot \left (C^{(N)} \right )^T

* Inverse 2D Cosine transform of M x N matrix:
  
  .. math::
  
  	X = \left (C^{(N)} \right )^T \cdot X \cdot C^{(N)}

The function chooses the mode of operation by looking at the flags and size of the input array:

* If (flags & DCT_INVERSE) == 0 , the function does a forward 1D or 2D transform. Otherwise, it is an inverse 1D or 2D transform.

* If (flags & DCT_ROWS) != 0 , the function performs a 1D transform of each row.

* If the array is a single column or a single row, the function performs a 1D transform.

* If none of the above is true, the function performs a 2D transform.

Currently dct supports even-size arrays (2, 4, 6 ...). For data analysis and approximation, you can pad the array when necessary. Also, the function performance depends very much, and not monotonically, on the array size (see getOptimalDFTSize ). In the current implementation DCT of a vector of size N is calculated via DFT of a vector of size N/2 . Thus, the optimal DCT size N1 >= N can be calculated as:

.. ref-code-block:: cpp

	size_t getOptimalDCTSize(size_t N) { return 2*getOptimalDFTSize((N+1)/2); }
	N1 = getOptimalDCTSize(N);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input floating-point array.

	*
		- dst

		- output array of the same size and type as src .

	*
		- flags

		- transformation flags as a combination of :ref:`cv::DftFlags <doxid-d2/de8/group__core__array_1gaf4dde112b483b38175621befedda1f1c>` (DCT\_\*)



.. rubric:: See also:

:ref:`dft <doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>`, :ref:`getOptimalDFTSize <doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299>`, :ref:`idct <doxid-d2/de8/group__core__array_1ga77b168d84e564c50228b69730a227ef2>`

.. index:: pair: function; determinant
.. _doxid-d2/de8/group__core__array_1gaf802bd9ca3e07b8b6170645ef0611d0c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::determinant(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mtx)

Returns the determinant of a square floating-point matrix.

The function :ref:`cv::determinant <doxid-dc/d84/group__core__basic_1ga06b8ec936c3cbc9502d76c7818053b41>` calculates and returns the determinant of the specified matrix. For small matrices ( mtx.cols=mtx.rows<=3 ), the direct method is used. For larger matrices, the function uses LU factorization with partial pivoting.

For symmetric positively-determined matrices, it is also possible to use eigen decomposition to calculate the determinant.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mtx

		- input matrix that must have CV_32FC1 or CV_64FC1 type and square size.



.. rubric:: See also:

:ref:`trace <doxid-dc/d84/group__core__basic_1ga36ad18631177b097a38198c4e83c6e2b>`, :ref:`invert <doxid-d2/de8/group__core__array_1gad278044679d4ecf20f7622cc151aaaa2>`, :ref:`solve <doxid-d2/de8/group__core__array_1ga12b43690dbd31fed96f213eefead2373>`, :ref:`eigen <doxid-d2/de8/group__core__array_1ga9fa0d58657f60eaa6c71f6fbb40456e3>`, :ref:`MatrixExpressions <doxid-d9/ddc/classcv_1_1_mat_expr_1MatrixExpressions>`

.. index:: pair: function; dft
.. _doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::dft(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0,
		int nonzeroRows = 0
		)

Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.

The function :ref:`cv::dft <doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>` performs one of the following:

* Forward the Fourier transform of a 1D vector of N elements:
  
  .. math::
  
  	Y = F^{(N)} \cdot X,
  
  where :math:`F^{(N)}_{jk}=\exp(-2\pi i j k/N)` and :math:`i=\sqrt{-1}`

* Inverse the Fourier transform of a 1D vector of N elements:
  
  .. math::
  
  	\begin{array}{l} X'= \left (F^{(N)} \right )^{-1} \cdot Y = \left (F^{(N)} \right )^* \cdot y \\ X = (1/N) \cdot X, \end{array}
  
  where :math:`F^*=\left(\textrm{Re}(F^{(N)})-\textrm{Im}(F^{(N)})\right)^T`

* Forward the 2D Fourier transform of a M x N matrix:
  
  .. math::
  
  	Y = F^{(M)} \cdot X \cdot F^{(N)}

* Inverse the 2D Fourier transform of a M x N matrix:
  
  .. math::
  
  	\begin{array}{l} X'= \left (F^{(M)} \right )^* \cdot Y \cdot \left (F^{(N)} \right )^* \\ X = \frac{1}{M \cdot N} \cdot X' \end{array}

In case of real (single-channel) data, the output spectrum of the forward Fourier transform or input spectrum of the inverse Fourier transform can be represented in a packed format called *CCS* (complex-conjugate-symmetrical). It was borrowed from IPL (Intel\* Image Processing Library). Here is how 2D *CCS* spectrum looks:

.. math::

	\begin{bmatrix} Re Y_{0,0} & Re Y_{0,1} & Im Y_{0,1} & Re Y_{0,2} & Im Y_{0,2} & \cdots & Re Y_{0,N/2-1} & Im Y_{0,N/2-1} & Re Y_{0,N/2} \\ Re Y_{1,0} & Re Y_{1,1} & Im Y_{1,1} & Re Y_{1,2} & Im Y_{1,2} & \cdots & Re Y_{1,N/2-1} & Im Y_{1,N/2-1} & Re Y_{1,N/2} \\ Im Y_{1,0} & Re Y_{2,1} & Im Y_{2,1} & Re Y_{2,2} & Im Y_{2,2} & \cdots & Re Y_{2,N/2-1} & Im Y_{2,N/2-1} & Im Y_{1,N/2} \\ \hdotsfor{9} \\ Re Y_{M/2-1,0} & Re Y_{M-3,1} & Im Y_{M-3,1} & \hdotsfor{3} & Re Y_{M-3,N/2-1} & Im Y_{M-3,N/2-1}& Re Y_{M/2-1,N/2} \\ Im Y_{M/2-1,0} & Re Y_{M-2,1} & Im Y_{M-2,1} & \hdotsfor{3} & Re Y_{M-2,N/2-1} & Im Y_{M-2,N/2-1}& Im Y_{M/2-1,N/2} \\ Re Y_{M/2,0} & Re Y_{M-1,1} & Im Y_{M-1,1} & \hdotsfor{3} & Re Y_{M-1,N/2-1} & Im Y_{M-1,N/2-1}& Re Y_{M/2,N/2} \end{bmatrix}

In case of 1D transform of a real vector, the output looks like the first row of the matrix above.

So, the function chooses an operation mode depending on the flags and size of the input array:

* If DFT_ROWS is set or the input array has a single row or single column, the function performs a 1D forward or inverse transform of each row of a matrix when DFT_ROWS is set. Otherwise, it performs a 2D transform.

* If the input array is real and DFT_INVERSE is not set, the function performs a forward 1D or 2D transform:
  
  * When DFT_COMPLEX_OUTPUT is set, the output is a complex matrix of the same size as input.
  
  * When DFT_COMPLEX_OUTPUT is not set, the output is a real matrix of the same size as input. In case of 2D transform, it uses the packed format as shown above. In case of a single 1D transform, it looks like the first row of the matrix above. In case of multiple 1D transforms (when using the DFT_ROWS flag), each row of the output matrix looks like the first row of the matrix above.

* If the input array is complex and either DFT_INVERSE or DFT_REAL_OUTPUT are not set, the output is a complex array of the same size as input. The function performs a forward or inverse 1D or 2D transform of the whole input array or each row of the input array independently, depending on the flags DFT_INVERSE and DFT_ROWS.

* When DFT_INVERSE is set and the input array is real, or it is complex but DFT_REAL_OUTPUT is set, the output is a real array of the same size as input. The function performs a 1D or 2D inverse transformation of the whole input array or each individual row, depending on the flags DFT_INVERSE and DFT_ROWS.

If DFT_SCALE is set, the scaling is done after the transformation.

Unlike dct , the function supports arrays of arbitrary size. But only those arrays are processed efficiently, whose sizes can be factorized in a product of small prime numbers (2, 3, and 5 in the current implementation). Such an efficient DFT size can be calculated using the getOptimalDFTSize method.

The sample below illustrates how to calculate a DFT-based convolution of two 2D real arrays:

.. ref-code-block:: cpp

	void convolveDFT(InputArray A, InputArray B, OutputArray C)
	{
	    // reallocate the output array if needed
	    C.create(abs(A.rows - B.rows)+1, abs(A.cols - B.cols)+1, A.type());
	    Size dftSize;
	    // calculate the size of DFT transform
	    dftSize.width = getOptimalDFTSize(A.cols + B.cols - 1);
	    dftSize.height = getOptimalDFTSize(A.rows + B.rows - 1);
	
	    // allocate temporary buffers and initialize them with 0's
	    Mat tempA(dftSize, A.type(), Scalar::all(0));
	    Mat tempB(dftSize, B.type(), Scalar::all(0));
	
	    // copy A and B to the top-left corners of tempA and tempB, respectively
	    Mat roiA(tempA, Rect(0,0,A.cols,A.rows));
	    A.copyTo(roiA);
	    Mat roiB(tempB, Rect(0,0,B.cols,B.rows));
	    B.copyTo(roiB);
	
	    // now transform the padded A & B in-place;
	    // use "nonzeroRows" hint for faster processing
	    dft(tempA, tempA, 0, A.rows);
	    dft(tempB, tempB, 0, B.rows);
	
	    // multiply the spectrums;
	    // the function handles packed spectrum representations well
	    mulSpectrums(tempA, tempB, tempA);
	
	    // transform the product back from the frequency domain.
	    // Even though all the result rows will be non-zero,
	    // you need only the first C.rows of them, and thus you
	    // pass nonzeroRows == C.rows
	    dft(tempA, tempA, DFT_INVERSE + DFT_SCALE, C.rows);
	
	    // now copy the result back to C.
	    tempA(Rect(0, 0, C.cols, C.rows)).copyTo(C);
	
	    // all the temporary buffers will be deallocated automatically
	}

To optimize this sample, consider the following approaches:

* Since nonzeroRows != 0 is passed to the forward transform calls and since A and B are copied to the top-left corners of tempA and tempB, respectively, it is not necessary to clear the whole tempA and tempB. It is only necessary to clear the tempA.cols - A.cols ( tempB.cols - B.cols) rightmost columns of the matrices.

* This DFT-based convolution does not have to be applied to the whole big arrays, especially if B is significantly smaller than A or vice versa. Instead, you can calculate convolution by parts. To do this, you need to split the output array C into multiple tiles. For each tile, estimate which parts of A and B are required to calculate convolution in this tile. If the tiles in C are too small, the speed will decrease a lot because of repeated work. In the ultimate case, when each tile in C is a single pixel, the algorithm becomes equivalent to the naive convolution algorithm. If the tiles are too big, the temporary arrays tempA and tempB become too big and there is also a slowdown because of bad cache locality. So, there is an optimal tile size somewhere in the middle.

* If different tiles in C can be calculated in parallel and, thus, the convolution is done by parts, the loop can be threaded.

All of the above improvements have been implemented in matchTemplate and filter2D . Therefore, by using them, you can get the performance even better than with the above theoretically optimal implementation. Though, those two functions actually calculate cross-correlation, not convolution, so you need to "flip" the second convolution operand B vertically and horizontally using flip . * An example using the discrete fourier transform can be found at opencv_source_code/samples/cpp/dft.cpp

* (Python) An example using the dft functionality to perform Wiener deconvolution can be found at opencv_source/samples/python/deconvolution.py

* (Python) An example rearranging the quadrants of a Fourier image can be found at opencv_source/samples/python/dft.py



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array that could be real or complex.

	*
		- dst

		- output array whose size and type depends on the flags .

	*
		- flags

		- transformation flags, representing a combination of the :ref:`cv::DftFlags <doxid-d2/de8/group__core__array_1gaf4dde112b483b38175621befedda1f1c>`

	*
		- nonzeroRows

		- when the parameter is not zero, the function assumes that only the first nonzeroRows rows of the input array (DFT_INVERSE is not set) or only the first nonzeroRows of the output array (DFT_INVERSE is set) contain non-zeros, thus, the function can handle the rest of the rows more efficiently and save some time; this technique is very useful for calculating array cross-correlation or convolution using DFT.



.. rubric:: See also:

:ref:`dct <doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>`, :ref:`getOptimalDFTSize <doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299>`, :ref:`mulSpectrums <doxid-d2/de8/group__core__array_1ga3ab38646463c59bf0ce962a9d51db64f>`, :ref:`filter2D <doxid-d4/d86/group__imgproc__filter_1ga27c049795ce870216ddfb366086b5a04>`, :ref:`matchTemplate <doxid-df/dfb/group__imgproc__object_1ga586ebfb0a7fb604b35a23d85391329be>`, :ref:`flip <doxid-d2/de8/group__core__array_1gaca7be533e3dac7feb70fc60635adf441>`, :ref:`cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`, :ref:`magnitude <doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3>`, :ref:`phase <doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>`

.. index:: pair: function; divide
.. _doxid-d2/de8/group__core__array_1ga6db555d30115642fedae0cda05604874:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::divide(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1
		)

Performs per-element division of two arrays or a scalar by an array.

The function :ref:`cv::divide <doxid-d2/de8/group__core__array_1ga6db555d30115642fedae0cda05604874>` divides one array by another:

.. math::

	\texttt{dst(I) = saturate(src1(I)*scale/src2(I))}

or a scalar by an array when there is no src1 :

.. math::

	\texttt{dst(I) = saturate(scale/src2(I))}

When src2(I) is zero, dst(I) will also be zero. Different channels of multi-channel arrays are processed independently.

Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- src2

		- second input array of the same size and type as src1.

	*
		- scale

		- scalar factor.

	*
		- dst

		- output array of the same size and type as src2.

	*
		- dtype

		- optional depth of the output array; if -1, dst will have depth src2.depth(), but in case of an array-by-array division, you can only pass -1 when src1.depth()==src2.depth().



.. rubric:: See also:

:ref:`multiply <doxid-d2/de8/group__core__array_1ga979d898a58d7f61c53003e162e7ad89f>`, :ref:`add <doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`, :ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`

.. index:: pair: function; divide
.. _doxid-d2/de8/group__core__array_1ga1f96b569cac4c286642b34eff098138e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::divide(
		double scale,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dtype = -1
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; eigen
.. _doxid-d2/de8/group__core__array_1ga9fa0d58657f60eaa6c71f6fbb40456e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::eigen(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvalues,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvectors = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates eigenvalues and eigenvectors of a symmetric matrix.

The function :ref:`cv::eigen <doxid-d2/de8/group__core__array_1ga9fa0d58657f60eaa6c71f6fbb40456e3>` calculates just eigenvalues, or eigenvalues and eigenvectors of the symmetric matrix src:

.. ref-code-block:: cpp

	src*eigenvectors.row(i).t() = eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()

in the new and the old interfaces different ordering of eigenvalues and eigenvectors parameters is used.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input matrix that must have CV_32FC1 or CV_64FC1 type, square size and be symmetrical (src ^T^ == src).

	*
		- eigenvalues

		- output vector of eigenvalues of the same type as src; the eigenvalues are stored in the descending order.

	*
		- eigenvectors

		- output matrix of eigenvectors; it has the same size and type as src; the eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding eigenvalues.



.. rubric:: See also:

:ref:`completeSymm <doxid-d2/de8/group__core__array_1gaa9d88dcd0e54b6d1af38d41f2a3e3d25>`, :ref:`PCA <doxid-d3/d39/classcv_1_1_p_c_a>`

.. index:: pair: function; exp
.. _doxid-d2/de8/group__core__array_1ga3e10108e2162c338f1b848af619f39e5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::exp(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates the exponent of every array element.

The function :ref:`cv::exp <doxid-d2/d75/namespacecv_1a1eb07a682abff20e0864104599c06fbc>` calculates the exponent of every element of the input array:

.. math::

	\texttt{dst} [I] = e^{ src(I) }

The maximum relative error is about 7e-6 for single-precision input and less than 1e-10 for double-precision input. Currently, the function converts denormalized values to zeros on output. Special values (NaN, Inf) are not handled.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same size and type as src.



.. rubric:: See also:

:ref:`log <doxid-d2/d75/namespacecv_1ae5de78ee278fe88405c6dbc38502f7c1>`, :ref:`cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`, :ref:`polarToCart <doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665>`, :ref:`phase <doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>`, :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`, :ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`, :ref:`magnitude <doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3>`

.. index:: pair: function; extractChannel
.. _doxid-d2/de8/group__core__array_1gacc6158574aa1f0281878c955bcf35642:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::extractChannel(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int coi
		)

Extracts a single channel from src (coi is 0-based index)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array

	*
		- dst

		- output array

	*
		- coi

		- index of channel to extract



.. rubric:: See also:

:ref:`mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`, :ref:`split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>`

.. index:: pair: function; findNonZero
.. _doxid-d2/de8/group__core__array_1gaed7df59a3539b4cc0fe5c9c8d7586190:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::findNonZero(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` idx
		)

Returns the list of locations of non-zero pixels.

Given a binary matrix (likely returned from an operation such as :ref:`threshold() <doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57>`, :ref:`compare() <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`, >, ==, etc, return all of the non-zero indices as a :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` or std::vector<cv::Point> (x,y) For example:

.. ref-code-block:: cpp

	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` binaryImage; // input, binary image
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` locations;   // output, locations of non-zero pixels
	:ref:`cv::findNonZero <doxid-d2/de8/group__core__array_1gaed7df59a3539b4cc0fe5c9c8d7586190>`(binaryImage, locations);
	
	// access pixel coordinates
	Point pnt = locations.:ref:`at <doxid-db/de6/classcv_1_1_mat_1aa5d20fc86d41d59e4d71ae93daee9726>`<Point>(i);

or

.. ref-code-block:: cpp

	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` binaryImage; // input, binary image
	vector<Point> locations;   // output, locations of non-zero pixels
	:ref:`cv::findNonZero <doxid-d2/de8/group__core__array_1gaed7df59a3539b4cc0fe5c9c8d7586190>`(binaryImage, locations);
	
	// access pixel coordinates
	Point pnt = locations[i];



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- single-channel array (type CV_8UC1)

	*
		- idx

		- the output array, type of :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` or std::vector<Point>, corresponding to non-zero indices in the input

.. index:: pair: function; flip
.. _doxid-d2/de8/group__core__array_1gaca7be533e3dac7feb70fc60635adf441:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::flip(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flipCode
		)

Flips a 2D array around vertical, horizontal, or both axes.

The function :ref:`cv::flip <doxid-d2/de8/group__core__array_1gaca7be533e3dac7feb70fc60635adf441>` flips the array in one of three different ways (row and column indices are 0-based):

.. math::

	\texttt{dst} _{ij} = \left\{ \begin{array}{l l} \texttt{src} _{\texttt{src.rows}-i-1,j} & if\; \texttt{flipCode} = 0 \\ \texttt{src} _{i, \texttt{src.cols} -j-1} & if\; \texttt{flipCode} > 0 \\ \texttt{src} _{ \texttt{src.rows} -i-1, \texttt{src.cols} -j-1} & if\; \texttt{flipCode} < 0 \\ \end{array} \right.

The example scenarios of using the function are the following: Vertical flipping of the image (flipCode == 0) to switch between top-left and bottom-left image origin. This is a typical operation in video processing on Microsoft Windows\* OS. Horizontal flipping of the image with the subsequent horizontal shift and absolute difference calculation to check for a vertical-axis symmetry (flipCode > 0). Simultaneous horizontal and vertical flipping of the image with the subsequent shift and absolute difference calculation to check for a central symmetry (flipCode < 0). Reversing the order of point arrays (flipCode > 0 or flipCode == 0).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same size and type as src.

	*
		- flipCode

		- a flag to specify how to flip the array; 0 means flipping around the x-axis and positive value (for example, 1) means flipping around y-axis. Negative value (for example, -1) means flipping around both axes.



.. rubric:: See also:

:ref:`transpose <doxid-d2/de8/group__core__array_1ga46630ed6c0ea6254a35f447289bd7404>`, :ref:`repeat <doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d>`, :ref:`completeSymm <doxid-d2/de8/group__core__array_1gaa9d88dcd0e54b6d1af38d41f2a3e3d25>`

.. index:: pair: function; gemm
.. _doxid-d2/de8/group__core__array_1gacb6e64071dffe36434e1e7ee79e7cb35:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::gemm(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src3,
		double beta,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0
		)

Performs generalized matrix multiplication.

The function :ref:`cv::gemm <doxid-d2/de8/group__core__array_1gacb6e64071dffe36434e1e7ee79e7cb35>` performs generalized matrix multiplication similar to the gemm functions in BLAS level 3. For example, ``gemm(src1, src2, alpha, src3, beta, dst, GEMM_1_T + GEMM_3_T)`` corresponds to

.. math::

	\texttt{dst} = \texttt{alpha} \cdot \texttt{src1} ^T \cdot \texttt{src2} + \texttt{beta} \cdot \texttt{src3} ^T

In case of complex (two-channel) data, performed a complex matrix multiplication.

The function can be replaced with a matrix expression. For example, the above call can be replaced with:

.. ref-code-block:: cpp

	dst = alpha*src1.t()*src2 + beta*src3.t();



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first multiplied input matrix that could be real(CV_32FC1, CV_64FC1) or complex(CV_32FC2, CV_64FC2).

	*
		- src2

		- second multiplied input matrix of the same type as src1.

	*
		- alpha

		- weight of the matrix product.

	*
		- src3

		- third optional delta matrix added to the matrix product; it should have the same type as src1 and src2.

	*
		- beta

		- weight of src3.

	*
		- dst

		- output matrix; it has the proper size and the same type as input matrices.

	*
		- flags

		- operation flags (:ref:`cv::GemmFlags <doxid-d2/de8/group__core__array_1ga66643400559695a653d08e2000809060>`)



.. rubric:: See also:

:ref:`mulTransposed <doxid-d2/de8/group__core__array_1gadc4e49f8f7a155044e3be1b9e3b270ab>`, :ref:`transform <doxid-d2/de8/group__core__array_1ga393164aa54bb9169ce0a8cc44e08ff22>`

.. index:: pair: function; getOptimalDFTSize
.. _doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::getOptimalDFTSize(int vecsize)

Returns the optimal DFT size for a given vector size.

DFT performance is not a monotonic function of a vector size. Therefore, when you calculate convolution of two arrays or perform the spectral analysis of an array, it usually makes sense to pad the input data with zeros to get a bit larger array that can be transformed much faster than the original one. Arrays whose size is a power-of-two (2, 4, 8, 16, 32, ...) are the fastest to process. Though, the arrays whose size is a product of 2's, 3's, and 5's (for example, 300 = 5\*5\*3\*2\*2) are also processed quite efficiently.

The function :ref:`cv::getOptimalDFTSize <doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299>` returns the minimum number N that is greater than or equal to vecsize so that the DFT of a vector of size N can be processed efficiently. In the current implementation N = 2 ^p^ \* 3 ^q^ \* 5 ^r^ for some integer p, q, r.

The function returns a negative number if vecsize is too large (very close to INT_MAX ).

While the function cannot be used directly to estimate the optimal vector size for DCT transform (since the current DCT implementation supports only even-size vectors), it can be easily processed as getOptimalDFTSize((vecsize+1)/2)\*2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- vecsize

		- vector size.



.. rubric:: See also:

:ref:`dft <doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>`, :ref:`dct <doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>`, :ref:`idft <doxid-d2/de8/group__core__array_1gaa708aa2d2e57a508f968eb0f69aa5ff1>`, :ref:`idct <doxid-d2/de8/group__core__array_1ga77b168d84e564c50228b69730a227ef2>`, :ref:`mulSpectrums <doxid-d2/de8/group__core__array_1ga3ab38646463c59bf0ce962a9d51db64f>`

.. index:: pair: function; hconcat
.. _doxid-d2/de8/group__core__array_1gaf9771c991763233866bf76b5b5d1776f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::hconcat(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* src,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nsrc,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Applies horizontal concatenation to given matrices.

The function horizontally concatenates two or more :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` matrices (with the same number of rows).

.. ref-code-block:: cpp

	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` matArray[] = { :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(4, 1, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(1)),
	                       :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(4, 1, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(2)),
	                       :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(4, 1, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(3)),};
	
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` out;
	:ref:`cv::hconcat <doxid-d2/de8/group__core__array_1gaf9771c991763233866bf76b5b5d1776f>`( matArray, 3, out );
	//out:
	//[1, 2, 3;
	// 1, 2, 3;
	// 1, 2, 3;
	// 1, 2, 3]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices. all of the matrices must have the same number of rows and the same depth.

	*
		- nsrc

		- number of matrices in src.

	*
		- dst

		- output array. It has the same number of rows and depth as the src, and the sum of cols of the src.



.. rubric:: See also:

:ref:`cv::vconcat(const Mat\*, size_t, OutputArray) <doxid-d2/de8/group__core__array_1ga744f53b69f6e4f12156cdde4e76aed27>`,

:ref:`cv::vconcat(InputArrayOfArrays, OutputArray) <doxid-d2/de8/group__core__array_1ga558e169e15adcc46b8cdcc6cd215070f>` and

:ref:`cv::vconcat(InputArray, InputArray, OutputArray) <doxid-d2/de8/group__core__array_1gaad07cede730cdde64b90e987aad179b8>`

.. index:: pair: function; hconcat
.. _doxid-d2/de8/group__core__array_1gaab5ceee39e0580f879df645a872c6bf7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::hconcat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. ref-code-block:: cpp

	:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>` A = (:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>`(3, 2) << 1, 4,
	                                              2, 5,
	                                              3, 6);
	:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>` B = (:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>`(3, 2) << 7, 10,
	                                              8, 11,
	                                              9, 12);
	
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` C;
	:ref:`cv::hconcat <doxid-d2/de8/group__core__array_1gaf9771c991763233866bf76b5b5d1776f>`(A, B, C);
	//C:
	//[1, 4, 7, 10;
	// 2, 5, 8, 11;
	// 3, 6, 9, 12]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array to be considered for horizontal concatenation.

	*
		- src2

		- second input array to be considered for horizontal concatenation.

	*
		- dst

		- output array. It has the same number of rows and depth as the src1 and src2, and the sum of cols of the src1 and src2.

.. index:: pair: function; hconcat
.. _doxid-d2/de8/group__core__array_1ga4676b1376cdc4e528dab6bd9edc51c1a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::hconcat(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. ref-code-block:: cpp

	std::vector<cv::Mat> matrices = { :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(4, 1, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(1)),
	                                  :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(4, 1, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(2)),
	                                  :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(4, 1, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(3)),};
	
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` out;
	:ref:`cv::hconcat <doxid-d2/de8/group__core__array_1gaf9771c991763233866bf76b5b5d1776f>`( matrices, out );
	//out:
	//[1, 2, 3;
	// 1, 2, 3;
	// 1, 2, 3;
	// 1, 2, 3]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices. all of the matrices must have the same number of rows and the same depth.

	*
		- dst

		- output array. It has the same number of rows and depth as the src, and the sum of cols of the src. same depth.

.. index:: pair: function; idct
.. _doxid-d2/de8/group__core__array_1ga77b168d84e564c50228b69730a227ef2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::idct(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0
		)

Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.

idct(src, dst, flags) is equivalent to dct(src, dst, flags \| DCT_INVERSE).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input floating-point single-channel array.

	*
		- dst

		- output array of the same size and type as src.

	*
		- flags

		- operation flags.



.. rubric:: See also:

:ref:`dct <doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>`, :ref:`dft <doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>`, :ref:`idft <doxid-d2/de8/group__core__array_1gaa708aa2d2e57a508f968eb0f69aa5ff1>`, :ref:`getOptimalDFTSize <doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299>`

.. index:: pair: function; idft
.. _doxid-d2/de8/group__core__array_1gaa708aa2d2e57a508f968eb0f69aa5ff1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::idft(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = 0,
		int nonzeroRows = 0
		)

Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.

idft(src, dst, flags) is equivalent to dft(src, dst, flags \| DFT_INVERSE) . None of dft and idft scales the result by default. So, you should pass DFT_SCALE to one of dft or idft explicitly to make these transforms mutually inverse.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input floating-point real or complex array.

	*
		- dst

		- output array whose size and type depend on the flags.

	*
		- flags

		- operation flags (see dft and :ref:`cv::DftFlags <doxid-d2/de8/group__core__array_1gaf4dde112b483b38175621befedda1f1c>`).

	*
		- nonzeroRows

		- number of dst rows to process; the rest of the rows have undefined content (see the convolution sample in dft description.



.. rubric:: See also:

:ref:`dft <doxid-d2/de8/group__core__array_1gadd6cf9baf2b8b704a11b5f04aaf4f39d>`, :ref:`dct <doxid-d2/de8/group__core__array_1ga85aad4d668c01fbd64825f589e3696d4>`, :ref:`idct <doxid-d2/de8/group__core__array_1ga77b168d84e564c50228b69730a227ef2>`, :ref:`mulSpectrums <doxid-d2/de8/group__core__array_1ga3ab38646463c59bf0ce962a9d51db64f>`, :ref:`getOptimalDFTSize <doxid-d2/de8/group__core__array_1ga6577a2e59968936ae02eb2edde5de299>`

.. index:: pair: function; inRange
.. _doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::inRange(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` lowerb,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` upperb,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Checks if array elements lie between the elements of two other arrays.

The function checks the range as follows:

* For every element of a single-channel input array:
  
  .. math::
  
  	\texttt{dst} (I)= \texttt{lowerb} (I)_0 \leq \texttt{src} (I)_0 \leq \texttt{upperb} (I)_0

* For two-channel arrays:
  
  .. math::
  
  	\texttt{dst} (I)= \texttt{lowerb} (I)_0 \leq \texttt{src} (I)_0 \leq \texttt{upperb} (I)_0 \land \texttt{lowerb} (I)_1 \leq \texttt{src} (I)_1 \leq \texttt{upperb} (I)_1

* and so forth.

That is, dst (I) is set to 255 (all 1 -bits) if src (I) is within the specified 1D, 2D, 3D, ... box and 0 otherwise.

When the lower and/or upper boundary parameters are scalars, the indexes (I) at lowerb and upperb in the above formulas should be omitted.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- first input array.

	*
		- lowerb

		- inclusive lower boundary array or a scalar.

	*
		- upperb

		- inclusive upper boundary array or a scalar.

	*
		- dst

		- output array of the same size as src and CV_8U type.

.. index:: pair: function; insertChannel
.. _doxid-d2/de8/group__core__array_1ga1d4bd886d35b00ec0b764cb4ce6eb515:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::insertChannel(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		int coi
		)

Inserts a single channel to dst (coi is 0-based index)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array

	*
		- dst

		- output array

	*
		- coi

		- index of channel for insertion



.. rubric:: See also:

:ref:`mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`, :ref:`merge <doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4>`

.. index:: pair: function; invert
.. _doxid-d2/de8/group__core__array_1gad278044679d4ecf20f7622cc151aaaa2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::invert(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`
		)

Finds the inverse or pseudo-inverse of a matrix.

The function :ref:`cv::invert <doxid-d2/de8/group__core__array_1gad278044679d4ecf20f7622cc151aaaa2>` inverts the matrix src and stores the result in dst . When the matrix src is singular or non-square, the function calculates the pseudo-inverse matrix (the dst matrix) so that norm(src\*dst - I) is minimal, where I is an identity matrix.

In case of the DECOMP_LU method, the function returns non-zero value if the inverse has been successfully calculated and 0 if src is singular.

In case of the DECOMP_SVD method, the function returns the inverse condition number of src (the ratio of the smallest singular value to the largest singular value) and 0 if src is singular. The :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` method calculates a pseudo-inverse matrix if src is singular.

Similarly to DECOMP_LU, the method DECOMP_CHOLESKY works only with non-singular square matrices that should also be symmetrical and positively defined. In this case, the function stores the inverted matrix in dst and returns non-zero. Otherwise, it returns 0.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input floating-point M x N matrix.

	*
		- dst

		- output matrix of N x M size and the same type as src.

	*
		- flags

		- inversion method (:ref:`cv::DecompTypes <doxid-d2/de8/group__core__array_1gaaf9ea5dcc392d5ae04eacb9920b9674c>`)



.. rubric:: See also:

:ref:`solve <doxid-d2/de8/group__core__array_1ga12b43690dbd31fed96f213eefead2373>`, :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>`

.. index:: pair: function; log
.. _doxid-d2/de8/group__core__array_1ga937ecdce4679a77168730830a955bea7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::log(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates the natural logarithm of every array element.

The function :ref:`cv::log <doxid-d2/d75/namespacecv_1ae5de78ee278fe88405c6dbc38502f7c1>` calculates the natural logarithm of every element of the input array:

.. math::

	\texttt{dst} (I) = \log (\texttt{src}(I))

Output on zero, negative and special (NaN, Inf) values is undefined.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same size and type as src .



.. rubric:: See also:

:ref:`exp <doxid-d2/d75/namespacecv_1a1eb07a682abff20e0864104599c06fbc>`, :ref:`cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`, :ref:`polarToCart <doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665>`, :ref:`phase <doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>`, :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`, :ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`, :ref:`magnitude <doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3>`

.. index:: pair: function; LUT
.. _doxid-d2/de8/group__core__array_1gab55b8d062b7f5587720ede032d34156f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::LUT(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` lut,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Performs a look-up table transform of an array.

The function LUT fills the output array with values from the look-up table. Indices of the entries are taken from the input array. That is, the function processes each element of src as follows:

.. math::

	\texttt{dst} (I) \leftarrow \texttt{lut(src(I) + d)}

where

.. math::

	d = \fork{0}{if \(\texttt{src}\) has depth \(\texttt{CV_8U}\)}{128}{if \(\texttt{src}\) has depth \(\texttt{CV_8S}\)}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array of 8-bit elements.

	*
		- lut

		- look-up table of 256 elements; in case of multi-channel input array, the table should either have a single channel (in this case the same table is used for all channels) or the same number of channels as in the input array.

	*
		- dst

		- output array of the same size and number of channels as src, and the same depth as lut.



.. rubric:: See also:

:ref:`convertScaleAbs <doxid-d2/de8/group__core__array_1ga3460e9c9f37b563ab9dd550c4d8c4e7d>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; magnitude
.. _doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::magnitude(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude
		)

Calculates the magnitude of 2D vectors.

The function :ref:`cv::magnitude <doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3>` calculates the magnitude of 2D vectors formed from the corresponding elements of x and y arrays:

.. math::

	\texttt{dst} (I) = \sqrt{\texttt{x}(I)^2 + \texttt{y}(I)^2}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- floating-point array of x-coordinates of the vectors.

	*
		- y

		- floating-point array of y-coordinates of the vectors; it must have the same size as x.

	*
		- magnitude

		- output array of the same size and type as x.



.. rubric:: See also:

:ref:`cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`, :ref:`polarToCart <doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665>`, :ref:`phase <doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>`, :ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`

.. index:: pair: function; Mahalanobis
.. _doxid-d2/de8/group__core__array_1ga4493aee129179459cbfc6064f051aa7d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::Mahalanobis(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` v1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` v2,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` icovar
		)

Calculates the Mahalanobis distance between two vectors.

The function :ref:`cv::Mahalanobis <doxid-d2/de8/group__core__array_1ga4493aee129179459cbfc6064f051aa7d>` calculates and returns the weighted distance between two vectors:

.. math::

	d( \texttt{vec1} , \texttt{vec2} )= \sqrt{\sum_{i,j}{\texttt{icovar(i,j)}\cdot(\texttt{vec1}(I)-\texttt{vec2}(I))\cdot(\texttt{vec1(j)}-\texttt{vec2(j)})} }

The covariance matrix may be calculated using the :ref:`cv::calcCovarMatrix <doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>` function and then inverted using the invert function (preferably using the :ref:`cv::DECOMP_SVD <doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca523b676c90c7a1d2841b1267ba9ba614>` method, as the most accurate).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- v1

		- first 1D input vector.

	*
		- v2

		- second 1D input vector.

	*
		- icovar

		- inverse covariance matrix.

.. index:: pair: function; max
.. _doxid-d2/de8/group__core__array_1gacc40fa15eac0fb83f8ca70b7cc0b588d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::max(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates per-element maximum of two arrays or an array and a scalar.

The function :ref:`cv::max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>` calculates the per-element maximum of two arrays:

.. math::

	\texttt{dst} (I)= \max ( \texttt{src1} (I), \texttt{src2} (I))

or array and a scalar:

.. math::

	\texttt{dst} (I)= \max ( \texttt{src1} (I), \texttt{value} )



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- src2

		- second input array of the same size and type as src1 .

	*
		- dst

		- output array of the same size and type as src1.



.. rubric:: See also:

:ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`, :ref:`compare <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`, :ref:`inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`, :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`, :ref:`MatrixExpressions <doxid-d9/ddc/classcv_1_1_mat_expr_1MatrixExpressions>`

.. index:: pair: function; max
.. _doxid-d2/de8/group__core__array_1gad81c37ed0b0fd23ede0cefadbf04af44:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::max(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src1,
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src2,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp& std::min(const _Tp&, const _Tp&, _Compare)

.. index:: pair: function; max
.. _doxid-d2/de8/group__core__array_1ga6eefd595055bf1ea4ba3d12f70531511:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::max(
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src1,
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src2,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp& std::min(const _Tp&, const _Tp&, _Compare)

.. index:: pair: function; mean
.. _doxid-d2/de8/group__core__array_1ga191389f8a0e58180bb13a727782cd461:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`
	cv::mean(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates an average (mean) of array elements.

The function :ref:`cv::mean <doxid-d2/de8/group__core__array_1ga191389f8a0e58180bb13a727782cd461>` calculates the mean value M of array elements, independently for each channel, and return it:

.. math::

	\begin{array}{l} N = \sum _{I: \; \texttt{mask} (I) \ne 0} 1 \\ M_c = \left ( \sum _{I: \; \texttt{mask} (I) \ne 0}{ \texttt{mtx} (I)_c} \right )/N \end{array}

When all the mask elements are 0's, the function returns Scalar::all(0)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array that should have from 1 to 4 channels so that the result can be stored in :ref:`Scalar\_ <doxid-d7/d13/classcv_1_1_scalar__>`.

	*
		- mask

		- optional operation mask.



.. rubric:: See also:

:ref:`countNonZero <doxid-d2/de8/group__core__array_1gaa4b89393263bb4d604e0fe5986723914>`, :ref:`meanStdDev <doxid-d2/de8/group__core__array_1ga846c858f4004d59493d7c6a4354b301d>`, :ref:`norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>`, :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`

.. index:: pair: function; meanStdDev
.. _doxid-d2/de8/group__core__array_1ga846c858f4004d59493d7c6a4354b301d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::meanStdDev(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` mean,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` stddev,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates a mean and standard deviation of array elements.

The function :ref:`cv::meanStdDev <doxid-d2/de8/group__core__array_1ga846c858f4004d59493d7c6a4354b301d>` calculates the mean and the standard deviation M of array elements independently for each channel and returns it via the output parameters:

.. math::

	\begin{array}{l} N = \sum _{I, \texttt{mask} (I) \ne 0} 1 \\ \texttt{mean} _c = \frac{\sum_{ I: \; \texttt{mask}(I) \ne 0} \texttt{src} (I)_c}{N} \\ \texttt{stddev} _c = \sqrt{\frac{\sum_{ I: \; \texttt{mask}(I) \ne 0} \left ( \texttt{src} (I)_c - \texttt{mean} _c \right )^2}{N}} \end{array}

When all the mask elements are 0's, the function returns mean=stddev=Scalar::all(0). The calculated standard deviation is only the diagonal of the complete normalized covariance matrix. If the full matrix is needed, you can reshape the multi-channel array M x N to the single-channel array M\*N x mtx.channels() (only possible when the matrix is continuous) and then pass the matrix to calcCovarMatrix .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array that should have from 1 to 4 channels so that the results can be stored in :ref:`Scalar\_ <doxid-d7/d13/classcv_1_1_scalar__>` 's.

	*
		- mean

		- output parameter: calculated mean value.

	*
		- stddev

		- output parameter: calculated standard deviation.

	*
		- mask

		- optional operation mask.



.. rubric:: See also:

:ref:`countNonZero <doxid-d2/de8/group__core__array_1gaa4b89393263bb4d604e0fe5986723914>`, :ref:`mean <doxid-d2/de8/group__core__array_1ga191389f8a0e58180bb13a727782cd461>`, :ref:`norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>`, :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`, :ref:`calcCovarMatrix <doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>`

.. index:: pair: function; merge
.. _doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::merge(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* mv,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` count,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Creates one multi-channel array out of several single-channel ones.

The function :ref:`cv::merge <doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4>` merges several arrays to make a single multi-channel array. That is, each element of the output array will be a concatenation of the elements of the input arrays, where elements of i-th input array are treated as mv[i].channels()-element vectors.

The function :ref:`cv::split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>` does the reverse operation. If you need to shuffle channels in some other advanced way, use :ref:`cv::mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mv

		- input array of matrices to be merged; all the matrices in mv must have the same size and the same depth.

	*
		- count

		- number of input matrices when mv is a plain C array; it must be greater than zero.

	*
		- dst

		- output array of the same size and the same depth as mv[0]; The number of channels will be equal to the parameter count.



.. rubric:: See also:

:ref:`mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`, :ref:`split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>`, :ref:`Mat::reshape <doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8>`

.. index:: pair: function; merge
.. _doxid-d2/de8/group__core__array_1ga61f2f2bde4a0a0154b2333ea504fab1d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::merge(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` mv,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mv

		- input vector of matrices to be merged; all the matrices in mv must have the same size and the same depth.

	*
		- dst

		- output array of the same size and the same depth as mv[0]; The number of channels will be the total number of channels in the matrix array.

.. index:: pair: function; min
.. _doxid-d2/de8/group__core__array_1ga9af368f182ee76d0463d0d8d5330b764:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::min(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates per-element minimum of two arrays or an array and a scalar.

The function :ref:`cv::min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>` calculates the per-element minimum of two arrays:

.. math::

	\texttt{dst} (I)= \min ( \texttt{src1} (I), \texttt{src2} (I))

or array and a scalar:

.. math::

	\texttt{dst} (I)= \min ( \texttt{src1} (I), \texttt{value} )



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- src2

		- second input array of the same size and type as src1.

	*
		- dst

		- output array of the same size and type as src1.



.. rubric:: See also:

:ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`, :ref:`compare <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`, :ref:`inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`, :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`

.. index:: pair: function; min
.. _doxid-d2/de8/group__core__array_1ga0b8852cd1a92366860e390e8abbe78dc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::min(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src1,
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src2,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp& std::min(const _Tp&, const _Tp&, _Compare)

.. index:: pair: function; min
.. _doxid-d2/de8/group__core__array_1gaa83bf3dce9a4a488675347fff6692cb9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::min(
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src1,
		const :ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& src2,
		:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. needed to avoid conflicts with const _Tp& std::min(const _Tp&, const _Tp&, _Compare)

.. index:: pair: function; minMaxIdx
.. _doxid-d2/de8/group__core__array_1ga7622c466c628a75d9ed008b42250a73f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::minMaxIdx(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double* minVal,
		double* maxVal = 0,
		int* minIdx = 0,
		int* maxIdx = 0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Finds the global minimum and maximum in an array.

The function :ref:`cv::minMaxIdx <doxid-d2/de8/group__core__array_1ga7622c466c628a75d9ed008b42250a73f>` finds the minimum and maximum element values and their positions. The extremums are searched across the whole array or, if mask is not an empty array, in the specified array region. The function does not work with multi-channel arrays. If you need to find minimum or maximum elements across all the channels, use :ref:`Mat::reshape <doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8>` first to reinterpret the array as single-channel. Or you may extract the particular channel using either extractImageCOI , or mixChannels , or split . In case of a sparse matrix, the minimum is found among non-zero elements only. When minIdx is not NULL, it must have at least 2 elements (as well as maxIdx), even if src is a single-row or single-column matrix. In OpenCV (following MATLAB) each array has at least 2 dimensions, i.e. single-column matrix is Mx1 matrix (and therefore minIdx/maxIdx will be (i1,0)/(i2,0)) and single-row matrix is 1xN matrix (and therefore minIdx/maxIdx will be (0,j1)/(0,j2)).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input single-channel array.

	*
		- minVal

		- pointer to the returned minimum value; NULL is used if not required.

	*
		- maxVal

		- pointer to the returned maximum value; NULL is used if not required.

	*
		- minIdx

		- pointer to the returned minimum location (in nD case); NULL is used if not required; Otherwise, it must point to an array of src.dims elements, the coordinates of the minimum element in each dimension are stored there sequentially.

	*
		- maxIdx

		- pointer to the returned maximum location (in nD case). NULL is used if not required.

	*
		- mask

		- specified array region

.. index:: pair: function; minMaxLoc
.. _doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::minMaxLoc(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double* minVal,
		double* maxVal = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* minLoc = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* maxLoc = 0,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Finds the global minimum and maximum in an array.

The function :ref:`cv::minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>` finds the minimum and maximum element values and their positions. The extremums are searched across the whole array or, if mask is not an empty array, in the specified array region.

The function do not work with multi-channel arrays. If you need to find minimum or maximum elements across all the channels, use :ref:`Mat::reshape <doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8>` first to reinterpret the array as single-channel. Or you may extract the particular channel using either extractImageCOI , or mixChannels , or split .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input single-channel array.

	*
		- minVal

		- pointer to the returned minimum value; NULL is used if not required.

	*
		- maxVal

		- pointer to the returned maximum value; NULL is used if not required.

	*
		- minLoc

		- pointer to the returned minimum location (in 2D case); NULL is used if not required.

	*
		- maxLoc

		- pointer to the returned maximum location (in 2D case); NULL is used if not required.

	*
		- mask

		- optional mask used to select a sub-array.



.. rubric:: See also:

:ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`, :ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`, :ref:`compare <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`, :ref:`inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`, :ref:`extractImageCOI <doxid-d8/dd7/group__core__c__glue_1gad621f7c669ba2dbe9f2fb75bf15c94fe>`, :ref:`mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`, :ref:`split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>`, :ref:`Mat::reshape <doxid-db/de6/classcv_1_1_mat_1a4eb96e3251417fa88b78e2abd6cfd7d8>`

.. index:: pair: function; minMaxLoc
.. _doxid-d2/de8/group__core__array_1ga8873b86a29c5af51cafdcee82f8150a7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::minMaxLoc(
		const :ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& a,
		double* minVal,
		double* maxVal,
		int* minIdx = 0,
		int* maxIdx = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- input single-channel array.

	*
		- minVal

		- pointer to the returned minimum value; NULL is used if not required.

	*
		- maxVal

		- pointer to the returned maximum value; NULL is used if not required.

	*
		- minIdx

		- pointer to the returned minimum location (in nD case); NULL is used if not required; Otherwise, it must point to an array of src.dims elements, the coordinates of the minimum element in each dimension are stored there sequentially.

	*
		- maxIdx

		- pointer to the returned maximum location (in nD case). NULL is used if not required.

.. index:: pair: function; mixChannels
.. _doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::mixChannels(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* src,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nsrcs,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* dst,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` ndsts,
		const int* fromTo,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` npairs
		)

Copies specified channels from input arrays to the specified channels of output arrays.

The function :ref:`cv::mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>` provides an advanced mechanism for shuffling image channels.

:ref:`cv::split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>`, :ref:`cv::merge <doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4>`, :ref:`cv::extractChannel <doxid-d2/de8/group__core__array_1gacc6158574aa1f0281878c955bcf35642>`, :ref:`cv::insertChannel <doxid-d2/de8/group__core__array_1ga1d4bd886d35b00ec0b764cb4ce6eb515>` and some forms of :ref:`cv::cvtColor <doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>` are partial cases of :ref:`cv::mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`.

In the example below, the code splits a 4-channel BGRA image into a 3-channel BGR (with B and R channels swapped) and a separate alpha-channel image:

.. ref-code-block:: cpp

	Mat bgra( 100, 100, :ref:`CV_8UC4 <doxid-d1/d1b/group__core__hal__interface_1ga4519ad2827f771db8260c61207b782df>`, :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(255,0,0,255) );
	Mat bgr( bgra.rows, bgra.cols, :ref:`CV_8UC3 <doxid-d1/d1b/group__core__hal__interface_1ga88c4cd9de76f678f33928ef1e3f96047>` );
	Mat alpha( bgra.rows, bgra.cols, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>` );
	
	// forming an array of matrices is a quite efficient operation,
	// because the matrix data is not copied, only the headers
	Mat out[] = { bgr, alpha };
	// bgra[0] -> bgr[2], bgra[1] -> bgr[1],
	// bgra[2] -> bgr[0], bgra[3] -> alpha[0]
	int from_to[] = { 0,2, 1,1, 2,0, 3,3 };
	:ref:`mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`( &bgra, 1, out, 2, from_to, 4 );

Unlike many other new-style C++ functions in OpenCV (see the introduction section and :ref:`Mat::create <doxid-db/de6/classcv_1_1_mat_1a55ced2c8d844d683ea9a725c60037ad0>`), :ref:`cv::mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>` requires the output arrays to be pre-allocated before calling the function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices; all of the matrices must have the same size and the same depth.

	*
		- nsrcs

		- number of matrices in ``src``.

	*
		- dst

		- output array or vector of matrices; all the matrices **must be allocated**; their size and depth must be the same as in ``src[0]``.

	*
		- ndsts

		- number of matrices in ``dst``.

	*
		- fromTo

		- array of index pairs specifying which channels are copied and where; fromTo[k\*2] is a 0-based index of the input channel in src, fromTo[k\*2+1] is an index of the output channel in dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to src[0].channels()-1, the second input image channels are indexed from src[0].channels() to src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image channels; as a special case, when fromTo[k\*2] is negative, the corresponding output channel is filled with zero .

	*
		- npairs

		- number of index pairs in ``fromTo``.



.. rubric:: See also:

:ref:`split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>`, :ref:`merge <doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4>`, :ref:`extractChannel <doxid-d2/de8/group__core__array_1gacc6158574aa1f0281878c955bcf35642>`, :ref:`insertChannel <doxid-d2/de8/group__core__array_1ga1d4bd886d35b00ec0b764cb4ce6eb515>`, :ref:`cvtColor <doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>`

.. index:: pair: function; mixChannels
.. _doxid-d2/de8/group__core__array_1ga89dd05fd8fe54f5b7b5d89bca21153a1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::mixChannels(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`InputOutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga8899575c0929a56ab8bdd01cf34ebcb1>` dst,
		const int* fromTo,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` npairs
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices; all of the matrices must have the same size and the same depth.

	*
		- dst

		- output array or vector of matrices; all the matrices **must be allocated**; their size and depth must be the same as in src[0].

	*
		- fromTo

		- array of index pairs specifying which channels are copied and where; fromTo[k\*2] is a 0-based index of the input channel in src, fromTo[k\*2+1] is an index of the output channel in dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to src[0].channels()-1, the second input image channels are indexed from src[0].channels() to src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image channels; as a special case, when fromTo[k\*2] is negative, the corresponding output channel is filled with zero .

	*
		- npairs

		- number of index pairs in fromTo.

.. index:: pair: function; mixChannels
.. _doxid-d2/de8/group__core__array_1ga83b61f9875e6618ee08487b21ec71ab1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::mixChannels(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`InputOutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga8899575c0929a56ab8bdd01cf34ebcb1>` dst,
		const std::vector<int>& fromTo
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices; all of the matrices must have the same size and the same depth.

	*
		- dst

		- output array or vector of matrices; all the matrices **must be allocated**; their size and depth must be the same as in src[0].

	*
		- fromTo

		- array of index pairs specifying which channels are copied and where; fromTo[k\*2] is a 0-based index of the input channel in src, fromTo[k\*2+1] is an index of the output channel in dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to src[0].channels()-1, the second input image channels are indexed from src[0].channels() to src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image channels; as a special case, when fromTo[k\*2] is negative, the corresponding output channel is filled with zero .

.. index:: pair: function; mulSpectrums
.. _doxid-d2/de8/group__core__array_1ga3ab38646463c59bf0ce962a9d51db64f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::mulSpectrums(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` a,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` b,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` c,
		int flags,
		bool conjB = false
		)

Performs the per-element multiplication of two Fourier spectrums.

The function :ref:`cv::mulSpectrums <doxid-d2/de8/group__core__array_1ga3ab38646463c59bf0ce962a9d51db64f>` performs the per-element multiplication of the two CCS-packed or complex matrices that are results of a real or complex Fourier transform.

The function, together with dft and idft , may be used to calculate convolution (pass conjB=false ) or correlation (pass conjB=true ) of two arrays rapidly. When the arrays are complex, they are simply multiplied (per element) with an optional conjugation of the second-array elements. When the arrays are real, they are assumed to be CCS-packed (see dft for details).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- first input array.

	*
		- b

		- second input array of the same size and type as src1 .

	*
		- c

		- output array of the same size and type as src1 .

	*
		- flags

		- operation flags; currently, the only supported flag is :ref:`cv::DFT_ROWS <doxid-d2/de8/group__core__array_1ggaf4dde112b483b38175621befedda1f1ca1744dc1cf1249944bc841e78c1565b7f>`, which indicates that each row of src1 and src2 is an independent 1D Fourier spectrum. If you do not want to use this flag, then simply add a ``0`` as value.

	*
		- conjB

		- optional flag that conjugates the second input array before the multiplication (true) or not (false).

.. index:: pair: function; multiply
.. _doxid-d2/de8/group__core__array_1ga979d898a58d7f61c53003e162e7ad89f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::multiply(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1
		)

Calculates the per-element scaled product of two arrays.

The function multiply calculates the per-element product of two arrays:

.. math::

	\texttt{dst} (I)= \texttt{saturate} ( \texttt{scale} \cdot \texttt{src1} (I) \cdot \texttt{src2} (I))

There is also a :ref:`MatrixExpressions <doxid-d9/ddc/classcv_1_1_mat_expr_1MatrixExpressions>` -friendly variant of the first function. See :ref:`Mat::mul <doxid-db/de6/classcv_1_1_mat_1a385c09827713dc3e6d713bfad8460706>`.

For a not-per-element matrix product, see gemm .

Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- src2

		- second input array of the same size and the same type as src1.

	*
		- dst

		- output array of the same size and type as src1.

	*
		- scale

		- optional scale factor.

	*
		- dtype

		- optional depth of the output array



.. rubric:: See also:

:ref:`add <doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`, :ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`, :ref:`divide <doxid-d2/de8/group__core__array_1ga6db555d30115642fedae0cda05604874>`, :ref:`scaleAdd <doxid-d2/de8/group__core__array_1ga9e0845db4135f55dcf20227402f00d98>`, :ref:`addWeighted <doxid-d2/de8/group__core__array_1gafafb2513349db3bcff51f54ee5592a19>`, :ref:`accumulate <doxid-d7/df3/group__imgproc__motion_1ga1a567a79901513811ff3b9976923b199>`, :ref:`accumulateProduct <doxid-d7/df3/group__imgproc__motion_1ga82518a940ecfda49460f66117ac82520>`, :ref:`accumulateSquare <doxid-d7/df3/group__imgproc__motion_1gacb75e7ffb573227088cef9ceaf80be8c>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; mulTransposed
.. _doxid-d2/de8/group__core__array_1gadc4e49f8f7a155044e3be1b9e3b270ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::mulTransposed(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		bool aTa,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` delta = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		double scale = 1,
		int dtype = -1
		)

Calculates the product of a matrix and its transposition.

The function :ref:`cv::mulTransposed <doxid-d2/de8/group__core__array_1gadc4e49f8f7a155044e3be1b9e3b270ab>` calculates the product of src and its transposition:

.. math::

	\texttt{dst} = \texttt{scale} ( \texttt{src} - \texttt{delta} )^T ( \texttt{src} - \texttt{delta} )

if aTa=true , and

.. math::

	\texttt{dst} = \texttt{scale} ( \texttt{src} - \texttt{delta} ) ( \texttt{src} - \texttt{delta} )^T

otherwise. The function is used to calculate the covariance matrix. With zero delta, it can be used as a faster substitute for general matrix product A\*B when B=A'



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input single-channel matrix. Note that unlike gemm, the function can multiply not only floating-point matrices.

	*
		- dst

		- output square matrix.

	*
		- aTa

		- Flag specifying the multiplication ordering. See the description below.

	*
		- delta

		- Optional delta matrix subtracted from src before the multiplication. When the matrix is empty ( delta= :ref:`noArray() <doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`), it is assumed to be zero, that is, nothing is subtracted. If it has the same size as src , it is simply subtracted. Otherwise, it is "repeated" (see repeat ) to cover the full src and then subtracted. Type of the delta matrix, when it is not empty, must be the same as the type of created output matrix. See the dtype parameter description below.

	*
		- scale

		- Optional scale factor for the matrix product.

	*
		- dtype

		- Optional type of the output matrix. When it is negative, the output matrix will have the same type as src . Otherwise, it will be type= :ref:`CV_MAT_DEPTH(dtype) <doxid-d1/d1b/group__core__hal__interface_1ga39f3412d63cac68d4f1d138ab52a6fc8>` that should be either CV_32F or CV_64F .



.. rubric:: See also:

:ref:`calcCovarMatrix <doxid-d2/de8/group__core__array_1gae6ffa9354633f984246945d52823165d>`, :ref:`gemm <doxid-d2/de8/group__core__array_1gacb6e64071dffe36434e1e7ee79e7cb35>`, :ref:`repeat <doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d>`, :ref:`reduce <doxid-d2/de8/group__core__array_1ga4b78072a303f29d9031d56e5638da78e>`

.. index:: pair: function; norm
.. _doxid-d2/de8/group__core__array_1ga55a581f0accd8d990af775d378e7e46c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::norm(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		int normType = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Calculates an absolute array norm, an absolute difference norm, or a relative difference norm.

The function :ref:`cv::norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>` calculates an absolute norm of src1 (when there is no src2 ):

.. math::

	norm = \forkthree{\|\texttt{src1}\|_{L_{\infty}} = \max _I | \texttt{src1} (I)|}{if \(\texttt{normType} = \texttt{NORM_INF}\) } { \| \texttt{src1} \| _{L_1} = \sum _I | \texttt{src1} (I)|}{if \(\texttt{normType} = \texttt{NORM_L1}\) } { \| \texttt{src1} \| _{L_2} = \sqrt{\sum_I \texttt{src1}(I)^2} }{if \(\texttt{normType} = \texttt{NORM_L2}\) }

or an absolute or relative difference norm if src2 is there:

.. math::

	norm = \forkthree{\|\texttt{src1}-\texttt{src2}\|_{L_{\infty}} = \max _I | \texttt{src1} (I) - \texttt{src2} (I)|}{if \(\texttt{normType} = \texttt{NORM_INF}\) } { \| \texttt{src1} - \texttt{src2} \| _{L_1} = \sum _I | \texttt{src1} (I) - \texttt{src2} (I)|}{if \(\texttt{normType} = \texttt{NORM_L1}\) } { \| \texttt{src1} - \texttt{src2} \| _{L_2} = \sqrt{\sum_I (\texttt{src1}(I) - \texttt{src2}(I))^2} }{if \(\texttt{normType} = \texttt{NORM_L2}\) }

or

.. math::

	norm = \forkthree{\frac{\|\texttt{src1}-\texttt{src2}\|_{L_{\infty}} }{\|\texttt{src2}\|_{L_{\infty}} }}{if \(\texttt{normType} = \texttt{NORM_RELATIVE_INF}\) } { \frac{\|\texttt{src1}-\texttt{src2}\|_{L_1} }{\|\texttt{src2}\|_{L_1}} }{if \(\texttt{normType} = \texttt{NORM_RELATIVE_L1}\) } { \frac{\|\texttt{src1}-\texttt{src2}\|_{L_2} }{\|\texttt{src2}\|_{L_2}} }{if \(\texttt{normType} = \texttt{NORM_RELATIVE_L2}\) }

The function :ref:`cv::norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>` returns the calculated norm.

When the mask parameter is specified and it is not empty, the norm is calculated only over the region specified by the mask.

A multi-channel input arrays are treated as a single-channel, that is, the results for all channels are combined.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- normType

		- type of the norm (see :ref:`cv::NormTypes <doxid-d2/de8/group__core__array_1gad12cefbcb5291cf958a85b4b67b6149f>`).

	*
		- mask

		- optional operation mask; it must have the same size as src1 and CV_8UC1 type.

.. index:: pair: function; norm
.. _doxid-d2/de8/group__core__array_1gae15fc2d956eb3a93ec65339a50dc7b6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::norm(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		int normType = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- src2

		- second input array of the same size and the same type as src1.

	*
		- normType

		- type of the norm (:ref:`cv::NormTypes <doxid-d2/de8/group__core__array_1gad12cefbcb5291cf958a85b4b67b6149f>`).

	*
		- mask

		- optional operation mask; it must have the same size as src1 and CV_8UC1 type.

.. index:: pair: function; norm
.. _doxid-d2/de8/group__core__array_1ga7c331fb8dd951707e184ef4e3f21dd33:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::norm(
		const :ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& src,
		int normType
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- first input array.

	*
		- normType

		- type of the norm (see :ref:`cv::NormTypes <doxid-d2/de8/group__core__array_1gad12cefbcb5291cf958a85b4b67b6149f>`).

.. index:: pair: function; normalize
.. _doxid-d2/de8/group__core__array_1ga87eef7ee3970f86906d69a92cbf064bd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::normalize(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		double alpha = 1,
		double beta = 0,
		int norm_type = :ref:`NORM_L2<doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`,
		int dtype = -1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`()
		)

Normalizes the norm or value range of an array.

The function :ref:`cv::normalize <doxid-dc/d84/group__core__basic_1ga1b6a396a456c8b6c6e4afd8591560d80>` normalizes scale and shift the input array elements so that

.. math::

	\| \texttt{dst} \| _{L_p}= \texttt{alpha}

(where p=Inf, 1 or 2) when normType=NORM_INF, NORM_L1, or NORM_L2, respectively; or so that

.. math::

	\min _I \texttt{dst} (I)= \texttt{alpha} , \, \, \max _I \texttt{dst} (I)= \texttt{beta}

when normType=NORM_MINMAX (for dense arrays only). The optional mask specifies a sub-array to be normalized. This means that the norm or min-n-max are calculated over the sub-array, and then this sub-array is modified to be normalized. If you want to only use the mask to calculate the norm or min-max but modify the whole array, you can use norm and :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`.

In case of sparse matrices, only the non-zero values are analyzed and transformed. Because of this, the range transformation for sparse matrices is not allowed since it can shift the zero level.

Possible usage with some positive example data:

.. ref-code-block:: cpp

	vector<double> positiveData = { 2.0, 8.0, 10.0 };
	vector<double> normalizedData_l1, normalizedData_l2, normalizedData_inf, normalizedData_minmax;
	
	// Norm to probability (total count)
	// sum(numbers) = 20.0
	// 2.0      0.1     (2.0/20.0)
	// 8.0      0.4     (8.0/20.0)
	// 10.0     0.5     (10.0/20.0)
	:ref:`normalize <doxid-dc/d84/group__core__basic_1ga1b6a396a456c8b6c6e4afd8591560d80>`(positiveData, normalizedData_l1, 1.0, 0.0, :ref:`NORM_L1 <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fab55c78ff204a979026c026ea19de65c9>`);
	
	// Norm to unit vector: ||positiveData|| = 1.0
	// 2.0      0.15
	// 8.0      0.62
	// 10.0     0.77
	:ref:`normalize <doxid-dc/d84/group__core__basic_1ga1b6a396a456c8b6c6e4afd8591560d80>`(positiveData, normalizedData_l2, 1.0, 0.0, :ref:`NORM_L2 <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa7bacbe84d400336a8f26297d8e80e3a2>`);
	
	// Norm to max element
	// 2.0      0.2     (2.0/10.0)
	// 8.0      0.8     (8.0/10.0)
	// 10.0     1.0     (10.0/10.0)
	:ref:`normalize <doxid-dc/d84/group__core__basic_1ga1b6a396a456c8b6c6e4afd8591560d80>`(positiveData, normalizedData_inf, 1.0, 0.0, :ref:`NORM_INF <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fad33872d928c74f8a49d1ba06d72aefc3>`);
	
	// Norm to range [0.0;1.0]
	// 2.0      0.0     (shift to left border)
	// 8.0      0.75    (6.0/8.0)
	// 10.0     1.0     (shift to right border)
	:ref:`normalize <doxid-dc/d84/group__core__basic_1ga1b6a396a456c8b6c6e4afd8591560d80>`(positiveData, normalizedData_minmax, 1.0, 0.0, :ref:`NORM_MINMAX <doxid-d2/de8/group__core__array_1ggad12cefbcb5291cf958a85b4b67b6149fa9f0c1c342a18114d47b516a88e29822e>`);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same size as src .

	*
		- alpha

		- norm value to normalize to or the lower range boundary in case of the range normalization.

	*
		- beta

		- upper range boundary in case of the range normalization; it is not used for the norm normalization.

	*
		- norm_type

		- normalization type (see :ref:`cv::NormTypes <doxid-d2/de8/group__core__array_1gad12cefbcb5291cf958a85b4b67b6149f>`).

	*
		- dtype

		- when negative, the output array has the same type as src; otherwise, it has the same number of channels as src and the depth = :ref:`CV_MAT_DEPTH(dtype) <doxid-d1/d1b/group__core__hal__interface_1ga39f3412d63cac68d4f1d138ab52a6fc8>`.

	*
		- mask

		- optional operation mask.



.. rubric:: See also:

:ref:`norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`, :ref:`SparseMat::convertTo <doxid-d5/d29/classcv_1_1_sparse_mat_1a577ea9bbc02ffcf195df6d96f9c9650c>`

.. index:: pair: function; normalize
.. _doxid-d2/de8/group__core__array_1ga7bcf47a1df78cf575162e0aed44960cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::normalize(
		const :ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& src,
		:ref:`SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& dst,
		double alpha,
		int normType
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same size as src .

	*
		- alpha

		- norm value to normalize to or the lower range boundary in case of the range normalization.

	*
		- normType

		- normalization type (see :ref:`cv::NormTypes <doxid-d2/de8/group__core__array_1gad12cefbcb5291cf958a85b4b67b6149f>`).

.. index:: pair: function; patchNaNs
.. _doxid-d2/de8/group__core__array_1ga62286befb7cde3568ff8c7d14d5079da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::patchNaNs(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` a,
		double val = 0
		)

converts NaN's to the given number

.. index:: pair: function; PCABackProject
.. _doxid-d2/de8/group__core__array_1gab26049f30ee8e94f7d69d82c124faafc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::PCABackProject(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` eigenvectors,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
		)

wrap :ref:`PCA::backProject <doxid-d3/d39/classcv_1_1_p_c_a_1a5f84cfbdb25b9833cc1bfb5bd484ea79>`

.. index:: pair: function; PCACompute
.. _doxid-d2/de8/group__core__array_1ga4e2073c7311f292a0648f04c37b73781:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::PCACompute(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mean,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvectors,
		int maxComponents = 0
		)

wrap PCA::operator()

.. index:: pair: function; PCACompute
.. _doxid-d2/de8/group__core__array_1ga0ad1147fbcdb256f2e14ae2bfb8c991d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::PCACompute(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mean,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` eigenvectors,
		double retainedVariance
		)

wrap PCA::operator()

.. index:: pair: function; PCAProject
.. _doxid-d2/de8/group__core__array_1ga6b9fbc7b3a99ebfd441bbec0a6bc4f88:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::PCAProject(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` data,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` eigenvectors,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` result
		)

wrap :ref:`PCA::project <doxid-d3/d39/classcv_1_1_p_c_a_1a67c9a3f8fe804f40be58c88a3ae73f41>`

.. index:: pair: function; perspectiveTransform
.. _doxid-d2/de8/group__core__array_1gad327659ac03e5fd6894b90025e6900a7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::perspectiveTransform(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m
		)

Performs the perspective matrix transformation of vectors.

The function :ref:`cv::perspectiveTransform <doxid-d2/de8/group__core__array_1gad327659ac03e5fd6894b90025e6900a7>` transforms every element of src by treating it as a 2D or 3D vector, in the following way:

.. math::

	(x, y, z) \rightarrow (x'/w, y'/w, z'/w)

where

.. math::

	(x', y', z', w') = \texttt{mat} \cdot \begin{bmatrix} x & y & z & 1 \end{bmatrix}

and

.. math::

	w = \fork{w'}{if \(w' \ne 0\)}{\infty}{otherwise}

Here a 3D vector transformation is shown. In case of a 2D vector transformation, the z component is omitted.

The function transforms a sparse set of 2D or 3D vectors. If you want to transform an image using perspective transformation, use warpPerspective . If you have an inverse problem, that is, you want to compute the most probable perspective transformation out of several pairs of corresponding points, you can use getPerspectiveTransform or findHomography .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input two-channel or three-channel floating-point array; each element is a 2D/3D vector to be transformed.

	*
		- dst

		- output array of the same size and type as src.

	*
		- m

		- 3x3 or 4x4 floating-point transformation matrix.



.. rubric:: See also:

:ref:`transform <doxid-d2/de8/group__core__array_1ga393164aa54bb9169ce0a8cc44e08ff22>`, :ref:`warpPerspective <doxid-da/d54/group__imgproc__transform_1gaf73673a7e8e18ec6963e3774e6a94b87>`, :ref:`getPerspectiveTransform <doxid-da/d54/group__imgproc__transform_1ga8c1ae0e3589a9d77fffc962c49b22043>`, :ref:`findHomography <doxid-d9/d0c/group__calib3d_1ga4abc2ece9fab9398f2e560d53c8c9780>`

.. index:: pair: function; phase
.. _doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::phase(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false
		)

Calculates the rotation angle of 2D vectors.

The function :ref:`cv::phase <doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>` calculates the rotation angle of each 2D vector that is formed from the corresponding elements of x and y :

.. math::

	\texttt{angle} (I) = \texttt{atan2} ( \texttt{y} (I), \texttt{x} (I))

The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 , the corresponding angle(I) is set to 0.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- input floating-point array of x-coordinates of 2D vectors.

	*
		- y

		- input array of y-coordinates of 2D vectors; it must have the same size and the same type as x.

	*
		- angle

		- output array of vector angles; it has the same size and same type as x .

	*
		- angleInDegrees

		- when true, the function calculates the angle in degrees, otherwise, they are measured in radians.

.. index:: pair: function; polarToCart
.. _doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::polarToCart(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` magnitude,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` angle,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` x,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` y,
		bool angleInDegrees = false
		)

Calculates x and y coordinates of 2D vectors from their magnitude and angle.

The function :ref:`cv::polarToCart <doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665>` calculates the Cartesian coordinates of each 2D vector represented by the corresponding elements of magnitude and angle:

.. math::

	\begin{array}{l} \texttt{x} (I) = \texttt{magnitude} (I) \cos ( \texttt{angle} (I)) \\ \texttt{y} (I) = \texttt{magnitude} (I) \sin ( \texttt{angle} (I)) \\ \end{array}

The relative accuracy of the estimated coordinates is about 1e-6.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- magnitude

		- input floating-point array of magnitudes of 2D vectors; it can be an empty matrix (=Mat()), in this case, the function assumes that all the magnitudes are =1; if it is not empty, it must have the same size and type as angle.

	*
		- angle

		- input floating-point array of angles of 2D vectors.

	*
		- x

		- output array of x-coordinates of 2D vectors; it has the same size and type as angle.

	*
		- y

		- output array of y-coordinates of 2D vectors; it has the same size and type as angle.

	*
		- angleInDegrees

		- when true, the input angles are measured in degrees, otherwise, they are measured in radians.



.. rubric:: See also:

:ref:`cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`, :ref:`magnitude <doxid-d2/de8/group__core__array_1ga6d3b097586bca4409873d64a90fe64c3>`, :ref:`phase <doxid-d2/de8/group__core__array_1ga9db9ca9b4d81c3bde5677b8f64dc0137>`, :ref:`exp <doxid-d2/d75/namespacecv_1a1eb07a682abff20e0864104599c06fbc>`, :ref:`log <doxid-d2/d75/namespacecv_1ae5de78ee278fe88405c6dbc38502f7c1>`, :ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`, :ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`

.. index:: pair: function; pow
.. _doxid-d2/de8/group__core__array_1gaf0d056b5bd1dc92500d6f6cf6bac41ef:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::pow(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double power,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Raises every array element to a power.

The function :ref:`cv::pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>` raises every element of the input array to power :

.. math::

	\texttt{dst} (I) = \fork{\texttt{src}(I)^{power}}{if \(\texttt{power}\) is integer}{|\texttt{src}(I)|^{power}}{otherwise}

So, for a non-integer power exponent, the absolute values of input array elements are used. However, it is possible to get true values for negative values using some extra operations. In the example below, computing the 5th root of array src shows:

.. ref-code-block:: cpp

	Mat mask = src < 0;
	:ref:`pow <doxid-d2/d75/namespacecv_1a8bc36646a43b82baa15f151a973fb0c5>`(src, 1./5, dst);
	:ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`(:ref:`Scalar::all <doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(0), dst, dst, mask);

For some values of power, such as integer values, 0.5 and -0.5, specialized faster algorithms are used.

Special values (NaN, Inf) are not handled.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- power

		- exponent of power.

	*
		- dst

		- output array of the same size and type as src.



.. rubric:: See also:

:ref:`sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>`, :ref:`exp <doxid-d2/d75/namespacecv_1a1eb07a682abff20e0864104599c06fbc>`, :ref:`log <doxid-d2/d75/namespacecv_1ae5de78ee278fe88405c6dbc38502f7c1>`, :ref:`cartToPolar <doxid-d2/de8/group__core__array_1gac5f92f48ec32cacf5275969c33ee837d>`, :ref:`polarToCart <doxid-d2/de8/group__core__array_1ga581ff9d44201de2dd1b40a50db93d665>`

.. index:: pair: function; PSNR
.. _doxid-d2/de8/group__core__array_1ga07aaf34ae31d226b1b847d8bcff3698f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::PSNR(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2
		)

computes PSNR image/video quality metric

see `http://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio <http://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio>`__ for details Todo document

.. index:: pair: function; randn
.. _doxid-d2/de8/group__core__array_1gaeff1f61e972d133a04ce3a5f81cf6808:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::randn(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mean,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` stddev
		)

Fills the array with normally distributed random numbers.

The function :ref:`cv::randn <doxid-d2/de8/group__core__array_1gaeff1f61e972d133a04ce3a5f81cf6808>` fills the matrix dst with normally distributed random numbers with the specified mean vector and the standard deviation matrix. The generated random numbers are clipped to fit the value range of the output array data type.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- output array of random numbers; the array must be pre-allocated and have 1 to 4 channels.

	*
		- mean

		- mean value (expectation) of the generated random numbers.

	*
		- stddev

		- standard deviation of the generated random numbers; it can be either a vector (in which case a diagonal standard deviation matrix is assumed) or a square matrix.



.. rubric:: See also:

:ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>`, :ref:`randu <doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0>`

.. index:: pair: function; randShuffle
.. _doxid-d2/de8/group__core__array_1ga6a789c8a5cb56c6dd62506179808f763:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::randShuffle(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		double iterFactor = 1.,
		:ref:`RNG<doxid-d3/df8/classcv_1_1_r_n_g>`* rng = 0
		)

Shuffles the array elements randomly.

The function :ref:`cv::randShuffle <doxid-d2/de8/group__core__array_1ga6a789c8a5cb56c6dd62506179808f763>` shuffles the specified 1D array by randomly choosing pairs of elements and swapping them. The number of such swap operations will be dst.rows\*dst.cols\*iterFactor .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- input/output numerical 1D array.

	*
		- iterFactor

		- scale factor that determines the number of random swap operations (see the details below).

	*
		- rng

		- optional random number generator used for shuffling; if it is zero, theRNG () is used instead.



.. rubric:: See also:

:ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>`, :ref:`sort <doxid-d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f>`

.. index:: pair: function; randu
.. _doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::randu(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` low,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` high
		)

Generates a single uniformly-distributed random number or an array of random numbers.

Non-template variant of the function fills the matrix dst with uniformly-distributed random numbers from the specified range:

.. math::

	\texttt{low} _c \leq \texttt{dst} (I)_c < \texttt{high} _c



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dst

		- output array of random numbers; the array must be pre-allocated.

	*
		- low

		- inclusive lower boundary of the generated random numbers.

	*
		- high

		- exclusive upper boundary of the generated random numbers.



.. rubric:: See also:

:ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>`, :ref:`randn <doxid-d2/de8/group__core__array_1gaeff1f61e972d133a04ce3a5f81cf6808>`, :ref:`theRNG <doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>`

.. index:: pair: function; reduce
.. _doxid-d2/de8/group__core__array_1ga4b78072a303f29d9031d56e5638da78e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::reduce(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dim,
		int rtype,
		int dtype = -1
		)

Reduces a matrix to a vector.

The function :ref:`cv::reduce <doxid-d2/de8/group__core__array_1ga4b78072a303f29d9031d56e5638da78e>` reduces the matrix to a vector by treating the matrix rows/columns as a set of 1D vectors and performing the specified operation on the vectors until a single row/column is obtained. For example, the function can be used to compute horizontal and vertical projections of a raster image. In case of REDUCE_MAX and REDUCE_MIN , the output image should have the same type as the source one. In case of REDUCE_SUM and REDUCE_AVG , the output may have a larger element bit-depth to preserve accuracy. And multi-channel arrays are also supported in these two reduction modes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input 2D matrix.

	*
		- dst

		- output vector. Its size and type is defined by dim and dtype parameters.

	*
		- dim

		- dimension index along which the matrix is reduced. 0 means that the matrix is reduced to a single row. 1 means that the matrix is reduced to a single column.

	*
		- rtype

		- reduction operation that could be one of :ref:`cv::ReduceTypes <doxid-d0/de1/group__core_1ga14cdedf2933367eb9395ec16798af994>`

	*
		- dtype

		- when negative, the output vector will have the same type as the input matrix, otherwise, its type will be CV_MAKE_TYPE(:ref:`CV_MAT_DEPTH(dtype) <doxid-d1/d1b/group__core__hal__interface_1ga39f3412d63cac68d4f1d138ab52a6fc8>`, src.channels()).



.. rubric:: See also:

:ref:`repeat <doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d>`

.. index:: pair: function; repeat
.. _doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::repeat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		int ny,
		int nx,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Fills the output array with repeated copies of the input array.

The function :ref:`cv::repeat <doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d>` duplicates the input array one or more times along each of the two axes:

.. math::

	\texttt{dst} _{ij}= \texttt{src} _{i\mod src.rows, \; j\mod src.cols }

The second variant of the function is more convenient to use with :ref:`MatrixExpressions <doxid-d9/ddc/classcv_1_1_mat_expr_1MatrixExpressions>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array to replicate.

	*
		- ny

		- Flag to specify how many times the ``src`` is repeated along the vertical axis.

	*
		- nx

		- Flag to specify how many times the ``src`` is repeated along the horizontal axis.

	*
		- dst

		- output array of the same type as ``src``.



.. rubric:: See also:

:ref:`cv::reduce <doxid-d2/de8/group__core__array_1ga4b78072a303f29d9031d56e5638da78e>`

.. index:: pair: function; repeat
.. _doxid-d2/de8/group__core__array_1ga8e9c4ef56a85c58332c63997c10a51d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`
	cv::repeat(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src,
		int ny,
		int nx
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array to replicate.

	*
		- ny

		- Flag to specify how many times the ``src`` is repeated along the vertical axis.

	*
		- nx

		- Flag to specify how many times the ``src`` is repeated along the horizontal axis.

.. index:: pair: function; rotate
.. _doxid-d2/de8/group__core__array_1ga4ad01c0978b0ce64baa246811deeac24:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::rotate(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int rotateCode
		)

Rotates a 2D array in multiples of 90 degrees. The function rotate rotates the array in one of three different ways: Rotate by 90 degrees clockwise (rotateCode = ROTATE_90). Rotate by 180 degrees clockwise (rotateCode = ROTATE_180). Rotate by 270 degrees clockwise (rotateCode = ROTATE_270).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same type as src. The size is the same with ROTATE_180, and the rows and cols are switched for ROTATE_90 and ROTATE_270.

	*
		- rotateCode

		- an enum to specify how to rotate the array; see the enum RotateFlags



.. rubric:: See also:

:ref:`transpose <doxid-d2/de8/group__core__array_1ga46630ed6c0ea6254a35f447289bd7404>`, :ref:`repeat <doxid-d2/de8/group__core__array_1ga496c3860f3ac44c40b48811333cfda2d>`, :ref:`completeSymm <doxid-d2/de8/group__core__array_1gaa9d88dcd0e54b6d1af38d41f2a3e3d25>`, :ref:`flip <doxid-d2/de8/group__core__array_1gaca7be533e3dac7feb70fc60635adf441>`, :ref:`RotateFlags <doxid-d2/de8/group__core__array_1ga6f45d55c0b1cc9d97f5353a7c8a7aac2>`

.. index:: pair: function; scaleAdd
.. _doxid-d2/de8/group__core__array_1ga9e0845db4135f55dcf20227402f00d98:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::scaleAdd(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates the sum of a scaled array and another array.

The function scaleAdd is one of the classical primitive linear algebra operations, known as DAXPY or SAXPY in `BLAS <http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms>`__. It calculates the sum of a scaled array and another array:

.. math::

	\texttt{dst} (I)= \texttt{scale} \cdot \texttt{src1} (I) + \texttt{src2} (I)

The function can also be emulated with a matrix expression, for example:

.. ref-code-block:: cpp

	Mat A(3, 3, :ref:`CV_64F <doxid-d1/d1b/group__core__hal__interface_1ga30a562691cc5987bc88eb7bb7a8faf2b>`);
	...
	A.row(0) = A.:ref:`row <doxid-d9/de0/classcv_1_1_mat___1a957f24ad0e833a3a145499289331277e>`(1)*2 + A.:ref:`row <doxid-d9/de0/classcv_1_1_mat___1a957f24ad0e833a3a145499289331277e>`(2);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array.

	*
		- alpha

		- scale factor for the first array.

	*
		- src2

		- second input array of the same size and type as src1.

	*
		- dst

		- output array of the same size and type as src1.



.. rubric:: See also:

:ref:`add <doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`, :ref:`addWeighted <doxid-d2/de8/group__core__array_1gafafb2513349db3bcff51f54ee5592a19>`, :ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`, :ref:`Mat::dot <doxid-db/de6/classcv_1_1_mat_1a0f683eab191eeece33dfc64ae299a9cb>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; setIdentity
.. _doxid-d2/de8/group__core__array_1ga388d7575224a4a277ceb98ccaa327c99:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::setIdentity(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mtx,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& s = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(1)
		)

Initializes a scaled identity matrix.

The function :ref:`cv::setIdentity <doxid-d2/de8/group__core__array_1ga388d7575224a4a277ceb98ccaa327c99>` initializes a scaled identity matrix:

.. math::

	\texttt{mtx} (i,j)= \fork{\texttt{value}}{ if \(i=j\)}{0}{otherwise}

The function can also be emulated using the matrix initializers and the matrix expressions:

.. ref-code-block:: cpp

	Mat A = Mat::eye(4, 3, CV_32F)*5;
	// A will be set to [[5, 0, 0], [0, 5, 0], [0, 0, 5], [0, 0, 0]]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mtx

		- matrix to initialize (not necessarily square).

	*
		- s

		- value to assign to diagonal elements.



.. rubric:: See also:

:ref:`Mat::zeros <doxid-db/de6/classcv_1_1_mat_1a0b57b6a326c8876d944d188a46e0f556>`, :ref:`Mat::ones <doxid-db/de6/classcv_1_1_mat_1a69ae0402d116fc9c71908d8508dc2f09>`, :ref:`Mat::setTo <doxid-db/de6/classcv_1_1_mat_1a0440e2a164c0b0d8462fb1e487be9876>`, :ref:`Mat::operator= <doxid-db/de6/classcv_1_1_mat_1aed1f81fe7efaacc2bd95149cdfa34302>`

.. index:: pair: function; setRNGSeed
.. _doxid-d2/de8/group__core__array_1ga757e657c037410d9e19e819569e7de0f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::setRNGSeed(int seed)

Sets state of default random number generator.

The function :ref:`cv::setRNGSeed <doxid-d2/de8/group__core__array_1ga757e657c037410d9e19e819569e7de0f>` sets state of default random number generator to custom value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- seed

		- new state for default random number generator



.. rubric:: See also:

:ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>`, :ref:`randu <doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0>`, :ref:`randn <doxid-d2/de8/group__core__array_1gaeff1f61e972d133a04ce3a5f81cf6808>`

.. index:: pair: function; solve
.. _doxid-d2/de8/group__core__array_1ga12b43690dbd31fed96f213eefead2373:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::solve(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags = :ref:`DECOMP_LU<doxid-d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024>`
		)

Solves one or more linear systems or least-squares problems.

The function :ref:`cv::solve <doxid-d2/de8/group__core__array_1ga12b43690dbd31fed96f213eefead2373>` solves a linear system or least-squares problem (the latter is possible with :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>` or QR methods, or by specifying the flag DECOMP_NORMAL ):

.. math::

	\texttt{dst} = \arg \min _X \| \texttt{src1} \cdot \texttt{X} - \texttt{src2} \|

If DECOMP_LU or DECOMP_CHOLESKY method is used, the function returns 1 if src1 (or :math:`\texttt{src1}^T\texttt{src1}`) is non-singular. Otherwise, it returns 0. In the latter case, dst is not valid. Other methods find a pseudo-solution in case of a singular left-hand side part.

If you want to find a unity-norm solution of an under-defined singular system :math:`\texttt{src1}\cdot\texttt{dst}=0`, the function solve will not do the work. Use :ref:`SVD::solveZ <doxid-d6/d55/classcv_1_1_s_v_d_1ab255cd24a882ab993fb2f7377ef2774a>` instead.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- input matrix on the left-hand side of the system.

	*
		- src2

		- input matrix on the right-hand side of the system.

	*
		- dst

		- output solution.

	*
		- flags

		- solution (matrix inversion) method (:ref:`cv::DecompTypes <doxid-d2/de8/group__core__array_1gaaf9ea5dcc392d5ae04eacb9920b9674c>`)



.. rubric:: See also:

:ref:`invert <doxid-d2/de8/group__core__array_1gad278044679d4ecf20f7622cc151aaaa2>`, :ref:`SVD <doxid-d6/d55/classcv_1_1_s_v_d>`, :ref:`eigen <doxid-d2/de8/group__core__array_1ga9fa0d58657f60eaa6c71f6fbb40456e3>`

.. index:: pair: function; solveCubic
.. _doxid-d2/de8/group__core__array_1ga1c3b0b925b085b6e96931ee309e6a1da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::solveCubic(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` coeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` roots
		)

Finds the real roots of a cubic equation.

The function solveCubic finds the real roots of a cubic equation:

* if coeffs is a 4-element vector:
  
  .. math::
  
  	\texttt{coeffs} [0] x^3 + \texttt{coeffs} [1] x^2 + \texttt{coeffs} [2] x + \texttt{coeffs} [3] = 0

* if coeffs is a 3-element vector:
  
  .. math::
  
  	x^3 + \texttt{coeffs} [0] x^2 + \texttt{coeffs} [1] x + \texttt{coeffs} [2] = 0

The roots are stored in the roots array.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- coeffs

		- equation coefficients, an array of 3 or 4 elements.

	*
		- roots

		- output array of real roots that has 1 or 3 elements.

.. index:: pair: function; solvePoly
.. _doxid-d2/de8/group__core__array_1gac2f5e953016fabcdf793d762f4ec5dce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::solvePoly(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` coeffs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` roots,
		int maxIters = 300
		)

Finds the real or complex roots of a polynomial equation.

The function :ref:`cv::solvePoly <doxid-d2/de8/group__core__array_1gac2f5e953016fabcdf793d762f4ec5dce>` finds real and complex roots of a polynomial equation:

.. math::

	\texttt{coeffs} [n] x^{n} + \texttt{coeffs} [n-1] x^{n-1} + ... + \texttt{coeffs} [1] x + \texttt{coeffs} [0] = 0



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- coeffs

		- array of polynomial coefficients.

	*
		- roots

		- output (complex) array of roots.

	*
		- maxIters

		- maximum number of iterations the algorithm does.

.. index:: pair: function; sort
.. _doxid-d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::sort(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags
		)

Sorts each row or each column of a matrix.

The function :ref:`cv::sort <doxid-d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f>` sorts each matrix row or each matrix column in ascending or descending order. So you should pass two operation flags to get desired behaviour. If you want to sort matrix rows or columns lexicographically, you can use STL std::sort generic function with the proper comparison predicate.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input single-channel array.

	*
		- dst

		- output array of the same size and type as src.

	*
		- flags

		- operation flags, a combination of :ref:`cv::SortFlags <doxid-db/de0/group__core__utils_1ga8e88a1f27e41e12f81caab17cf81667b>`



.. rubric:: See also:

:ref:`sortIdx <doxid-d2/de8/group__core__array_1gadf35157cbf97f3cb85a545380e383506>`, :ref:`randShuffle <doxid-d2/de8/group__core__array_1ga6a789c8a5cb56c6dd62506179808f763>`

.. index:: pair: function; sortIdx
.. _doxid-d2/de8/group__core__array_1gadf35157cbf97f3cb85a545380e383506:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::sortIdx(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int flags
		)

Sorts each row or each column of a matrix.

The function :ref:`cv::sortIdx <doxid-d2/de8/group__core__array_1gadf35157cbf97f3cb85a545380e383506>` sorts each matrix row or each matrix column in the ascending or descending order. So you should pass two operation flags to get desired behaviour. Instead of reordering the elements themselves, it stores the indices of sorted elements in the output array. For example:

.. ref-code-block:: cpp

	Mat A = Mat::eye(3,3,CV_32F), B;
	sortIdx(A, B, SORT_EVERY_ROW + SORT_ASCENDING);
	// B will probably contain
	// (because of equal elements in A some permutations are possible):
	// [[1, 2, 0], [0, 2, 1], [0, 1, 2]]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input single-channel array.

	*
		- dst

		- output integer array of the same size as src.

	*
		- flags

		- operation flags that could be a combination of :ref:`cv::SortFlags <doxid-db/de0/group__core__utils_1ga8e88a1f27e41e12f81caab17cf81667b>`



.. rubric:: See also:

:ref:`sort <doxid-d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f>`, :ref:`randShuffle <doxid-d2/de8/group__core__array_1ga6a789c8a5cb56c6dd62506179808f763>`

.. index:: pair: function; split
.. _doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::split(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& src,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* mvbegin
		)

Divides a multi-channel array into several single-channel arrays.

The function :ref:`cv::split <doxid-d2/de8/group__core__array_1ga0547c7fed86152d7e9d0096029c8518a>` splits a multi-channel array into separate single-channel arrays:

.. math::

	\texttt{mv} [c](I) = \texttt{src} (I)_c

If you need to extract a single channel or do some other sophisticated channel permutation, use mixChannels .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input multi-channel array.

	*
		- mvbegin

		- output array; the number of arrays must match src.channels(); the arrays themselves are reallocated, if needed.



.. rubric:: See also:

:ref:`merge <doxid-d2/de8/group__core__array_1ga7d7b4d6c6ee504b30a20b1680029c7b4>`, :ref:`mixChannels <doxid-d2/de8/group__core__array_1ga51d768c270a1cdd3497255017c4504be>`, :ref:`cvtColor <doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>`

.. index:: pair: function; split
.. _doxid-d2/de8/group__core__array_1ga8027f9deee1e42716be8039e5863fbd9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::split(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m,
		:ref:`OutputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga889a09549b98223016170d9b613715de>` mv
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- m

		- input multi-channel array.

	*
		- mv

		- output vector of arrays; the arrays themselves are reallocated, if needed.

.. index:: pair: function; sqrt
.. _doxid-d2/de8/group__core__array_1ga186222c3919657890f88df5a1f64a7d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::sqrt(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Calculates a square root of array elements.

The function :ref:`cv::sqrt <doxid-d2/d75/namespacecv_1a682082a1892db64a2856403ec17ba297>` calculates a square root of each input array element. In case of multi-channel arrays, each channel is processed independently. The accuracy is approximately the same as of the built-in std::sqrt .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input floating-point array.

	*
		- dst

		- output array of the same size and type as src.

.. index:: pair: function; subtract
.. _doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::subtract(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1
		)

Calculates the per-element difference between two arrays or array and a scalar.

The function subtract calculates:

* Difference between two arrays, when both input arrays have the same size and the same number of channels:
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src1}(I) - \texttt{src2}(I)) \quad \texttt{if mask}(I) \ne0

* Difference between an array and a scalar, when src2 is constructed from Scalar or has the same number of elements as ``src1.channels()`` :
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src1}(I) - \texttt{src2} ) \quad \texttt{if mask}(I) \ne0

* Difference between a scalar and an array, when src1 is constructed from Scalar or has the same number of elements as ``src2.channels()`` :
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src1} - \texttt{src2}(I) ) \quad \texttt{if mask}(I) \ne0

* The reverse difference between a scalar and an array in the case of ``SubRS`` :
  
  .. math::
  
  	\texttt{dst}(I) = \texttt{saturate} ( \texttt{src2} - \texttt{src1}(I) ) \quad \texttt{if mask}(I) \ne0
  
  where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently.

The first function in the list above can be replaced with matrix expressions:

.. ref-code-block:: cpp

	dst = src1 - src2;
	dst -= src1; // equivalent to subtract(dst, src1, dst);

The input arrays and the output array can all have the same or different depths. For example, you can subtract to 8-bit unsigned arrays and store the difference in a 16-bit signed array. Depth of the output array is determined by dtype parameter. In the second and third cases above, as well as in the first case, when src1.depth() == src2.depth(), dtype can be set to the default -1. In this case the output array will have the same depth as the input array, be it src1, src2 or both. Saturation is not applied when the output array has the depth CV_32S. You may even get result of an incorrect sign in the case of overflow.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array or a scalar.

	*
		- src2

		- second input array or a scalar.

	*
		- dst

		- output array of the same size and the same number of channels as the input array.

	*
		- mask

		- optional operation mask; this is an 8-bit single channel array that specifies elements of the output array to be changed.

	*
		- dtype

		- optional depth of the output array



.. rubric:: See also:

:ref:`add <doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`, :ref:`addWeighted <doxid-d2/de8/group__core__array_1gafafb2513349db3bcff51f54ee5592a19>`, :ref:`scaleAdd <doxid-d2/de8/group__core__array_1ga9e0845db4135f55dcf20227402f00d98>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; sum
.. _doxid-d2/de8/group__core__array_1ga716e10a2dd9e228e4d3c95818f106722:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`
	cv::sum(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src)

Calculates the sum of array elements.

The function :ref:`cv::sum <doxid-d2/de8/group__core__array_1ga716e10a2dd9e228e4d3c95818f106722>` calculates and returns the sum of array elements, independently for each channel.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array that must have from 1 to 4 channels.



.. rubric:: See also:

:ref:`countNonZero <doxid-d2/de8/group__core__array_1gaa4b89393263bb4d604e0fe5986723914>`, :ref:`mean <doxid-d2/de8/group__core__array_1ga191389f8a0e58180bb13a727782cd461>`, :ref:`meanStdDev <doxid-d2/de8/group__core__array_1ga846c858f4004d59493d7c6a4354b301d>`, :ref:`norm <doxid-dc/d84/group__core__basic_1ga4e556cb8ad35a643a1ea66e035711bb9>`, :ref:`minMaxLoc <doxid-d2/de8/group__core__array_1gab473bf2eb6d14ff97e89b355dac20707>`, :ref:`reduce <doxid-d2/de8/group__core__array_1ga4b78072a303f29d9031d56e5638da78e>`

.. index:: pair: function; SVBackSubst
.. _doxid-d2/de8/group__core__array_1gab4e620e6fc6c8a27bb2be3d50a840c0b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::SVBackSubst(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` w,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` u,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` vt,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` rhs,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

wrap :ref:`SVD::backSubst <doxid-d6/d55/classcv_1_1_s_v_d_1a7c28935c9999977dbe34285d13d43190>`

.. index:: pair: function; SVDecomp
.. _doxid-d2/de8/group__core__array_1gab477b5b7b39b370bb03e75b19d2d5109:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::SVDecomp(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` w,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` u,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` vt,
		int flags = 0
		)

wrap :ref:`SVD::compute <doxid-d6/d55/classcv_1_1_s_v_d_1a76f0b2044df458160292045a3d3714c6>`

.. index:: pair: function; theRNG
.. _doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`RNG<doxid-d3/df8/classcv_1_1_r_n_g>`&
	cv::theRNG()

Returns the default random number generator.

The function :ref:`cv::theRNG <doxid-d2/de8/group__core__array_1ga75843061d150ad6564b5447e38e57722>` returns the default random number generator. For each thread, there is a separate random number generator, so you can use the function safely in multi-thread environments. If you just need to get a single random number using this generator or initialize an array, you can use randu or randn instead. But if you are going to generate many random numbers inside a loop, it is much faster to use this function to retrieve the generator and then use RNG::operator _Tp() .



.. rubric:: See also:

:ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>`, :ref:`randu <doxid-d2/de8/group__core__array_1ga1ba1026dca0807b27057ba6a49d258c0>`, :ref:`randn <doxid-d2/de8/group__core__array_1gaeff1f61e972d133a04ce3a5f81cf6808>`

.. index:: pair: function; trace
.. _doxid-d2/de8/group__core__array_1ga3419ac19c7dcd2be4bd552a23e147dd8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`
	cv::trace(:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mtx)

Returns the trace of a matrix.

The function :ref:`cv::trace <doxid-dc/d84/group__core__basic_1ga36ad18631177b097a38198c4e83c6e2b>` returns the sum of the diagonal elements of the matrix mtx .

.. math::

	\mathrm{tr} ( \texttt{mtx} ) = \sum _i \texttt{mtx} (i,i)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mtx

		- input matrix.

.. index:: pair: function; transform
.. _doxid-d2/de8/group__core__array_1ga393164aa54bb9169ce0a8cc44e08ff22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::transform(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` m
		)

Performs the matrix transformation of every array element.

The function :ref:`cv::transform <doxid-d2/de8/group__core__array_1ga393164aa54bb9169ce0a8cc44e08ff22>` performs the matrix transformation of every element of the array src and stores the results in dst :

.. math::

	\texttt{dst} (I) = \texttt{m} \cdot \texttt{src} (I)

(when m.cols=src.channels() ), or

.. math::

	\texttt{dst} (I) = \texttt{m} \cdot [ \texttt{src} (I); 1]

(when m.cols=src.channels()+1 )

Every element of the N -channel array src is interpreted as N -element vector that is transformed using the M x N or M x (N+1) matrix m to M-element vector - the corresponding element of the output array dst .

The function may be used for geometrical transformation of N -dimensional points, arbitrary linear color space transformation (such as various kinds of RGB to YUV transforms), shuffling the image channels, and so forth.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array that must have as many channels (1 to 4) as m.cols or m.cols-1.

	*
		- dst

		- output array of the same size and depth as src; it has as many channels as m.rows.

	*
		- m

		- transformation 2x2 or 2x3 floating-point matrix.



.. rubric:: See also:

:ref:`perspectiveTransform <doxid-d2/de8/group__core__array_1gad327659ac03e5fd6894b90025e6900a7>`, :ref:`getAffineTransform <doxid-da/d54/group__imgproc__transform_1ga8f6d378f9f8eebb5cb55cd3ae295a999>`, :ref:`estimateAffine2D <doxid-d9/d0c/group__calib3d_1ga27865b1d26bac9ce91efaee83e94d4dd>`, :ref:`warpAffine <doxid-da/d54/group__imgproc__transform_1ga0203d9ee5fcd28d40dbc4a1ea4451983>`, :ref:`warpPerspective <doxid-da/d54/group__imgproc__transform_1gaf73673a7e8e18ec6963e3774e6a94b87>`

.. index:: pair: function; transpose
.. _doxid-d2/de8/group__core__array_1ga46630ed6c0ea6254a35f447289bd7404:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::transpose(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Transposes a matrix.

The function :ref:`cv::transpose <doxid-d2/de8/group__core__array_1ga46630ed6c0ea6254a35f447289bd7404>` transposes the matrix src :

.. math::

	\texttt{dst} (i,j) = \texttt{src} (j,i)

No complex conjugation is done in case of a complex matrix. It should be done separately if needed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array.

	*
		- dst

		- output array of the same type as src.

.. index:: pair: function; vconcat
.. _doxid-d2/de8/group__core__array_1ga744f53b69f6e4f12156cdde4e76aed27:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::vconcat(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`* src,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` nsrc,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Applies vertical concatenation to given matrices.

The function vertically concatenates two or more :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` matrices (with the same number of cols).

.. ref-code-block:: cpp

	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` matArray[] = { :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(1, 4, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(1)),
	                       :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(1, 4, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(2)),
	                       :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(1, 4, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(3)),};
	
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` out;
	:ref:`cv::vconcat <doxid-d2/de8/group__core__array_1ga744f53b69f6e4f12156cdde4e76aed27>`( matArray, 3, out );
	//out:
	//[1,   1,   1,   1;
	// 2,   2,   2,   2;
	// 3,   3,   3,   3]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices. all of the matrices must have the same number of cols and the same depth.

	*
		- nsrc

		- number of matrices in src.

	*
		- dst

		- output array. It has the same number of cols and depth as the src, and the sum of rows of the src.



.. rubric:: See also:

:ref:`cv::hconcat(const Mat\*, size_t, OutputArray) <doxid-d2/de8/group__core__array_1gaf9771c991763233866bf76b5b5d1776f>`,

:ref:`cv::hconcat(InputArrayOfArrays, OutputArray) <doxid-d2/de8/group__core__array_1ga4676b1376cdc4e528dab6bd9edc51c1a>` and

:ref:`cv::hconcat(InputArray, InputArray, OutputArray) <doxid-d2/de8/group__core__array_1gaab5ceee39e0580f879df645a872c6bf7>`

.. index:: pair: function; vconcat
.. _doxid-d2/de8/group__core__array_1gaad07cede730cdde64b90e987aad179b8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::vconcat(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. ref-code-block:: cpp

	:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>` A = (:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>`(3, 2) << 1, 7,
	                                              2, 8,
	                                              3, 9);
	:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>` B = (:ref:`cv::Mat_\<float> <doxid-d9/de0/classcv_1_1_mat__>`(3, 2) << 4, 10,
	                                              5, 11,
	                                              6, 12);
	
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` C;
	:ref:`cv::vconcat <doxid-d2/de8/group__core__array_1ga744f53b69f6e4f12156cdde4e76aed27>`(A, B, C);
	//C:
	//[1, 7;
	// 2, 8;
	// 3, 9;
	// 4, 10;
	// 5, 11;
	// 6, 12]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- first input array to be considered for vertical concatenation.

	*
		- src2

		- second input array to be considered for vertical concatenation.

	*
		- dst

		- output array. It has the same number of cols and depth as the src1 and src2, and the sum of rows of the src1 and src2.

.. index:: pair: function; vconcat
.. _doxid-d2/de8/group__core__array_1ga558e169e15adcc46b8cdcc6cd215070f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::vconcat(
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. ref-code-block:: cpp

	std::vector<cv::Mat> matrices = { :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(1, 4, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(1)),
	                                  :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(1, 4, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(2)),
	                                  :ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>`(1, 4, :ref:`CV_8UC1 <doxid-d1/d1b/group__core__hal__interface_1ga81df635441b21f532fdace401e04f588>`, :ref:`cv::Scalar <doxid-d7/d13/classcv_1_1_scalar__>`(3)),};
	
	:ref:`cv::Mat <doxid-db/de6/classcv_1_1_mat>` out;
	:ref:`cv::vconcat <doxid-d2/de8/group__core__array_1ga744f53b69f6e4f12156cdde4e76aed27>`( matrices, out );
	//out:
	//[1,   1,   1,   1;
	// 2,   2,   2,   2;
	// 3,   3,   3,   3]



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array or vector of matrices. all of the matrices must have the same number of cols and the same depth

	*
		- dst

		- output array. It has the same number of cols and depth as the src, and the sum of rows of the src. same depth.

