.. index:: pair: group; C structures and operations
.. _doxid-d2/df8/group__core__c:

C structures and operations
===========================

.. toctree::
	:hidden:

	group_core_c_glue.rst
	struct_CvAttrList.rst
	struct_CvBox2D.rst
	struct_CvChain.rst
	struct_CvContour.rst
	struct_CvFileNode.rst
	struct_CvGraph.rst
	struct_CvGraphEdge.rst
	struct_CvGraphScanner.rst
	struct_CvGraphVtx.rst
	struct_CvGraphVtx2D.rst
	struct_CvHistogram.rst
	struct_CvLineIterator.rst
	struct_CvMat.rst
	struct_CvMatND.rst
	struct_CvMemBlock.rst
	struct_CvMemStorage.rst
	struct_CvMemStoragePos.rst
	struct_CvModuleInfo.rst
	struct_CvNArrayIterator.rst
	struct_CvPluginFuncInfo.rst
	struct_CvPoint.rst
	struct_CvPoint2D32f.rst
	struct_CvPoint2D64f.rst
	struct_CvPoint3D32f.rst
	struct_CvPoint3D64f.rst
	struct_CvRect.rst
	struct_CvScalar.rst
	struct_CvSeq.rst
	struct_CvSeqBlock.rst
	struct_CvSeqReader.rst
	struct_CvSeqWriter.rst
	struct_CvSet.rst
	struct_CvSetElem.rst
	struct_CvSize.rst
	struct_CvSize2D32f.rst
	struct_CvSlice.rst
	struct_CvSparseMat.rst
	struct_CvSparseMatIterator.rst
	struct_CvSparseNode.rst
	struct_CvString.rst
	struct_CvStringHashNode.rst
	struct_CvTermCriteria.rst
	struct_CvTreeNodeIterator.rst
	struct_CvTypeInfo.rst
	struct_IplConvKernel.rst
	struct_IplConvKernelFP.rst
	struct_IplImage.rst
	struct_IplROI.rst

Overview
~~~~~~~~



|	:ref:`Connections with C++<doxid-d8/dd7/group__core__c__glue>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef void(:ref:`CV_STDCALL<doxid-d0/dc2/core_2include_2opencv2_2core_2types__c_8h_1a60f4b24e47e8775e51bf4ae588fb1e51>`* :target:`Cv_iplAllocateImageData<doxid-d2/df8/group__core__c_1gabc24dda87213007dd556b4050e3f5073>`)(
		IplImage *,
		int,
		int
		);

	typedef :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*(:ref:`CV_STDCALL<doxid-d0/dc2/core_2include_2opencv2_2core_2types__c_8h_1a60f4b24e47e8775e51bf4ae588fb1e51>`* :target:`Cv_iplCloneImage<doxid-d2/df8/group__core__c_1ga1a945eec1fd79f47a84848926ef01093>`)(const IplImage *);

	typedef :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*(:ref:`CV_STDCALL<doxid-d0/dc2/core_2include_2opencv2_2core_2types__c_8h_1a60f4b24e47e8775e51bf4ae588fb1e51>`* :target:`Cv_iplCreateImageHeader<doxid-d2/df8/group__core__c_1gaeddeb3d77f6fe10a20d621f5daa6d615>`)(
		int,
		int,
		int,
		char *,
		char *,
		int,
		int,
		int,
		int,
		int,
		IplROI *,
		IplImage *,
		void *,
		IplTileInfo *
		);

	typedef :ref:`IplROI<doxid-d1/d33/struct_ipl_r_o_i>`*(:ref:`CV_STDCALL<doxid-d0/dc2/core_2include_2opencv2_2core_2types__c_8h_1a60f4b24e47e8775e51bf4ae588fb1e51>`* :target:`Cv_iplCreateROI<doxid-d2/df8/group__core__c_1ga704a900c17e943fc6e4dbdb44b4ed303>`)(
		int,
		int,
		int,
		int,
		int
		);

	typedef void(:ref:`CV_STDCALL<doxid-d0/dc2/core_2include_2opencv2_2core_2types__c_8h_1a60f4b24e47e8775e51bf4ae588fb1e51>`* :target:`Cv_iplDeallocate<doxid-d2/df8/group__core__c_1ga5934b229ed904f88ccd3b5dcea625f8a>`)(
		IplImage *,
		int
		);

	typedef int (*:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>`)(
		const void *a,
		const void *b,
		void *userdata
		);

	typedef int (*:target:`CvErrorCallback<doxid-d2/df8/group__core__c_1ga476c29a11f98720068c3732a1aa950d6>`)(
		int status,
		const char *func_name,
		const char *err_msg,
		const char *file_name,
		int line,
		void *userdata
		);

	typedef struct :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>` :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`;
	typedef void :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`;
	typedef void* (*:target:`CvCloneFunc<doxid-d2/df8/group__core__c_1ga2833a6e72411f903b796813cd68bae90>`)(const void *struct_ptr);
	typedef struct CvGenericHash :target:`CvFileNodeHash<doxid-d2/df8/group__core__c_1ga88376488ce3898aeea192d7e43477320>`;
	typedef int :target:`CvHistType<doxid-d2/df8/group__core__c_1gaede064c6a5e3a06485a8e74ac4eed745>`;
	typedef int (*:target:`CvIsInstanceFunc<doxid-d2/df8/group__core__c_1ga389262a49f767d510447201c21f047ab>`)(const void *struct_ptr);
	typedef :ref:`CvContour<doxid-d9/db0/struct_cv_contour>` :target:`CvPoint2DSeq<doxid-d2/df8/group__core__c_1gadd1285b9c310a3067794db5eee05a5da>`;

	typedef void* (*:target:`CvReadFunc<doxid-d2/df8/group__core__c_1gaf6d725f9c189babdf6cd582e19c86976>`)(
		CvFileStorage *storage,
		CvFileNode *node
		);

	typedef void (*:target:`CvReleaseFunc<doxid-d2/df8/group__core__c_1ga8d6c85fc337cc8bf2d2d5de4c21d3ce7>`)(void **struct_dblptr);
	typedef :ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` :target:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`;
	typedef int :target:`CVStatus<doxid-d2/df8/group__core__c_1gaeb7540290ce627c4b4e94203816e124c>`;

	typedef void (*:target:`CvWriteFunc<doxid-d2/df8/group__core__c_1gac7eadf5d822c3a85d9ff0391861c01cb>`)(
		CvFileStorage *storage,
		const char *name,
		const void *struct_ptr,
		CvAttrList attributes
		);

	typedef struct _IplTileInfo :target:`IplTileInfo<doxid-d2/df8/group__core__c_1ga8bab40056b8af1404fc2fa87a49baa03>`;

	// enums

	enum
	{
	    :ref:`@53::CV_StsOk<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603abe4d082f5e30cd46712e95bad32df769>`                     =                       0,
	    :ref:`@53::CV_StsBackTrace<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a82e2a9b6a9b9dc5972f6997a9269516d>`              =               -1,
	    :ref:`@53::CV_StsError<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a09f92be88ff238f52d100a2db77a6c96>`                  =                   -2,
	    :ref:`@53::CV_StsInternal<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a6818a01adfd3395b6f29ea39323325a1>`               =                -3,
	    :ref:`@53::CV_StsNoMem<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a80c63eb7e70e36293c3b365a7635d903>`                  =                   -4,
	    :ref:`@53::CV_StsBadArg<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603accf5777eb107ab4c23dbeeaae6138175>`                 =                  -5,
	    :ref:`@53::CV_StsBadFunc<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aaadea95d03ced5eb07b1499bd6f2dffc>`                =                 -6,
	    :ref:`@53::CV_StsNoConv<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603affc27f0f8fe6ed581e14828d4cf4d909>`                 =                  -7,
	    :ref:`@53::CV_StsAutoTrace<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a0fe5ea706d458eb1893e968c3dec9bc2>`              =               -8,
	    :ref:`@53::CV_HeaderIsNull<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a6e58be3b1205026082b9ea5d06205975>`              =               -9,
	    :ref:`@53::CV_BadImageSize<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ae5defdd6ca27f9a45c130137cf9269b3>`              =              -10,
	    :ref:`@53::CV_BadOffset<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aa545b142942bc735a33241cf1d3740ec>`                 =                 -11,
	    :target:`@53::CV_BadDataPtr<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a68f0f622cde7ec9c17efe23ede12f0da>`                =                -12,
	    :ref:`@53::CV_BadStep<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603af39c734895f539907ab8af04d2a3b3f4>`                   =                   -13,
	    :target:`@53::CV_BadModelOrChSeq<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a29cfb9b47321e9727265a70e4d8bb9f3>`           =           -14,
	    :ref:`@53::CV_BadNumChannels<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a727bd07ede2ff2187497658772525b4c>`            =            -15,
	    :target:`@53::CV_BadNumChannel1U<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5d6a6677b770988e2bbee7d50a7f3f81>`           =           -16,
	    :ref:`@53::CV_BadDepth<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a3e456fa8b6e0c7d77a58b3630b8402e3>`                  =                  -17,
	    :target:`@53::CV_BadAlphaChannel<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a8b84f19d2ded1d37ac51c229c97ca2fc>`           =           -18,
	    :ref:`@53::CV_BadOrder<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ad53327b3e187afe04ae198c1bc5b2451>`                  =                  -19,
	    :ref:`@53::CV_BadOrigin<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a0d4e443657a9ddc42c42cd394b7a6a19>`                 =                 -20,
	    :ref:`@53::CV_BadAlign<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a361b7d0220f620646a713f7e33371376>`                  =                  -21,
	    :target:`@53::CV_BadCallBack<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603adab8c7b979b4224c1575ad1d9cc10ac1>`               =               -22,
	    :target:`@53::CV_BadTileSize<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a56667df52700c25cc525b3e4ff869fd5>`               =               -23,
	    :ref:`@53::CV_BadCOI<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aa38e34f81122bf59f91515978df56fbc>`                    =                    -24,
	    :ref:`@53::CV_BadROISize<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ac37daadbe254a10c83b1908b347d6ebf>`                =                -25,
	    :target:`@53::CV_MaskIsTiled<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aee7b922f84ce6df5cecb499d2938d730>`               =               -26,
	    :ref:`@53::CV_StsNullPtr<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a354fe7ffb95dea25fad059d283ebab16>`                =                -27,
	    :ref:`@53::CV_StsVecLengthErr<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a60a9dcb36d6e9a6e2243f680cfcd6591>`           =           -28,
	    :ref:`@53::CV_StsFilterStructContentErr<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5970531d95d445badbcf8e02eb852dda>` = -29,
	    :ref:`@53::CV_StsKernelStructContentErr<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aea67edac99dd67c92dabb19d29a376ec>` = -30,
	    :ref:`@53::CV_StsFilterOffsetErr<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a79148baa150a313db97f2bdd132186ff>`        =        -31,
	    :ref:`@53::CV_StsBadSize<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a813a5380db7920ea08384cc3d02b01da>`                =                -201,
	    :ref:`@53::CV_StsDivByZero<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a6ff8d93d3f7e913552afa108f3f3d5af>`              =              -202,
	    :ref:`@53::CV_StsInplaceNotSupported<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a7c3dfa8541783235bb8f0173397bdb74>`    =    -203,
	    :ref:`@53::CV_StsObjectNotFound<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a19ce7dc358724fe70c8d81a65653225e>`         =         -204,
	    :ref:`@53::CV_StsUnmatchedFormats<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603af109ac41693c5fc9ab2180bbe1caf0cd>`       =       -205,
	    :ref:`@53::CV_StsBadFlag<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5022821bc6c66437491a12c76308d8fd>`                =                -206,
	    :ref:`@53::CV_StsBadPoint<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ab79894e37837cf8360be0847c86920db>`               =               -207,
	    :ref:`@53::CV_StsBadMask<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a8e95c8bca6b4e3f52e1638766cd1d903>`                =                -208,
	    :ref:`@53::CV_StsUnmatchedSizes<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a7c0df1534e0f9e046abd674716add31a>`         =         -209,
	    :ref:`@53::CV_StsUnsupportedFormat<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a2b8954e4465b7133c319fc4877cd16ee>`      =      -210,
	    :ref:`@53::CV_StsOutOfRange<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603afc7faafff211209f81950ee2abc19cae>`             =             -211,
	    :ref:`@53::CV_StsParseError<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a63367d6e2e5ba0240b29748c4bda3435>`             =             -212,
	    :ref:`@53::CV_StsNotImplemented<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ad6a6c52c266ca77c3f055d465b3c1f8b>`         =         -213,
	    :ref:`@53::CV_StsBadMemBlock<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603af571131d2504339c67b30308132b978b>`            =            -214,
	    :ref:`@53::CV_StsAssert<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5da0f12f42b4c8295b06ebfbbdc12206>`                 =                 -215,
	    :ref:`@53::CV_GpuNotSupported<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a54f2ac578e6f36c639d0061a7d36c298>`           =           -216,
	    :ref:`@53::CV_GpuApiCallError<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a917e1fffd8f1aa665bfc1423f0707beb>`           =           -217,
	    :ref:`@53::CV_OpenGlNotSupported<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a388fee90cf64c0d80b7f99cb1541546b>`        =        -218,
	    :ref:`@53::CV_OpenGlApiCallError<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a8973800826c581b79010ad51037a3f17>`        =        -219,
	    :ref:`@53::CV_OpenCLApiCallError<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a4d840c47d35f2b1f80512045fb704fed>`        =        -220,
	    :target:`@53::CV_OpenCLDoubleNotSupported<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aca411b97fac136bca4e7117c8b1f8bb5>`  =  -221,
	    :ref:`@53::CV_OpenCLInitError<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a9b8d02530927e3a4d585220425fc62cf>`           =           -222,
	    :target:`@53::CV_OpenCLNoAMDBlasFft<doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a873fd00696adbccb26349f4ff4ef8b57>`        =        -223,
	};

	// structs

	struct :ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`;
	struct :ref:`CvBox2D<doxid-d9/d3b/struct_cv_box2_d>`;
	struct :ref:`CvChain<doxid-d6/dc5/struct_cv_chain>`;
	struct :ref:`CvContour<doxid-d9/db0/struct_cv_contour>`;
	struct :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`;
	struct :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`;
	struct :ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`;
	struct :ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`;
	struct :ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`;
	struct :ref:`CvGraphVtx2D<doxid-da/d27/struct_cv_graph_vtx2_d>`;
	struct :ref:`CvHistogram<doxid-db/da9/struct_cv_histogram>`;
	struct :ref:`CvLineIterator<doxid-d2/dc0/struct_cv_line_iterator>`;
	struct :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`;
	struct :ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`;
	struct :ref:`CvMemBlock<doxid-d2/d37/struct_cv_mem_block>`;
	struct :ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`;
	struct :ref:`CvMemStoragePos<doxid-d1/d12/struct_cv_mem_storage_pos>`;
	struct :ref:`CvModuleInfo<doxid-da/d96/struct_cv_module_info>`;
	struct :ref:`CvNArrayIterator<doxid-de/d3b/struct_cv_n_array_iterator>`;
	struct :ref:`CvPluginFuncInfo<doxid-d9/d62/struct_cv_plugin_func_info>`;
	struct :ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`;
	struct :ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>`;
	struct :ref:`CvPoint2D64f<doxid-d6/d0d/struct_cv_point2_d64f>`;
	struct :ref:`CvPoint3D32f<doxid-d9/df6/struct_cv_point3_d32f>`;
	struct :ref:`CvPoint3D64f<doxid-db/d5a/struct_cv_point3_d64f>`;
	struct :ref:`CvRect<doxid-de/d44/struct_cv_rect>`;
	struct :ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`;
	struct :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`;
	struct :ref:`CvSeqBlock<doxid-d7/d77/struct_cv_seq_block>`;
	struct :ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`;
	struct :ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`;
	struct :ref:`CvSet<doxid-df/d76/struct_cv_set>`;
	struct :ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`;
	struct :ref:`CvSize<doxid-da/d4d/struct_cv_size>`;
	struct :ref:`CvSize2D32f<doxid-de/d91/struct_cv_size2_d32f>`;
	struct :ref:`CvSlice<doxid-d8/d15/struct_cv_slice>`;
	struct :ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`;
	struct :ref:`CvSparseMatIterator<doxid-d3/d9d/struct_cv_sparse_mat_iterator>`;
	struct :ref:`CvSparseNode<doxid-da/d78/struct_cv_sparse_node>`;
	struct :ref:`CvString<doxid-dd/d0b/struct_cv_string>`;
	struct :ref:`CvStringHashNode<doxid-d5/db7/struct_cv_string_hash_node>`;
	struct :ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>`;
	struct :ref:`CvTreeNodeIterator<doxid-d8/d40/struct_cv_tree_node_iterator>`;
	struct :ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`;
	struct :ref:`IplConvKernel<doxid-db/d9e/struct_ipl_conv_kernel>`;
	struct :ref:`IplConvKernelFP<doxid-d6/d50/struct_ipl_conv_kernel_f_p>`;
	struct :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`;
	struct :ref:`IplROI<doxid-d1/d33/struct_ipl_r_o_i>`;

	// global functions

	void
	:ref:`cvAbsDiff<doxid-d2/df8/group__core__c_1ga7867aae4e2a7a0ab7e047e6ecdcdb725>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvAbsDiffS<doxid-d2/df8/group__core__c_1ga7f124e15e402ec747c60b6f1ff66187b>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		);

	void
	:ref:`cvAdd<doxid-d2/df8/group__core__c_1ga421177ab32563a3b7755e05c61194cf0>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvAddS<doxid-d2/df8/group__core__c_1gaa07dcaabe93277ee300a1cdd03dbe643>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvAddWeighted<doxid-d2/df8/group__core__c_1ga2681d8c88c806553824b6338a4c26790>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		double alpha,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		double beta,
		double gamma,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void*
	:ref:`cvAlloc<doxid-d2/df8/group__core__c_1ga8301e6a2977e2dc5299b8db639d74fd1>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size);

	void
	:ref:`cvAnd<doxid-d2/df8/group__core__c_1gaebc1ec50e4faaba3dde656150757661b>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvAndS<doxid-d2/df8/group__core__c_1gaabe8c3b6852f5f918fbe49bc11ad7a2a>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	const char*
	:ref:`cvAttrValue<doxid-d2/df8/group__core__c_1ga3d622fe781239a0928a838cd20f9b700>`(
		const :ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* attr,
		const char* attr_name
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvAvg<doxid-d2/df8/group__core__c_1ga4738fbcbdd7b18ccef89550fd7e06e3c>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvAvgSdv<doxid-d2/df8/group__core__c_1ga1097c00ea927c9eb5243136d1e34d609>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* mean,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* std_dev,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:target:`cvBackProjectPCA<doxid-d2/df8/group__core__c_1ga14bace95149cdd6899d4ad66d0006f8c>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* proj,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mean,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* eigenvects,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* result
		);

	void
	:ref:`cvCalcCovarMatrix<doxid-d2/df8/group__core__c_1gaa55a840f6541d2e6175d2599e5c40471>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** vects,
		int count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* cov_mat,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* avg,
		int flags
		);

	void
	:target:`cvCalcPCA<doxid-d2/df8/group__core__c_1gaa39e0747e93eb2cbee35793a8ba1d3d4>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* data,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mean,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* eigenvals,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* eigenvects,
		int flags
		);

	void
	:ref:`cvCartToPolar<doxid-d2/df8/group__core__c_1ga06a27ff8b897fc7335105f7d6725e0b9>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* x,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* y,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* magnitude,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* angle = NULL,
		int angle_in_degrees = 0
		);

	float
	:ref:`cvCbrt<doxid-d2/df8/group__core__c_1gac77b45f1fed5dea412e2f1799605bd2d>`(float value);

	void
	:target:`cvChangeSeqBlock<doxid-d2/df8/group__core__c_1ga066b6631851a8a0f4e894b94b651b6c7>`(
		void* reader,
		int direction
		);

	int
	:ref:`cvCheckArr<doxid-d2/df8/group__core__c_1ga2eaa2b2d4e89f5ca4f1bd301e26102eb>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int flags = 0,
		double min_val = 0,
		double max_val = 0
		);

	int
	:target:`cvCheckHardwareSupport<doxid-d2/df8/group__core__c_1gaee25a961714c0e70e82d0fa355af6b46>`(int feature);

	:ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>`
	:ref:`cvCheckTermCriteria<doxid-d2/df8/group__core__c_1ga12f6f9812f8e75925620fe231025a8a4>`(
		:ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>` criteria,
		double default_eps,
		int default_max_iters
		);

	void
	:ref:`cvClearGraph<doxid-d2/df8/group__core__c_1ga24cfe0c8309068d5473adddf8b2aeda3>`(:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph);

	void
	:ref:`cvClearMemStorage<doxid-d2/df8/group__core__c_1gabea1a2aa74b86a72b0ad4472e27106da>`(:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage);

	void
	:ref:`cvClearND<doxid-d2/df8/group__core__c_1ga3421393d3a8cf1b001460d5f28c09b48>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx
		);

	void
	:ref:`cvClearSeq<doxid-d2/df8/group__core__c_1gae08497cc7695fdc8599011a85aa27068>`(:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq);

	void
	:ref:`cvClearSet<doxid-d2/df8/group__core__c_1ga50bf4ff1d48873bd1c8d153487366350>`(:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header);

	void*
	:ref:`cvClone<doxid-d2/df8/group__core__c_1ga8d56a075b4f8a7dd23d730a24a238360>`(const void* struct_ptr);

	:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`*
	:ref:`cvCloneGraph<doxid-d2/df8/group__core__c_1gabbb817130f233374c2db9c84346ffc74>`(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		);

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	:ref:`cvCloneImage<doxid-d2/df8/group__core__c_1ga35ff9ea01bd63e8cc6ceafd3d5fd5ac3>`(const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvCloneMat<doxid-d2/df8/group__core__c_1gacdd7037591e39dc080109406a41fe6e3>`(const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat);

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	:ref:`cvCloneMatND<doxid-d2/df8/group__core__c_1gaca7f74e6cabd5cc9bc88168f356c49f0>`(const :ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`* mat);

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	:target:`cvCloneSeq<doxid-d2/df8/group__core__c_1ga0332d1543714ba51d0cf8c7669b79f43>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage = NULL
		);

	:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`*
	:ref:`cvCloneSparseMat<doxid-d2/df8/group__core__c_1ga3443feae602f83d6856cb64f855463f5>`(const :ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`* mat);

	void
	:ref:`cvCmp<doxid-d2/df8/group__core__c_1ga1e51834e22c4c41ab40873b869f6a861>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int cmp_op
		);

	void
	:ref:`cvCmpS<doxid-d2/df8/group__core__c_1ga4fea92f848532f4bafc2f5bd460070af>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		double value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int cmp_op
		);

	void
	:ref:`cvCompleteSymm<doxid-d2/df8/group__core__c_1gacd70a22036ed99d8461cd52d869a462c>`(
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* matrix,
		int LtoR = 0
		);

	void
	:ref:`cvConvertScale<doxid-d2/df8/group__core__c_1ga3a6c66666ac8c30f639c85dd18df9f67>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1,
		double shift = 0
		);

	void
	:ref:`cvConvertScaleAbs<doxid-d2/df8/group__core__c_1ga998b946d49d3b2dbc9a4803c439bb9cd>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1,
		double shift = 0
		);

	void
	:ref:`cvCopy<doxid-d2/df8/group__core__c_1gac96faa736c7fab8ecc1dc632beb8ea81>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	int
	:ref:`cvCountNonZero<doxid-d2/df8/group__core__c_1ga297ba1c39eacac32ede5d6a54d65b5a5>`(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`*
	:ref:`cvCreateChildMemStorage<doxid-d2/df8/group__core__c_1ga98e7a149b2cba931cbd78c786a49557c>`(:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* parent);

	void
	:ref:`cvCreateData<doxid-d2/df8/group__core__c_1ga76ac54ccad766597e20bf0ea29a924df>`(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`*
	:ref:`cvCreateGraph<doxid-d2/df8/group__core__c_1ga7e7ff625910f677628a1c4407d9adf14>`(
		int graph_flags,
		int header_size,
		int vtx_size,
		int edge_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		);

	:ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`*
	:ref:`cvCreateGraphScanner<doxid-d2/df8/group__core__c_1ga234aabf5550bda973ef0433445d591e1>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* vtx = NULL,
		int mask = -1
		);

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	:ref:`cvCreateImage<doxid-d2/df8/group__core__c_1gad83bfadf567039148caaf60d8ce9978a>`(
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>` size,
		int depth,
		int channels
		);

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	:ref:`cvCreateImageHeader<doxid-d2/df8/group__core__c_1ga950feef7abcbd6c19c83543f25849ee2>`(
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>` size,
		int depth,
		int channels
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvCreateMat<doxid-d2/df8/group__core__c_1ga70b1fdbae1ec1c6b92d829d2aa27edcd>`(
		int rows,
		int cols,
		int type
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvCreateMatHeader<doxid-d2/df8/group__core__c_1gaa990dcc7befc21d5d035340e41efdb5d>`(
		int rows,
		int cols,
		int type
		);

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	:ref:`cvCreateMatND<doxid-d2/df8/group__core__c_1ga31165c88d5cc7fb218bcfbb6c29665ef>`(
		int dims,
		const int* sizes,
		int type
		);

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	:ref:`cvCreateMatNDHeader<doxid-d2/df8/group__core__c_1ga15e5b98023d13a07d1ef4fc01280336e>`(
		int dims,
		const int* sizes,
		int type
		);

	:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`*
	:ref:`cvCreateMemStorage<doxid-d2/df8/group__core__c_1gafd7437582f40e82c3cb03db45c3d30a0>`(int block_size = 0);

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	:ref:`cvCreateSeq<doxid-d2/df8/group__core__c_1ga9dd6709594cd6269c581dcf3f0e7ec39>`(
		int seq_flags,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` header_size,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` elem_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		);

	void
	:target:`cvCreateSeqBlock<doxid-d2/df8/group__core__c_1ga7f581d74386aea93180163e5c1959fc4>`(:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer);

	:ref:`CvSet<doxid-df/d76/struct_cv_set>`*
	:ref:`cvCreateSet<doxid-d2/df8/group__core__c_1ga6519eccf8b8f37310e5bf6db7636df73>`(
		int set_flags,
		int header_size,
		int elem_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		);

	:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`*
	:ref:`cvCreateSparseMat<doxid-d2/df8/group__core__c_1gaffb4dc541577a77b17548fa5f7477b76>`(
		int dims,
		const int* sizes,
		int type
		);

	void
	:ref:`cvCrossProduct<doxid-d2/df8/group__core__c_1gacd2e95490205c8baddbbf8f5e42660f9>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void*
	:ref:`cvCvtSeqToArray<doxid-d2/df8/group__core__c_1gae48eb170a99156e86e864fcbe9b80193>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* elements,
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice = :ref:`CV_WHOLE_SEQ<doxid-d2/df8/group__core__c_1gaf60a219def061a7b1335495e6aedd90b>`
		);

	void
	:ref:`cvDCT<doxid-d2/df8/group__core__c_1ga0a53ef8965677957f624bfd53668a058>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int flags
		);

	void
	:ref:`cvDecRefData<doxid-d2/df8/group__core__c_1ga6eef31ca2988177424f6a743defb5fb7>`(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	double
	:ref:`cvDet<doxid-d2/df8/group__core__c_1ga0d76c97ce93c5d0fd2cff763a867ceb2>`(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat);

	void
	:ref:`cvDFT<doxid-d2/df8/group__core__c_1ga2aa776ae24fe9ac8b0b64223b105916b>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int flags,
		int nonzero_rows = 0
		);

	void
	:ref:`cvDiv<doxid-d2/df8/group__core__c_1gaaf771a273a80ba5c80b8638402d85df2>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1
		);

	double
	:ref:`cvDotProduct<doxid-d2/df8/group__core__c_1ga23cb0ca7b1521c70738db933c7b44cfb>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2
		);

	void
	:ref:`cvEigenVV<doxid-d2/df8/group__core__c_1ga6819a03dac3160ac3bc6618b237b0176>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* evects,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* evals,
		double eps = 0,
		int lowindex = -1,
		int highindex = -1
		);

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	:ref:`cvEndWriteSeq<doxid-d2/df8/group__core__c_1gacb2652fb1e9df0043fd557d2e2422c1d>`(:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer);

	void
	:ref:`cvEndWriteStruct<doxid-d2/df8/group__core__c_1ga6915e36ae1e179593f818fb5ad8f3ba3>`(:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs);

	void
	:ref:`cvError<doxid-d2/df8/group__core__c_1ga66e214ddcc57477fc1fb56e2d67c57fa>`(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line
		);

	int
	:ref:`cvErrorFromIppStatus<doxid-d2/df8/group__core__c_1ga6dc2cf4dc7150e3bf5b4cd83eb6ec39e>`(int ipp_status);

	const char*
	:ref:`cvErrorStr<doxid-d2/df8/group__core__c_1ga1c84222494c198c3cc3fd9bda98e1999>`(int status);

	void
	:ref:`cvExp<doxid-d2/df8/group__core__c_1ga1cb5d06a46f6f1cb7812ab7fc23bc44c>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	float
	:ref:`cvFastArctan<doxid-d2/df8/group__core__c_1gaf998f7a61eca81e1b28b0d517cb4d268>`(
		float y,
		float x
		);

	:ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`*
	:ref:`cvFindGraphEdge<doxid-d2/df8/group__core__c_1ga44395f68c42dbbc1722bde63ea2fe5a0>`(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int start_idx,
		int end_idx
		);

	:ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`*
	:target:`cvFindGraphEdgeByPtr<doxid-d2/df8/group__core__c_1gae482b28f5fff40cc57d38b46560c9d3c>`(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		const :ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* start_vtx,
		const :ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* end_vtx
		);

	:ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`*
	:ref:`cvFindType<doxid-d2/df8/group__core__c_1ga7d76386c3cbb2e3b46b41c5f92359e66>`(const char* type_name);

	:ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`*
	:ref:`cvFirstType<doxid-d2/df8/group__core__c_1ga061e1a47784b4e34c455cd5fc8262390>`(void);

	void
	:ref:`cvFlip<doxid-d2/df8/group__core__c_1ga0d8844dd0cf49a82b471884be70d4837>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst = NULL,
		int flip_mode = 0
		);

	void
	:ref:`cvFlushSeqWriter<doxid-d2/df8/group__core__c_1ga27b522a14c46915bc0aa41d9381ea834>`(:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer);

	void
	:ref:`cvFree_<doxid-d2/df8/group__core__c_1ga9044a43fb841f737653173e8534c9602>`(void* ptr);

	void
	:ref:`cvGEMM<doxid-d2/df8/group__core__c_1ga1dd4598f88464ea795b140433149258d>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		double alpha,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src3,
		double beta,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int tABC = 0
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvGet1D<doxid-d2/df8/group__core__c_1ga79385201855ae7b6e1a9cb127c019200>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvGet2D<doxid-d2/df8/group__core__c_1ga6a7d8ff87da9f7b3f63a0d94cb879eb9>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvGet3D<doxid-d2/df8/group__core__c_1ga6afe57e26345a5c08ac288c7e6d5bdf9>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetCol<doxid-d2/df8/group__core__c_1ga858135a6bad74832ab6970bf84460d80>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int col
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetCols<doxid-d2/df8/group__core__c_1gae188dbff875982a27ae12b3c09e5c533>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int start_col,
		int end_col
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetDiag<doxid-d2/df8/group__core__c_1gae46f2ff46bd356ed2d2ba82b164062f6>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int diag = 0
		);

	int
	:ref:`cvGetDims<doxid-d2/df8/group__core__c_1ga8f8b0c82e99d72a6c7335915d84834ab>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int* sizes = NULL
		);

	int
	:ref:`cvGetDimSize<doxid-d2/df8/group__core__c_1ga143306a818a28f51139ee69a673175cb>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int index
		);

	int
	:ref:`cvGetElemType<doxid-d2/df8/group__core__c_1ga9a9b29dbac846b951475c248b839ed60>`(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	int
	:ref:`cvGetErrInfo<doxid-d2/df8/group__core__c_1ga6083f975b22c75162a9b5ad2439b036a>`(
		const char** errcode_desc,
		const char** description,
		const char** filename,
		int* line
		);

	int
	:ref:`cvGetErrMode<doxid-d2/df8/group__core__c_1ga7e0c004bc9c45eb4a1b33e78d270636e>`(void);

	int
	:ref:`cvGetErrStatus<doxid-d2/df8/group__core__c_1ga2e0b4c2e674a2f04b3945fd8b542075e>`(void);

	:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`*
	:ref:`cvGetFileNode<doxid-d2/df8/group__core__c_1gac61d40bac918caab78646511e395535c>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const :ref:`CvStringHashNode<doxid-d5/db7/struct_cv_string_hash_node>`* key,
		int create_missing = 0
		);

	:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`*
	:ref:`cvGetFileNodeByName<doxid-d2/df8/group__core__c_1gafa543a04771741b7120650dfd3b6cf31>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name
		);

	const char*
	:ref:`cvGetFileNodeName<doxid-d2/df8/group__core__c_1gad7ff3a97567e5587af81ed33b5ae05a6>`(const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node);

	:ref:`CvStringHashNode<doxid-d5/db7/struct_cv_string_hash_node>`*
	:ref:`cvGetHashedKey<doxid-d2/df8/group__core__c_1gabf85829f35925df1a716f11f477ac420>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		int len = -1,
		int create_missing = 0
		);

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	:ref:`cvGetImage<doxid-d2/df8/group__core__c_1ga9ef7665b712683df06e35bffb504b571>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image_header
		);

	int
	:ref:`cvGetImageCOI<doxid-d2/df8/group__core__c_1ga6d127e02096be1ae81cbffb9e850fd10>`(const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image);

	:ref:`CvRect<doxid-de/d44/struct_cv_rect>`
	:ref:`cvGetImageROI<doxid-d2/df8/group__core__c_1gaf6133efed18187716743884742145892>`(const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetMat<doxid-d2/df8/group__core__c_1gab82cd54707dd3561bd9ab15bac2ce0b2>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* header,
		int* coi = NULL,
		int allowND = 0
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvGetND<doxid-d2/df8/group__core__c_1ga7cc08a5ecf38caae60389f3a312d4130>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx
		);

	:ref:`CvSparseNode<doxid-da/d78/struct_cv_sparse_node>`*
	:ref:`cvGetNextSparseNode<doxid-d2/df8/group__core__c_1ga6e8b05ecb9b78ad4f200f58e75676443>`(:ref:`CvSparseMatIterator<doxid-d3/d9d/struct_cv_sparse_mat_iterator>`* mat_iterator);

	int
	:ref:`cvGetNumThreads<doxid-d2/df8/group__core__c_1gaaa96561d617d4ae411208fd664de38cd>`(void);

	int
	:ref:`cvGetOptimalDFTSize<doxid-d2/df8/group__core__c_1ga30a805a371922673f75921ea830d6521>`(int size0);

	void
	:ref:`cvGetRawData<doxid-d2/df8/group__core__c_1ga7c04a4fbd5e246589cd2d6d95958ddd0>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** data,
		int* step = NULL,
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>`* roi_size = NULL
		);

	double
	:ref:`cvGetReal1D<doxid-d2/df8/group__core__c_1gabfea97273973ef738392685f39ff3833>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0
		);

	double
	:ref:`cvGetReal2D<doxid-d2/df8/group__core__c_1ga2a556983898348f17684736ad83a881d>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1
		);

	double
	:ref:`cvGetReal3D<doxid-d2/df8/group__core__c_1ga656f0d27e0f80006d03264cd14cedd56>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2
		);

	double
	:ref:`cvGetRealND<doxid-d2/df8/group__core__c_1ga53205d474fa01fd1a9c2d23a830bb18e>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx
		);

	:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`*
	:ref:`cvGetRootFileNode<doxid-d2/df8/group__core__c_1gaeb757c6d6cf782be12c53bbc73497073>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		int stream_index = 0
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetRow<doxid-d2/df8/group__core__c_1ga01397587170b5aa4c51ec62b01a90d0e>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int row
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetRows<doxid-d2/df8/group__core__c_1gadcef809bfbbff65803f57678488f0df3>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int start_row,
		int end_row,
		int delta_row = 1
		);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	:ref:`cvGetSeqElem<doxid-d2/df8/group__core__c_1ga8baa6a0a77de246723b2c22a05a78223>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int index
		);

	int
	:ref:`cvGetSeqReaderPos<doxid-d2/df8/group__core__c_1ga8c808ce3c5f3d01187c5e6f1deed418d>`(:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader);

	:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`*
	:ref:`cvGetSetElem<doxid-d2/df8/group__core__c_1ga2e86d337ef7019258d301b68046e7b86>`(
		const :ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		int idx
		);

	:ref:`CvSize<doxid-da/d4d/struct_cv_size>`
	:ref:`cvGetSize<doxid-d2/df8/group__core__c_1ga97611258cc31692b19ccf41bbea8a07d>`(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvGetSubRect<doxid-d2/df8/group__core__c_1ga164c89ed1f20ca79fad30eeffd34f057>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		:ref:`CvRect<doxid-de/d44/struct_cv_rect>` rect
		);

	int
	:ref:`cvGetThreadNum<doxid-d2/df8/group__core__c_1ga08083bfa346c59475bef003caa125c64>`(void);

	:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`
	:ref:`cvGetTickCount<doxid-d2/df8/group__core__c_1ga71fb1815947c168de6f71e5d4e99d747>`(void);

	double
	:target:`cvGetTickFrequency<doxid-d2/df8/group__core__c_1ga1810e10574ba65835ba893045b40c66d>`(void);

	int
	:ref:`cvGraphAddEdge<doxid-d2/df8/group__core__c_1gada87ddbca4f11e603538a572311693a0>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int start_idx,
		int end_idx,
		const :ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`* edge = NULL,
		:ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`** inserted_edge = NULL
		);

	int
	:target:`cvGraphAddEdgeByPtr<doxid-d2/df8/group__core__c_1ga87f3cb9989f5ffa397e6fdb148af3c4d>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* start_vtx,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* end_vtx,
		const :ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`* edge = NULL,
		:ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`** inserted_edge = NULL
		);

	int
	:ref:`cvGraphAddVtx<doxid-d2/df8/group__core__c_1ga819619b8027948e272cbfdc780448328>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		const :ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* vtx = NULL,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`** inserted_vtx = NULL
		);

	void
	:ref:`cvGraphRemoveEdge<doxid-d2/df8/group__core__c_1gad34298b891caee25438310ed4c60fd5c>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int start_idx,
		int end_idx
		);

	void
	:target:`cvGraphRemoveEdgeByPtr<doxid-d2/df8/group__core__c_1ga28f558c2162968de8dea86952e3f281c>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* start_vtx,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* end_vtx
		);

	int
	:ref:`cvGraphRemoveVtx<doxid-d2/df8/group__core__c_1ga4073c66f023b77686e14b744886aab42>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int index
		);

	int
	:target:`cvGraphRemoveVtxByPtr<doxid-d2/df8/group__core__c_1ga1d585e2eb5806ec1a39c3433dfae9eec>`(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* vtx
		);

	int
	:ref:`cvGraphVtxDegree<doxid-d2/df8/group__core__c_1ga9e925525afd42811fff56787a8a051de>`(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int vtx_idx
		);

	int
	:target:`cvGraphVtxDegreeByPtr<doxid-d2/df8/group__core__c_1ga4a00be8ba220a2710b50a3dfbdef3674>`(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		const :ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* vtx
		);

	int
	:ref:`cvGuiBoxReport<doxid-d2/df8/group__core__c_1gad114536bacaa68586e1eabbda0c8c915>`(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line,
		void* userdata
		);

	int
	:ref:`cvIncRefData<doxid-d2/df8/group__core__c_1ga32771c08029437990b0824fd5cfa3c84>`(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	:ref:`cvInitImageHeader<doxid-d2/df8/group__core__c_1ga51da3d9e3f93ce336cee192e4719a1ef>`(
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image,
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>` size,
		int depth,
		int channels,
		int origin = 0,
		int align = 4
		);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvInitMatHeader<doxid-d2/df8/group__core__c_1gae91cd88040f88a69a1b4885de33e5fe6>`(
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat,
		int rows,
		int cols,
		int type,
		void* data = NULL,
		int step = 0x7fffffff
		);

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	:ref:`cvInitMatNDHeader<doxid-d2/df8/group__core__c_1ga94368400204e8923082c8ab4e9f7290c>`(
		:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`* mat,
		int dims,
		const int* sizes,
		int type,
		void* data = NULL
		);

	int
	:ref:`cvInitNArrayIterator<doxid-d2/df8/group__core__c_1gaa75bdbfa6bf4209f83660081b247db56>`(
		int count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** arrs,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask,
		:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`* stubs,
		:ref:`CvNArrayIterator<doxid-de/d3b/struct_cv_n_array_iterator>`* array_iterator,
		int flags = 0
		);

	:ref:`CvSparseNode<doxid-da/d78/struct_cv_sparse_node>`*
	:ref:`cvInitSparseMatIterator<doxid-d2/df8/group__core__c_1ga6ffbc97a53be80997948b0e08a3cd4fc>`(
		const :ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`* mat,
		:ref:`CvSparseMatIterator<doxid-d3/d9d/struct_cv_sparse_mat_iterator>`* mat_iterator
		);

	void
	:target:`cvInitTreeNodeIterator<doxid-d2/df8/group__core__c_1ga23467c2cfdf844c6bbc7560e5d16ec40>`(
		:ref:`CvTreeNodeIterator<doxid-d8/d40/struct_cv_tree_node_iterator>`* tree_iterator,
		const void* first,
		int max_level
		);

	void
	:ref:`cvInRange<doxid-d2/df8/group__core__c_1ga88fd8c24f2a348f8282ccc237c445518>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* lower,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* upper,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvInRangeS<doxid-d2/df8/group__core__c_1ga7803c41d43fc9617d0feeb36445bf2da>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` lower,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` upper,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvInsertNodeIntoTree<doxid-d2/df8/group__core__c_1ga67b86beb1e5d61352674edf3b4976578>`(
		void* node,
		void* parent,
		void* frame
		);

	double
	:ref:`cvInvert<doxid-d2/df8/group__core__c_1ga2430b21e737e3669b9f811d671265a9a>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int method = 0
		);

	int
	:target:`cvKMeans2<doxid-d2/df8/group__core__c_1ga80da6546a3e0c3315f2ffe1faa3119c1>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* samples,
		int cluster_count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* labels,
		:ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>` termcrit,
		int attempts = 1,
		:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng = 0,
		int flags = 0,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* _centers = 0,
		double* compactness = 0
		);

	void*
	:ref:`cvLoad<doxid-d2/df8/group__core__c_1ga1dafba80b8856132deb18e0ed61e1c2f>`(
		const char* filename,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* memstorage = NULL,
		const char* name = NULL,
		const char** real_name = NULL
		);

	void
	:ref:`cvLog<doxid-d2/df8/group__core__c_1ga212acf98778141c97d213d2f839a7038>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvLUT<doxid-d2/df8/group__core__c_1gad6502f5e7cb0783f36c60cc54d38117e>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* lut
		);

	double
	:ref:`cvMahalanobis<doxid-d2/df8/group__core__c_1gabe1671b3c05ed4c83618a7d6747eb306>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* vec1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* vec2,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat
		);

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	:ref:`cvMakeSeqHeaderForArray<doxid-d2/df8/group__core__c_1ga8960f65fc52a7aef5e7dc54eb6f00978>`(
		int seq_type,
		int header_size,
		int elem_size,
		void* elements,
		int total,
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSeqBlock<doxid-d7/d77/struct_cv_seq_block>`* block
		);

	void
	:ref:`cvMax<doxid-d2/df8/group__core__c_1gac99537e039f77be666f89c1586a1b7b1>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvMaxS<doxid-d2/df8/group__core__c_1ga0fde09cc15fb090d64dd4481f0566dca>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		double value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void*
	:ref:`cvMemStorageAlloc<doxid-d2/df8/group__core__c_1ga5c6d0d4ecb96fdd602c09ca4a8cf4d9b>`(
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size
		);

	:ref:`CvString<doxid-dd/d0b/struct_cv_string>`
	:ref:`cvMemStorageAllocString<doxid-d2/df8/group__core__c_1ga3490d2c19a3be0ca64ae98e242ade078>`(
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		const char* ptr,
		int len = -1
		);

	void
	:ref:`cvMerge<doxid-d2/df8/group__core__c_1gaf8188655c24a358a48470bf4a5c73eb9>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src0,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src3,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvMin<doxid-d2/df8/group__core__c_1ga6574d11e5b03d5f5ce370ba4ab58bc9f>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvMinMaxLoc<doxid-d2/df8/group__core__c_1ga15af09692571ade79f3b24389673881d>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		double* min_val,
		double* max_val,
		:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`* min_loc = NULL,
		:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`* max_loc = NULL,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvMinS<doxid-d2/df8/group__core__c_1gaa8678fb45069807183df664205fbead5>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		double value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvMixChannels<doxid-d2/df8/group__core__c_1gaa7d01b7179adb8f0e2d52b66687108f3>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** src,
		int src_count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** dst,
		int dst_count,
		const int* from_to,
		int pair_count
		);

	void
	:ref:`cvMul<doxid-d2/df8/group__core__c_1ga2f89508d4e0e8eb5f8e343359cbfebca>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1
		);

	void
	:ref:`cvMulSpectrums<doxid-d2/df8/group__core__c_1gaf174a6acbba2d439277f72678107a764>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int flags
		);

	void
	:ref:`cvMulTransposed<doxid-d2/df8/group__core__c_1ga85c19308ce431e3ed1966d4f5df4adcc>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int order,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* delta = NULL,
		double scale = 1.
		);

	int
	:ref:`cvNextGraphItem<doxid-d2/df8/group__core__c_1ga0f69da3871e1a32f001e496f46ecd7d6>`(:ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`* scanner);

	int
	:ref:`cvNextNArraySlice<doxid-d2/df8/group__core__c_1ga714288a17d9cfd742d6ddf4f50cacc7a>`(:ref:`CvNArrayIterator<doxid-de/d3b/struct_cv_n_array_iterator>`* array_iterator);

	void*
	:target:`cvNextTreeNode<doxid-d2/df8/group__core__c_1ga3f9db6482f2a224cf7b4219a762c0cb8>`(:ref:`CvTreeNodeIterator<doxid-d8/d40/struct_cv_tree_node_iterator>`* tree_iterator);

	double
	:ref:`cvNorm<doxid-d2/df8/group__core__c_1gad38dfdc0246c7e0bd0b15ab93a75b10a>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr2 = NULL,
		int norm_type = 4,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvNormalize<doxid-d2/df8/group__core__c_1gad5f3dc40ee5c7580173d044967e230d7>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double a = 1.,
		double b = 0.,
		int norm_type = 4,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvNot<doxid-d2/df8/group__core__c_1gaac21fb414811be822643cf670072bf1c>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	int
	:ref:`cvNulDevReport<doxid-d2/df8/group__core__c_1ga5e6241cfbe1c221ec13e621bd8a34d22>`(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line,
		void* userdata
		);

	:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`*
	:ref:`cvOpenFileStorage<doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade>`(
		const char* filename,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* memstorage,
		int flags,
		const char* encoding = NULL
		);

	void
	:ref:`cvOr<doxid-d2/df8/group__core__c_1ga5fd765a55773617628692c610869606f>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvOrS<doxid-d2/df8/group__core__c_1ga56c0d0cd1b6247e339b30e9b4c609968>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvPerspectiveTransform<doxid-d2/df8/group__core__c_1gaa266f6cb8bba1e82057328fc22829da0>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat
		);

	void
	:ref:`cvPolarToCart<doxid-d2/df8/group__core__c_1ga17f8fc405d8ec373d62e1b967b7bb0b3>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* magnitude,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* angle,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* x,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* y,
		int angle_in_degrees = 0
		);

	void
	:ref:`cvPow<doxid-d2/df8/group__core__c_1ga6da0e88830827df7b8a11b942829f7db>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double power
		);

	void*
	:target:`cvPrevTreeNode<doxid-d2/df8/group__core__c_1ga1c8ec58cbb47f693e581abac453b8813>`(:ref:`CvTreeNodeIterator<doxid-d8/d40/struct_cv_tree_node_iterator>`* tree_iterator);

	void
	:target:`cvProjectPCA<doxid-d2/df8/group__core__c_1ga05f790ac89613357e4397b20aa3fef29>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* data,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mean,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* eigenvects,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* result
		);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	:ref:`cvPtr1D<doxid-d2/df8/group__core__c_1gad3785099caa304b14a19680ede001b5f>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int* type = NULL
		);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	:ref:`cvPtr2D<doxid-d2/df8/group__core__c_1ga596c5c68f733ed12720b72b4626237c7>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int* type = NULL
		);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	:ref:`cvPtr3D<doxid-d2/df8/group__core__c_1ga981a481ffa19274a2aaa0a69e431d807>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2,
		int* type = NULL
		);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	:ref:`cvPtrND<doxid-d2/df8/group__core__c_1ga748b4ecfb2d28d85e1606dfb41f0850d>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx,
		int* type = NULL,
		int create_node = 1,
		unsigned* precalc_hashval = NULL
		);

	void
	:ref:`cvRandArr<doxid-d2/df8/group__core__c_1gaba7dd9bd9b94b47073c43181197e0608>`(
		:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int dist_type,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` param1,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` param2
		);

	void
	:target:`cvRandShuffle<doxid-d2/df8/group__core__c_1ga507a575642917ed72e4714ea50b133b7>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng,
		double iter_factor = 1.
		);

	:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`*
	:ref:`cvRange<doxid-d2/df8/group__core__c_1gac4d5960d5c67243fee6a747e9ad4d03b>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		double start,
		double end
		);

	void
	:target:`cvRawDataToScalar<doxid-d2/df8/group__core__c_1ga156cb9e5f335ae26ed913ce04305c838>`(
		const void* data,
		int type,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* scalar
		);

	void*
	:ref:`cvRead<doxid-d2/df8/group__core__c_1ga33a9d5aa389a4391fc83b63f295af401>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* attributes = NULL
		);

	void*
	:ref:`cvReadByName<doxid-d2/df8/group__core__c_1gadd102c14d0dc23839b5db1c8b97b5155>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* attributes = NULL
		);

	int
	:ref:`cvReadInt<doxid-d2/df8/group__core__c_1ga62ee4340b0d2d19c9d01c2605856bb60>`(
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		int default_value = 0
		);

	int
	:ref:`cvReadIntByName<doxid-d2/df8/group__core__c_1gac039dca5395481d2d90092895ff468e2>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		int default_value = 0
		);

	void
	:ref:`cvReadRawData<doxid-d2/df8/group__core__c_1ga55f1ceba9f2d334cc3167f74e9711d34>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* src,
		void* dst,
		const char* dt
		);

	void
	:ref:`cvReadRawDataSlice<doxid-d2/df8/group__core__c_1gae801105812731fa0055cae1cad11bd48>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader,
		int count,
		void* dst,
		const char* dt
		);

	double
	:ref:`cvReadReal<doxid-d2/df8/group__core__c_1ga4f1cf91cf28639f9f85bb9671e1b4aa4>`(
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		double default_value = 0.
		);

	double
	:ref:`cvReadRealByName<doxid-d2/df8/group__core__c_1gaffacf88df914ad738814738fb8a2e605>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		double default_value = 0.
		);

	const char*
	:ref:`cvReadString<doxid-d2/df8/group__core__c_1ga2ed11ffa9e2f479cbbe412b20f92f720>`(
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		const char* default_value = NULL
		);

	const char*
	:ref:`cvReadStringByName<doxid-d2/df8/group__core__c_1ga64e0beb63175eb9a822b881e85c9ec38>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		const char* default_value = NULL
		);

	:ref:`CvErrorCallback<doxid-d2/df8/group__core__c_1ga476c29a11f98720068c3732a1aa950d6>`
	:ref:`cvRedirectError<doxid-d2/df8/group__core__c_1gafa5ca40b52271b769f3e96ece7e7d06f>`(
		:ref:`CvErrorCallback<doxid-d2/df8/group__core__c_1ga476c29a11f98720068c3732a1aa950d6>` error_handler,
		void* userdata = NULL,
		void** prev_userdata = NULL
		);

	void
	:ref:`cvReduce<doxid-d2/df8/group__core__c_1gabcdd12db191e9a3134475a6ef98665fb>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int dim = -1,
		int op = 0
		);

	void
	:ref:`cvRegisterType<doxid-d2/df8/group__core__c_1ga360e9f47506dc39d4ad3179fb64e37a9>`(const :ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`* info);

	void
	:ref:`cvRelease<doxid-d2/df8/group__core__c_1ga37397a9f27ed4e8a4f5799bb48f53124>`(void** struct_ptr);

	void
	:ref:`cvReleaseData<doxid-d2/df8/group__core__c_1ga2c300ac9941face8b49fc4638adc9156>`(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	void
	:ref:`cvReleaseFileStorage<doxid-d2/df8/group__core__c_1gaa1ea8e6294d4f55f263bd670e135fa9e>`(:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`** fs);

	void
	:ref:`cvReleaseGraphScanner<doxid-d2/df8/group__core__c_1ga191033e36e9b412d93bed58f2cbe1e95>`(:ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`** scanner);

	void
	:ref:`cvReleaseImage<doxid-d2/df8/group__core__c_1ga6d14201d7658e0e757398b102da0c959>`(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`** image);

	void
	:ref:`cvReleaseImageHeader<doxid-d2/df8/group__core__c_1ga239c20502af4779ae8316c35c45ec23e>`(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`** image);

	void
	:ref:`cvReleaseMat<doxid-d2/df8/group__core__c_1ga6419d3a2133a7863bf72d5084d278c9f>`(:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`** mat);

	void
	:ref:`cvReleaseMatND<doxid-d2/df8/group__core__c_1gabfe9c4b4c4e6b71c36aea2dcd87694cd>`(:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`** mat);

	void
	:ref:`cvReleaseMemStorage<doxid-d2/df8/group__core__c_1ga8ea91ef87d47be7414b7d91b98736929>`(:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`** storage);

	void
	:ref:`cvReleaseSparseMat<doxid-d2/df8/group__core__c_1gaa1b77f8190ec41263242cfbd481d0e3c>`(:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`** mat);

	void
	:ref:`cvRemoveNodeFromTree<doxid-d2/df8/group__core__c_1gaddeee21aa735f91468f2d28977da4195>`(
		void* node,
		void* frame
		);

	void
	:ref:`cvRepeat<doxid-d2/df8/group__core__c_1ga5763638d64ce587e3659bb96ca44807e>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	void
	:ref:`cvResetImageROI<doxid-d2/df8/group__core__c_1ga99bae13489d2cd489013e1993ece9206>`(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	:ref:`cvReshape<doxid-d2/df8/group__core__c_1gaf3423ffc7a26be7707447db5c6ee73d5>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* header,
		int new_cn,
		int new_rows = 0
		);

	:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`*
	:ref:`cvReshapeMatND<doxid-d2/df8/group__core__c_1ga907380632d7e86cba50fd50620e06e6e>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int sizeof_header,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* header,
		int new_cn,
		int new_dims,
		int* new_sizes
		);

	void
	:ref:`cvRestoreMemStoragePos<doxid-d2/df8/group__core__c_1ga0f48b4ea10890bac8bede6c9a2a5dff1>`(
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvMemStoragePos<doxid-d1/d12/struct_cv_mem_storage_pos>`* pos
		);

	void
	:ref:`cvSave<doxid-d2/df8/group__core__c_1ga66305f8a331d98e204978f4f0fa327cb>`(
		const char* filename,
		const void* struct_ptr,
		const char* name = NULL,
		const char* comment = NULL,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>` attributes = :ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`()
		);

	void
	:ref:`cvSaveMemStoragePos<doxid-d2/df8/group__core__c_1gaafefc3e67d2e9aa98e67eca06a2fe44c>`(
		const :ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvMemStoragePos<doxid-d1/d12/struct_cv_mem_storage_pos>`* pos
		);

	void
	:ref:`cvScalarToRawData<doxid-d2/df8/group__core__c_1ga189c823c7776f8332944d54a5e02fdaa>`(
		const :ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* scalar,
		void* data,
		int type,
		int extend_to_12 = 0
		);

	void
	:ref:`cvScaleAdd<doxid-d2/df8/group__core__c_1gaea997f1aed0e318862f5dc5018b3cbbd>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` scale,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	int
	:ref:`cvSeqElemIdx<doxid-d2/df8/group__core__c_1gaabbe6cff55f486153fee446ca5adcafc>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* element,
		:ref:`CvSeqBlock<doxid-d7/d77/struct_cv_seq_block>`** block = NULL
		);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	:ref:`cvSeqInsert<doxid-d2/df8/group__core__c_1gafc862c84367e98c355d8c2569df0750a>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int before_index,
		const void* element = NULL
		);

	void
	:ref:`cvSeqInsertSlice<doxid-d2/df8/group__core__c_1ga11c5e1294a01d33dc27c527612827904>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int before_index,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* from_arr
		);

	void
	:ref:`cvSeqInvert<doxid-d2/df8/group__core__c_1ga7ba485004668410bb69bf18af5ca65fc>`(:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq);

	int
	:ref:`cvSeqPartition<doxid-d2/df8/group__core__c_1ga488e796f7ef8e058e4522c5c327abff2>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`** labels,
		:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>` is_equal,
		void* userdata
		);

	void
	:ref:`cvSeqPop<doxid-d2/df8/group__core__c_1gadcc1d2c0b572351bcceebe2aca714f5e>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* element = NULL
		);

	void
	:ref:`cvSeqPopFront<doxid-d2/df8/group__core__c_1ga494852e21a01a0aac1ba9faba895772b>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* element = NULL
		);

	void
	:ref:`cvSeqPopMulti<doxid-d2/df8/group__core__c_1ga8cafa54adcf3492cc86d6fcbe6eee9c5>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* elements,
		int count,
		int in_front = 0
		);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	:ref:`cvSeqPush<doxid-d2/df8/group__core__c_1ga3dddd5afb36cc0a4383217e63456aeaa>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* element = NULL
		);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	:ref:`cvSeqPushFront<doxid-d2/df8/group__core__c_1ga3e589faf20665c0951e78c7394273555>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* element = NULL
		);

	void
	:ref:`cvSeqPushMulti<doxid-d2/df8/group__core__c_1gafabf8b3a359f3d4f2ab4aa7409e869b4>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* elements,
		int count,
		int in_front = 0
		);

	void
	:ref:`cvSeqRemove<doxid-d2/df8/group__core__c_1ga19025f70c3d7b8fcfafec4f4469c4f2f>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int index
		);

	void
	:ref:`cvSeqRemoveSlice<doxid-d2/df8/group__core__c_1gaa60c20f06da2ccd6025588aaf9f5582a>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice
		);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	:ref:`cvSeqSearch<doxid-d2/df8/group__core__c_1gae00283b51df9886629dd39c25e338559>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* elem,
		:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>` func,
		int is_sorted,
		int* elem_idx,
		void* userdata = NULL
		);

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	:ref:`cvSeqSlice<doxid-d2/df8/group__core__c_1gad92f500d2b6b9df37803476991581416>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage = NULL,
		int copy_data = 0
		);

	void
	:ref:`cvSeqSort<doxid-d2/df8/group__core__c_1ga3680d5beb2d94b9fb4ec6897fb863a04>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>` func,
		void* userdata = NULL
		);

	void
	:ref:`cvSet<doxid-d2/df8/group__core__c_1gac98818785e8df4d28581e0e5dbece6e6>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvSet1D<doxid-d2/df8/group__core__c_1ga081f54bd3baf43efab3b011495dd00fa>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		);

	void
	:ref:`cvSet2D<doxid-d2/df8/group__core__c_1gae2a3b2df90db7c765b033eebd418990c>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		);

	void
	:ref:`cvSet3D<doxid-d2/df8/group__core__c_1ga0d7acf27fe91db134a9836867466ae4c>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		);

	int
	:ref:`cvSetAdd<doxid-d2/df8/group__core__c_1ga5931d34703d30f0a3042c79645a561d3>`(
		:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`* elem = NULL,
		:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`** inserted_elem = NULL
		);

	void
	:ref:`cvSetData<doxid-d2/df8/group__core__c_1ga8558bedfd5348f6e6a509cff806ec5b3>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		void* data,
		int step
		);

	int
	:ref:`cvSetErrMode<doxid-d2/df8/group__core__c_1ga431bbd82f23f470df7385fd91e09ad1c>`(int mode);

	void
	:ref:`cvSetErrStatus<doxid-d2/df8/group__core__c_1ga9859fcaf2e826c6d4c5eb9d282e4239e>`(int status);

	void
	:ref:`cvSetIdentity<doxid-d2/df8/group__core__c_1ga61db29c113a0ff21db537c7b8a9b298f>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value = :ref:`cvRealScalar<doxid-d2/df8/group__core__c_1gad8364cfff7023fa1a0e51fea54ff9637>`(1)
		);

	void
	:ref:`cvSetImageCOI<doxid-d2/df8/group__core__c_1gae8a8bae6de75f287faa1bc1e7d58f849>`(
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image,
		int coi
		);

	void
	:ref:`cvSetImageROI<doxid-d2/df8/group__core__c_1ga7690607f5f37b7ee7532e252943fcc38>`(
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image,
		:ref:`CvRect<doxid-de/d44/struct_cv_rect>` rect
		);

	void
	:ref:`cvSetIPLAllocators<doxid-d2/df8/group__core__c_1ga60809dd241bda467e4f9f1ff85cd9ce7>`(
		:ref:`Cv_iplCreateImageHeader<doxid-d2/df8/group__core__c_1gaeddeb3d77f6fe10a20d621f5daa6d615>` create_header,
		:ref:`Cv_iplAllocateImageData<doxid-d2/df8/group__core__c_1gabc24dda87213007dd556b4050e3f5073>` allocate_data,
		:ref:`Cv_iplDeallocate<doxid-d2/df8/group__core__c_1ga5934b229ed904f88ccd3b5dcea625f8a>` deallocate,
		:ref:`Cv_iplCreateROI<doxid-d2/df8/group__core__c_1ga704a900c17e943fc6e4dbdb44b4ed303>` create_roi,
		:ref:`Cv_iplCloneImage<doxid-d2/df8/group__core__c_1ga1a945eec1fd79f47a84848926ef01093>` clone_image
		);

	void
	:ref:`cvSetND<doxid-d2/df8/group__core__c_1ga598956c52902c8b7a20e3edc91164a7d>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		);

	:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`*
	:ref:`cvSetNew<doxid-d2/df8/group__core__c_1ga6c1865817a39b37db853714bddb90c90>`(:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header);

	void
	:target:`cvSetNumThreads<doxid-d2/df8/group__core__c_1ga26eb057eaffa971fdfe9b1bb29d33e16>`(int threads = 0);

	void
	:ref:`cvSetReal1D<doxid-d2/df8/group__core__c_1ga45bbb7bd2c32e02f15cbab00ff6fb510>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		double value
		);

	void
	:ref:`cvSetReal2D<doxid-d2/df8/group__core__c_1ga7296e236488e10634148d63bcf092fda>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		double value
		);

	void
	:ref:`cvSetReal3D<doxid-d2/df8/group__core__c_1ga481b00e2d4d2e10736ec49bdacba1ef3>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2,
		double value
		);

	void
	:ref:`cvSetRealND<doxid-d2/df8/group__core__c_1ga4a7f993d6d4f739c897f5c1ef877d691>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx,
		double value
		);

	void
	:ref:`cvSetRemove<doxid-d2/df8/group__core__c_1ga3d5a90be9a70a5f281082a4b6a8413de>`(
		:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		int index
		);

	void
	:ref:`cvSetRemoveByPtr<doxid-d2/df8/group__core__c_1ga208437494b07e6402029989ce360c18f>`(
		:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		void* elem
		);

	void
	:ref:`cvSetSeqBlockSize<doxid-d2/df8/group__core__c_1gad28b0e89fe6c3189bbbfe5c9eccb8a27>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int delta_elems
		);

	void
	:ref:`cvSetSeqReaderPos<doxid-d2/df8/group__core__c_1ga6ce0f831db79375524df3ef0ae00ed8c>`(
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader,
		int index,
		int is_relative = 0
		);

	void
	:ref:`cvSetZero<doxid-d2/df8/group__core__c_1gab7d321e9159b0b1118b11e548e7414b1>`(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	int
	:ref:`cvSliceLength<doxid-d2/df8/group__core__c_1ga6f6a3783e436a8a3012cedd581294700>`(
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice,
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq
		);

	int
	:ref:`cvSolve<doxid-d2/df8/group__core__c_1ga6590dc0edab5bb263e807e2036e327d8>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int method = 0
		);

	int
	:ref:`cvSolveCubic<doxid-d2/df8/group__core__c_1gab69067460759a59f14704eae5f373ec4>`(
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* coeffs,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* roots
		);

	void
	:ref:`cvSolvePoly<doxid-d2/df8/group__core__c_1gacaa5f29f1c95198b639c1ac05e1e8472>`(
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* coeffs,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* roots2,
		int maxiter = 20,
		int fig = 100
		);

	void
	:target:`cvSort<doxid-d2/df8/group__core__c_1gaeb3957bc3fec4cc11c8cd0d7ccfc7a58>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst = NULL,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* idxmat = NULL,
		int flags = 0
		);

	void
	:ref:`cvSplit<doxid-d2/df8/group__core__c_1gacd0a34b115c1a1ec589fd1c27c84ab03>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst0,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst1,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst3
		);

	void
	:ref:`cvStartAppendToSeq<doxid-d2/df8/group__core__c_1gac9a59575c8a15b0eda6e94f14488311b>`(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer
		);

	void
	:ref:`cvStartNextStream<doxid-d2/df8/group__core__c_1gabde776bdbdb4042966739b727fd3b1b2>`(:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs);

	void
	:ref:`cvStartReadRawData<doxid-d2/df8/group__core__c_1gae8d69a9a8ce68d63b6ce5349710a063d>`(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* src,
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader
		);

	void
	:ref:`cvStartReadSeq<doxid-d2/df8/group__core__c_1ga25c26ca76f5ada78220a80688d37602c>`(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader,
		int reverse = 0
		);

	void
	:ref:`cvStartWriteSeq<doxid-d2/df8/group__core__c_1ga99d18493150a5f969dc1859f376703b0>`(
		int seq_flags,
		int header_size,
		int elem_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer
		);

	void
	:ref:`cvStartWriteStruct<doxid-d2/df8/group__core__c_1ga93a7dfd1d34ffcd192302a7138aa39df>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		int struct_flags,
		const char* type_name = NULL,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>` attributes = :ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`()
		);

	int
	:ref:`cvStdErrReport<doxid-d2/df8/group__core__c_1ga92414d58d69561feb578391bff6ea37f>`(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line,
		void* userdata
		);

	void
	:ref:`cvSub<doxid-d2/df8/group__core__c_1gafc5a5aa0269d356ddce5070eabf14363>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvSubRS<doxid-d2/df8/group__core__c_1gacb6814be7dbdd159f34cd091ce6cd297>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvSubS<doxid-d2/df8/group__core__c_1ga215a67cddaf80f3d2e34bd94c6348c43>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvSum<doxid-d2/df8/group__core__c_1ga60ef28c4e19353f6ce8293b82c24e5a8>`(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr);

	void
	:ref:`cvSVBkSb<doxid-d2/df8/group__core__c_1ga6694cb037a17bc5ed52b523798465c3a>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* W,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* U,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* V,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* B,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* X,
		int flags
		);

	void
	:ref:`cvSVD<doxid-d2/df8/group__core__c_1gaf3c3de64a2a34c50dd506a0b9e03c1ea>`(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* A,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* W,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* U = NULL,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* V = NULL,
		int flags = 0
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:ref:`cvTrace<doxid-d2/df8/group__core__c_1ga33ba3ddbf23df9fda02ab5549be9d56e>`(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat);

	void
	:ref:`cvTransform<doxid-d2/df8/group__core__c_1gac8ae16ff7d7736fa7063bdf1867194ff>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* transmat,
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* shiftvec = NULL
		);

	void
	:ref:`cvTranspose<doxid-d2/df8/group__core__c_1gae689500d0af586990cdb4a26b01dfbf0>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		);

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	:ref:`cvTreeToNodeSeq<doxid-d2/df8/group__core__c_1gabee5809f0a1bc4ae90ec1510f5e0a5c2>`(
		const void* first,
		int header_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		);

	:ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`*
	:ref:`cvTypeOf<doxid-d2/df8/group__core__c_1ga40e01b6d1565e162492bea8c7ea0a356>`(const void* struct_ptr);

	void
	:ref:`cvUnregisterType<doxid-d2/df8/group__core__c_1gaaa1246216355bae5cf2f3cb38ab06c5c>`(const char* type_name);

	int
	:ref:`cvUseOptimized<doxid-d2/df8/group__core__c_1gafb7df61fda5dfc5f6b05cd8aa60f84e3>`(int on_off);

	void
	:ref:`cvWrite<doxid-d2/df8/group__core__c_1gadad8e11ce90f9d800425da16c4d72663>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		const void* ptr,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>` attributes = :ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`()
		);

	void
	:ref:`cvWriteComment<doxid-d2/df8/group__core__c_1gac83f7e8effde47d0df4ef6e6ddc864ab>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* comment,
		int eol_comment
		);

	void
	:ref:`cvWriteFileNode<doxid-d2/df8/group__core__c_1gab7fd28904abcd0d800c4cefdf58679b4>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* new_node_name,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		int embed
		);

	void
	:ref:`cvWriteInt<doxid-d2/df8/group__core__c_1ga97390441352e119c685bfdbe2af4e013>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		int value
		);

	void
	:ref:`cvWriteRawData<doxid-d2/df8/group__core__c_1ga4282b62c02747b384aab612f692a32fd>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const void* src,
		int len,
		const char* dt
		);

	void
	:ref:`cvWriteRawDataBase64<doxid-d2/df8/group__core__c_1gafe94ee3b9b57b0cbc55594891d35dce7>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const void* src,
		int len,
		const char* dt
		);

	void
	:ref:`cvWriteReal<doxid-d2/df8/group__core__c_1gaca9d8c8f76550e10f98a862d609397f6>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		double value
		);

	void
	:ref:`cvWriteString<doxid-d2/df8/group__core__c_1gaed4d39e436e192f6167abac48e314eb4>`(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		const char* str,
		int quote = 0
		);

	void
	:ref:`cvXor<doxid-d2/df8/group__core__c_1ga65cef8e8cde6661d00ba26b6555a3bab>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	void
	:ref:`cvXorS<doxid-d2/df8/group__core__c_1gad6b99fd6141450e6196403b5fb327e55>`(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		);

	:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`
	:ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`(
		const char** attr = NULL,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* next = NULL
		);

	:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`*
	:target:`cvCreateSparseMat<doxid-d2/df8/group__core__c_1ga38d5bc4f7e140d17df63306d3b2f9942>`(const :ref:`cv::SparseMat<doxid-d5/d29/classcv_1_1_sparse_mat>`& m);

	int
	:target:`cvIplDepth<doxid-d2/df8/group__core__c_1ga5dcd9b4cd9e1bc369fc78421ff25fc63>`(int type);

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`
	:ref:`cvMat<doxid-d2/df8/group__core__c_1ga079f05560fccce67a652486159e74eed>`(
		int rows,
		int cols,
		int type,
		void* data = NULL
		);

	double
	:ref:`cvmGet<doxid-d2/df8/group__core__c_1gab0fe4514a8d2a61558be7a955ef1e260>`(
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat,
		int row,
		int col
		);

	void
	:ref:`cvmSet<doxid-d2/df8/group__core__c_1ga3995a5445b768a39764c2ed17acd4c55>`(
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat,
		int row,
		int col,
		double value
		);

	:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`
	:ref:`cvPoint<doxid-d2/df8/group__core__c_1ga8ccfebde83fdc77f06ad6cab82ab3e4f>`(
		int x,
		int y
		);

	:ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>`
	:ref:`cvPoint2D32f<doxid-d2/df8/group__core__c_1ga78331196175b5b22c43a1ad59e3c9bad>`(
		double x,
		double y
		);

	:ref:`CvPoint2D64f<doxid-d6/d0d/struct_cv_point2_d64f>`
	:ref:`cvPoint2D64f<doxid-d2/df8/group__core__c_1ga5934de983bfb7b0d91fd5f5e0f0ed7d4>`(
		double x,
		double y
		);

	:ref:`CvPoint3D32f<doxid-d9/df6/struct_cv_point3_d32f>`
	:ref:`cvPoint3D32f<doxid-d2/df8/group__core__c_1ga0c9768247085472730e196661587b298>`(
		double x,
		double y,
		double z
		);

	:ref:`CvPoint3D64f<doxid-db/d5a/struct_cv_point3_d64f>`
	:ref:`cvPoint3D64f<doxid-d2/df8/group__core__c_1ga1af0b0e4fe4a28e247a96769d6d36cb5>`(
		double x,
		double y,
		double z
		);

	:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`
	:ref:`cvPointFrom32f<doxid-d2/df8/group__core__c_1ga47f42d7406807e241b91893eda21e770>`(:ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>` point);

	:ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>`
	:ref:`cvPointTo32f<doxid-d2/df8/group__core__c_1ga72a4700bf821a3273264f39be643c5f1>`(:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>` point);

	unsigned
	:ref:`cvRandInt<doxid-d2/df8/group__core__c_1ga89a3b315541d4b1a65f98ea11c0f4c32>`(:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng);

	double
	:ref:`cvRandReal<doxid-d2/df8/group__core__c_1ga955602a9d268dafd149c3120f7df661b>`(:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:target:`cvRealScalar<doxid-d2/df8/group__core__c_1gad8364cfff7023fa1a0e51fea54ff9637>`(double val0);

	:ref:`CvRect<doxid-de/d44/struct_cv_rect>`
	:ref:`cvRect<doxid-d2/df8/group__core__c_1ga95913af353bf3525d47234d1bcdacff5>`(
		int x,
		int y,
		int width,
		int height
		);

	:ref:`IplROI<doxid-d1/d33/struct_ipl_r_o_i>`
	:target:`cvRectToROI<doxid-d2/df8/group__core__c_1gaebb80fe2d2d092bbed09a7a44d039b0e>`(
		:ref:`CvRect<doxid-de/d44/struct_cv_rect>` rect,
		int coi
		);

	:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`
	:ref:`cvRNG<doxid-d2/df8/group__core__c_1gafc3cbf181e41e9e82062d98ba4cbaa06>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` seed = -1);

	:ref:`CvRect<doxid-de/d44/struct_cv_rect>`
	:target:`cvROIToRect<doxid-d2/df8/group__core__c_1gaba5a0424e5cd05a12d729a5356654354>`(:ref:`IplROI<doxid-d1/d33/struct_ipl_r_o_i>` roi);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:target:`cvScalar<doxid-d2/df8/group__core__c_1ga0c3ff4334c541bdd44577da43cded31a>`(
		double val0,
		double val1 = 0,
		double val2 = 0,
		double val3 = 0
		);

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	:target:`cvScalarAll<doxid-d2/df8/group__core__c_1ga343ee4d57025c6d5b81ef08410342464>`(double val0123);

	:ref:`CvSize<doxid-da/d4d/struct_cv_size>`
	:ref:`cvSize<doxid-d2/df8/group__core__c_1ga3b1085711581a23b5bbde7a148ceedb2>`(
		int width,
		int height
		);

	:ref:`CvSize2D32f<doxid-de/d91/struct_cv_size2_d32f>`
	:ref:`cvSize2D32f<doxid-d2/df8/group__core__c_1gaee3a98868a40348a109790e6d7c32e02>`(
		double width,
		double height
		);

	:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>`
	:target:`cvSlice<doxid-d2/df8/group__core__c_1ga643871a5c47a07e6b0dd38dbe4c6a513>`(
		int start,
		int end
		);

	:ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>`
	:target:`cvTermCriteria<doxid-d2/df8/group__core__c_1ga7da63b8999cdae19145c9e6f7a6bdae3>`(
		int type,
		int max_iter,
		double epsilon
		);

	// macros

	#define :target:`CV_ARE_CNS_EQ<doxid-d2/df8/group__core__c_1ga456df51eccda06d3381ce305e861cc5f>`( \
		mat1, \
		mat2 \
		)

	#define :target:`CV_ARE_DEPTHS_EQ<doxid-d2/df8/group__core__c_1gaa84e4287928326982acdc11152183284>`( \
		mat1, \
		mat2 \
		)

	#define :target:`CV_ARE_SIZES_EQ<doxid-d2/df8/group__core__c_1ga03ea955356bc11eb7e84d51721547aad>`( \
		mat1, \
		mat2 \
		)

	#define :target:`CV_ARE_TYPES_EQ<doxid-d2/df8/group__core__c_1gae15ce671c550b71a1f059829c2f91280>`( \
		mat1, \
		mat2 \
		)

	#define :ref:`CV_ASSERT<doxid-d2/df8/group__core__c_1ga3fa18df3d3c272116980d2f660f746da>`(Condition)
	#define :target:`CV_AUTOSTEP<doxid-d2/df8/group__core__c_1ga2037b9e258f1d2091a58003922968a85>`
	#define :target:`CV_AUTO_STEP<doxid-d2/df8/group__core__c_1gaf8de14381b5764750419cf76b91481db>`
	#define :target:`CV_BACK<doxid-d2/df8/group__core__c_1ga12303a94ca87fef1e32eba040b93101a>`
	#define :target:`CV_C<doxid-d2/df8/group__core__c_1gaa6ddd876894f9f9302f9bfa95257db75>`
	#define :ref:`CV_CALL<doxid-d2/df8/group__core__c_1gaa809fef8ad413641fbfca4a1f9041e51>`(Func)
	#define :ref:`CV_CHECK<doxid-d2/df8/group__core__c_1ga25fe601c51a558325a1158636e0abee1>`()
	#define :target:`CV_CHECK_QUIET<doxid-d2/df8/group__core__c_1gafb3bd30022af14af82a4435e8ec7c6ca>`
	#define :target:`CV_CHECK_RANGE<doxid-d2/df8/group__core__c_1ga34f780071d6bb487731a4232a2421b8c>`
	#define :target:`CV_CHOLESKY<doxid-d2/df8/group__core__c_1gaa3a5ad986f003d8254bbd14d09d791b7>`

	#define :target:`CV_CMP<doxid-d2/df8/group__core__c_1ga8a2ec3c704834fcf02213fd392c75ac8>`( \
		a, \
		b \
		)

	#define :target:`CV_CMP_EQ<doxid-d2/df8/group__core__c_1gab8bfd0bd85a07fcaee58f46fb85f31b1>`
	#define :target:`CV_CMP_GE<doxid-d2/df8/group__core__c_1ga7025e59089e70c11e4deceb22f78ae3d>`
	#define :target:`CV_CMP_GT<doxid-d2/df8/group__core__c_1gaa0788a11c499c51686d07fc0e8719999>`
	#define :target:`CV_CMP_LE<doxid-d2/df8/group__core__c_1gaa88f7bda61a8895313af5b78a45459c9>`
	#define :target:`CV_CMP_LT<doxid-d2/df8/group__core__c_1ga69f955db91037515a7bca59b37467b6e>`
	#define :target:`CV_CMP_NE<doxid-d2/df8/group__core__c_1ga84ba6510e216615fd9a497a4a8e90b1d>`
	#define :target:`CV_CONTOUR_FIELDS<doxid-d2/df8/group__core__c_1ga09e7b633905445fa040269ea247442f9>`()
	#define :ref:`CV_COVAR_COLS<doxid-d2/df8/group__core__c_1gaf36c975c638553c008e5e9ef840770fc>`
	#define :ref:`CV_COVAR_NORMAL<doxid-d2/df8/group__core__c_1gabef8c99a4bceaf4ad246a7e082c94d3a>`
	#define :ref:`CV_COVAR_ROWS<doxid-d2/df8/group__core__c_1ga0a3859b1654b24e3eee9155188de5cd2>`
	#define :ref:`CV_COVAR_SCALE<doxid-d2/df8/group__core__c_1ga618c64175301e0265b18aebfda268289>`
	#define :ref:`CV_COVAR_SCRAMBLED<doxid-d2/df8/group__core__c_1ga886ef2715d57e9e50f95c679ea005c9e>`
	#define :ref:`CV_COVAR_USE_AVG<doxid-d2/df8/group__core__c_1ga6404bb79238d341d069a6ca19a04e8cc>`
	#define :target:`CV_CURRENT_POINT<doxid-d2/df8/group__core__c_1gae4bee88f2e7c7a4dcf926f0ea46c0fc1>`(reader)
	#define :target:`CV_DIFF<doxid-d2/df8/group__core__c_1ga465e5acbc761564c91755c45b56490f6>`
	#define :target:`CV_DIFF_C<doxid-d2/df8/group__core__c_1ga98947ac8fc48b7fac0cd122763d96e3a>`
	#define :target:`CV_DIFF_L1<doxid-d2/df8/group__core__c_1gaef4b17062d39aebc111014fa6fa614ba>`
	#define :target:`CV_DIFF_L2<doxid-d2/df8/group__core__c_1gaf7197cf93545895b872eeb5c74fea73e>`
	#define :target:`CV_DXT_FORWARD<doxid-d2/df8/group__core__c_1ga16693837f2eb58db26a413117cf9a6de>`
	#define :target:`CV_DXT_INVERSE<doxid-d2/df8/group__core__c_1ga5119c0aeee8828c65dcffbb4fb54fc87>`
	#define :target:`CV_DXT_INVERSE_SCALE<doxid-d2/df8/group__core__c_1ga8ca80a66a497d9efe5d6712e28d85dde>`
	#define :target:`CV_DXT_INV_SCALE<doxid-d2/df8/group__core__c_1ga42fc1b8a17da0873fbf93ad305a8f887>`
	#define :ref:`CV_DXT_MUL_CONJ<doxid-d2/df8/group__core__c_1ga39dc5da52f3283a11ec700a8a4df6dfc>`
	#define :ref:`CV_DXT_ROWS<doxid-d2/df8/group__core__c_1ga8fbff4e36e4b3d4fe9e20e848f344159>`
	#define :ref:`CV_DXT_SCALE<doxid-d2/df8/group__core__c_1gad444d5205a52186792b8d962d427951f>`

	#define :ref:`CV_ERROR<doxid-d2/df8/group__core__c_1gafd313864ced7e105ef39ea56774cf9ba>`( \
		Code, \
		Msg \
		)

	#define :target:`CV_ErrModeLeaf<doxid-d2/df8/group__core__c_1ga2636bdb891e09bb5d289326e69043f8b>`
	#define :target:`CV_ErrModeParent<doxid-d2/df8/group__core__c_1ga48254ffcb838484048f9ba5b7b01201e>`
	#define :target:`CV_ErrModeSilent<doxid-d2/df8/group__core__c_1ga766ab0d1dcb16692052c9a2603e188da>`
	#define :target:`CV_FRONT<doxid-d2/df8/group__core__c_1ga42f6b92762693b83e6ec03fb3bbe8000>`
	#define :ref:`CV_FUNCNAME<doxid-d2/df8/group__core__c_1gadd83d5a9bd103e4737680aa9ab99fae5>`(Name)
	#define :target:`CV_GEMM_A_T<doxid-d2/df8/group__core__c_1gafff45277b5b40a9a9b4bd74db8eb1512>`
	#define :target:`CV_GEMM_B_T<doxid-d2/df8/group__core__c_1ga31c5f2d421760a5df19be690084b27ff>`
	#define :target:`CV_GEMM_C_T<doxid-d2/df8/group__core__c_1gae481ac6f7b2cab5c4f9180c1ab2a5f8c>`

	#define :target:`CV_GET_SEQ_ELEM<doxid-d2/df8/group__core__c_1gabd61ab000c139204844be287012040ed>`( \
		elem_type, \
		seq, \
		index \
		)

	#define :target:`CV_GRAPH<doxid-d2/df8/group__core__c_1gafd3e311eb6a603cb04aa3a5216d81bb5>`
	#define :target:`CV_GRAPH_ALL_ITEMS<doxid-d2/df8/group__core__c_1ga05aac02c9a292824ef314b008e583cab>`
	#define :target:`CV_GRAPH_ANY_EDGE<doxid-d2/df8/group__core__c_1gae537b0f77e14936dddcc969a0be11609>`
	#define :target:`CV_GRAPH_BACKTRACKING<doxid-d2/df8/group__core__c_1ga107d7ac41af1fa9a7b25111e226a6c80>`
	#define :target:`CV_GRAPH_BACK_EDGE<doxid-d2/df8/group__core__c_1ga1ce3af4945d39abae0a07280975bdaa5>`
	#define :target:`CV_GRAPH_CROSS_EDGE<doxid-d2/df8/group__core__c_1gaf229594cea908a54e2c5b5309aaa9d29>`
	#define :target:`CV_GRAPH_EDGE_FIELDS<doxid-d2/df8/group__core__c_1ga3a5c8fd06c22938cd077ec2289ae7fe3>`()
	#define :ref:`CV_GRAPH_FIELDS<doxid-d2/df8/group__core__c_1ga1a8b3af5e43cd3fe8907cb220bd375f4>`()
	#define :ref:`CV_GRAPH_FLAG_ORIENTED<doxid-d2/df8/group__core__c_1ga3f837c967cb6c9e176fccdb9d7aee6fa>`
	#define :target:`CV_GRAPH_FORWARD_EDGE<doxid-d2/df8/group__core__c_1ga07887d02279599d92c4db0d383d72b98>`
	#define :target:`CV_GRAPH_FORWARD_EDGE_FLAG<doxid-d2/df8/group__core__c_1ga0d713456bb8cb25082e40a1cef045c88>`
	#define :ref:`CV_GRAPH_ITEM_VISITED_FLAG<doxid-d2/df8/group__core__c_1ga5e269d3a650ffada9e9a51af03ace971>`
	#define :target:`CV_GRAPH_NEW_TREE<doxid-d2/df8/group__core__c_1gac0b04d2019c4dab8fdbd59e66358b501>`
	#define :target:`CV_GRAPH_OVER<doxid-d2/df8/group__core__c_1ga8a80a0c8620abe96842fbcac8b83b5d1>`
	#define :target:`CV_GRAPH_SEARCH_TREE_NODE_FLAG<doxid-d2/df8/group__core__c_1ga093e0d474b069394c36c8bb133ef8d81>`
	#define :target:`CV_GRAPH_TREE_EDGE<doxid-d2/df8/group__core__c_1gaee2edb7c6f31f5186df710aa10b633bf>`
	#define :target:`CV_GRAPH_VERTEX<doxid-d2/df8/group__core__c_1ga67082d6a6cabc64b5830297d09cc54c0>`
	#define :target:`CV_GRAPH_VERTEX_FIELDS<doxid-d2/df8/group__core__c_1ga4870c7652f297f3f18c622d8b6b10d1c>`()
	#define :target:`CV_HIST_ARRAY<doxid-d2/df8/group__core__c_1ga6e343a32f2dff292255e1f12a43166bc>`
	#define :target:`CV_HIST_HAS_RANGES<doxid-d2/df8/group__core__c_1gad08beac1005747f5ec77b3616167f299>`(hist)
	#define :target:`CV_HIST_MAGIC_VAL<doxid-d2/df8/group__core__c_1ga239342e108d37d889f2c7e978caac0e3>`
	#define :ref:`CV_HIST_RANGES_FLAG<doxid-d2/df8/group__core__c_1ga4fcd85ae12a2427d46cc05a7da982486>`
	#define :target:`CV_HIST_SPARSE<doxid-d2/df8/group__core__c_1ga5ec41e9fc68cb036dbb9fc676c8a9924>`
	#define :target:`CV_HIST_TREE<doxid-d2/df8/group__core__c_1ga705aca709d7ea9b08824386ef424605f>`
	#define :ref:`CV_HIST_UNIFORM<doxid-d2/df8/group__core__c_1ga066e12e85303e5b2c0213e75347b7760>`
	#define :target:`CV_HIST_UNIFORM_FLAG<doxid-d2/df8/group__core__c_1gaf28a50dda61ac606772b6b98cd91162a>`
	#define :ref:`CV_IABS<doxid-d2/df8/group__core__c_1gac93e1c415d87decc795096deb0e92eab>`(a)

	#define :ref:`CV_IMAGE_ELEM<doxid-d2/df8/group__core__c_1ga6c980849bd6bf768b1f2830519bc19b1>`( \
		image, \
		elemtype, \
		row, \
		col \
		)

	#define :target:`CV_IMAX<doxid-d2/df8/group__core__c_1gab1b51d98277b85b5ea47debc03964a08>`( \
		a, \
		b \
		)

	#define :ref:`CV_IMIN<doxid-d2/df8/group__core__c_1ga3ad8b321d30ceea2e550b408f4b43971>`( \
		a, \
		b \
		)

	#define :target:`CV_IS_GRAPH<doxid-d2/df8/group__core__c_1gac9897c8ac9b2529d8c045019e7671a3b>`(seq)
	#define :target:`CV_IS_GRAPH_EDGE_VISITED<doxid-d2/df8/group__core__c_1ga28525ad99a13c50a10f4defbe014c721>`(edge)
	#define :target:`CV_IS_GRAPH_ORIENTED<doxid-d2/df8/group__core__c_1ga8b4938a7d92e4655bddfe2f5560d4720>`(seq)
	#define :target:`CV_IS_GRAPH_VERTEX_VISITED<doxid-d2/df8/group__core__c_1gaa93e0ce52bdd6a8c8494f067947696e2>`(vtx)
	#define :target:`CV_IS_HIST<doxid-d2/df8/group__core__c_1ga17419229a0c7f4dc8740296d0a278989>`(hist)
	#define :target:`CV_IS_IMAGE<doxid-d2/df8/group__core__c_1ga749ea9ab6fd0a89623e18b92f67efc7c>`(img)
	#define :target:`CV_IS_IMAGE_HDR<doxid-d2/df8/group__core__c_1ga69335024d3363a188692c53f0437c143>`(img)
	#define :target:`CV_IS_MASK_ARR<doxid-d2/df8/group__core__c_1gaa707ad3238958dafe5e4f79cb60b6d23>`(mat)
	#define :target:`CV_IS_MAT<doxid-d2/df8/group__core__c_1gaddfd080fcb6cb5db5e4842ebf418dd66>`(mat)
	#define :target:`CV_IS_MATND<doxid-d2/df8/group__core__c_1ga9d67acc2483b697ef4ebf9e4d5a3dc45>`(mat)
	#define :target:`CV_IS_MATND_HDR<doxid-d2/df8/group__core__c_1ga6d586af88d0c2eed476652bd13871aad>`(mat)
	#define :target:`CV_IS_MAT_CONST<doxid-d2/df8/group__core__c_1ga2d5474478906e23bbcecbba406c48c80>`(mat)
	#define :target:`CV_IS_MAT_HDR<doxid-d2/df8/group__core__c_1gae9c2b16e9e3a2c2bd0cd09fe3865d3a7>`(mat)
	#define :target:`CV_IS_MAT_HDR_Z<doxid-d2/df8/group__core__c_1ga28e2c7d6a5080227ebbfbf9313da4672>`(mat)
	#define :target:`CV_IS_SEQ<doxid-d2/df8/group__core__c_1ga6333bec1cad5d09b69e0da36c7c90a4d>`(seq)
	#define :target:`CV_IS_SEQ_CHAIN<doxid-d2/df8/group__core__c_1gadf85ac991c8da52c81fa46735e5114e0>`(seq)
	#define :target:`CV_IS_SEQ_CHAIN_CONTOUR<doxid-d2/df8/group__core__c_1gaf6d3523b684d6aa9f4cfc6b791cd30ba>`(seq)
	#define :target:`CV_IS_SEQ_CLOSED<doxid-d2/df8/group__core__c_1ga928278e79706512d6b49dd3264636960>`(seq)
	#define :target:`CV_IS_SEQ_CONTOUR<doxid-d2/df8/group__core__c_1ga41a184b43ceabcb3cdbcd5a0ac87b90e>`(seq)
	#define :target:`CV_IS_SEQ_CONVEX<doxid-d2/df8/group__core__c_1ga1e76a50c505cbbba8adfe4a0305d0098>`(seq)
	#define :target:`CV_IS_SEQ_CURVE<doxid-d2/df8/group__core__c_1ga5f2113d28dbf01c2b8c3673eba578562>`(seq)
	#define :target:`CV_IS_SEQ_HOLE<doxid-d2/df8/group__core__c_1ga5e0456456eb1b16bf65f2459469b96ff>`(seq)
	#define :ref:`CV_IS_SEQ_INDEX<doxid-d2/df8/group__core__c_1ga217388eeccf5b8ebe4fd4aa00b6ffb8b>`(seq)
	#define :ref:`CV_IS_SEQ_POINT_SET<doxid-d2/df8/group__core__c_1ga5c604c63d812be8b2e043df5ebc6bc5a>`(seq)
	#define :target:`CV_IS_SEQ_POINT_SUBSET<doxid-d2/df8/group__core__c_1ga4a9109043132264f735b34dfe38389cc>`(seq)
	#define :target:`CV_IS_SEQ_POLYGON<doxid-d2/df8/group__core__c_1ga719231ce2368d1612c411ddcc67abfa4>`(seq)
	#define :target:`CV_IS_SEQ_POLYGON_TREE<doxid-d2/df8/group__core__c_1ga1d8f9a92e310c67249fd604336d4f869>`(seq)
	#define :target:`CV_IS_SEQ_POLYLINE<doxid-d2/df8/group__core__c_1ga994df61bb8f0d8890e1e9f188d7283a6>`(seq)
	#define :target:`CV_IS_SEQ_SIMPLE<doxid-d2/df8/group__core__c_1gaec36de5a5f99216d3ac7fbf125650cb8>`(seq)
	#define :target:`CV_IS_SET<doxid-d2/df8/group__core__c_1ga48be6331362e6cc1b7b82403a5b6d485>`(set)
	#define :ref:`CV_IS_SET_ELEM<doxid-d2/df8/group__core__c_1gaf5ef56c5a64a711c129c87c84efd75f7>`(ptr)
	#define :target:`CV_IS_SPARSE_HIST<doxid-d2/df8/group__core__c_1gab57ffc0b0fdda6a87ab8deb5f31e2c45>`(hist)
	#define :target:`CV_IS_SPARSE_MAT<doxid-d2/df8/group__core__c_1ga01a5bdf69ab02aefce49755552908419>`(mat)
	#define :target:`CV_IS_SPARSE_MAT_HDR<doxid-d2/df8/group__core__c_1ga200bc005409bee1014f04169798577af>`(mat)
	#define :target:`CV_IS_STORAGE<doxid-d2/df8/group__core__c_1ga488e9fc0b126421dee251dbf78d1d094>`(storage)
	#define :target:`CV_IS_SUBDIV2D<doxid-d2/df8/group__core__c_1gabd95d80441eb19a9c5ec410f95ad03b3>`(seq)
	#define :target:`CV_IS_UNIFORM_HIST<doxid-d2/df8/group__core__c_1gac6ddbaba966fe87da1da12e5e07a6719>`(hist)
	#define :ref:`CV_KMEANS_USE_INITIAL_LABELS<doxid-d2/df8/group__core__c_1ga7d20074a9df74d6f433a61fd296983d8>`
	#define :target:`CV_L1<doxid-d2/df8/group__core__c_1ga3f90c9549f81cdb8b5037ec866adf566>`
	#define :target:`CV_L2<doxid-d2/df8/group__core__c_1ga90e316f8e376c9dbadf142c687021b9c>`
	#define :target:`CV_LU<doxid-d2/df8/group__core__c_1ga541606a93c9f3a95ea999cb7d8cdcd8c>`
	#define :target:`CV_MAGIC_MASK<doxid-d2/df8/group__core__c_1ga320032e1a96ce9fedee4021b8e388d03>`
	#define :target:`CV_MATND_MAGIC_VAL<doxid-d2/df8/group__core__c_1ga7ca5126ba8dcf02d56368d00ed84035f>`

	#define :target:`CV_MAT_ELEM<doxid-d2/df8/group__core__c_1ga377ca5eb63542b42eb4a4719c6bd3d9b>`( \
		mat, \
		elemtype, \
		row, \
		col \
		)

	#define :target:`CV_MAT_ELEM_PTR<doxid-d2/df8/group__core__c_1ga6a9121098fd838310cd5241a3d2e73f9>`( \
		mat, \
		row, \
		col \
		)

	#define :target:`CV_MAT_ELEM_PTR_FAST<doxid-d2/df8/group__core__c_1ga20fa0d6458ce767138b23e59bdea0118>`( \
		mat, \
		row, \
		col, \
		pix_size \
		)

	#define :target:`CV_MAT_MAGIC_VAL<doxid-d2/df8/group__core__c_1gadf046f3c80c075cb24e3efe47e9d1a9e>`
	#define :target:`CV_MAX_ARR<doxid-d2/df8/group__core__c_1gab4d8b1dd2a78a1ae29b12fc74a4d44c8>`
	#define :target:`CV_MAX_DIM<doxid-d2/df8/group__core__c_1ga931cb1f0da753cc1f8a3f838390616c2>`
	#define :target:`CV_MAX_DIM_HEAP<doxid-d2/df8/group__core__c_1ga8b2df8c0a929b1cab5ac6206b9cfdd52>`
	#define :target:`CV_MINMAX<doxid-d2/df8/group__core__c_1gaa9c6c8ef4d96608b6ebd6a031a6092cd>`

	#define :ref:`CV_NEXT_GRAPH_EDGE<doxid-d2/df8/group__core__c_1gab913ccc6aa4e066feed5e44ce59046e1>`( \
		edge, \
		vertex \
		)

	#define :ref:`CV_NEXT_SEQ_ELEM<doxid-d2/df8/group__core__c_1gac3d497983cb693a78a8e5be3f05294ff>`( \
		elem_size, \
		reader \
		)

	#define :target:`CV_NODE_EMPTY<doxid-d2/df8/group__core__c_1gae2e9bc7637736edebabd132a2f4a7de9>`
	#define :target:`CV_NODE_FLOAT<doxid-d2/df8/group__core__c_1ga455d0a0e1a9458f955b6cca55f1c6867>`
	#define :ref:`CV_NODE_FLOW<doxid-d2/df8/group__core__c_1gaacbc352531b3f5a4976d37a16ca4c6d2>`
	#define :target:`CV_NODE_HAS_NAME<doxid-d2/df8/group__core__c_1ga8b5bba0ea18954390bf8a9231522832c>`(flags)

	#define :target:`CV_NODE_IDX<doxid-d2/df8/group__core__c_1ga0583fa8a70a1b3153426313141089670>`( \
		mat, \
		node \
		)

	#define :target:`CV_NODE_INT<doxid-d2/df8/group__core__c_1ga7bc8c1b4efd8c9482bf07189ff7e7b9b>`
	#define :target:`CV_NODE_INTEGER<doxid-d2/df8/group__core__c_1gaff41480e516199da83339207f96ab896>`
	#define :target:`CV_NODE_IS_COLLECTION<doxid-d2/df8/group__core__c_1ga5be4409f69c965feff5741a588082045>`(flags)
	#define :target:`CV_NODE_IS_EMPTY<doxid-d2/df8/group__core__c_1gacbd8d9f0a759ff8c121be44da59f6de9>`(flags)
	#define :target:`CV_NODE_IS_FLOW<doxid-d2/df8/group__core__c_1ga4e280551beea5586c4877c67c23891a6>`(flags)
	#define :target:`CV_NODE_IS_INT<doxid-d2/df8/group__core__c_1gac7cb31de1a9bfa540dfb7a079a81de66>`(flags)
	#define :target:`CV_NODE_IS_MAP<doxid-d2/df8/group__core__c_1ga5d1c5ea642e73de6e2a37e221d4c7972>`(flags)
	#define :target:`CV_NODE_IS_REAL<doxid-d2/df8/group__core__c_1ga77566ec1e3d22ee6842bc98dc1e7373a>`(flags)
	#define :target:`CV_NODE_IS_SEQ<doxid-d2/df8/group__core__c_1ga808591398081184e471516c617e49307>`(flags)
	#define :target:`CV_NODE_IS_STRING<doxid-d2/df8/group__core__c_1gaf4cba3aaa22f7745a79067583c114e4b>`(flags)
	#define :target:`CV_NODE_IS_USER<doxid-d2/df8/group__core__c_1gaef7e46cc796f9104f166d475aebfa1ff>`(flags)
	#define :target:`CV_NODE_MAP<doxid-d2/df8/group__core__c_1ga350eb8861538ee2c3488623ef89e78d9>`
	#define :target:`CV_NODE_NAMED<doxid-d2/df8/group__core__c_1ga5b01962a7f56ac6826e505ad1e552093>`
	#define :target:`CV_NODE_NONE<doxid-d2/df8/group__core__c_1gaade5159018c986423bc224f1cb8f73cc>`
	#define :target:`CV_NODE_REAL<doxid-d2/df8/group__core__c_1gaa837792dd6a94ec041e0e5de26ed6ea2>`
	#define :ref:`CV_NODE_REF<doxid-d2/df8/group__core__c_1gaf7107853703d4629b2260c78854cf0b7>`
	#define :target:`CV_NODE_SEQ<doxid-d2/df8/group__core__c_1ga6dafb706f7b7775ec3848db051940ffc>`
	#define :target:`CV_NODE_SEQ_IS_SIMPLE<doxid-d2/df8/group__core__c_1gaf75b14c95934e6434448d7d6bc88f964>`(seq)
	#define :target:`CV_NODE_SEQ_SIMPLE<doxid-d2/df8/group__core__c_1ga46146147cc73a1655c8f3f6ec9c0b58b>`
	#define :target:`CV_NODE_STR<doxid-d2/df8/group__core__c_1ga02b7c6dc027185ceee8901bcb256c66c>`
	#define :target:`CV_NODE_STRING<doxid-d2/df8/group__core__c_1gac972eaba2c5fbece27ed455c8bc9d11c>`
	#define :target:`CV_NODE_TYPE<doxid-d2/df8/group__core__c_1gafab45010f6d2632bca419d505e38d358>`(flags)
	#define :target:`CV_NODE_TYPE_MASK<doxid-d2/df8/group__core__c_1ga8f4b0a4e1c3fd6bab2b9262c24e4ed86>`
	#define :target:`CV_NODE_USER<doxid-d2/df8/group__core__c_1ga5c68a2e1ad0eb6758a227b37991dc709>`

	#define :target:`CV_NODE_VAL<doxid-d2/df8/group__core__c_1ga0fab8feb06fb33f84ac8a62274665002>`( \
		mat, \
		node \
		)

	#define :target:`CV_NORMAL<doxid-d2/df8/group__core__c_1ga180915a563285254518240842ce3d6c5>`
	#define :target:`CV_NORM_MASK<doxid-d2/df8/group__core__c_1ga9694be19de29ccff14538c38cafdd5a6>`
	#define :target:`CV_NO_CN_CHECK<doxid-d2/df8/group__core__c_1gadb861c5da4e79b26b971eeef6bcdb8f7>`
	#define :target:`CV_NO_DEPTH_CHECK<doxid-d2/df8/group__core__c_1ga39385b8534609e304dbdff05f602ba94>`
	#define :target:`CV_NO_SIZE_CHECK<doxid-d2/df8/group__core__c_1ga0d7d6c9086ab032ba3c3109bdc3d7849>`
	#define :target:`CV_ORIENTED_GRAPH<doxid-d2/df8/group__core__c_1ga127b0769cf057b45b62eb444c822fe49>`
	#define :target:`CV_PCA_DATA_AS_COL<doxid-d2/df8/group__core__c_1ga1622eb156057b632cab6b79ad2779e1e>`
	#define :target:`CV_PCA_DATA_AS_ROW<doxid-d2/df8/group__core__c_1ga8010c4e67ca59cfd17d7a965cea7d198>`
	#define :target:`CV_PCA_USE_AVG<doxid-d2/df8/group__core__c_1gae8f582045a5e133fd2b08fbfa2499b1c>`
	#define :target:`CV_PREV_POINT<doxid-d2/df8/group__core__c_1ga7acfeacf30e32ecfc9310418c6bfe69e>`(reader)

	#define :ref:`CV_PREV_SEQ_ELEM<doxid-d2/df8/group__core__c_1gaa0060cbc242ede391fe041f4f66a681b>`( \
		elem_size, \
		reader \
		)

	#define :target:`CV_QR<doxid-d2/df8/group__core__c_1ga19032efad6403c5a9496ce294655672a>`
	#define :target:`CV_RAND_NORMAL<doxid-d2/df8/group__core__c_1ga4f2b5c6d761cbfc5130bc5c516d0ae7a>`
	#define :target:`CV_RAND_UNI<doxid-d2/df8/group__core__c_1ga72bae9d3d709b559686f0595055f7d40>`

	#define :target:`CV_READ_CHAIN_POINT<doxid-d2/df8/group__core__c_1ga52e5cd19fa1794685fba5f0951eb71fb>`( \
		_pt, \
		reader \
		)

	#define :target:`CV_READ_EDGE<doxid-d2/df8/group__core__c_1gaaef28d20c8fdf22e2d304c7014670dd2>`( \
		pt1, \
		pt2, \
		reader \
		)

	#define :ref:`CV_READ_SEQ_ELEM<doxid-d2/df8/group__core__c_1ga80132983fd958950dabbbde6acdfc318>`( \
		elem, \
		reader \
		)

	#define :target:`CV_REDUCE_AVG<doxid-d2/df8/group__core__c_1ga53e6965b8f6128ad088597f3e73ace24>`
	#define :target:`CV_REDUCE_MAX<doxid-d2/df8/group__core__c_1gab5024ac7d29c5360a70e1231598f1a0f>`
	#define :target:`CV_REDUCE_MIN<doxid-d2/df8/group__core__c_1ga1d742a87bd72a3e4c97dc35f207a910a>`
	#define :target:`CV_REDUCE_SUM<doxid-d2/df8/group__core__c_1ga105df0afc70b8c4fdb40f51b6807c370>`
	#define :target:`CV_RELATIVE<doxid-d2/df8/group__core__c_1ga0a41704bdc8d2e2148868ac7481221f4>`
	#define :target:`CV_RELATIVE_C<doxid-d2/df8/group__core__c_1ga4c7182ce45e2e9978b741e5b61785dba>`
	#define :target:`CV_RELATIVE_L1<doxid-d2/df8/group__core__c_1ga65456a0f016ed03c975f1c51c507dbfa>`
	#define :target:`CV_RELATIVE_L2<doxid-d2/df8/group__core__c_1gaac9ed9009a6825e73e9d3888f3c7cac9>`

	#define :ref:`CV_REV_READ_SEQ_ELEM<doxid-d2/df8/group__core__c_1gada18e4264190e1bdbd29d77a0815ffd0>`( \
		elem, \
		reader \
		)

	#define :target:`CV_RNG_COEFF<doxid-d2/df8/group__core__c_1ga2a8c3ec1825c02d9cb7a1affc35859f0>`
	#define :ref:`CV_SEQUENCE_FIELDS<doxid-d2/df8/group__core__c_1ga3f5852a742b680f784f3d05eb1a40f59>`()
	#define :ref:`CV_SEQ_CHAIN<doxid-d2/df8/group__core__c_1gaf045ccc4a3937d68b4981b40bf107a7f>`
	#define :target:`CV_SEQ_CHAIN_CONTOUR<doxid-d2/df8/group__core__c_1gabc80915d3eeb6f62a7a57f869db478cc>`
	#define :ref:`CV_SEQ_CONNECTED_COMP<doxid-d2/df8/group__core__c_1gaf0ce693e65355fd7edd9d38988177a48>`
	#define :target:`CV_SEQ_CONTOUR<doxid-d2/df8/group__core__c_1ga18cab5d45964708c252dc52160bd897b>`

	#define :target:`CV_SEQ_ELEM<doxid-d2/df8/group__core__c_1ga90c08fba7541541f22f354b001850e4c>`( \
		seq, \
		elem_type, \
		index \
		)

	#define :target:`CV_SEQ_ELTYPE<doxid-d2/df8/group__core__c_1gacf5cbde62baa4322de9a72cb7f839425>`(seq)
	#define :target:`CV_SEQ_ELTYPE_BITS<doxid-d2/df8/group__core__c_1gab88561762ab05525148169f8822a39a2>`
	#define :ref:`CV_SEQ_ELTYPE_CODE<doxid-d2/df8/group__core__c_1gaa302109aff162da7b0c591f8ef70aec2>`
	#define :ref:`CV_SEQ_ELTYPE_CONNECTED_COMP<doxid-d2/df8/group__core__c_1ga52115593995eb0069ca7f5a026e7886c>`
	#define :target:`CV_SEQ_ELTYPE_GENERIC<doxid-d2/df8/group__core__c_1ga7c83e2f675acab55c140e5bc4c5c2f95>`
	#define :ref:`CV_SEQ_ELTYPE_GRAPH_EDGE<doxid-d2/df8/group__core__c_1ga35055c16a7367cb97b1e344f7bfdb4a8>`
	#define :ref:`CV_SEQ_ELTYPE_GRAPH_VERTEX<doxid-d2/df8/group__core__c_1ga635c7575d5ab9d37588ed8f57da75687>`
	#define :ref:`CV_SEQ_ELTYPE_INDEX<doxid-d2/df8/group__core__c_1gaee57725a49b8421768989110756469bf>`
	#define :target:`CV_SEQ_ELTYPE_MASK<doxid-d2/df8/group__core__c_1gae17b5019dc3d8399d0769631278c3a8a>`
	#define :ref:`CV_SEQ_ELTYPE_POINT<doxid-d2/df8/group__core__c_1ga92a532b5819b4fab0bc06dd63e1ba036>`
	#define :ref:`CV_SEQ_ELTYPE_POINT3D<doxid-d2/df8/group__core__c_1ga40e4e5b4f48bfabb69b5dc54d32d6d50>`
	#define :ref:`CV_SEQ_ELTYPE_PPOINT<doxid-d2/df8/group__core__c_1ga471f695b4e75d20545431fe7f3f60a0b>`
	#define :target:`CV_SEQ_ELTYPE_PTR<doxid-d2/df8/group__core__c_1ga0182a40c31c1f637f1177f68487dd2e2>`
	#define :ref:`CV_SEQ_ELTYPE_TRIAN_ATR<doxid-d2/df8/group__core__c_1gab0c86b2526be6bebb0e61062ca70e554>`
	#define :ref:`CV_SEQ_FLAG_CLOSED<doxid-d2/df8/group__core__c_1gad18c44feb78c5d9096af708447b126ed>`
	#define :target:`CV_SEQ_FLAG_CONVEX<doxid-d2/df8/group__core__c_1gaf817084b9516cfdb8c8470ccf8fecced>`
	#define :target:`CV_SEQ_FLAG_HOLE<doxid-d2/df8/group__core__c_1ga4b9eb6b1030baf262e24b1eab0cdc29d>`
	#define :target:`CV_SEQ_FLAG_SHIFT<doxid-d2/df8/group__core__c_1gabf0d04cd736d6071a001d2766bfad094>`
	#define :target:`CV_SEQ_FLAG_SIMPLE<doxid-d2/df8/group__core__c_1ga93a748a5097d633bfd5330635f96c89c>`
	#define :ref:`CV_SEQ_INDEX<doxid-d2/df8/group__core__c_1ga4de86c60c90d8e737242b8ab96c7d0d4>`
	#define :target:`CV_SEQ_KIND<doxid-d2/df8/group__core__c_1ga397e17cd07a0142defaaddc3d5f0ea9c>`(seq)
	#define :target:`CV_SEQ_KIND_BIN_TREE<doxid-d2/df8/group__core__c_1ga8e4436cefd09c307091a64a0475647fc>`
	#define :target:`CV_SEQ_KIND_BITS<doxid-d2/df8/group__core__c_1gad0c2be826f094fa50d4551aef39a3077>`
	#define :target:`CV_SEQ_KIND_CURVE<doxid-d2/df8/group__core__c_1ga27d1c61404413130409d17ee5703cbdd>`
	#define :ref:`CV_SEQ_KIND_GENERIC<doxid-d2/df8/group__core__c_1ga27259a8209b5ec8bcd138063590d2bdf>`
	#define :ref:`CV_SEQ_KIND_GRAPH<doxid-d2/df8/group__core__c_1ga054f3b997ccd418f561f2654894b5bce>`
	#define :target:`CV_SEQ_KIND_MASK<doxid-d2/df8/group__core__c_1gabd18a7d71fd27dd58a597079ea40d336>`
	#define :target:`CV_SEQ_KIND_SUBDIV2D<doxid-d2/df8/group__core__c_1gaef87709d36f18eeb9467fd2efbf1266d>`
	#define :target:`CV_SEQ_MAGIC_VAL<doxid-d2/df8/group__core__c_1gaf05a7831fa70a5d4ad4cdf705314b6f0>`
	#define :target:`CV_SEQ_POINT3D_SET<doxid-d2/df8/group__core__c_1ga8c1586f1218e770c6d69a90626567a9d>`
	#define :ref:`CV_SEQ_POINT_SET<doxid-d2/df8/group__core__c_1gab31f9cd6601c6d8a20af1873e308e253>`
	#define :target:`CV_SEQ_POLYGON<doxid-d2/df8/group__core__c_1gaa8f3b136475288638a1e20a6e297d5b7>`
	#define :ref:`CV_SEQ_POLYGON_TREE<doxid-d2/df8/group__core__c_1gaa049aa36bf1c64a975429fd77135fe9a>`
	#define :target:`CV_SEQ_POLYLINE<doxid-d2/df8/group__core__c_1gadaa6e947684c003e0a0e9b0e44ac6c00>`
	#define :ref:`CV_SEQ_READER_FIELDS<doxid-d2/df8/group__core__c_1ga32c178732ea99af712416f09fcb6f87a>`()
	#define :target:`CV_SEQ_SIMPLE_POLYGON<doxid-d2/df8/group__core__c_1gaba7e23976d13d43280b53625f4785283>`
	#define :ref:`CV_SEQ_WRITER_FIELDS<doxid-d2/df8/group__core__c_1ga9f2d7f6496dbc453f0bd2909fb2aad36>`()
	#define :ref:`CV_SET_ELEM_FIELDS<doxid-d2/df8/group__core__c_1ga1b27742ae136a4ad516c0274adc978c6>`(elem_type)
	#define :target:`CV_SET_ELEM_FREE_FLAG<doxid-d2/df8/group__core__c_1gaf8a8b087b4160ded4619f0fb4c3a644c>`
	#define :target:`CV_SET_ELEM_IDX_MASK<doxid-d2/df8/group__core__c_1gaee874a93717998e5010c298852dda15d>`
	#define :target:`CV_SET_FIELDS<doxid-d2/df8/group__core__c_1ga9ea2575216c4df427f627a0c10891917>`()
	#define :target:`CV_SET_MAGIC_VAL<doxid-d2/df8/group__core__c_1ga029ca237e9da451ca67f3bd53a80448c>`
	#define :target:`CV_SIGN<doxid-d2/df8/group__core__c_1gaed43245c1fcbd2830effed913e192133>`(a)
	#define :target:`CV_SORT_ASCENDING<doxid-d2/df8/group__core__c_1ga0831ac12b5e395a8ed79e8f67c8db9b5>`
	#define :target:`CV_SORT_DESCENDING<doxid-d2/df8/group__core__c_1ga2230f320e596cab3e40d719d4f922af0>`
	#define :target:`CV_SORT_EVERY_COLUMN<doxid-d2/df8/group__core__c_1ga1d85a5ab0c48ce8887e858566caf07b4>`
	#define :target:`CV_SORT_EVERY_ROW<doxid-d2/df8/group__core__c_1ga551984a28cdd2e8731334f855923085a>`
	#define :target:`CV_SPARSE_MAT_MAGIC_VAL<doxid-d2/df8/group__core__c_1ga9087e4eea17f90499c3b2a6002e4d74b>`
	#define :target:`CV_STORAGE_APPEND<doxid-d2/df8/group__core__c_1ga944b689ecd4480f5d8978e332568db8e>`
	#define :target:`CV_STORAGE_BASE64<doxid-d2/df8/group__core__c_1ga2039e96dd8cba6fe966b6cd62a34225e>`
	#define :target:`CV_STORAGE_FORMAT_AUTO<doxid-d2/df8/group__core__c_1gadaefbf6db046f86d558a6a015603dee5>`
	#define :target:`CV_STORAGE_FORMAT_JSON<doxid-d2/df8/group__core__c_1gac110fff442079aaafde456acce5bf686>`
	#define :target:`CV_STORAGE_FORMAT_MASK<doxid-d2/df8/group__core__c_1ga7cecfa63704d36affe2a1555f3953b67>`
	#define :target:`CV_STORAGE_FORMAT_XML<doxid-d2/df8/group__core__c_1ga4f2e0d99b2ee45053abeeb15242959c6>`
	#define :target:`CV_STORAGE_FORMAT_YAML<doxid-d2/df8/group__core__c_1ga7146ce67126e9cb6a93b84e84866344e>`
	#define :target:`CV_STORAGE_MAGIC_VAL<doxid-d2/df8/group__core__c_1gac6396d1012f7f07d1edbebd4f652549b>`
	#define :target:`CV_STORAGE_MEMORY<doxid-d2/df8/group__core__c_1ga291c679b8129675cb979cda395b3c884>`
	#define :ref:`CV_STORAGE_READ<doxid-d2/df8/group__core__c_1ga35bfa6581e0e915245c796db3996ada3>`
	#define :target:`CV_STORAGE_WRITE<doxid-d2/df8/group__core__c_1ga45407b3c2338d30348ff51d576c7f204>`
	#define :target:`CV_STORAGE_WRITE_BASE64<doxid-d2/df8/group__core__c_1gac4a1243b897e37fe1b13247b027e2460>`
	#define :target:`CV_STORAGE_WRITE_BINARY<doxid-d2/df8/group__core__c_1ga21d78bbc23c76e5740a9f8372d025913>`
	#define :target:`CV_STORAGE_WRITE_TEXT<doxid-d2/df8/group__core__c_1gaa251896925c48443e9050a380bbc6b84>`
	#define :target:`CV_SVD<doxid-d2/df8/group__core__c_1gaebe2aea76858173162e91e65dfa95973>`
	#define :target:`CV_SVD_MODIFY_A<doxid-d2/df8/group__core__c_1gab6190317fe8ba18daf716c9b125c4eeb>`
	#define :target:`CV_SVD_SYM<doxid-d2/df8/group__core__c_1ga60cc498fea1b1177b423dd97a5e039e9>`
	#define :target:`CV_SVD_U_T<doxid-d2/df8/group__core__c_1ga6593e7074d83a1586b43e5385495dfd6>`
	#define :target:`CV_SVD_V_T<doxid-d2/df8/group__core__c_1ga40bc55bafb291abebffa913aa4fd92c9>`

	#define :target:`CV_SWAP<doxid-d2/df8/group__core__c_1gafd3bea6eee3aa8c801dc0f12a405554c>`( \
		a, \
		b, \
		t \
		)

	#define :target:`CV_TERMCRIT_EPS<doxid-d2/df8/group__core__c_1ga3d22bb48d24b85a1bbc5d10e0ddcff33>`
	#define :target:`CV_TERMCRIT_ITER<doxid-d2/df8/group__core__c_1ga4f6009f584607989e908868751567fe7>`
	#define :target:`CV_TERMCRIT_NUMBER<doxid-d2/df8/group__core__c_1gae86f45404a8ab700a742e8ed95933856>`
	#define :ref:`CV_TREE_NODE_FIELDS<doxid-d2/df8/group__core__c_1gad8807dac71fcde9e625288ff3d237c2d>`(node_type)
	#define :target:`CV_TURN_ON_IPL_COMPATIBILITY<doxid-d2/df8/group__core__c_1ga19f3f877176395658850a825d2ef4db4>`()
	#define :target:`CV_TYPE_NAME_GRAPH<doxid-d2/df8/group__core__c_1ga8c2c5161a711a7a14a4614a1f7a77c19>`
	#define :target:`CV_TYPE_NAME_IMAGE<doxid-d2/df8/group__core__c_1gacdf5f221f636c028434382fcdcea72d3>`
	#define :target:`CV_TYPE_NAME_MAT<doxid-d2/df8/group__core__c_1gad5786aa2b546a2781a7d4644f06a58b4>`
	#define :target:`CV_TYPE_NAME_MATND<doxid-d2/df8/group__core__c_1gab491d08147642b6056083280648fabf7>`
	#define :target:`CV_TYPE_NAME_SEQ<doxid-d2/df8/group__core__c_1ga228e85a7387452552d2e6dd1cb83dd59>`
	#define :target:`CV_TYPE_NAME_SEQ_TREE<doxid-d2/df8/group__core__c_1ga2a6212b92f0f23c5a1b9d252b2dcf21a>`
	#define :target:`CV_TYPE_NAME_SPARSE_MAT<doxid-d2/df8/group__core__c_1ga548aa92bacf355a2dbccee5d14b064c8>`
	#define :target:`CV_WHOLE_ARR<doxid-d2/df8/group__core__c_1gababdfe6f91157ed47b44539e53e675e9>`
	#define :target:`CV_WHOLE_SEQ<doxid-d2/df8/group__core__c_1gaf60a219def061a7b1335495e6aedd90b>`
	#define :target:`CV_WHOLE_SEQ_END_INDEX<doxid-d2/df8/group__core__c_1gabcb57722fdba8d14e37a494e3fe4f3b7>`

	#define :target:`CV_WRITE_SEQ_ELEM<doxid-d2/df8/group__core__c_1ga3c5d937a6b20e6bb022d3fbc57c46569>`( \
		elem, \
		writer \
		)

	#define :ref:`CV_WRITE_SEQ_ELEM_VAR<doxid-d2/df8/group__core__c_1gac49f14134071765716a83f763002bafe>`( \
		elem_ptr, \
		writer \
		)

	#define :target:`IPL2CV_DEPTH<doxid-d2/df8/group__core__c_1gaae041162686052935d4c272e4efe0f66>`(depth)
	#define :target:`IPL_ALIGN_16BYTES<doxid-d2/df8/group__core__c_1ga04fc41daafed1c9d1bef6f120eed2698>`
	#define :target:`IPL_ALIGN_32BYTES<doxid-d2/df8/group__core__c_1ga42680b91615eaf839f21c2c577f8bdd0>`
	#define :target:`IPL_ALIGN_4BYTES<doxid-d2/df8/group__core__c_1ga9b806b31fcb6b014b3a1d3558c686de4>`
	#define :target:`IPL_ALIGN_8BYTES<doxid-d2/df8/group__core__c_1gac9cc7bb9c02ab104bef619a6e75eaba5>`
	#define :target:`IPL_ALIGN_DWORD<doxid-d2/df8/group__core__c_1ga8756ec1a3413bfc233ec687417d02400>`
	#define :target:`IPL_ALIGN_QWORD<doxid-d2/df8/group__core__c_1gaed8e012e8880e245405c99b2c8d2296d>`
	#define :target:`IPL_BORDER_CONSTANT<doxid-d2/df8/group__core__c_1ga3775e9c53907519fd716c628c3af8c3b>`
	#define :target:`IPL_BORDER_REFLECT<doxid-d2/df8/group__core__c_1ga27c306471b3b166a3d55e9ddaad9bd82>`
	#define :ref:`IPL_BORDER_REFLECT_101<doxid-d2/df8/group__core__c_1gaf188eae22ad796f4291e64db23bfe6b6>`
	#define :target:`IPL_BORDER_REPLICATE<doxid-d2/df8/group__core__c_1gaf2b72dc9f1fb39fe1b8dbcf15127e827>`
	#define :target:`IPL_BORDER_TRANSPARENT<doxid-d2/df8/group__core__c_1ga3811f4b8c7bbbb36839aa846b7ff4e82>`
	#define :target:`IPL_BORDER_WRAP<doxid-d2/df8/group__core__c_1ga7f1bca3db22c548782adc590e9ddd998>`
	#define :target:`IPL_DATA_ORDER_PIXEL<doxid-d2/df8/group__core__c_1gae9771dff4812bed809583c1631a895fc>`
	#define :target:`IPL_DATA_ORDER_PLANE<doxid-d2/df8/group__core__c_1ga6de6367e4f9dd8c58778b23cd80bc8de>`
	#define :target:`IPL_DEPTH_16S<doxid-d2/df8/group__core__c_1gada84674066d2cc6b456439d515dafec0>`
	#define :target:`IPL_DEPTH_16U<doxid-d2/df8/group__core__c_1ga3e67832eff3dbb00553fc9873673574e>`
	#define :target:`IPL_DEPTH_1U<doxid-d2/df8/group__core__c_1ga7e14d003f2edebcdb731f7d6425654f3>`
	#define :target:`IPL_DEPTH_32F<doxid-d2/df8/group__core__c_1gac8f7e4773617bfeb66d65a44df571fcb>`
	#define :target:`IPL_DEPTH_32S<doxid-d2/df8/group__core__c_1gab410b8bb35a3f4bd2ad12e0db42ce546>`
	#define :ref:`IPL_DEPTH_64F<doxid-d2/df8/group__core__c_1gaccc1236475a7267d3d8024bdca433267>`
	#define :target:`IPL_DEPTH_8S<doxid-d2/df8/group__core__c_1gaa73f8aedb22f6d9cce690a0a126dd6e7>`
	#define :target:`IPL_DEPTH_8U<doxid-d2/df8/group__core__c_1ga9e8b09cb3752b5139b77ed4f9a1a537b>`
	#define :target:`IPL_DEPTH_SIGN<doxid-d2/df8/group__core__c_1ga40450450f195cb7b2f70aea1eb3a80a6>`
	#define :target:`IPL_IMAGE_DATA<doxid-d2/df8/group__core__c_1ga9fead1e17fcb120733896527e866aee7>`
	#define :target:`IPL_IMAGE_HEADER<doxid-d2/df8/group__core__c_1gaa68e757518e15a43a48d4bd57b035a3b>`
	#define :target:`IPL_IMAGE_MAGIC_VAL<doxid-d2/df8/group__core__c_1ga203f071795e62a2dbe1feb5d96b4a0bd>`
	#define :target:`IPL_IMAGE_ROI<doxid-d2/df8/group__core__c_1ga1838909abdbe19f2ca20c84c06b0a0ea>`
	#define :target:`IPL_ORIGIN_BL<doxid-d2/df8/group__core__c_1ga05a5255f821b7e42d3610490043ee5c0>`
	#define :target:`IPL_ORIGIN_TL<doxid-d2/df8/group__core__c_1ga98c8ff44829735d47b53ebe396fc5f46>`

	#define :target:`OPENCV_ASSERT<doxid-d2/df8/group__core__c_1ga07dd1795dc191b52448015723bc54523>`( \
		expr, \
		func, \
		context \
		)

	#define :target:`OPENCV_CALL<doxid-d2/df8/group__core__c_1ga4cb752c1d2ce632637ee688764d0e02c>`(Func)

	#define :target:`OPENCV_ERROR<doxid-d2/df8/group__core__c_1gaf8aec53814f895739c5ef9cbde085797>`( \
		status, \
		func, \
		context \
		)

	#define :target:`__CV_BEGIN__<doxid-d2/df8/group__core__c_1ga6c3007549ff0f062e2bb4d9cae8a8147>`
	#define :target:`__CV_END__<doxid-d2/df8/group__core__c_1ga252c84a0954cc0bb5e011e7e6bf0be98>`
	#define :target:`__CV_EXIT__<doxid-d2/df8/group__core__c_1ga916037bc3491a8c3ea0c3f013bf0e00b>`

	#define :target:`cvAXPY<doxid-d2/df8/group__core__c_1ga674257a8b967c707b82031d9c3bfbb47>`( \
		A, \
		real_scalar, \
		B, \
		C \
		)

	#define :target:`cvAbs<doxid-d2/df8/group__core__c_1ga48126e279693f90244ea38cdd3fbda3d>`( \
		src, \
		dst \
		)

	#define :target:`cvCheckArray<doxid-d2/df8/group__core__c_1ga99e9ee59d7a209c724754ada15c1e352>`

	#define :target:`cvConvert<doxid-d2/df8/group__core__c_1ga49dc8f308b27093cae52ccabaf9eb6b5>`( \
		src, \
		dst \
		)

	#define :target:`cvCvtScale<doxid-d2/df8/group__core__c_1ga5e90d4d0e374b72873a4ecaf784699b4>`
	#define :target:`cvCvtScaleAbs<doxid-d2/df8/group__core__c_1ga78291d4d7b3b8794433542cecd961eec>`
	#define :target:`cvFFT<doxid-d2/df8/group__core__c_1ga568506203f47229d7e9cf12bb6bd0406>`
	#define :target:`cvFree<doxid-d2/df8/group__core__c_1ga0c5b55bdfff212be3e40c0cb38507e7f>`(ptr)

	#define :ref:`cvGetGraphVtx<doxid-d2/df8/group__core__c_1ga2e8c4a2419426aa7b6c8a243824837a2>`( \
		graph, \
		idx \
		)

	#define :target:`cvGetSubArr<doxid-d2/df8/group__core__c_1ga3117874723be49948210474fae5d6a6f>`

	#define :ref:`cvGraphEdgeIdx<doxid-d2/df8/group__core__c_1ga2139ffd4b7ebebc1db64496a269ea467>`( \
		graph, \
		edge \
		)

	#define :target:`cvGraphFindEdge<doxid-d2/df8/group__core__c_1ga9ef0ff25772ef880c2aa96bac024d94e>`
	#define :target:`cvGraphFindEdgeByPtr<doxid-d2/df8/group__core__c_1ga44a3c3fcd0616851b50f5361d94cc5e9>`
	#define :target:`cvGraphGetEdgeCount<doxid-d2/df8/group__core__c_1gac3c1c7f6a136aa65471325b5203c4b8a>`(graph)
	#define :target:`cvGraphGetVtxCount<doxid-d2/df8/group__core__c_1ga0ae4ecf60c155003ea78f1c1a75ff046>`(graph)

	#define :ref:`cvGraphVtxIdx<doxid-d2/df8/group__core__c_1ga4aabb7cbdec1c9ec6b2486111261ac83>`( \
		graph, \
		vtx \
		)

	#define :target:`cvInv<doxid-d2/df8/group__core__c_1ga3c8316f0881faa24e9c9816a9a721284>`
	#define :target:`cvInvSqrt<doxid-d2/df8/group__core__c_1gaf095c4a8f03e8f8333e4a0d49a7136f3>`(value)
	#define :target:`cvMahalonobis<doxid-d2/df8/group__core__c_1gaf3070ac57f36f43585b0908e42e74bfa>`

	#define :target:`cvMatMul<doxid-d2/df8/group__core__c_1ga6d3b8936dc8eb094f4a8a7e2464e1648>`( \
		src1, \
		src2, \
		dst \
		)

	#define :ref:`cvMatMulAdd<doxid-d2/df8/group__core__c_1ga508ba5d1f7cb9477033e337fa3126536>`( \
		src1, \
		src2, \
		src3, \
		dst \
		)

	#define :target:`cvMatMulAddEx<doxid-d2/df8/group__core__c_1ga1311e58fed9b8f0fe2300652968e2c7e>`
	#define :target:`cvMatMulAddS<doxid-d2/df8/group__core__c_1gadbda7064ba80d7bb6bf1064cd84a1e82>`
	#define :target:`cvMirror<doxid-d2/df8/group__core__c_1ga25f6e186e4647545361bbb8d9b1d5be0>`

	#define :target:`cvReshapeND<doxid-d2/df8/group__core__c_1ga83837198540a4368b4287373421e4c28>`( \
		arr, \
		header, \
		new_cn, \
		new_dims, \
		new_sizes \
		)

	#define :target:`cvScale<doxid-d2/df8/group__core__c_1ga4c122895ca16104b499e7ed0e46047e4>`
	#define :target:`cvSqrt<doxid-d2/df8/group__core__c_1gabcefba83952eead41b5222955fcd45c9>`(value)
	#define :target:`cvT<doxid-d2/df8/group__core__c_1gad4f6df658d48bde3dbcc2deb2303417c>`
	#define :target:`cvZero<doxid-d2/df8/group__core__c_1ga376f499e3308f2a0e462fead0639e2a7>`

.. _details-d2/df8/group__core__c:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Enum Values
-----------

.. index:: pair: enumvalue; CV_StsOk
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603abe4d082f5e30cd46712e95bad32df769:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsOk

everything is ok

.. index:: pair: enumvalue; CV_StsBackTrace
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a82e2a9b6a9b9dc5972f6997a9269516d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBackTrace

pseudo error for back trace

.. index:: pair: enumvalue; CV_StsError
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a09f92be88ff238f52d100a2db77a6c96:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsError

unknown /unspecified error

.. index:: pair: enumvalue; CV_StsInternal
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a6818a01adfd3395b6f29ea39323325a1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsInternal

internal error (bad state)

.. index:: pair: enumvalue; CV_StsNoMem
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a80c63eb7e70e36293c3b365a7635d903:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsNoMem

insufficient memory

.. index:: pair: enumvalue; CV_StsBadArg
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603accf5777eb107ab4c23dbeeaae6138175:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadArg

function arg/param is bad

.. index:: pair: enumvalue; CV_StsBadFunc
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aaadea95d03ced5eb07b1499bd6f2dffc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadFunc

unsupported function

.. index:: pair: enumvalue; CV_StsNoConv
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603affc27f0f8fe6ed581e14828d4cf4d909:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsNoConv

iter. didn't converge

.. index:: pair: enumvalue; CV_StsAutoTrace
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a0fe5ea706d458eb1893e968c3dec9bc2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsAutoTrace

tracing

.. index:: pair: enumvalue; CV_HeaderIsNull
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a6e58be3b1205026082b9ea5d06205975:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_HeaderIsNull

image header is NULL

.. index:: pair: enumvalue; CV_BadImageSize
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ae5defdd6ca27f9a45c130137cf9269b3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadImageSize

image size is invalid

.. index:: pair: enumvalue; CV_BadOffset
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aa545b142942bc735a33241cf1d3740ec:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadOffset

offset is invalid

.. index:: pair: enumvalue; CV_BadStep
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603af39c734895f539907ab8af04d2a3b3f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadStep

image step is wrong, this may happen for a non-continuous matrix

.. index:: pair: enumvalue; CV_BadNumChannels
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a727bd07ede2ff2187497658772525b4c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadNumChannels

bad number of channels, for example, some functions accept only single channel matrices

.. index:: pair: enumvalue; CV_BadDepth
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a3e456fa8b6e0c7d77a58b3630b8402e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadDepth

input image depth is not supported by the function

.. index:: pair: enumvalue; CV_BadOrder
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ad53327b3e187afe04ae198c1bc5b2451:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadOrder

number of dimensions is out of range

.. index:: pair: enumvalue; CV_BadOrigin
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a0d4e443657a9ddc42c42cd394b7a6a19:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadOrigin

incorrect input origin

.. index:: pair: enumvalue; CV_BadAlign
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a361b7d0220f620646a713f7e33371376:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadAlign

incorrect input align

.. index:: pair: enumvalue; CV_BadCOI
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aa38e34f81122bf59f91515978df56fbc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadCOI

input COI is not supported

.. index:: pair: enumvalue; CV_BadROISize
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ac37daadbe254a10c83b1908b347d6ebf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_BadROISize

incorrect input roi

.. index:: pair: enumvalue; CV_StsNullPtr
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a354fe7ffb95dea25fad059d283ebab16:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsNullPtr

null pointer

.. index:: pair: enumvalue; CV_StsVecLengthErr
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a60a9dcb36d6e9a6e2243f680cfcd6591:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsVecLengthErr

incorrect vector length

.. index:: pair: enumvalue; CV_StsFilterStructContentErr
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5970531d95d445badbcf8e02eb852dda:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsFilterStructContentErr

incorrect filter structure content

.. index:: pair: enumvalue; CV_StsKernelStructContentErr
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603aea67edac99dd67c92dabb19d29a376ec:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsKernelStructContentErr

incorrect transform kernel content

.. index:: pair: enumvalue; CV_StsFilterOffsetErr
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a79148baa150a313db97f2bdd132186ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsFilterOffsetErr

incorrect filter offset value

.. index:: pair: enumvalue; CV_StsBadSize
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a813a5380db7920ea08384cc3d02b01da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadSize

the input/output structure size is incorrect

.. index:: pair: enumvalue; CV_StsDivByZero
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a6ff8d93d3f7e913552afa108f3f3d5af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsDivByZero

division by zero

.. index:: pair: enumvalue; CV_StsInplaceNotSupported
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a7c3dfa8541783235bb8f0173397bdb74:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsInplaceNotSupported

in-place operation is not supported

.. index:: pair: enumvalue; CV_StsObjectNotFound
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a19ce7dc358724fe70c8d81a65653225e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsObjectNotFound

request can't be completed

.. index:: pair: enumvalue; CV_StsUnmatchedFormats
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603af109ac41693c5fc9ab2180bbe1caf0cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsUnmatchedFormats

formats of input/output arrays differ

.. index:: pair: enumvalue; CV_StsBadFlag
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5022821bc6c66437491a12c76308d8fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadFlag

flag is wrong or not supported

.. index:: pair: enumvalue; CV_StsBadPoint
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ab79894e37837cf8360be0847c86920db:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadPoint

bad :ref:`CvPoint <doxid-d3/dc1/struct_cv_point>`

.. index:: pair: enumvalue; CV_StsBadMask
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a8e95c8bca6b4e3f52e1638766cd1d903:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadMask

bad format of mask (neither 8uC1 nor 8sC1)

.. index:: pair: enumvalue; CV_StsUnmatchedSizes
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a7c0df1534e0f9e046abd674716add31a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsUnmatchedSizes

sizes of input/output structures do not match

.. index:: pair: enumvalue; CV_StsUnsupportedFormat
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a2b8954e4465b7133c319fc4877cd16ee:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsUnsupportedFormat

the data format/type is not supported by the function

.. index:: pair: enumvalue; CV_StsOutOfRange
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603afc7faafff211209f81950ee2abc19cae:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsOutOfRange

some of parameters are out of range

.. index:: pair: enumvalue; CV_StsParseError
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a63367d6e2e5ba0240b29748c4bda3435:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsParseError

invalid syntax/structure of the parsed file

.. index:: pair: enumvalue; CV_StsNotImplemented
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603ad6a6c52c266ca77c3f055d465b3c1f8b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsNotImplemented

the requested function/feature is not implemented

.. index:: pair: enumvalue; CV_StsBadMemBlock
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603af571131d2504339c67b30308132b978b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsBadMemBlock

an allocated block has been corrupted

.. index:: pair: enumvalue; CV_StsAssert
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a5da0f12f42b4c8295b06ebfbbdc12206:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_StsAssert

assertion failed

.. index:: pair: enumvalue; CV_GpuNotSupported
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a54f2ac578e6f36c639d0061a7d36c298:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_GpuNotSupported

no CUDA support

.. index:: pair: enumvalue; CV_GpuApiCallError
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a917e1fffd8f1aa665bfc1423f0707beb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_GpuApiCallError

GPU API call error

.. index:: pair: enumvalue; CV_OpenGlNotSupported
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a388fee90cf64c0d80b7f99cb1541546b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_OpenGlNotSupported

no OpenGL support

.. index:: pair: enumvalue; CV_OpenGlApiCallError
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a8973800826c581b79010ad51037a3f17:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_OpenGlApiCallError

OpenGL API call error

.. index:: pair: enumvalue; CV_OpenCLApiCallError
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a4d840c47d35f2b1f80512045fb704fed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_OpenCLApiCallError

OpenCL API call error

.. index:: pair: enumvalue; CV_OpenCLInitError
.. _doxid-d2/df8/group__core__c_1ggaedcf2109f459315e1a7f2af73ec9b603a9b8d02530927e3a4d585220425fc62cf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	CV_OpenCLInitError

OpenCL initialization error

Typedefs
--------

.. index:: pair: typedef; CvCmpFunc
.. _doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef int (*CvCmpFunc)(
		const void *a,
		const void *b,
		void *userdata
		)

a < b ? -1 : a > b ? 1 : 0

.. index:: pair: typedef; CvFileStorage
.. _doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>` CvFileStorage

"black box" representation of the file storage associated with a file on disk.

Several functions that are described below take CvFileStorage\* as inputs and allow the user to save or to load hierarchical collections that consist of scalar values, standard CXCore objects (such as matrices, sequences, graphs), and user-defined objects.

OpenCV can read and write data in XML (`http://www.w3c.org/XML <http://www.w3c.org/XML>`__), YAML (`http://www.yaml.org <http://www.yaml.org>`__) or JSON (`http://www.json.org/ <http://www.json.org/>`__) formats. Below is an example of 3x3 floating-point identity matrix A, stored in XML and YAML files using CXCore functions: XML:

.. ref-code-block:: cpp

	<?xml version="1.0">
	<opencv_storage>
	<A type_id="opencv-matrix">
	  <rows>3</rows>
	  <cols>3</cols>
	  <dt>f</dt>
	  <data>1. 0. 0. 0. 1. 0. 0. 0. 1.</data>
	</A>
	</opencv_storage>

YAML:

.. ref-code-block:: cpp

	%YAML:1.0
	A: !!opencv-matrix
	  rows: 3
	  cols: 3
	  dt: f
	  data: [ 1., 0., 0., 0., 1., 0., 0., 0., 1.]

As it can be seen from the examples, XML uses nested tags to represent hierarchy, while YAML uses indentation for that purpose (similar to the Python programming language).

The same functions can read and write data in both formats; the particular format is determined by the extension of the opened file, ".xml" for XML files, ".yml" or ".yaml" for YAML and ".json" for JSON.

.. index:: pair: typedef; CvArr
.. _doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef void CvArr

This is the "metatype" used *only* as a function parameter.

It denotes that the function accepts arrays of multiple types, such as IplImage\*, CvMat\* or even CvSeq\* sometimes. The particular array type is determined at runtime by analyzing the first 4 bytes of the header. In C++ interface the role of CvArr is played by InputArray and OutputArray.

Global Functions
----------------

.. index:: pair: function; cvAbsDiff
.. _doxid-d2/df8/group__core__c_1ga7867aae4e2a7a0ab7e047e6ecdcdb725:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAbsDiff(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(x,y,c) = abs(src1(x,y,c) - src2(x,y,c))

.. index:: pair: function; cvAbsDiffS
.. _doxid-d2/df8/group__core__c_1ga7f124e15e402ec747c60b6f1ff66187b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAbsDiffS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		)

dst(x,y,c) = abs(src(x,y,c) - value(c))

.. index:: pair: function; cvAdd
.. _doxid-d2/df8/group__core__c_1ga421177ab32563a3b7755e05c61194cf0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAdd(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(mask) = src1(mask) + src2(mask)

.. index:: pair: function; cvAddS
.. _doxid-d2/df8/group__core__c_1gaa07dcaabe93277ee300a1cdd03dbe643:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAddS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(mask) = src(mask) + value

.. index:: pair: function; cvAddWeighted
.. _doxid-d2/df8/group__core__c_1ga2681d8c88c806553824b6338a4c26790:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAddWeighted(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		double alpha,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		double beta,
		double gamma,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst = src1 \* alpha + src2 \* beta + gamma

.. index:: pair: function; cvAlloc
.. _doxid-d2/df8/group__core__c_1ga8301e6a2977e2dc5299b8db639d74fd1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvAlloc(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size)

``malloc`` wrapper. If there is no enough memory, the function (as well as other OpenCV functions that call cvAlloc) raises an error.

.. index:: pair: function; cvAnd
.. _doxid-d2/df8/group__core__c_1gaebc1ec50e4faaba3dde656150757661b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAnd(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(idx) = src1(idx) & src2(idx)

.. index:: pair: function; cvAndS
.. _doxid-d2/df8/group__core__c_1gaabe8c3b6852f5f918fbe49bc11ad7a2a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAndS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(idx) = src(idx) & value

.. index:: pair: function; cvAttrValue
.. _doxid-d2/df8/group__core__c_1ga3d622fe781239a0928a838cd20f9b700:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	cvAttrValue(
		const :ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* attr,
		const char* attr_name
		)

returns attribute value or 0 (NULL) if there is no such attribute

.. index:: pair: function; cvAvg
.. _doxid-d2/df8/group__core__c_1ga4738fbcbdd7b18ccef89550fd7e06e3c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvAvg(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

Calculates mean value of array elements

.. index:: pair: function; cvAvgSdv
.. _doxid-d2/df8/group__core__c_1ga1097c00ea927c9eb5243136d1e34d609:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvAvgSdv(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* mean,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* std_dev,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

Calculates mean and standard deviation of pixel values

.. index:: pair: function; cvCalcCovarMatrix
.. _doxid-d2/df8/group__core__c_1gaa55a840f6541d2e6175d2599e5c40471:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCalcCovarMatrix(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** vects,
		int count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* cov_mat,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* avg,
		int flags
		)

Calculates covariation matrix for a set of vectors



.. rubric:: See also:

:ref:`flags <doxid-d2/df8/group__core__c_1core_c_CovarFlags>`

.. index:: pair: function; cvCartToPolar
.. _doxid-d2/df8/group__core__c_1ga06a27ff8b897fc7335105f7d6725e0b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCartToPolar(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* x,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* y,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* magnitude,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* angle = NULL,
		int angle_in_degrees = 0
		)

Does cartesian->polar coordinates conversion. Either of output components (magnitude or angle) is optional

.. index:: pair: function; cvCbrt
.. _doxid-d2/df8/group__core__c_1gac77b45f1fed5dea412e2f1799605bd2d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	cvCbrt(float value)

Fast cubic root calculation

.. index:: pair: function; cvCheckArr
.. _doxid-d2/df8/group__core__c_1ga2eaa2b2d4e89f5ca4f1bd301e26102eb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvCheckArr(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int flags = 0,
		double min_val = 0,
		double max_val = 0
		)

Checks array values for NaNs, Infs or simply for too large numbers (if CV_CHECK_RANGE is set). If CV_CHECK_QUIET is set, no runtime errors is raised (function returns zero value in case of "bad" values). Otherwise cvError is called

.. index:: pair: function; cvCheckTermCriteria
.. _doxid-d2/df8/group__core__c_1ga12f6f9812f8e75925620fe231025a8a4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>`
	cvCheckTermCriteria(
		:ref:`CvTermCriteria<doxid-db/d3f/struct_cv_term_criteria>` criteria,
		double default_eps,
		int default_max_iters
		)

checks termination criteria validity and sets eps to default_eps (if it is not set), max_iter to default_max_iters (if it is not set)

.. index:: pair: function; cvClearGraph
.. _doxid-d2/df8/group__core__c_1ga24cfe0c8309068d5473adddf8b2aeda3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvClearGraph(:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph)

Remove all vertices and edges from the graph

.. index:: pair: function; cvClearMemStorage
.. _doxid-d2/df8/group__core__c_1gabea1a2aa74b86a72b0ad4472e27106da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvClearMemStorage(:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage)

Clears memory storage. This is the only way(!!!) (besides cvRestoreMemStoragePos) to reuse memory allocated for the storage - cvClearSeq,cvClearSet ... do not free any memory. A child storage returns all the blocks to the parent when it is cleared

.. index:: pair: function; cvClearND
.. _doxid-d2/df8/group__core__c_1ga3421393d3a8cf1b001460d5f28c09b48:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvClearND(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx
		)

clears element of ND dense array, in case of sparse arrays it deletes the specified node

.. index:: pair: function; cvClearSeq
.. _doxid-d2/df8/group__core__c_1gae08497cc7695fdc8599011a85aa27068:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvClearSeq(:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq)

Removes all the elements from the sequence. The freed memory can be reused later only by the same sequence unless cvClearMemStorage or cvRestoreMemStoragePos is called

.. index:: pair: function; cvClearSet
.. _doxid-d2/df8/group__core__c_1ga50bf4ff1d48873bd1c8d153487366350:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvClearSet(:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header)

Removes all the elements from the set

.. index:: pair: function; cvClone
.. _doxid-d2/df8/group__core__c_1ga8d56a075b4f8a7dd23d730a24a238360:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvClone(const void* struct_ptr)

Makes a clone of an object.

The function finds the type of a given object and calls clone with the passed object. Of course, if you know the object type, for example, struct_ptr is CvMat\*, it is faster to call the specific function, like cvCloneMat.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- struct_ptr

		- The object to clone

.. index:: pair: function; cvCloneGraph
.. _doxid-d2/df8/group__core__c_1gabbb817130f233374c2db9c84346ffc74:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`*
	cvCloneGraph(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		)

Creates a copy of graph

.. index:: pair: function; cvCloneImage
.. _doxid-d2/df8/group__core__c_1ga35ff9ea01bd63e8cc6ceafd3d5fd5ac3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	cvCloneImage(const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image)

Creates a copy of IPL image (widthStep may differ)

.. index:: pair: function; cvCloneMat
.. _doxid-d2/df8/group__core__c_1gacdd7037591e39dc080109406a41fe6e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvCloneMat(const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat)

Creates an exact copy of the input matrix (except, may be, step value)

.. index:: pair: function; cvCloneMatND
.. _doxid-d2/df8/group__core__c_1gaca7f74e6cabd5cc9bc88168f356c49f0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	cvCloneMatND(const :ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`* mat)

Creates a copy of :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` (except, may be, steps)

.. index:: pair: function; cvCloneSparseMat
.. _doxid-d2/df8/group__core__c_1ga3443feae602f83d6856cb64f855463f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`*
	cvCloneSparseMat(const :ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`* mat)

Creates a copy of :ref:`CvSparseMat <doxid-d3/d6a/struct_cv_sparse_mat>` (except, may be, zero items)

.. index:: pair: function; cvCmp
.. _doxid-d2/df8/group__core__c_1ga1e51834e22c4c41ab40873b869f6a861:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCmp(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int cmp_op
		)

The comparison operation support single-channel arrays only. Destination image should be 8uC1 or 8sC1 dst(idx) = src1(idx) *cmp_op* src2(idx)

.. index:: pair: function; cvCmpS
.. _doxid-d2/df8/group__core__c_1ga4fea92f848532f4bafc2f5bd460070af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCmpS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		double value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int cmp_op
		)

dst(idx) = src1(idx) *cmp_op* value

.. index:: pair: function; cvCompleteSymm
.. _doxid-d2/df8/group__core__c_1gacd70a22036ed99d8461cd52d869a462c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCompleteSymm(
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* matrix,
		int LtoR = 0
		)

Completes the symmetric matrix from the lower (LtoR=0) or from the upper (LtoR!=0) part

.. index:: pair: function; cvConvertScale
.. _doxid-d2/df8/group__core__c_1ga3a6c66666ac8c30f639c85dd18df9f67:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvConvertScale(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1,
		double shift = 0
		)

Converts one array to another with optional linear transformation.

The function has several different purposes, and thus has several different names. It copies one array to another with optional scaling, which is performed first, and/or optional type conversion, performed after:

.. math::

	\texttt{dst} (I) = \texttt{scale} \texttt{src} (I) + ( \texttt{shift} _0, \texttt{shift} _1,...)

All the channels of multi-channel arrays are processed independently.

The type of conversion is done with rounding and saturation, that is if the result of scaling + conversion can not be represented exactly by a value of the destination array element type, it is set to the nearest representable value on the real axis.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source array

	*
		- dst

		- Destination array

	*
		- scale

		- Scale factor

	*
		- shift

		- Value added to the scaled source array elements

.. index:: pair: function; cvConvertScaleAbs
.. _doxid-d2/df8/group__core__c_1ga998b946d49d3b2dbc9a4803c439bb9cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvConvertScaleAbs(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1,
		double shift = 0
		)

Performs linear transformation on every source array element, stores absolute value of the result: dst(x,y,c) = abs(scale\*src(x,y,c)+shift). destination array must have 8u type. In other cases one may use cvConvertScale + cvAbsDiffS

.. index:: pair: function; cvCopy
.. _doxid-d2/df8/group__core__c_1gac96faa736c7fab8ecc1dc632beb8ea81:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCopy(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

Copies one array to another.

The function copies selected elements from an input array to an output array:

.. math::

	\texttt{dst} (I)= \texttt{src} (I) \quad \text{if} \quad \texttt{mask} (I) \ne 0.

If any of the passed arrays is of :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` type, then its ROI and COI fields are used. Both arrays must have the same type, the same number of dimensions, and the same size. The function can also copy sparse arrays (mask is not supported in this case).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- The source array

	*
		- dst

		- The destination array

	*
		- mask

		- Operation mask, 8-bit single channel array; specifies elements of the destination array to be changed

.. index:: pair: function; cvCountNonZero
.. _doxid-d2/df8/group__core__c_1ga297ba1c39eacac32ede5d6a54d65b5a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvCountNonZero(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Calculates number of non-zero pixels

.. index:: pair: function; cvCreateChildMemStorage
.. _doxid-d2/df8/group__core__c_1ga98e7a149b2cba931cbd78c786a49557c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`*
	cvCreateChildMemStorage(:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* parent)

Creates a memory storage that will borrow memory blocks from parent storage

.. index:: pair: function; cvCreateData
.. _doxid-d2/df8/group__core__c_1ga76ac54ccad766597e20bf0ea29a924df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCreateData(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Allocates array data.

The function allocates image, matrix or multi-dimensional dense array data. Note that in the case of matrix types OpenCV allocation functions are used. In the case of :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` they are used unless :ref:`CV_TURN_ON_IPL_COMPATIBILITY() <doxid-d2/df8/group__core__c_1ga19f3f877176395658850a825d2ef4db4>` has been called before. In the latter case IPL functions are used to allocate the data.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array header

.. index:: pair: function; cvCreateGraph
.. _doxid-d2/df8/group__core__c_1ga7e7ff625910f677628a1c4407d9adf14:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`*
	cvCreateGraph(
		int graph_flags,
		int header_size,
		int vtx_size,
		int edge_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		)

Creates new graph

.. index:: pair: function; cvCreateGraphScanner
.. _doxid-d2/df8/group__core__c_1ga234aabf5550bda973ef0433445d591e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`*
	cvCreateGraphScanner(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* vtx = NULL,
		int mask = -1
		)

Creates new graph scanner.

.. index:: pair: function; cvCreateImage
.. _doxid-d2/df8/group__core__c_1gad83bfadf567039148caaf60d8ce9978a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	cvCreateImage(
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>` size,
		int depth,
		int channels
		)

Creates an image header and allocates the image data.

This function call is equivalent to the following code:

.. ref-code-block:: cpp

	header = cvCreateImageHeader(size, depth, channels);
	cvCreateData(header);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- Image width and height

	*
		- depth

		- Bit depth of image elements. See :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` for valid depths.

	*
		- channels

		- Number of channels per pixel. See :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` for details. This function only creates images with interleaved channels.

.. index:: pair: function; cvCreateImageHeader
.. _doxid-d2/df8/group__core__c_1ga950feef7abcbd6c19c83543f25849ee2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	cvCreateImageHeader(
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>` size,
		int depth,
		int channels
		)

Creates an image header but does not allocate the image data.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- size

		- Image width and height

	*
		- depth

		- Image depth (see cvCreateImage )

	*
		- channels

		- Number of channels (see cvCreateImage )

.. index:: pair: function; cvCreateMat
.. _doxid-d2/df8/group__core__c_1ga70b1fdbae1ec1c6b92d829d2aa27edcd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvCreateMat(
		int rows,
		int cols,
		int type
		)

Creates a matrix header and allocates the matrix data.

The function call is equivalent to the following code:

.. ref-code-block:: cpp

	CvMat* mat = cvCreateMatHeader(rows, cols, type);
	cvCreateData(mat);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows in the matrix

	*
		- cols

		- Number of columns in the matrix

	*
		- type

		- The type of the matrix elements in the form CV\_<bit depth><S\|U\|F>C<number of channels> , where S=signed, U=unsigned, F=float. For example, CV \_ 8UC1 means the elements are 8-bit unsigned and the there is 1 channel, and CV \_ 32SC2 means the elements are 32-bit signed and there are 2 channels.

.. index:: pair: function; cvCreateMatHeader
.. _doxid-d2/df8/group__core__c_1gaa990dcc7befc21d5d035340e41efdb5d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvCreateMatHeader(
		int rows,
		int cols,
		int type
		)

Creates a matrix header but does not allocate the matrix data.

The function allocates a new matrix header and returns a pointer to it. The matrix data can then be allocated using cvCreateData or set explicitly to user-allocated data via cvSetData.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rows

		- Number of rows in the matrix

	*
		- cols

		- Number of columns in the matrix

	*
		- type

		- Type of the matrix elements, see cvCreateMat

.. index:: pair: function; cvCreateMatND
.. _doxid-d2/df8/group__core__c_1ga31165c88d5cc7fb218bcfbb6c29665ef:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	cvCreateMatND(
		int dims,
		const int* sizes,
		int type
		)

Creates the header and allocates the data for a multi-dimensional dense array.

This function call is equivalent to the following code:

.. ref-code-block:: cpp

	CvMatND* mat = cvCreateMatNDHeader(dims, sizes, type);
	cvCreateData(mat);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dims

		- Number of array dimensions. This must not exceed CV_MAX_DIM (32 by default, but can be changed at build time).

	*
		- sizes

		- Array of dimension sizes.

	*
		- type

		- Type of array elements, see cvCreateMat .

.. index:: pair: function; cvCreateMatNDHeader
.. _doxid-d2/df8/group__core__c_1ga15e5b98023d13a07d1ef4fc01280336e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	cvCreateMatNDHeader(
		int dims,
		const int* sizes,
		int type
		)

Creates a new matrix header but does not allocate the matrix data.

The function allocates a header for a multi-dimensional dense array. The array data can further be allocated using cvCreateData or set explicitly to user-allocated data via cvSetData.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dims

		- Number of array dimensions

	*
		- sizes

		- Array of dimension sizes

	*
		- type

		- Type of array elements, see cvCreateMat

.. index:: pair: function; cvCreateMemStorage
.. _doxid-d2/df8/group__core__c_1gafd7437582f40e82c3cb03db45c3d30a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`*
	cvCreateMemStorage(int block_size = 0)

Creates new memory storage. block_size == 0 means that default, somewhat optimal size, is used (currently, it is 64K)

.. index:: pair: function; cvCreateSeq
.. _doxid-d2/df8/group__core__c_1ga9dd6709594cd6269c581dcf3f0e7ec39:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	cvCreateSeq(
		int seq_flags,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` header_size,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` elem_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		)

Creates new empty sequence that will reside in the specified storage

.. index:: pair: function; cvCreateSet
.. _doxid-d2/df8/group__core__c_1ga6519eccf8b8f37310e5bf6db7636df73:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSet<doxid-df/d76/struct_cv_set>`*
	cvCreateSet(
		int set_flags,
		int header_size,
		int elem_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		)

Creates a new set

.. index:: pair: function; cvCreateSparseMat
.. _doxid-d2/df8/group__core__c_1gaffb4dc541577a77b17548fa5f7477b76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`*
	cvCreateSparseMat(
		int dims,
		const int* sizes,
		int type
		)

Creates sparse array.

The function allocates a multi-dimensional sparse array. Initially the array contain no elements, that is PtrND and other related functions will return 0 for every index.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- dims

		- Number of array dimensions. In contrast to the dense matrix, the number of dimensions is practically unlimited (up to :math:`2^{16}`).

	*
		- sizes

		- Array of dimension sizes

	*
		- type

		- Type of array elements. The same as for :ref:`CvMat <doxid-d6/dda/struct_cv_mat>`

.. index:: pair: function; cvCrossProduct
.. _doxid-d2/df8/group__core__c_1gacd2e95490205c8baddbbf8f5e42660f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvCrossProduct(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

Calculates the cross product of two 3D vectors.

The function calculates the cross product of two 3D vectors:

.. math::

	\texttt{dst} = \texttt{src1} \times \texttt{src2}

or:

.. math::

	\begin{array}{l} \texttt{dst} _1 = \texttt{src1} _2 \texttt{src2} _3 - \texttt{src1} _3 \texttt{src2} _2 \\ \texttt{dst} _2 = \texttt{src1} _3 \texttt{src2} _1 - \texttt{src1} _1 \texttt{src2} _3 \\ \texttt{dst} _3 = \texttt{src1} _1 \texttt{src2} _2 - \texttt{src1} _2 \texttt{src2} _1 \end{array}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- The first source vector

	*
		- src2

		- The second source vector

	*
		- dst

		- The destination vector

.. index:: pair: function; cvCvtSeqToArray
.. _doxid-d2/df8/group__core__c_1gae48eb170a99156e86e864fcbe9b80193:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvCvtSeqToArray(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* elements,
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice = :ref:`CV_WHOLE_SEQ<doxid-d2/df8/group__core__c_1gaf60a219def061a7b1335495e6aedd90b>`
		)

Copies sequence content to a continuous piece of memory

.. index:: pair: function; cvDCT
.. _doxid-d2/df8/group__core__c_1ga0a53ef8965677957f624bfd53668a058:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvDCT(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int flags
		)

Discrete Cosine Transform



.. rubric:: See also:

core_c_DftFlags "flags"

.. index:: pair: function; cvDecRefData
.. _doxid-d2/df8/group__core__c_1ga6eef31ca2988177424f6a743defb5fb7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvDecRefData(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Decrements an array data reference counter.

The function decrements the data reference counter in a :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` or :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` if the reference counter

pointer is not NULL. If the counter reaches zero, the data is deallocated. In the current implementation the reference counter is not NULL only if the data was allocated using the cvCreateData function. The counter will be NULL in other cases such as: external data was assigned to the header using cvSetData, header is part of a larger matrix or image, or the header was converted from an image or n-dimensional matrix header.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Pointer to an array header

.. index:: pair: function; cvDet
.. _doxid-d2/df8/group__core__c_1ga0d76c97ce93c5d0fd2cff763a867ceb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvDet(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat)

Calculates determinant of input matrix

.. index:: pair: function; cvDFT
.. _doxid-d2/df8/group__core__c_1ga2aa776ae24fe9ac8b0b64223b105916b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvDFT(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int flags,
		int nonzero_rows = 0
		)

Discrete Fourier Transform: complex->complex, real->ccs (forward), ccs->real (inverse)



.. rubric:: See also:

core_c_DftFlags "flags"

.. index:: pair: function; cvDiv
.. _doxid-d2/df8/group__core__c_1gaaf771a273a80ba5c80b8638402d85df2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvDiv(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1
		)

element-wise division/inversion with scaling: dst(idx) = src1(idx) \* scale / src2(idx) or dst(idx) = scale / src2(idx) if src1 == 0

.. index:: pair: function; cvDotProduct
.. _doxid-d2/df8/group__core__c_1ga23cb0ca7b1521c70738db933c7b44cfb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvDotProduct(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2
		)

Calculates the dot product of two arrays in Euclidean metrics.

The function calculates and returns the Euclidean dot product of two arrays.

.. math::

	src1 \bullet src2 = \sum _I ( \texttt{src1} (I) \texttt{src2} (I))

In the case of multiple channel arrays, the results for all channels are accumulated. In particular, cvDotProduct(a,a) where a is a complex vector, will return :math:`||\texttt{a}||^2`. The function can process multi-dimensional arrays, row by row, layer by layer, and so on.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- The first source array

	*
		- src2

		- The second source array

.. index:: pair: function; cvEigenVV
.. _doxid-d2/df8/group__core__c_1ga6819a03dac3160ac3bc6618b237b0176:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvEigenVV(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* evects,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* evals,
		double eps = 0,
		int lowindex = -1,
		int highindex = -1
		)

Finds eigen values and vectors of a symmetric matrix

.. index:: pair: function; cvEndWriteSeq
.. _doxid-d2/df8/group__core__c_1gacb2652fb1e9df0043fd557d2e2422c1d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	cvEndWriteSeq(:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer)

Closes sequence writer, updates sequence header and returns pointer to the resultant sequence (which may be useful if the sequence was created using cvStartWriteSeq))

.. index:: pair: function; cvEndWriteStruct
.. _doxid-d2/df8/group__core__c_1ga6915e36ae1e179593f818fb5ad8f3ba3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvEndWriteStruct(:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs)

Finishes writing to a file node collection.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage



.. rubric:: See also:

:ref:`cvStartWriteStruct <doxid-d2/df8/group__core__c_1ga93a7dfd1d34ffcd192302a7138aa39df>`.

.. index:: pair: function; cvError
.. _doxid-d2/df8/group__core__c_1ga66e214ddcc57477fc1fb56e2d67c57fa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvError(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line
		)

Sets error status and performs some additional actions (displaying message box, writing message to stderr, terminating application etc.) depending on the current error mode

.. index:: pair: function; cvErrorFromIppStatus
.. _doxid-d2/df8/group__core__c_1ga6dc2cf4dc7150e3bf5b4cd83eb6ec39e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvErrorFromIppStatus(int ipp_status)

Maps IPP error codes to the counterparts from OpenCV

.. index:: pair: function; cvErrorStr
.. _doxid-d2/df8/group__core__c_1ga1c84222494c198c3cc3fd9bda98e1999:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	cvErrorStr(int status)

Retrieves textual description of the error given its code

.. index:: pair: function; cvExp
.. _doxid-d2/df8/group__core__c_1ga1cb5d06a46f6f1cb7812ab7fc23bc44c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvExp(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

Does exponention: dst(idx) = exp(src(idx)). Overflow is not handled yet. Underflow is handled. Maximal relative error is ~7e-6 for single-precision input

.. index:: pair: function; cvFastArctan
.. _doxid-d2/df8/group__core__c_1gaf998f7a61eca81e1b28b0d517cb4d268:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	cvFastArctan(
		float y,
		float x
		)

Fast arctangent calculation

.. index:: pair: function; cvFindGraphEdge
.. _doxid-d2/df8/group__core__c_1ga44395f68c42dbbc1722bde63ea2fe5a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`*
	cvFindGraphEdge(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int start_idx,
		int end_idx
		)

Find edge connecting two vertices

.. index:: pair: function; cvFindType
.. _doxid-d2/df8/group__core__c_1ga7d76386c3cbb2e3b46b41c5f92359e66:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`*
	cvFindType(const char* type_name)

Finds a type by its name.

The function finds a registered type by its name. It returns NULL if there is no type with the specified name.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- type_name

		- Type name

.. index:: pair: function; cvFirstType
.. _doxid-d2/df8/group__core__c_1ga061e1a47784b4e34c455cd5fc8262390:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`*
	cvFirstType(void)

Returns the beginning of a type list.

The function returns the first type in the list of registered types. Navigation through the list can be done via the prev and next fields of the :ref:`CvTypeInfo <doxid-d8/d85/struct_cv_type_info>` structure.

.. index:: pair: function; cvFlip
.. _doxid-d2/df8/group__core__c_1ga0d8844dd0cf49a82b471884be70d4837:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvFlip(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst = NULL,
		int flip_mode = 0
		)

Mirror array data around horizontal (flip=0), vertical (flip=1) or both(flip=-1) axises: cvFlip(src) flips images vertically and sequences horizontally (inplace)

.. index:: pair: function; cvFlushSeqWriter
.. _doxid-d2/df8/group__core__c_1ga27b522a14c46915bc0aa41d9381ea834:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvFlushSeqWriter(:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer)

Updates sequence header. May be useful to get access to some of previously written elements via cvGetSeqElem or sequence reader

.. index:: pair: function; cvFree_
.. _doxid-d2/df8/group__core__c_1ga9044a43fb841f737653173e8534c9602:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvFree_(void* ptr)

``free`` wrapper. Here and further all the memory releasing functions (that all call cvFree) take double pointer in order to to clear pointer to the data after releasing it. Passing pointer to NULL pointer is Ok: nothing happens in this case

.. index:: pair: function; cvGEMM
.. _doxid-d2/df8/group__core__c_1ga1dd4598f88464ea795b140433149258d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvGEMM(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		double alpha,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src3,
		double beta,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int tABC = 0
		)

Extended matrix transform: dst = alpha\*op(A)\*op(B) + beta\*op(C), where op(X) is X or X^T

.. index:: pair: function; cvGet1D
.. _doxid-d2/df8/group__core__c_1ga79385201855ae7b6e1a9cb127c019200:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvGet1D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0
		)

Return a specific array element.

The functions return a specific array element. In the case of a sparse array the functions return 0 if the requested node does not exist (no new node is created by the functions).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx0

		- The first zero-based component of the element index

.. index:: pair: function; cvGet2D
.. _doxid-d2/df8/group__core__c_1ga6a7d8ff87da9f7b3f63a0d94cb879eb9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvGet2D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvGet3D
.. _doxid-d2/df8/group__core__c_1ga6afe57e26345a5c08ac288c7e6d5bdf9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvGet3D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvGetCol
.. _doxid-d2/df8/group__core__c_1ga858135a6bad74832ab6970bf84460d80:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetCol(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int col
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- submat

		- Pointer to the resulting sub-array header

	*
		- col

		- Zero-based index of the selected column

.. index:: pair: function; cvGetCols
.. _doxid-d2/df8/group__core__c_1gae188dbff875982a27ae12b3c09e5c533:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetCols(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int start_col,
		int end_col
		)

Returns one of more array columns.

The functions return the header, corresponding to a specified column span of the input array. That

is, no data is copied. Therefore, any modifications of the submatrix will affect the original array. If you need to copy the columns, use cvCloneMat. cvGetCol(arr, submat, col) is a shortcut for cvGetCols(arr, submat, col, col+1).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- submat

		- Pointer to the resulting sub-array header

	*
		- start_col

		- Zero-based index of the starting column (inclusive) of the span

	*
		- end_col

		- Zero-based index of the ending column (exclusive) of the span

.. index:: pair: function; cvGetDiag
.. _doxid-d2/df8/group__core__c_1gae46f2ff46bd356ed2d2ba82b164062f6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetDiag(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int diag = 0
		)

Returns one of array diagonals.

The function returns the header, corresponding to a specified diagonal of the input array.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- submat

		- Pointer to the resulting sub-array header

	*
		- diag

		- Index of the array diagonal. Zero value corresponds to the main diagonal, -1 corresponds to the diagonal above the main, 1 corresponds to the diagonal below the main, and so forth.

.. index:: pair: function; cvGetDims
.. _doxid-d2/df8/group__core__c_1ga8f8b0c82e99d72a6c7335915d84834ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetDims(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int* sizes = NULL
		)

Return number of array dimensions.

The function returns the array dimensionality and the array of dimension sizes. In the case of :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` or :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` it always returns 2 regardless of number of image/matrix rows. For example, the following code calculates total number of array elements:

.. ref-code-block:: cpp

	int sizes[CV_MAX_DIM];
	int i, total = 1;
	int dims = cvGetDims(arr, size);
	for(i = 0; i < dims; i++ )
	    total *= sizes[i];



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- sizes

		- Optional output vector of the array dimension sizes. For 2d arrays the number of rows (height) goes first, number of columns (width) next.

.. index:: pair: function; cvGetDimSize
.. _doxid-d2/df8/group__core__c_1ga143306a818a28f51139ee69a673175cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetDimSize(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int index
		)

Returns array size along the specified dimension.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- index

		- Zero-based dimension index (for matrices 0 means number of rows, 1 means number of columns; for images 0 means height, 1 means width)

.. index:: pair: function; cvGetElemType
.. _doxid-d2/df8/group__core__c_1ga9a9b29dbac846b951475c248b839ed60:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetElemType(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Returns type of array elements.

The function returns type of the array elements. In the case of :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` the type is converted to CvMat-like representation. For example, if the image has been created as:

.. ref-code-block:: cpp

	IplImage* img = cvCreateImage(cvSize(640, 480), IPL_DEPTH_8U, 3);

The code cvGetElemType(img) will return CV_8UC3.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

.. index:: pair: function; cvGetErrInfo
.. _doxid-d2/df8/group__core__c_1ga6083f975b22c75162a9b5ad2439b036a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetErrInfo(
		const char** errcode_desc,
		const char** description,
		const char** filename,
		int* line
		)

Retrieves detailed information about the last error occurred

.. index:: pair: function; cvGetErrMode
.. _doxid-d2/df8/group__core__c_1ga7e0c004bc9c45eb4a1b33e78d270636e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetErrMode(void)

Retrives current error processing mode

.. index:: pair: function; cvGetErrStatus
.. _doxid-d2/df8/group__core__c_1ga2e0b4c2e674a2f04b3945fd8b542075e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetErrStatus(void)

Get current OpenCV error status

.. index:: pair: function; cvGetFileNode
.. _doxid-d2/df8/group__core__c_1gac61d40bac918caab78646511e395535c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`*
	cvGetFileNode(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const :ref:`CvStringHashNode<doxid-d5/db7/struct_cv_string_hash_node>`* key,
		int create_missing = 0
		)

Finds a node in a map or file storage.

The function finds a file node. It is a faster version of cvGetFileNodeByName (see cvGetHashedKey discussion). Also, the function can insert a new node, if it is not in the map yet.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- map

		- The parent map. If it is NULL, the function searches a top-level node. If both map and key are NULLs, the function returns the root file node - a map that contains top-level nodes.

	*
		- key

		- Unique pointer to the node name, retrieved with cvGetHashedKey

	*
		- create_missing

		- Flag that specifies whether an absent node should be added to the map

.. index:: pair: function; cvGetFileNodeByName
.. _doxid-d2/df8/group__core__c_1gafa543a04771741b7120650dfd3b6cf31:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`*
	cvGetFileNodeByName(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name
		)

Finds a node in a map or file storage.

The function finds a file node by name. The node is searched either in map or, if the pointer is NULL, among the top-level file storage nodes. Using this function for maps and cvGetSeqElem (or sequence reader) for sequences, it is possible to navigate through the file storage. To speed up multiple queries for a certain key (e.g., in the case of an array of structures) one may use a combination of cvGetHashedKey and cvGetFileNode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- map

		- The parent map. If it is NULL, the function searches in all the top-level nodes (streams), starting with the first one.

	*
		- name

		- The file node name

.. index:: pair: function; cvGetFileNodeName
.. _doxid-d2/df8/group__core__c_1gad7ff3a97567e5587af81ed33b5ae05a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	cvGetFileNodeName(const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node)

Returns the name of a file node.

The function returns the name of a file node or NULL, if the file node does not have a name or if node is NULL.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- node

		- File node

.. index:: pair: function; cvGetHashedKey
.. _doxid-d2/df8/group__core__c_1gabf85829f35925df1a716f11f477ac420:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvStringHashNode<doxid-d5/db7/struct_cv_string_hash_node>`*
	cvGetHashedKey(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		int len = -1,
		int create_missing = 0
		)

Returns a unique pointer for a given name.

The function returns a unique pointer for each particular file node name. This pointer can be then passed to the cvGetFileNode function that is faster than cvGetFileNodeByName because it compares text strings by comparing pointers rather than the strings' content.

Consider the following example where an array of points is encoded as a sequence of 2-entry maps:

.. ref-code-block:: cpp

	points:
	  - { x: 10, y: 10 }
	  - { x: 20, y: 20 }
	  - { x: 30, y: 30 }
	  # ...

Then, it is possible to get hashed "x" and "y" pointers to speed up decoding of the points. :

.. ref-code-block:: cpp

	#include "cxcore.h"
	
	int main( int argc, char** argv )
	{
	    CvFileStorage* fs = cvOpenFileStorage( "points.yml", 0, CV_STORAGE_READ );
	    CvStringHashNode* x_key = cvGetHashedNode( fs, "x", -1, 1 );
	    CvStringHashNode* y_key = cvGetHashedNode( fs, "y", -1, 1 );
	    CvFileNode* points = cvGetFileNodeByName( fs, 0, "points" );
	
	    if( CV_NODE_IS_SEQ(points->tag) )
	    {
	        CvSeq* seq = points->data.seq;
	        int i, total = seq->total;
	        CvSeqReader reader;
	        cvStartReadSeq( seq, &reader, 0 );
	        for( i = 0; i < total; i++ )
	        {
	            CvFileNode* pt = (CvFileNode*)reader.ptr;
	#if 1 // faster variant
	            CvFileNode* xnode = cvGetFileNode( fs, pt, x_key, 0 );
	            CvFileNode* ynode = cvGetFileNode( fs, pt, y_key, 0 );
	            assert( xnode && CV_NODE_IS_INT(xnode->tag) &&
	                    ynode && CV_NODE_IS_INT(ynode->tag));
	            int x = xnode->data.i; // or x = cvReadInt( xnode, 0 );
	            int y = ynode->data.i; // or y = cvReadInt( ynode, 0 );
	#elif 1 // slower variant; does not use x_key & y_key
	            CvFileNode* xnode = cvGetFileNodeByName( fs, pt, "x" );
	            CvFileNode* ynode = cvGetFileNodeByName( fs, pt, "y" );
	            assert( xnode && CV_NODE_IS_INT(xnode->tag) &&
	                    ynode && CV_NODE_IS_INT(ynode->tag));
	            int x = xnode->data.i; // or x = cvReadInt( xnode, 0 );
	            int y = ynode->data.i; // or y = cvReadInt( ynode, 0 );
	#else // the slowest yet the easiest to use variant
	            int x = cvReadIntByName( fs, pt, "x", 0 );
	            int y = cvReadIntByName( fs, pt, "y", 0 );
	#endif
	            CV_NEXT_SEQ_ELEM( seq->elem_size, reader );
	            printf("
	        }
	    }
	    cvReleaseFileStorage( &fs );
	    return 0;
	}

Please note that whatever method of accessing a map you are using, it is still much slower than using plain sequences; for example, in the above example, it is more efficient to encode the points as pairs of integers in a single numeric sequence.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- name

		- Literal node name

	*
		- len

		- Length of the name (if it is known apriori), or -1 if it needs to be calculated

	*
		- create_missing

		- Flag that specifies, whether an absent key should be added into the hash table

.. index:: pair: function; cvGetImage
.. _doxid-d2/df8/group__core__c_1ga9ef7665b712683df06e35bffb504b571:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	cvGetImage(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image_header
		)

Returns image header for arbitrary array.

The function returns the image header for the input array that can be a matrix (:ref:`CvMat <doxid-d6/dda/struct_cv_mat>`) or image (:ref:`IplImage <doxid-dd/d51/struct_ipl_image>`). In the case of an image the function simply returns the input pointer. In the case of :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` it initializes an image_header structure with the parameters of the input matrix. Note that if we transform :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` to :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` using cvGetMat and then transform :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` back to :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` using this function, we will get different headers if the ROI is set in the original image.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- image_header

		- Pointer to :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` structure used as a temporary buffer

.. index:: pair: function; cvGetImageCOI
.. _doxid-d2/df8/group__core__c_1ga6d127e02096be1ae81cbffb9e850fd10:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetImageCOI(const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image)

Returns the index of the channel of interest.

Returns the channel of interest of in an :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`. Returned values correspond to the coi in cvSetImageCOI.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- A pointer to the image header

.. index:: pair: function; cvGetImageROI
.. _doxid-d2/df8/group__core__c_1gaf6133efed18187716743884742145892:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvRect<doxid-de/d44/struct_cv_rect>`
	cvGetImageROI(const :ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image)

Returns the image ROI.

If there is no ROI set, cvRect(0,0,image->width,image->height) is returned.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- A pointer to the image header

.. index:: pair: function; cvGetMat
.. _doxid-d2/df8/group__core__c_1gab82cd54707dd3561bd9ab15bac2ce0b2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetMat(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* header,
		int* coi = NULL,
		int allowND = 0
		)

Returns matrix header for arbitrary array.

The function returns a matrix header for the input array that can be a matrix - :ref:`CvMat <doxid-d6/dda/struct_cv_mat>`, an image - :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`, or a multi-dimensional dense array - :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` (the third option is allowed only if allowND != 0) . In the case of matrix the function simply returns the input pointer. In the case of IplImage\* or :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` it initializes the header structure with parameters of the current image ROI and returns &header. Because COI is not supported by :ref:`CvMat <doxid-d6/dda/struct_cv_mat>`, it is returned separately.

The function provides an easy way to handle both types of arrays - :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` and :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` using the same code. Input array must have non-zero data pointer, otherwise the function will report an error.

If the input array is :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` with planar data layout and COI set, the function returns the pointer to the selected plane and COI == 0. This feature allows user to process :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` structures with planar data layout, even though OpenCV does not support such images.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- header

		- Pointer to :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` structure used as a temporary buffer

	*
		- coi

		- Optional output parameter for storing COI

	*
		- allowND

		- If non-zero, the function accepts multi-dimensional dense arrays (CvMatND\*) and returns 2D matrix (if :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` has two dimensions) or 1D matrix (when :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` has 1 dimension or more than 2 dimensions). The :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` array must be continuous.



.. rubric:: See also:

:ref:`cvGetImage <doxid-d2/df8/group__core__c_1ga9ef7665b712683df06e35bffb504b571>`, cvarrToMat.

.. index:: pair: function; cvGetND
.. _doxid-d2/df8/group__core__c_1ga7cc08a5ecf38caae60389f3a312d4130:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvGetND(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx

		- Array of the element indices

.. index:: pair: function; cvGetNextSparseNode
.. _doxid-d2/df8/group__core__c_1ga6e8b05ecb9b78ad4f200f58e75676443:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSparseNode<doxid-da/d78/struct_cv_sparse_node>`*
	cvGetNextSparseNode(:ref:`CvSparseMatIterator<doxid-d3/d9d/struct_cv_sparse_mat_iterator>`* mat_iterator)

Returns the next sparse matrix element.

The function moves iterator to the next sparse matrix element and returns pointer to it. In the current version there is no any particular order of the elements, because they are stored in the hash table. The sample below demonstrates how to iterate through the sparse matrix:

.. ref-code-block:: cpp

	// print all the non-zero sparse matrix elements and compute their sum
	double sum = 0;
	int i, dims = cvGetDims(sparsemat);
	CvSparseMatIterator it;
	CvSparseNode* node = cvInitSparseMatIterator(sparsemat, &it);
	
	for(; node != 0; node = cvGetNextSparseNode(&it))
	{
	    int* idx = CV_NODE_IDX(array, node);
	    float val = *(float*)CV_NODE_VAL(array, node);
	    printf("M");
	    for(i = 0; i < dims; i++ )
	        printf("[%d]", idx[i]);
	    printf("=%g\n", val);
	
	    sum += val;
	}
	
	printf("nTotal sum = %g\n", sum);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat_iterator

		- Sparse array iterator

.. index:: pair: function; cvGetNumThreads
.. _doxid-d2/df8/group__core__c_1gaaa96561d617d4ae411208fd664de38cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetNumThreads(void)

retrieve/set the number of threads used in OpenMP implementations

.. index:: pair: function; cvGetOptimalDFTSize
.. _doxid-d2/df8/group__core__c_1ga30a805a371922673f75921ea830d6521:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetOptimalDFTSize(int size0)

Finds optimal DFT vector size >= size0

.. index:: pair: function; cvGetRawData
.. _doxid-d2/df8/group__core__c_1ga7c04a4fbd5e246589cd2d6d95958ddd0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvGetRawData(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`** data,
		int* step = NULL,
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>`* roi_size = NULL
		)

Retrieves low-level information about the array.

The function fills output variables with low-level information about the array data. All output

parameters are optional, so some of the pointers may be set to NULL. If the array is :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` with ROI set, the parameters of ROI are returned.

The following example shows how to get access to array elements. It computes absolute values of the array elements :

.. ref-code-block:: cpp

	float* data;
	int step;
	CvSize size;
	
	cvGetRawData(array, (uchar**)&data, &step, &size);
	step /= sizeof(data[0]);
	
	for(int y = 0; y < size.height; y++, data += step )
	    for(int x = 0; x < size.width; x++ )
	        data[x] = (float)fabs(data[x]);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array header

	*
		- data

		- Output pointer to the whole image origin or ROI origin if ROI is set

	*
		- step

		- Output full row length in bytes

	*
		- roi_size

		- Output ROI size

.. index:: pair: function; cvGetReal1D
.. _doxid-d2/df8/group__core__c_1gabfea97273973ef738392685f39ff3833:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvGetReal1D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0
		)

Return a specific element of single-channel 1D, 2D, 3D or nD array.

Returns a specific element of a single-channel array. If the array has multiple channels, a runtime error is raised. Note that Get?D functions can be used safely for both single-channel and multiple-channel arrays though they are a bit slower.

In the case of a sparse array the functions return 0 if the requested node does not exist (no new node is created by the functions).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array. Must have a single channel.

	*
		- idx0

		- The first zero-based component of the element index

.. index:: pair: function; cvGetReal2D
.. _doxid-d2/df8/group__core__c_1ga2a556983898348f17684736ad83a881d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvGetReal2D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvGetReal3D
.. _doxid-d2/df8/group__core__c_1ga656f0d27e0f80006d03264cd14cedd56:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvGetReal3D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvGetRealND
.. _doxid-d2/df8/group__core__c_1ga53205d474fa01fd1a9c2d23a830bb18e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvGetRealND(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array. Must have a single channel.

	*
		- idx

		- Array of the element indices

.. index:: pair: function; cvGetRootFileNode
.. _doxid-d2/df8/group__core__c_1gaeb757c6d6cf782be12c53bbc73497073:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`*
	cvGetRootFileNode(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		int stream_index = 0
		)

Retrieves one of the top-level nodes of the file storage.

The function returns one of the top-level file nodes. The top-level nodes do not have a name, they correspond to the streams that are stored one after another in the file storage. If the index is out of range, the function returns a NULL pointer, so all the top-level nodes can be iterated by subsequent calls to the function with stream_index=0,1,..., until the NULL pointer is returned. This function can be used as a base for recursive traversal of the file storage.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- stream_index

		- Zero-based index of the stream. See cvStartNextStream . In most cases, there is only one stream in the file; however, there can be several.

.. index:: pair: function; cvGetRow
.. _doxid-d2/df8/group__core__c_1ga01397587170b5aa4c51ec62b01a90d0e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetRow(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int row
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- submat

		- Pointer to the resulting sub-array header

	*
		- row

		- Zero-based index of the selected row

.. index:: pair: function; cvGetRows
.. _doxid-d2/df8/group__core__c_1gadcef809bfbbff65803f57678488f0df3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetRows(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		int start_row,
		int end_row,
		int delta_row = 1
		)

Returns array row or row span.

The functions return the header, corresponding to a specified row/row span of the input array. cvGetRow(arr, submat, row) is a shortcut for cvGetRows(arr, submat, row, row+1).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- submat

		- Pointer to the resulting sub-array header

	*
		- start_row

		- Zero-based index of the starting row (inclusive) of the span

	*
		- end_row

		- Zero-based index of the ending row (exclusive) of the span

	*
		- delta_row

		- Index step in the row span. That is, the function extracts every delta_row -th row from start_row and up to (but not including) end_row .

.. index:: pair: function; cvGetSeqElem
.. _doxid-d2/df8/group__core__c_1ga8baa6a0a77de246723b2c22a05a78223:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	cvGetSeqElem(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int index
		)

Retrieves pointer to specified sequence element. Negative indices are supported and mean counting from the end (e.g -1 means the last sequence element)

.. index:: pair: function; cvGetSeqReaderPos
.. _doxid-d2/df8/group__core__c_1ga8c808ce3c5f3d01187c5e6f1deed418d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetSeqReaderPos(:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader)

Returns current sequence reader position (currently observed sequence element)

.. index:: pair: function; cvGetSetElem
.. _doxid-d2/df8/group__core__c_1ga2e86d337ef7019258d301b68046e7b86:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`*
	cvGetSetElem(
		const :ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		int idx
		)

Returns a set element by index. If the element doesn't belong to the set, NULL is returned

.. index:: pair: function; cvGetSize
.. _doxid-d2/df8/group__core__c_1ga97611258cc31692b19ccf41bbea8a07d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSize<doxid-da/d4d/struct_cv_size>`
	cvGetSize(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Returns size of matrix or image ROI.

The function returns number of rows (:ref:`CvSize::height <doxid-da/d4d/struct_cv_size_1ac743399a59a7a2f302091b9180d23673>`) and number of columns (:ref:`CvSize::width <doxid-da/d4d/struct_cv_size_1a2b1a1518e624c74c5a0e24c6cc1c3170>`) of the input matrix or image. In the case of image the size of ROI is returned.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- array header

.. index:: pair: function; cvGetSubRect
.. _doxid-d2/df8/group__core__c_1ga164c89ed1f20ca79fad30eeffd34f057:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvGetSubRect(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* submat,
		:ref:`CvRect<doxid-de/d44/struct_cv_rect>` rect
		)

Returns matrix header corresponding to the rectangular sub-array of input image or matrix.

The function returns header, corresponding to a specified rectangle of the input array. In other

words, it allows the user to treat a rectangular part of input array as a stand-alone array. ROI is taken into account by the function so the sub-array of ROI is actually extracted.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- submat

		- Pointer to the resultant sub-array header

	*
		- rect

		- Zero-based coordinates of the rectangle of interest

.. index:: pair: function; cvGetThreadNum
.. _doxid-d2/df8/group__core__c_1ga08083bfa346c59475bef003caa125c64:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGetThreadNum(void)

get index of the thread being executed

.. index:: pair: function; cvGetTickCount
.. _doxid-d2/df8/group__core__c_1ga71fb1815947c168de6f71e5d4e99d747:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`
	cvGetTickCount(void)

helper functions for RNG initialization and accurate time measurement: uses internal clock counter on x86

.. index:: pair: function; cvGraphAddEdge
.. _doxid-d2/df8/group__core__c_1gada87ddbca4f11e603538a572311693a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGraphAddEdge(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int start_idx,
		int end_idx,
		const :ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`* edge = NULL,
		:ref:`CvGraphEdge<doxid-d4/ded/struct_cv_graph_edge>`** inserted_edge = NULL
		)

Link two vertices specifed by indices or pointers if they are not connected or return pointer to already existing edge connecting the vertices. Functions return 1 if a new edge was created, 0 otherwise

.. index:: pair: function; cvGraphAddVtx
.. _doxid-d2/df8/group__core__c_1ga819619b8027948e272cbfdc780448328:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGraphAddVtx(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		const :ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`* vtx = NULL,
		:ref:`CvGraphVtx<doxid-d9/d3e/struct_cv_graph_vtx>`** inserted_vtx = NULL
		)

Adds new vertex to the graph

.. index:: pair: function; cvGraphRemoveEdge
.. _doxid-d2/df8/group__core__c_1gad34298b891caee25438310ed4c60fd5c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvGraphRemoveEdge(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int start_idx,
		int end_idx
		)

Remove edge connecting two vertices

.. index:: pair: function; cvGraphRemoveVtx
.. _doxid-d2/df8/group__core__c_1ga4073c66f023b77686e14b744886aab42:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGraphRemoveVtx(
		:ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int index
		)

Removes vertex from the graph together with all incident edges

.. index:: pair: function; cvGraphVtxDegree
.. _doxid-d2/df8/group__core__c_1ga9e925525afd42811fff56787a8a051de:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGraphVtxDegree(
		const :ref:`CvGraph<doxid-d3/d47/struct_cv_graph>`* graph,
		int vtx_idx
		)

Count number of edges incident to the vertex

.. index:: pair: function; cvGuiBoxReport
.. _doxid-d2/df8/group__core__c_1gad114536bacaa68586e1eabbda0c8c915:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvGuiBoxReport(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line,
		void* userdata
		)

Output to MessageBox(WIN32)

.. index:: pair: function; cvIncRefData
.. _doxid-d2/df8/group__core__c_1ga32771c08029437990b0824fd5cfa3c84:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvIncRefData(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Increments array data reference counter.

The function increments :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` or :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` data reference counter and returns the new counter value if the reference counter pointer is not NULL, otherwise it returns zero.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array header

.. index:: pair: function; cvInitImageHeader
.. _doxid-d2/df8/group__core__c_1ga51da3d9e3f93ce336cee192e4719a1ef:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`*
	cvInitImageHeader(
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image,
		:ref:`CvSize<doxid-da/d4d/struct_cv_size>` size,
		int depth,
		int channels,
		int origin = 0,
		int align = 4
		)

Initializes an image header that was previously allocated.

The returned IplImage\* points to the initialized header.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Image header to initialize

	*
		- size

		- Image width and height

	*
		- depth

		- Image depth (see cvCreateImage )

	*
		- channels

		- Number of channels (see cvCreateImage )

	*
		- origin

		- Top-left IPL_ORIGIN_TL or bottom-left IPL_ORIGIN_BL

	*
		- align

		- Alignment for image rows, typically 4 or 8 bytes

.. index:: pair: function; cvInitMatHeader
.. _doxid-d2/df8/group__core__c_1gae91cd88040f88a69a1b4885de33e5fe6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvInitMatHeader(
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat,
		int rows,
		int cols,
		int type,
		void* data = NULL,
		int step = 0x7fffffff
		)

Initializes a pre-allocated matrix header.

This function is often used to process raw data with OpenCV matrix functions. For example, the following code computes the matrix product of two matrices, stored as ordinary arrays:

.. ref-code-block:: cpp

	double a[] = { 1, 2, 3, 4,
	               5, 6, 7, 8,
	               9, 10, 11, 12 };
	
	double b[] = { 1, 5, 9,
	               2, 6, 10,
	               3, 7, 11,
	               4, 8, 12 };
	
	double c[9];
	CvMat Ma, Mb, Mc ;
	
	cvInitMatHeader(&Ma, 3, 4, CV_64FC1, a);
	cvInitMatHeader(&Mb, 4, 3, CV_64FC1, b);
	cvInitMatHeader(&Mc, 3, 3, CV_64FC1, c);
	
	cvMatMulAdd(&Ma, &Mb, 0, &Mc);
	// the c array now contains the product of a (3x4) and b (4x3)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- A pointer to the matrix header to be initialized

	*
		- rows

		- Number of rows in the matrix

	*
		- cols

		- Number of columns in the matrix

	*
		- type

		- Type of the matrix elements, see cvCreateMat .

	*
		- data

		- Optional: data pointer assigned to the matrix header

	*
		- step

		- Optional: full row width in bytes of the assigned data. By default, the minimal possible step is used which assumes there are no gaps between subsequent rows of the matrix.

.. index:: pair: function; cvInitMatNDHeader
.. _doxid-d2/df8/group__core__c_1ga94368400204e8923082c8ab4e9f7290c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`*
	cvInitMatNDHeader(
		:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`* mat,
		int dims,
		const int* sizes,
		int type,
		void* data = NULL
		)

Initializes a pre-allocated multi-dimensional array header.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- A pointer to the array header to be initialized

	*
		- dims

		- The number of array dimensions

	*
		- sizes

		- An array of dimension sizes

	*
		- type

		- Type of array elements, see cvCreateMat

	*
		- data

		- Optional data pointer assigned to the matrix header

.. index:: pair: function; cvInitNArrayIterator
.. _doxid-d2/df8/group__core__c_1gaa75bdbfa6bf4209f83660081b247db56:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvInitNArrayIterator(
		int count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** arrs,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask,
		:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`* stubs,
		:ref:`CvNArrayIterator<doxid-de/d3b/struct_cv_n_array_iterator>`* array_iterator,
		int flags = 0
		)

initializes iterator that traverses through several arrays simulteneously (the function together with cvNextArraySlice is used for N-ari element-wise operations)

.. index:: pair: function; cvInitSparseMatIterator
.. _doxid-d2/df8/group__core__c_1ga6ffbc97a53be80997948b0e08a3cd4fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSparseNode<doxid-da/d78/struct_cv_sparse_node>`*
	cvInitSparseMatIterator(
		const :ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`* mat,
		:ref:`CvSparseMatIterator<doxid-d3/d9d/struct_cv_sparse_mat_iterator>`* mat_iterator
		)

Initializes sparse array elements iterator.

The function initializes iterator of sparse array elements and returns pointer to the first element, or NULL if the array is empty.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- Input array

	*
		- mat_iterator

		- Initialized iterator

.. index:: pair: function; cvInRange
.. _doxid-d2/df8/group__core__c_1ga88fd8c24f2a348f8282ccc237c445518:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvInRange(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* lower,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* upper,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = lower(idx) <= src(idx) < upper(idx)

.. index:: pair: function; cvInRangeS
.. _doxid-d2/df8/group__core__c_1ga7803c41d43fc9617d0feeb36445bf2da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvInRangeS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` lower,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` upper,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = lower <= src(idx) < upper

.. index:: pair: function; cvInsertNodeIntoTree
.. _doxid-d2/df8/group__core__c_1ga67b86beb1e5d61352674edf3b4976578:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvInsertNodeIntoTree(
		void* node,
		void* parent,
		void* frame
		)

Inserts sequence into tree with specified "parent" sequence. If parent is equal to frame (e.g. the most external contour), then added contour will have null pointer to parent.

.. index:: pair: function; cvInvert
.. _doxid-d2/df8/group__core__c_1ga2430b21e737e3669b9f811d671265a9a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvInvert(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int method = 0
		)

Inverts matrix

.. index:: pair: function; cvLoad
.. _doxid-d2/df8/group__core__c_1ga1dafba80b8856132deb18e0ed61e1c2f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvLoad(
		const char* filename,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* memstorage = NULL,
		const char* name = NULL,
		const char** real_name = NULL
		)

Loads an object from a file.

The function loads an object from a file. It basically reads the specified file, find the first top-level node and calls cvRead for that node. If the file node does not have type information or the type information can not be found by the type name, the function returns NULL. After the object is loaded, the file storage is closed and all the temporary buffers are deleted. Thus, to load a dynamic structure, such as a sequence, contour, or graph, one should pass a valid memory storage destination to the function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- File name

	*
		- memstorage

		- Memory storage for dynamic structures, such as :ref:`CvSeq <doxid-dd/d74/struct_cv_seq>` or :ref:`CvGraph <doxid-d3/d47/struct_cv_graph>`. It is not used for matrices or images.

	*
		- name

		- Optional object name. If it is NULL, the first top-level object in the storage will be loaded.

	*
		- real_name

		- Optional output parameter that will contain the name of the loaded object (useful if name=NULL )

.. index:: pair: function; cvLog
.. _doxid-d2/df8/group__core__c_1ga212acf98778141c97d213d2f839a7038:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvLog(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

Calculates natural logarithms: dst(idx) = log(abs(src(idx))). Logarithm of 0 gives large negative number(~-700) Maximal relative error is ~3e-7 for single-precision output

.. index:: pair: function; cvLUT
.. _doxid-d2/df8/group__core__c_1gad6502f5e7cb0783f36c60cc54d38117e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvLUT(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* lut
		)

Does look-up transformation. Elements of the source array (that should be 8uC1 or 8sC1) are used as indexes in lutarr 256-element table

.. index:: pair: function; cvMahalanobis
.. _doxid-d2/df8/group__core__c_1gabe1671b3c05ed4c83618a7d6747eb306:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvMahalanobis(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* vec1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* vec2,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat
		)

Calculates Mahalanobis(weighted) distance

.. index:: pair: function; cvMakeSeqHeaderForArray
.. _doxid-d2/df8/group__core__c_1ga8960f65fc52a7aef5e7dc54eb6f00978:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	cvMakeSeqHeaderForArray(
		int seq_type,
		int header_size,
		int elem_size,
		void* elements,
		int total,
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSeqBlock<doxid-d7/d77/struct_cv_seq_block>`* block
		)

Creates sequence header for array. After that all the operations on sequences that do not alter the content can be applied to the resultant sequence

.. index:: pair: function; cvMax
.. _doxid-d2/df8/group__core__c_1gac99537e039f77be666f89c1586a1b7b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMax(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = max(src1(idx),src2(idx))

.. index:: pair: function; cvMaxS
.. _doxid-d2/df8/group__core__c_1ga0fde09cc15fb090d64dd4481f0566dca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMaxS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		double value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = max(src(idx),value)

.. index:: pair: function; cvMemStorageAlloc
.. _doxid-d2/df8/group__core__c_1ga5c6d0d4ecb96fdd602c09ca4a8cf4d9b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvMemStorageAlloc(
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size
		)

Allocates continuous buffer of the specified size in the storage

.. index:: pair: function; cvMemStorageAllocString
.. _doxid-d2/df8/group__core__c_1ga3490d2c19a3be0ca64ae98e242ade078:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvString<doxid-dd/d0b/struct_cv_string>`
	cvMemStorageAllocString(
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		const char* ptr,
		int len = -1
		)

Allocates string in memory storage

.. index:: pair: function; cvMerge
.. _doxid-d2/df8/group__core__c_1gaf8188655c24a358a48470bf4a5c73eb9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMerge(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src0,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src3,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

Merges a set of single-channel arrays into the single multi-channel array or inserts one particular [color] plane to the array

.. index:: pair: function; cvMin
.. _doxid-d2/df8/group__core__c_1ga6574d11e5b03d5f5ce370ba4ab58bc9f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMin(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = min(src1(idx),src2(idx))

.. index:: pair: function; cvMinMaxLoc
.. _doxid-d2/df8/group__core__c_1ga15af09692571ade79f3b24389673881d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMinMaxLoc(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		double* min_val,
		double* max_val,
		:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`* min_loc = NULL,
		:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`* max_loc = NULL,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

Finds global minimum, maximum and their positions

.. index:: pair: function; cvMinS
.. _doxid-d2/df8/group__core__c_1gaa8678fb45069807183df664205fbead5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMinS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		double value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = min(src(idx),value)

.. index:: pair: function; cvMixChannels
.. _doxid-d2/df8/group__core__c_1gaa7d01b7179adb8f0e2d52b66687108f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMixChannels(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** src,
		int src_count,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`** dst,
		int dst_count,
		const int* from_to,
		int pair_count
		)

Copies several channels from input arrays to certain channels of output arrays

.. index:: pair: function; cvMul
.. _doxid-d2/df8/group__core__c_1ga2f89508d4e0e8eb5f8e343359cbfebca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMul(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double scale = 1
		)

dst(idx) = src1(idx) \* src2(idx) \* scale (scaled element-wise multiplication of 2 arrays)

.. index:: pair: function; cvMulSpectrums
.. _doxid-d2/df8/group__core__c_1gaf174a6acbba2d439277f72678107a764:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMulSpectrums(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int flags
		)

Multiply results of DFTs: DFT(X)\*DFT(Y) or DFT(X)\*conj(DFT(Y))



.. rubric:: See also:

core_c_DftFlags "flags"

.. index:: pair: function; cvMulTransposed
.. _doxid-d2/df8/group__core__c_1ga85c19308ce431e3ed1966d4f5df4adcc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvMulTransposed(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int order,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* delta = NULL,
		double scale = 1.
		)

Calculates (A-delta)\*(A-delta)^T (order=0) or (A-delta)^T\*(A-delta) (order=1)

.. index:: pair: function; cvNextGraphItem
.. _doxid-d2/df8/group__core__c_1ga0f69da3871e1a32f001e496f46ecd7d6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvNextGraphItem(:ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`* scanner)

Get next graph element

.. index:: pair: function; cvNextNArraySlice
.. _doxid-d2/df8/group__core__c_1ga714288a17d9cfd742d6ddf4f50cacc7a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvNextNArraySlice(:ref:`CvNArrayIterator<doxid-de/d3b/struct_cv_n_array_iterator>`* array_iterator)

returns zero value if iteration is finished, non-zero (slice length) otherwise

.. index:: pair: function; cvNorm
.. _doxid-d2/df8/group__core__c_1gad38dfdc0246c7e0bd0b15ab93a75b10a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvNorm(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr2 = NULL,
		int norm_type = 4,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

Finds norm, difference norm or relative difference norm for an array (or two arrays)



.. rubric:: See also:

ref core_c_NormFlags "flags"

.. index:: pair: function; cvNormalize
.. _doxid-d2/df8/group__core__c_1gad5f3dc40ee5c7580173d044967e230d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvNormalize(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double a = 1.,
		double b = 0.,
		int norm_type = 4,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)



.. rubric:: See also:

ref core_c_NormFlags "flags"

.. index:: pair: function; cvNot
.. _doxid-d2/df8/group__core__c_1gaac21fb414811be822643cf670072bf1c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvNot(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst(idx) = ~src(idx)

.. index:: pair: function; cvNulDevReport
.. _doxid-d2/df8/group__core__c_1ga5e6241cfbe1c221ec13e621bd8a34d22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvNulDevReport(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line,
		void* userdata
		)

Output nothing

.. index:: pair: function; cvOpenFileStorage
.. _doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`*
	cvOpenFileStorage(
		const char* filename,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* memstorage,
		int flags,
		const char* encoding = NULL
		)

Opens file storage for reading or writing data.

The function opens file storage for reading or writing data. In the latter case, a new file is created or an existing file is rewritten. The type of the read or written file is determined by the filename extension: .xml for XML, .yml or .yaml for YAML and .json for JSON.

At the same time, it also supports adding parameters like "example.xml?base64". The three ways are the same:

.. ref-code-block:: cpp

	fs = :ref:`cvOpenFileStorage <doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade>`( "example.yml?base64", 0, :ref:`CV_STORAGE_WRITE <doxid-d2/df8/group__core__c_1ga45407b3c2338d30348ff51d576c7f204>` );



.. ref-code-block:: cpp

	fs = :ref:`cvOpenFileStorage <doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade>`( "example.yml"       , 0, :ref:`CV_STORAGE_WRITE_BASE64 <doxid-d2/df8/group__core__c_1gac4a1243b897e37fe1b13247b027e2460>` );



.. ref-code-block:: cpp

	fs = :ref:`cvOpenFileStorage <doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade>`( "example.yml"       , 0, :ref:`CV_STORAGE_WRITE <doxid-d2/df8/group__core__c_1ga45407b3c2338d30348ff51d576c7f204>` | :ref:`CV_STORAGE_BASE64 <doxid-d2/df8/group__core__c_1ga2039e96dd8cba6fe966b6cd62a34225e>` );

The function returns a pointer to the CvFileStorage structure. If the file cannot be opened then the function returns NULL.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- Name of the file associated with the storage

	*
		- memstorage

		- Memory storage used for temporary data and for : storing dynamic structures, such as :ref:`CvSeq <doxid-dd/d74/struct_cv_seq>` or :ref:`CvGraph <doxid-d3/d47/struct_cv_graph>`. If it is NULL, a temporary memory storage is created and used.

	*
		- flags

		- 
		  Can be one of the following: * **CV_STORAGE_READ** the storage is open for reading
		  
		  * **CV_STORAGE_WRITE** the storage is open for writing
		  
		  (use **CV_STORAGE_WRITE \| CV_STORAGE_WRITE_BASE64** to write rawdata in Base64)

	*
		- encoding

		-

.. index:: pair: function; cvOr
.. _doxid-d2/df8/group__core__c_1ga5fd765a55773617628692c610869606f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvOr(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(idx) = src1(idx) \| src2(idx)

.. index:: pair: function; cvOrS
.. _doxid-d2/df8/group__core__c_1ga56c0d0cd1b6247e339b30e9b4c609968:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvOrS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(idx) = src(idx) \| value

.. index:: pair: function; cvPerspectiveTransform
.. _doxid-d2/df8/group__core__c_1gaa266f6cb8bba1e82057328fc22829da0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvPerspectiveTransform(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat
		)

Does perspective transform on every element of input array

.. index:: pair: function; cvPolarToCart
.. _doxid-d2/df8/group__core__c_1ga17f8fc405d8ec373d62e1b967b7bb0b3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvPolarToCart(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* magnitude,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* angle,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* x,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* y,
		int angle_in_degrees = 0
		)

Does polar->cartesian coordinates conversion. Either of output components (magnitude or angle) is optional. If magnitude is missing it is assumed to be all 1's

.. index:: pair: function; cvPow
.. _doxid-d2/df8/group__core__c_1ga6da0e88830827df7b8a11b942829f7db:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvPow(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		double power
		)

Does powering: dst(idx) = src(idx)^power

.. index:: pair: function; cvPtr1D
.. _doxid-d2/df8/group__core__c_1gad3785099caa304b14a19680ede001b5f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	cvPtr1D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int* type = NULL
		)

Return pointer to a particular array element.

The functions return a pointer to a specific array element. Number of array dimension should match to the number of indices passed to the function except for cvPtr1D function that can be used for sequential access to 1D, 2D or nD dense arrays.

The functions can be used for sparse arrays as well - if the requested node does not exist they create it and set it to zero.

All these as well as other functions accessing array elements ( cvGetND , cvGetRealND , cvSet , cvSetND , cvSetRealND ) raise an error in case if the element index is out of range.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx0

		- The first zero-based component of the element index

	*
		- type

		- Optional output parameter: type of matrix elements

.. index:: pair: function; cvPtr2D
.. _doxid-d2/df8/group__core__c_1ga596c5c68f733ed12720b72b4626237c7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	cvPtr2D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int* type = NULL
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvPtr3D
.. _doxid-d2/df8/group__core__c_1ga981a481ffa19274a2aaa0a69e431d807:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	cvPtr3D(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2,
		int* type = NULL
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvPtrND
.. _doxid-d2/df8/group__core__c_1ga748b4ecfb2d28d85e1606dfb41f0850d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`*
	cvPtrND(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx,
		int* type = NULL,
		int create_node = 1,
		unsigned* precalc_hashval = NULL
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx

		- Array of the element indices

	*
		- type

		- Optional output parameter: type of matrix elements

	*
		- create_node

		- Optional input parameter for sparse matrices. Non-zero value of the parameter means that the requested element is created if it does not exist already.

	*
		- precalc_hashval

		- Optional input parameter for sparse matrices. If the pointer is not NULL, the function does not recalculate the node hash value, but takes it from the specified location. It is useful for speeding up pair-wise operations (TODO: provide an example)

.. index:: pair: function; cvRandArr
.. _doxid-d2/df8/group__core__c_1gaba7dd9bd9b94b47073c43181197e0608:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvRandArr(
		:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int dist_type,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` param1,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` param2
		)

Fills an array with random numbers and updates the RNG state.

The function fills the destination array with uniformly or normally distributed random numbers.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rng

		- CvRNG state initialized by cvRNG

	*
		- arr

		- The destination array

	*
		- dist_type

		- 
		  Distribution type * **CV_RAND_UNI** uniform distribution
		  
		  * **CV_RAND_NORMAL** normal or Gaussian distribution

	*
		- param1

		- The first parameter of the distribution. In the case of a uniform distribution it is the inclusive lower boundary of the random numbers range. In the case of a normal distribution it is the mean value of the random numbers.

	*
		- param2

		- The second parameter of the distribution. In the case of a uniform distribution it is the exclusive upper boundary of the random numbers range. In the case of a normal distribution it is the standard deviation of the random numbers.



.. rubric:: See also:

randu, randn, RNG::fill.

.. index:: pair: function; cvRange
.. _doxid-d2/df8/group__core__c_1gac4d5960d5c67243fee6a747e9ad4d03b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`*
	cvRange(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		double start,
		double end
		)

Fills matrix with given range of numbers

.. index:: pair: function; cvRead
.. _doxid-d2/df8/group__core__c_1ga33a9d5aa389a4391fc83b63f295af401:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvRead(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		:ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* attributes = NULL
		)

Decodes an object and returns a pointer to it.

The function decodes a user object (creates an object in a native representation from the file storage subtree) and returns it. The object to be decoded must be an instance of a registered type that supports the read method (see :ref:`CvTypeInfo <doxid-d8/d85/struct_cv_type_info>`). The type of the object is determined by the type name that is encoded in the file. If the object is a dynamic structure, it is created either in memory storage and passed to cvOpenFileStorage or, if a NULL pointer was passed, in temporary memory storage, which is released when cvReleaseFileStorage is called. Otherwise, if the object is not a dynamic structure, it is created in a heap and should be released with a specialized function or by using the generic cvRelease.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- node

		- The root object node

	*
		- attributes

		- Unused parameter

.. index:: pair: function; cvReadByName
.. _doxid-d2/df8/group__core__c_1gadd102c14d0dc23839b5db1c8b97b5155:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cvReadByName(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* attributes = NULL
		)

Finds an object by name and decodes it.

The function is a simple superposition of cvGetFileNodeByName and cvRead.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- map

		- The parent map. If it is NULL, the function searches a top-level node.

	*
		- name

		- The node name

	*
		- attributes

		- Unused parameter

.. index:: pair: function; cvReadInt
.. _doxid-d2/df8/group__core__c_1ga62ee4340b0d2d19c9d01c2605856bb60:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvReadInt(
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		int default_value = 0
		)

Retrieves an integer value from a file node.

The function returns an integer that is represented by the file node. If the file node is NULL, the default_value is returned (thus, it is convenient to call the function right after cvGetFileNode without checking for a NULL pointer). If the file node has type CV_NODE_INT, then node->data.i is returned. If the file node has type CV_NODE_REAL, then node->data.f is converted to an integer and returned. Otherwise the error is reported.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- node

		- File node

	*
		- default_value

		- The value that is returned if node is NULL

.. index:: pair: function; cvReadIntByName
.. _doxid-d2/df8/group__core__c_1gac039dca5395481d2d90092895ff468e2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvReadIntByName(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		int default_value = 0
		)

Finds a file node and returns its value.

The function is a simple superposition of cvGetFileNodeByName and cvReadInt.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- map

		- The parent map. If it is NULL, the function searches a top-level node.

	*
		- name

		- The node name

	*
		- default_value

		- The value that is returned if the file node is not found

.. index:: pair: function; cvReadRawData
.. _doxid-d2/df8/group__core__c_1ga55f1ceba9f2d334cc3167f74e9711d34:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReadRawData(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* src,
		void* dst,
		const char* dt
		)

Reads multiple numbers.

The function reads elements from a file node that represents a sequence of scalars.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- src

		- The file node (a sequence) to read numbers from

	*
		- dst

		- Pointer to the destination array

	*
		- dt

		- Specification of each array element. It has the same format as in cvWriteRawData .

.. index:: pair: function; cvReadRawDataSlice
.. _doxid-d2/df8/group__core__c_1gae801105812731fa0055cae1cad11bd48:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReadRawDataSlice(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader,
		int count,
		void* dst,
		const char* dt
		)

Initializes file node sequence reader.

The function reads one or more elements from the file node, representing a sequence, to a user-specified array. The total number of read sequence elements is a product of total and the number of components in each array element. For example, if dt=2if, the function will read total\*3 sequence elements. As with any sequence, some parts of the file node sequence can be skipped or read repeatedly by repositioning the reader using cvSetSeqReaderPos.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- reader

		- The sequence reader. Initialize it with cvStartReadRawData .

	*
		- count

		- The number of elements to read

	*
		- dst

		- Pointer to the destination array

	*
		- dt

		- Specification of each array element. It has the same format as in cvWriteRawData .

.. index:: pair: function; cvReadReal
.. _doxid-d2/df8/group__core__c_1ga4f1cf91cf28639f9f85bb9671e1b4aa4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvReadReal(
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		double default_value = 0.
		)

Retrieves a floating-point value from a file node.

The function returns a floating-point value that is represented by the file node. If the file node is NULL, the default_value is returned (thus, it is convenient to call the function right after cvGetFileNode without checking for a NULL pointer). If the file node has type CV_NODE_REAL , then node->data.f is returned. If the file node has type CV_NODE_INT , then node-:math:>data.f is converted to floating-point and returned. Otherwise the result is not determined.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- node

		- File node

	*
		- default_value

		- The value that is returned if node is NULL

.. index:: pair: function; cvReadRealByName
.. _doxid-d2/df8/group__core__c_1gaffacf88df914ad738814738fb8a2e605:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvReadRealByName(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		double default_value = 0.
		)

Finds a file node and returns its value.

The function is a simple superposition of cvGetFileNodeByName and cvReadReal .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- map

		- The parent map. If it is NULL, the function searches a top-level node.

	*
		- name

		- The node name

	*
		- default_value

		- The value that is returned if the file node is not found

.. index:: pair: function; cvReadString
.. _doxid-d2/df8/group__core__c_1ga2ed11ffa9e2f479cbbe412b20f92f720:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	cvReadString(
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		const char* default_value = NULL
		)

Retrieves a text string from a file node.

The function returns a text string that is represented by the file node. If the file node is NULL, the default_value is returned (thus, it is convenient to call the function right after cvGetFileNode without checking for a NULL pointer). If the file node has type CV_NODE_STR , then node-:math:>data.str.ptr is returned. Otherwise the result is not determined.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- node

		- File node

	*
		- default_value

		- The value that is returned if node is NULL

.. index:: pair: function; cvReadStringByName
.. _doxid-d2/df8/group__core__c_1ga64e0beb63175eb9a822b881e85c9ec38:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const char*
	cvReadStringByName(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* map,
		const char* name,
		const char* default_value = NULL
		)

Finds a file node by its name and returns its value.

The function is a simple superposition of cvGetFileNodeByName and cvReadString .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- map

		- The parent map. If it is NULL, the function searches a top-level node.

	*
		- name

		- The node name

	*
		- default_value

		- The value that is returned if the file node is not found

.. index:: pair: function; cvRedirectError
.. _doxid-d2/df8/group__core__c_1gafa5ca40b52271b769f3e96ece7e7d06f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvErrorCallback<doxid-d2/df8/group__core__c_1ga476c29a11f98720068c3732a1aa950d6>`
	cvRedirectError(
		:ref:`CvErrorCallback<doxid-d2/df8/group__core__c_1ga476c29a11f98720068c3732a1aa950d6>` error_handler,
		void* userdata = NULL,
		void** prev_userdata = NULL
		)

Assigns a new error-handling function

.. index:: pair: function; cvReduce
.. _doxid-d2/df8/group__core__c_1gabcdd12db191e9a3134475a6ef98665fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReduce(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int dim = -1,
		int op = 0
		)



.. rubric:: See also:

:ref:`flags <doxid-d2/df8/group__core__c_1core_c_ReduceFlags>`

.. index:: pair: function; cvRegisterType
.. _doxid-d2/df8/group__core__c_1ga360e9f47506dc39d4ad3179fb64e37a9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvRegisterType(const :ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`* info)

Registers a new type.

The function registers a new type, which is described by info . The function creates a copy of the structure, so the user should delete it after calling the function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- info

		- Type info structure

.. index:: pair: function; cvRelease
.. _doxid-d2/df8/group__core__c_1ga37397a9f27ed4e8a4f5799bb48f53124:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvRelease(void** struct_ptr)

Releases an object.

The function finds the type of a given object and calls release with the double pointer.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- struct_ptr

		- Double pointer to the object

.. index:: pair: function; cvReleaseData
.. _doxid-d2/df8/group__core__c_1ga2c300ac9941face8b49fc4638adc9156:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseData(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Releases array data.

The function releases the array data. In the case of :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` or :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` it simply calls :ref:`cvDecRefData() <doxid-d2/df8/group__core__c_1ga6eef31ca2988177424f6a743defb5fb7>`, that is the function can not deallocate external data. See also the note to cvCreateData .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array header

.. index:: pair: function; cvReleaseFileStorage
.. _doxid-d2/df8/group__core__c_1gaa1ea8e6294d4f55f263bd670e135fa9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseFileStorage(:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`** fs)

Releases file storage.

The function closes the file associated with the storage and releases all the temporary structures. It must be called after all I/O operations with the storage are finished.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- Double pointer to the released file storage

.. index:: pair: function; cvReleaseGraphScanner
.. _doxid-d2/df8/group__core__c_1ga191033e36e9b412d93bed58f2cbe1e95:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseGraphScanner(:ref:`CvGraphScanner<doxid-d4/d17/struct_cv_graph_scanner>`** scanner)

Releases graph scanner.

.. index:: pair: function; cvReleaseImage
.. _doxid-d2/df8/group__core__c_1ga6d14201d7658e0e757398b102da0c959:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseImage(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`** image)

Deallocates the image header and the image data.

This call is a shortened form of :

.. ref-code-block:: cpp

	if(*image )
	{
	    cvReleaseData(*image);
	    cvReleaseImageHeader(image);
	}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Double pointer to the image header

.. index:: pair: function; cvReleaseImageHeader
.. _doxid-d2/df8/group__core__c_1ga239c20502af4779ae8316c35c45ec23e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseImageHeader(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`** image)

Deallocates an image header.

This call is an analogue of :

.. ref-code-block:: cpp

	if(image )
	{
	    iplDeallocate(*image, IPL_IMAGE_HEADER | IPL_IMAGE_ROI);
	    *image = 0;
	}

but it does not use IPL functions by default (see the CV_TURN_ON_IPL_COMPATIBILITY macro).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Double pointer to the image header

.. index:: pair: function; cvReleaseMat
.. _doxid-d2/df8/group__core__c_1ga6419d3a2133a7863bf72d5084d278c9f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseMat(:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`** mat)

Deallocates a matrix.

The function decrements the matrix data reference counter and deallocates matrix header. If the data reference counter is 0, it also deallocates the data. :

.. ref-code-block:: cpp

	if(*mat )
	    cvDecRefData(*mat);
	cvFree((void**)mat);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- Double pointer to the matrix

.. index:: pair: function; cvReleaseMatND
.. _doxid-d2/df8/group__core__c_1gabfe9c4b4c4e6b71c36aea2dcd87694cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseMatND(:ref:`CvMatND<doxid-d7/d5c/struct_cv_mat_n_d>`** mat)

Deallocates a multi-dimensional array.

The function decrements the array data reference counter and releases the array header. If the reference counter reaches 0, it also deallocates the data. :

.. ref-code-block:: cpp

	if(*mat )
	    cvDecRefData(*mat);
	cvFree((void**)mat);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- Double pointer to the array

.. index:: pair: function; cvReleaseMemStorage
.. _doxid-d2/df8/group__core__c_1ga8ea91ef87d47be7414b7d91b98736929:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseMemStorage(:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`** storage)

Releases memory storage. All the children of a parent must be released before the parent. A child storage returns all the blocks to parent when it is released

.. index:: pair: function; cvReleaseSparseMat
.. _doxid-d2/df8/group__core__c_1gaa1b77f8190ec41263242cfbd481d0e3c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvReleaseSparseMat(:ref:`CvSparseMat<doxid-d3/d6a/struct_cv_sparse_mat>`** mat)

Deallocates sparse array.

The function releases the sparse array and clears the array pointer upon exit.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- Double pointer to the array

.. index:: pair: function; cvRemoveNodeFromTree
.. _doxid-d2/df8/group__core__c_1gaddeee21aa735f91468f2d28977da4195:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvRemoveNodeFromTree(
		void* node,
		void* frame
		)

Removes contour from tree (together with the contour children).

.. index:: pair: function; cvRepeat
.. _doxid-d2/df8/group__core__c_1ga5763638d64ce587e3659bb96ca44807e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvRepeat(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

Repeats source 2d array several times in both horizontal and vertical direction to fill destination array

.. index:: pair: function; cvResetImageROI
.. _doxid-d2/df8/group__core__c_1ga99bae13489d2cd489013e1993ece9206:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvResetImageROI(:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image)

Resets the image ROI to include the entire image and releases the ROI structure.

This produces a similar result to the following, but in addition it releases the ROI structure. :

.. ref-code-block:: cpp

	cvSetImageROI(image, cvRect(0, 0, image->width, image->height ));
	cvSetImageCOI(image, 0);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- A pointer to the image header

.. index:: pair: function; cvReshape
.. _doxid-d2/df8/group__core__c_1gaf3423ffc7a26be7707447db5c6ee73d5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`*
	cvReshape(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* header,
		int new_cn,
		int new_rows = 0
		)

Changes shape of matrix/image without copying data.

The function initializes the :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` header so that it points to the same data as the original array but has a different shape - different number of channels, different number of rows, or both.

The following example code creates one image buffer and two image headers, the first is for a 320x240x3 image and the second is for a 960x240x1 image:

.. ref-code-block:: cpp

	IplImage* color_img = cvCreateImage(cvSize(320,240), IPL_DEPTH_8U, 3);
	CvMat gray_mat_hdr;
	IplImage gray_img_hdr, *gray_img;
	cvReshape(color_img, &gray_mat_hdr, 1);
	gray_img = cvGetImage(&gray_mat_hdr, &gray_img_hdr);

And the next example converts a 3x3 matrix to a single 1x9 vector:

.. ref-code-block:: cpp

	CvMat* mat = cvCreateMat(3, 3, CV_32F);
	CvMat row_header, *row;
	row = cvReshape(mat, &row_header, 0, 1);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- header

		- Output header to be filled

	*
		- new_cn

		- New number of channels. 'new_cn = 0' means that the number of channels remains unchanged.

	*
		- new_rows

		- New number of rows. 'new_rows = 0' means that the number of rows remains unchanged unless it needs to be changed according to new_cn value.

.. index:: pair: function; cvReshapeMatND
.. _doxid-d2/df8/group__core__c_1ga907380632d7e86cba50fd50620e06e6e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`*
	cvReshapeMatND(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int sizeof_header,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* header,
		int new_cn,
		int new_dims,
		int* new_sizes
		)

Changes the shape of a multi-dimensional array without copying the data.

The function is an advanced version of cvReshape that can work with multi-dimensional arrays as well (though it can work with ordinary images and matrices) and change the number of dimensions.

Below are the two samples from the cvReshape description rewritten using cvReshapeMatND:

.. ref-code-block:: cpp

	IplImage* color_img = cvCreateImage(cvSize(320,240), IPL_DEPTH_8U, 3);
	IplImage gray_img_hdr, *gray_img;
	gray_img = (IplImage*)cvReshapeMatND(color_img, sizeof(gray_img_hdr), &gray_img_hdr, 1, 0, 0);
	...
	int size[] = { 2, 2, 2 };
	CvMatND* mat = cvCreateMatND(3, size, CV_32F);
	CvMat row_header, *row;
	row = (CvMat*)cvReshapeMatND(mat, sizeof(row_header), &row_header, 0, 1, 0);

In C, the header file for this function includes a convenient macro cvReshapeND that does away with the sizeof_header parameter. So, the lines containing the call to cvReshapeMatND in the examples may be replaced as follow:

.. ref-code-block:: cpp

	gray_img = (IplImage*)cvReshapeND(color_img, &gray_img_hdr, 1, 0, 0);
	...
	row = (CvMat*)cvReshapeND(mat, &row_header, 0, 1, 0);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- sizeof_header

		- Size of output header to distinguish between :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`, :ref:`CvMat <doxid-d6/dda/struct_cv_mat>` and :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` output headers

	*
		- header

		- Output header to be filled

	*
		- new_cn

		- New number of channels. new_cn = 0 means that the number of channels remains unchanged.

	*
		- new_dims

		- New number of dimensions. new_dims = 0 means that the number of dimensions remains the same.

	*
		- new_sizes

		- Array of new dimension sizes. Only new_dims-1 values are used, because the total number of elements must remain the same. Thus, if new_dims = 1, new_sizes array is not used.

.. index:: pair: function; cvRestoreMemStoragePos
.. _doxid-d2/df8/group__core__c_1ga0f48b4ea10890bac8bede6c9a2a5dff1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvRestoreMemStoragePos(
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvMemStoragePos<doxid-d1/d12/struct_cv_mem_storage_pos>`* pos
		)

Restore a storage "free memory" position

.. index:: pair: function; cvSave
.. _doxid-d2/df8/group__core__c_1ga66305f8a331d98e204978f4f0fa327cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSave(
		const char* filename,
		const void* struct_ptr,
		const char* name = NULL,
		const char* comment = NULL,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>` attributes = :ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`()
		)

Saves an object to a file.

The function saves an object to a file. It provides a simple interface to cvWrite .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- File name

	*
		- struct_ptr

		- Object to save

	*
		- name

		- Optional object name. If it is NULL, the name will be formed from filename .

	*
		- comment

		- Optional comment to put in the beginning of the file

	*
		- attributes

		- Optional attributes passed to cvWrite

.. index:: pair: function; cvSaveMemStoragePos
.. _doxid-d2/df8/group__core__c_1gaafefc3e67d2e9aa98e67eca06a2fe44c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSaveMemStoragePos(
		const :ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvMemStoragePos<doxid-d1/d12/struct_cv_mem_storage_pos>`* pos
		)

Remember a storage "free memory" position

.. index:: pair: function; cvScalarToRawData
.. _doxid-d2/df8/group__core__c_1ga189c823c7776f8332944d54a5e02fdaa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvScalarToRawData(
		const :ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`* scalar,
		void* data,
		int type,
		int extend_to_12 = 0
		)

low-level scalar <-> raw data conversion functions

.. index:: pair: function; cvScaleAdd
.. _doxid-d2/df8/group__core__c_1gaea997f1aed0e318862f5dc5018b3cbbd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvScaleAdd(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` scale,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

dst = src1 \* scale + src2

.. index:: pair: function; cvSeqElemIdx
.. _doxid-d2/df8/group__core__c_1gaabbe6cff55f486153fee446ca5adcafc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSeqElemIdx(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* element,
		:ref:`CvSeqBlock<doxid-d7/d77/struct_cv_seq_block>`** block = NULL
		)

Calculates index of the specified sequence element. Returns -1 if element does not belong to the sequence

.. index:: pair: function; cvSeqInsert
.. _doxid-d2/df8/group__core__c_1gafc862c84367e98c355d8c2569df0750a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	cvSeqInsert(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int before_index,
		const void* element = NULL
		)

Inserts a new element in the middle of sequence. cvSeqInsert(seq,0,elem) == cvSeqPushFront(seq,elem)

.. index:: pair: function; cvSeqInsertSlice
.. _doxid-d2/df8/group__core__c_1ga11c5e1294a01d33dc27c527612827904:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqInsertSlice(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int before_index,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* from_arr
		)

Inserts a sequence or array into another sequence

.. index:: pair: function; cvSeqInvert
.. _doxid-d2/df8/group__core__c_1ga7ba485004668410bb69bf18af5ca65fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqInvert(:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq)

Reverses order of sequence elements in-place

.. index:: pair: function; cvSeqPartition
.. _doxid-d2/df8/group__core__c_1ga488e796f7ef8e058e4522c5c327abff2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSeqPartition(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`** labels,
		:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>` is_equal,
		void* userdata
		)

Splits sequence into one or more equivalence classes using the specified criteria

.. index:: pair: function; cvSeqPop
.. _doxid-d2/df8/group__core__c_1gadcc1d2c0b572351bcceebe2aca714f5e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqPop(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* element = NULL
		)

Removes the last element from sequence and optionally saves it

.. index:: pair: function; cvSeqPopFront
.. _doxid-d2/df8/group__core__c_1ga494852e21a01a0aac1ba9faba895772b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqPopFront(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* element = NULL
		)

Removes the first element from sequence and optioanally saves it

.. index:: pair: function; cvSeqPopMulti
.. _doxid-d2/df8/group__core__c_1ga8cafa54adcf3492cc86d6fcbe6eee9c5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqPopMulti(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		void* elements,
		int count,
		int in_front = 0
		)

Removes several elements from the end of sequence and optionally saves them

.. index:: pair: function; cvSeqPush
.. _doxid-d2/df8/group__core__c_1ga3dddd5afb36cc0a4383217e63456aeaa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	cvSeqPush(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* element = NULL
		)

Adds new element to the end of sequence. Returns pointer to the element

.. index:: pair: function; cvSeqPushFront
.. _doxid-d2/df8/group__core__c_1ga3e589faf20665c0951e78c7394273555:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	cvSeqPushFront(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* element = NULL
		)

Adds new element to the beginning of sequence. Returns pointer to it

.. index:: pair: function; cvSeqPushMulti
.. _doxid-d2/df8/group__core__c_1gafabf8b3a359f3d4f2ab4aa7409e869b4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqPushMulti(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* elements,
		int count,
		int in_front = 0
		)

Adds several new elements to the end of sequence

.. index:: pair: function; cvSeqRemove
.. _doxid-d2/df8/group__core__c_1ga19025f70c3d7b8fcfafec4f4469c4f2f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqRemove(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int index
		)

Removes specified sequence element

.. index:: pair: function; cvSeqRemoveSlice
.. _doxid-d2/df8/group__core__c_1gaa60c20f06da2ccd6025588aaf9f5582a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqRemoveSlice(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice
		)

Removes sequence slice

.. index:: pair: function; cvSeqSearch
.. _doxid-d2/df8/group__core__c_1gae00283b51df9886629dd39c25e338559:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`*
	cvSeqSearch(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		const void* elem,
		:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>` func,
		int is_sorted,
		int* elem_idx,
		void* userdata = NULL
		)

Finds element in a [sorted] sequence

.. index:: pair: function; cvSeqSlice
.. _doxid-d2/df8/group__core__c_1gad92f500d2b6b9df37803476991581416:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	cvSeqSlice(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage = NULL,
		int copy_data = 0
		)

Extracts sequence slice (with or without copying sequence elements)

.. index:: pair: function; cvSeqSort
.. _doxid-d2/df8/group__core__c_1ga3680d5beb2d94b9fb4ec6897fb863a04:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSeqSort(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvCmpFunc<doxid-d2/df8/group__core__c_1gabb2b3071d36a5cebb8c0849c88c13447>` func,
		void* userdata = NULL
		)

Sorts sequence in-place given element comparison function

.. index:: pair: function; cvSet
.. _doxid-d2/df8/group__core__c_1gac98818785e8df4d28581e0e5dbece6e6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSet(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

Sets every element of an array to a given value.

The function copies the scalar value to every selected element of the destination array:

.. math::

	\texttt{arr} (I)= \texttt{value} \quad \text{if} \quad \texttt{mask} (I) \ne 0

If array arr is of :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` type, then is ROI used, but COI must not be set.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- The destination array

	*
		- value

		- Fill value

	*
		- mask

		- Operation mask, 8-bit single channel array; specifies elements of the destination array to be changed

.. index:: pair: function; cvSet1D
.. _doxid-d2/df8/group__core__c_1ga081f54bd3baf43efab3b011495dd00fa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSet1D(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		)

Change the particular array element.

The functions assign the new value to a particular array element. In the case of a sparse array the functions create the node if it does not exist yet.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx0

		- The first zero-based component of the element index

	*
		- value

		- The assigned value

.. index:: pair: function; cvSet2D
.. _doxid-d2/df8/group__core__c_1gae2a3b2df90db7c765b033eebd418990c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSet2D(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvSet3D
.. _doxid-d2/df8/group__core__c_1ga0d7acf27fe91db134a9836867466ae4c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSet3D(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvSetAdd
.. _doxid-d2/df8/group__core__c_1ga5931d34703d30f0a3042c79645a561d3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSetAdd(
		:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`* elem = NULL,
		:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`** inserted_elem = NULL
		)

Adds new element to the set and returns pointer to it

.. index:: pair: function; cvSetData
.. _doxid-d2/df8/group__core__c_1ga8558bedfd5348f6e6a509cff806ec5b3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetData(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		void* data,
		int step
		)

Assigns user data to the array header.

The function assigns user data to the array header. Header should be initialized before using cvCreateMatHeader, cvCreateImageHeader, cvCreateMatNDHeader, cvInitMatHeader, cvInitImageHeader or cvInitMatNDHeader.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array header

	*
		- data

		- User data

	*
		- step

		- Full row length in bytes

.. index:: pair: function; cvSetErrMode
.. _doxid-d2/df8/group__core__c_1ga431bbd82f23f470df7385fd91e09ad1c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSetErrMode(int mode)

Sets error processing mode, returns previously used mode

.. index:: pair: function; cvSetErrStatus
.. _doxid-d2/df8/group__core__c_1ga9859fcaf2e826c6d4c5eb9d282e4239e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetErrStatus(int status)

Sets error status silently

.. index:: pair: function; cvSetIdentity
.. _doxid-d2/df8/group__core__c_1ga61db29c113a0ff21db537c7b8a9b298f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetIdentity(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value = :ref:`cvRealScalar<doxid-d2/df8/group__core__c_1gad8364cfff7023fa1a0e51fea54ff9637>`(1)
		)

* Finds selected eigen values and vectors of a symmetric matrix \*/ Makes an identity matrix (mat_ij = i == j)

.. index:: pair: function; cvSetImageCOI
.. _doxid-d2/df8/group__core__c_1gae8a8bae6de75f287faa1bc1e7d58f849:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetImageCOI(
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image,
		int coi
		)

Sets the channel of interest in an :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`.

If the ROI is set to NULL and the coi is *not* 0, the ROI is allocated. Most OpenCV functions do not\* support the COI setting, so to process an individual image/matrix channel one may copy (via cvCopy or cvSplit) the channel to a separate image/matrix, process it and then copy the result back (via cvCopy or cvMerge) if needed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- A pointer to the image header

	*
		- coi

		- The channel of interest. 0 - all channels are selected, 1 - first channel is selected, etc. Note that the channel indices become 1-based.

.. index:: pair: function; cvSetImageROI
.. _doxid-d2/df8/group__core__c_1ga7690607f5f37b7ee7532e252943fcc38:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetImageROI(
		:ref:`IplImage<doxid-dd/d51/struct_ipl_image>`* image,
		:ref:`CvRect<doxid-de/d44/struct_cv_rect>` rect
		)

Sets an image Region Of Interest (ROI) for a given rectangle.

If the original image ROI was NULL and the rect is not the whole image, the ROI structure is allocated.

Most OpenCV functions support the use of ROI and treat the image rectangle as a separate image. For example, all of the pixel coordinates are counted from the top-left (or bottom-left) corner of the ROI, not the original image.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- A pointer to the image header

	*
		- rect

		- The ROI rectangle

.. index:: pair: function; cvSetIPLAllocators
.. _doxid-d2/df8/group__core__c_1ga60809dd241bda467e4f9f1ff85cd9ce7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetIPLAllocators(
		:ref:`Cv_iplCreateImageHeader<doxid-d2/df8/group__core__c_1gaeddeb3d77f6fe10a20d621f5daa6d615>` create_header,
		:ref:`Cv_iplAllocateImageData<doxid-d2/df8/group__core__c_1gabc24dda87213007dd556b4050e3f5073>` allocate_data,
		:ref:`Cv_iplDeallocate<doxid-d2/df8/group__core__c_1ga5934b229ed904f88ccd3b5dcea625f8a>` deallocate,
		:ref:`Cv_iplCreateROI<doxid-d2/df8/group__core__c_1ga704a900c17e943fc6e4dbdb44b4ed303>` create_roi,
		:ref:`Cv_iplCloneImage<doxid-d2/df8/group__core__c_1ga1a945eec1fd79f47a84848926ef01093>` clone_image
		)

Makes OpenCV use IPL functions for allocating :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` and :ref:`IplROI <doxid-d1/d33/struct_ipl_r_o_i>` structures.

Normally, the function is not called directly. Instead, a simple macro :ref:`CV_TURN_ON_IPL_COMPATIBILITY() <doxid-d2/df8/group__core__c_1ga19f3f877176395658850a825d2ef4db4>` is used that calls cvSetIPLAllocators and passes there pointers to IPL allocation functions. :

.. ref-code-block:: cpp

	...
	CV_TURN_ON_IPL_COMPATIBILITY()
	...



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- create_header

		- pointer to a function, creating IPL image header.

	*
		- allocate_data

		- pointer to a function, allocating IPL image data.

	*
		- deallocate

		- pointer to a function, deallocating IPL image.

	*
		- create_roi

		- pointer to a function, creating IPL image ROI (i.e. Region of Interest).

	*
		- clone_image

		- pointer to a function, cloning an IPL image.

.. index:: pair: function; cvSetND
.. _doxid-d2/df8/group__core__c_1ga598956c52902c8b7a20e3edc91164a7d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetND(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx

		- Array of the element indices

	*
		- value

		- The assigned value

.. index:: pair: function; cvSetNew
.. _doxid-d2/df8/group__core__c_1ga6c1865817a39b37db853714bddb90c90:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSetElem<doxid-df/da1/struct_cv_set_elem>`*
	cvSetNew(:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header)

Fast variant of cvSetAdd

.. index:: pair: function; cvSetReal1D
.. _doxid-d2/df8/group__core__c_1ga45bbb7bd2c32e02f15cbab00ff6fb510:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetReal1D(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		double value
		)

Change a specific array element.

The functions assign a new value to a specific element of a single-channel array. If the array has multiple channels, a runtime error is raised. Note that the Set\*D function can be used safely for both single-channel and multiple-channel arrays, though they are a bit slower.

In the case of a sparse array the functions create the node if it does not yet exist.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx0

		- The first zero-based component of the element index

	*
		- value

		- The assigned value

.. index:: pair: function; cvSetReal2D
.. _doxid-d2/df8/group__core__c_1ga7296e236488e10634148d63bcf092fda:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetReal2D(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		double value
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvSetReal3D
.. _doxid-d2/df8/group__core__c_1ga481b00e2d4d2e10736ec49bdacba1ef3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetReal3D(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		int idx0,
		int idx1,
		int idx2,
		double value
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvSetRealND
.. _doxid-d2/df8/group__core__c_1ga4a7f993d6d4f739c897f5c1ef877d691:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetRealND(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr,
		const int* idx,
		double value
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Input array

	*
		- idx

		- Array of the element indices

	*
		- value

		- The assigned value

.. index:: pair: function; cvSetRemove
.. _doxid-d2/df8/group__core__c_1ga3d5a90be9a70a5f281082a4b6a8413de:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetRemove(
		:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		int index
		)

Removes element from the set by its index

.. index:: pair: function; cvSetRemoveByPtr
.. _doxid-d2/df8/group__core__c_1ga208437494b07e6402029989ce360c18f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetRemoveByPtr(
		:ref:`CvSet<doxid-df/d76/struct_cv_set>`* set_header,
		void* elem
		)

Removes set element given its pointer

.. index:: pair: function; cvSetSeqBlockSize
.. _doxid-d2/df8/group__core__c_1gad28b0e89fe6c3189bbbfe5c9eccb8a27:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetSeqBlockSize(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		int delta_elems
		)

Changes default size (granularity) of sequence blocks. The default size is ~1Kbyte

.. index:: pair: function; cvSetSeqReaderPos
.. _doxid-d2/df8/group__core__c_1ga6ce0f831db79375524df3ef0ae00ed8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetSeqReaderPos(
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader,
		int index,
		int is_relative = 0
		)

Changes sequence reader position. It may seek to an absolute or to relative to the current position

.. index:: pair: function; cvSetZero
.. _doxid-d2/df8/group__core__c_1gab7d321e9159b0b1118b11e548e7414b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSetZero(:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Clears the array.

The function clears the array. In the case of dense arrays (:ref:`CvMat <doxid-d6/dda/struct_cv_mat>`, :ref:`CvMatND <doxid-d7/d5c/struct_cv_mat_n_d>` or :ref:`IplImage <doxid-dd/d51/struct_ipl_image>`), :ref:`cvZero(array) <doxid-d2/df8/group__core__c_1ga376f499e3308f2a0e462fead0639e2a7>` is equivalent to cvSet(array,cvScalarAll(0),0). In the case of sparse arrays all the elements are removed.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array to be cleared

.. index:: pair: function; cvSliceLength
.. _doxid-d2/df8/group__core__c_1ga6f6a3783e436a8a3012cedd581294700:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSliceLength(
		:ref:`CvSlice<doxid-d8/d15/struct_cv_slice>` slice,
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq
		)

Calculates length of sequence slice (with support of negative indices).

.. index:: pair: function; cvSolve
.. _doxid-d2/df8/group__core__c_1ga6590dc0edab5bb263e807e2036e327d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSolve(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		int method = 0
		)

Solves linear system (src1)\*(dst) = (src2) (returns 0 if src1 is a singular and CV_LU method is used)

.. index:: pair: function; cvSolveCubic
.. _doxid-d2/df8/group__core__c_1gab69067460759a59f14704eae5f373ec4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvSolveCubic(
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* coeffs,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* roots
		)

Finds real roots of a cubic equation

.. index:: pair: function; cvSolvePoly
.. _doxid-d2/df8/group__core__c_1gacaa5f29f1c95198b639c1ac05e1e8472:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSolvePoly(
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* coeffs,
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* roots2,
		int maxiter = 20,
		int fig = 100
		)

Finds all real and complex roots of a polynomial equation

.. index:: pair: function; cvSplit
.. _doxid-d2/df8/group__core__c_1gacd0a34b115c1a1ec589fd1c27c84ab03:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSplit(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst0,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst1,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst3
		)

Splits a multi-channel array into the set of single-channel arrays or extracts particular [color] plane

.. index:: pair: function; cvStartAppendToSeq
.. _doxid-d2/df8/group__core__c_1gac9a59575c8a15b0eda6e94f14488311b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvStartAppendToSeq(
		:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer
		)

Initializes sequence writer. The new elements will be added to the end of sequence

.. index:: pair: function; cvStartNextStream
.. _doxid-d2/df8/group__core__c_1gabde776bdbdb4042966739b727fd3b1b2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvStartNextStream(:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs)

Starts the next stream.

The function finishes the currently written stream and starts the next stream. In the case of XML the file with multiple streams looks like this:

.. ref-code-block:: cpp

	<opencv_storage>
	<!-- stream #1 data -->
	</opencv_storage>
	<opencv_storage>
	<!-- stream #2 data -->
	</opencv_storage>
	...

The YAML file will look like this:

.. ref-code-block:: cpp

	%YAML 1.0
	# stream #1 data
	...
	---
	# stream #2 data

This is useful for concatenating files or for resuming the writing process.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

.. index:: pair: function; cvStartReadRawData
.. _doxid-d2/df8/group__core__c_1gae8d69a9a8ce68d63b6ce5349710a063d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvStartReadRawData(
		const :ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* src,
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader
		)

Initializes the file node sequence reader.

The function initializes the sequence reader to read data from a file node. The initialized reader can be then passed to cvReadRawDataSlice.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- src

		- The file node (a sequence) to read numbers from

	*
		- reader

		- Pointer to the sequence reader

.. index:: pair: function; cvStartReadSeq
.. _doxid-d2/df8/group__core__c_1ga25c26ca76f5ada78220a80688d37602c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvStartReadSeq(
		const :ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`* seq,
		:ref:`CvSeqReader<doxid-d0/d51/struct_cv_seq_reader>`* reader,
		int reverse = 0
		)

Initializes sequence reader. The sequence can be read in forward or backward direction

.. index:: pair: function; cvStartWriteSeq
.. _doxid-d2/df8/group__core__c_1ga99d18493150a5f969dc1859f376703b0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvStartWriteSeq(
		int seq_flags,
		int header_size,
		int elem_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage,
		:ref:`CvSeqWriter<doxid-d3/d27/struct_cv_seq_writer>`* writer
		)

Combination of cvCreateSeq and cvStartAppendToSeq

.. index:: pair: function; cvStartWriteStruct
.. _doxid-d2/df8/group__core__c_1ga93a7dfd1d34ffcd192302a7138aa39df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvStartWriteStruct(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		int struct_flags,
		const char* type_name = NULL,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>` attributes = :ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`()
		)

Starts writing a new structure.

The function starts writing a compound structure (collection) that can be a sequence or a map. After all the structure fields, which can be scalars or structures, are written, cvEndWriteStruct should be called. The function can be used to group some objects or to implement the write function for a some user object (see :ref:`CvTypeInfo <doxid-d8/d85/struct_cv_type_info>`).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- name

		- Name of the written structure. The structure can be accessed by this name when the storage is read.

	*
		- struct_flags

		- 
		  A combination one of the following values:
		  
		  * **CV_NODE_SEQ** the written structure is a sequence (see discussion of CvFileStorage ), that is, its elements do not have a name.
		  
		  * **CV_NODE_MAP** the written structure is a map (see discussion of CvFileStorage ), that is, all its elements have names. One and only one of the two above flags must be specified
		  
		  * **CV_NODE_FLOW** the optional flag that makes sense only for YAML streams. It means that the structure is written as a flow (not as a block), which is more compact. It is recommended to use this flag for structures or arrays whose elements are all scalars.

	*
		- type_name

		- Optional parameter - the object type name. In case of XML it is written as a type_id attribute of the structure opening tag. In the case of YAML it is written after a colon following the structure name (see the example in CvFileStorage description). In case of JSON it is written as a name/value pair. Mainly it is used with user objects. When the storage is read, the encoded type name is used to determine the object type (see :ref:`CvTypeInfo <doxid-d8/d85/struct_cv_type_info>` and cvFindType ).

	*
		- attributes

		- This parameter is not used in the current implementation

.. index:: pair: function; cvStdErrReport
.. _doxid-d2/df8/group__core__c_1ga92414d58d69561feb578391bff6ea37f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvStdErrReport(
		int status,
		const char* func_name,
		const char* err_msg,
		const char* file_name,
		int line,
		void* userdata
		)

Output to console(fprintf(stderr,...))

.. index:: pair: function; cvSub
.. _doxid-d2/df8/group__core__c_1gafc5a5aa0269d356ddce5070eabf14363:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSub(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(mask) = src1(mask) - src2(mask)

.. index:: pair: function; cvSubRS
.. _doxid-d2/df8/group__core__c_1gacb6814be7dbdd159f34cd091ce6cd297:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSubRS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(mask) = value - src(mask)

.. index:: pair: function; cvSubS
.. _doxid-d2/df8/group__core__c_1ga215a67cddaf80f3d2e34bd94c6348c43:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSubS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(mask) = src(mask) - value = src(mask) + (-value)

.. index:: pair: function; cvSum
.. _doxid-d2/df8/group__core__c_1ga60ef28c4e19353f6ce8293b82c24e5a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvSum(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* arr)

Finds sum of array elements

.. index:: pair: function; cvSVBkSb
.. _doxid-d2/df8/group__core__c_1ga6694cb037a17bc5ed52b523798465c3a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSVBkSb(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* W,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* U,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* V,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* B,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* X,
		int flags
		)

Performs Singular Value Back Substitution (solves A\*X = B): flags must be the same as in cvSVD

.. index:: pair: function; cvSVD
.. _doxid-d2/df8/group__core__c_1gaf3c3de64a2a34c50dd506a0b9e03c1ea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvSVD(
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* A,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* W,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* U = NULL,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* V = NULL,
		int flags = 0
		)

Performs Singular Value Decomposition of a matrix

.. index:: pair: function; cvTrace
.. _doxid-d2/df8/group__core__c_1ga33ba3ddbf23df9fda02ab5549be9d56e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>`
	cvTrace(const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mat)

Calculates trace of the matrix (sum of elements on the main diagonal)

.. index:: pair: function; cvTransform
.. _doxid-d2/df8/group__core__c_1gac8ae16ff7d7736fa7063bdf1867194ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvTransform(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* transmat,
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* shiftvec = NULL
		)

Transforms each element of source array and stores resultant vectors in destination array

.. index:: pair: function; cvTranspose
.. _doxid-d2/df8/group__core__c_1gae689500d0af586990cdb4a26b01dfbf0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvTranspose(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst
		)

Tranposes matrix. Square matrices can be transposed in-place

.. index:: pair: function; cvTreeToNodeSeq
.. _doxid-d2/df8/group__core__c_1gabee5809f0a1bc4ae90ec1510f5e0a5c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSeq<doxid-dd/d74/struct_cv_seq>`*
	cvTreeToNodeSeq(
		const void* first,
		int header_size,
		:ref:`CvMemStorage<doxid-d7/d51/struct_cv_mem_storage>`* storage
		)

Gathers pointers to all the sequences, accessible from the ``first``, to the single sequence

.. index:: pair: function; cvTypeOf
.. _doxid-d2/df8/group__core__c_1ga40e01b6d1565e162492bea8c7ea0a356:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvTypeInfo<doxid-d8/d85/struct_cv_type_info>`*
	cvTypeOf(const void* struct_ptr)

Returns the type of an object.

The function finds the type of a given object. It iterates through the list of registered types and calls the is_instance function/method for every type info structure with that object until one of them returns non-zero or until the whole list has been traversed. In the latter case, the function returns NULL.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- struct_ptr

		- The object pointer

.. index:: pair: function; cvUnregisterType
.. _doxid-d2/df8/group__core__c_1gaaa1246216355bae5cf2f3cb38ab06c5c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvUnregisterType(const char* type_name)

Unregisters the type.

The function unregisters a type with a specified name. If the name is unknown, it is possible to locate the type info by an instance of the type using cvTypeOf or by iterating the type list, starting from cvFirstType, and then calling cvUnregisterType(info->typeName).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- type_name

		- Name of an unregistered type

.. index:: pair: function; cvUseOptimized
.. _doxid-d2/df8/group__core__c_1gafb7df61fda5dfc5f6b05cd8aa60f84e3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvUseOptimized(int on_off)

Loads optimized functions from IPP, MKL etc. or switches back to pure C code

.. index:: pair: function; cvWrite
.. _doxid-d2/df8/group__core__c_1gadad8e11ce90f9d800425da16c4d72663:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWrite(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		const void* ptr,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>` attributes = :ref:`cvAttrList<doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790>`()
		)

Writes an object to file storage.

The function writes an object to file storage. First, the appropriate type info is found using cvTypeOf. Then, the write method associated with the type info is called.

Attributes are used to customize the writing procedure. The standard types support the following attributes (all the dt attributes have the same format as in cvWriteRawData):

#. :ref:`CvSeq <doxid-dd/d74/struct_cv_seq>`
   
   * **header_dt** description of user fields of the sequence header that follow :ref:`CvSeq <doxid-dd/d74/struct_cv_seq>`, or :ref:`CvChain <doxid-d6/dc5/struct_cv_chain>` (if the sequence is a Freeman chain) or :ref:`CvContour <doxid-d9/db0/struct_cv_contour>` (if the sequence is a contour or point sequence)
   
   * **dt** description of the sequence elements.
   
   * **recursive** if the attribute is present and is not equal to "0" or "false", the whole tree of sequences (contours) is stored.

#. :ref:`CvGraph <doxid-d3/d47/struct_cv_graph>`
   
   * **header_dt** description of user fields of the graph header that follows :ref:`CvGraph <doxid-d3/d47/struct_cv_graph>`;
   
   * **vertex_dt** description of user fields of graph vertices
   
   * **edge_dt** description of user fields of graph edges (note that the edge weight is always written, so there is no need to specify it explicitly)

Below is the code that creates the YAML file shown in the CvFileStorage description:

.. ref-code-block:: cpp

	#include "cxcore.h"
	
	int main( int argc, char** argv )
	{
	    CvMat* mat = cvCreateMat( 3, 3, CV_32F );
	    CvFileStorage* fs = cvOpenFileStorage( "example.yml", 0, CV_STORAGE_WRITE );
	
	    cvSetIdentity( mat );
	    cvWrite( fs, "A", mat, cvAttrList(0,0) );
	
	    cvReleaseFileStorage( &fs );
	    cvReleaseMat( &mat );
	    return 0;
	}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- name

		- Name of the written object. Should be NULL if and only if the parent structure is a sequence.

	*
		- ptr

		- Pointer to the object

	*
		- attributes

		- The attributes of the object. They are specific for each particular type (see the discussion below).

.. index:: pair: function; cvWriteComment
.. _doxid-d2/df8/group__core__c_1gac83f7e8effde47d0df4ef6e6ddc864ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteComment(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* comment,
		int eol_comment
		)

Writes a comment.

The function writes a comment into file storage. The comments are skipped when the storage is read.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- comment

		- The written comment, single-line or multi-line

	*
		- eol_comment

		- If non-zero, the function tries to put the comment at the end of current line. If the flag is zero, if the comment is multi-line, or if it does not fit at the end of the current line, the comment starts a new line.

.. index:: pair: function; cvWriteFileNode
.. _doxid-d2/df8/group__core__c_1gab7fd28904abcd0d800c4cefdf58679b4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteFileNode(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* new_node_name,
		const :ref:`CvFileNode<doxid-d2/d92/struct_cv_file_node>`* node,
		int embed
		)

Writes a file node to another file storage.

The function writes a copy of a file node to file storage. Possible applications of the function are merging several file storages into one and conversion between XML, YAML and JSON formats.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- Destination file storage

	*
		- new_node_name

		- New name of the file node in the destination file storage. To keep the existing name, use cvcvGetFileNodeName

	*
		- node

		- The written node

	*
		- embed

		- If the written node is a collection and this parameter is not zero, no extra level of hierarchy is created. Instead, all the elements of node are written into the currently written structure. Of course, map elements can only be embedded into another map, and sequence elements can only be embedded into another sequence.

.. index:: pair: function; cvWriteInt
.. _doxid-d2/df8/group__core__c_1ga97390441352e119c685bfdbe2af4e013:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteInt(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		int value
		)

Writes an integer value.

The function writes a single integer value (with or without a name) to the file storage.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- name

		- Name of the written value. Should be NULL if and only if the parent structure is a sequence.

	*
		- value

		- The written value

.. index:: pair: function; cvWriteRawData
.. _doxid-d2/df8/group__core__c_1ga4282b62c02747b384aab612f692a32fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteRawData(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const void* src,
		int len,
		const char* dt
		)

Writes multiple numbers.

The function writes an array, whose elements consist of single or multiple numbers. The function call can be replaced with a loop containing a few cvWriteInt and cvWriteReal calls, but a single call is more efficient. Note that because none of the elements have a name, they should be written to a sequence rather than a map.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- src

		- Pointer to the written array

	*
		- len

		- Number of the array elements to write

	*
		- dt

		- Specification of each array element, see :ref:`format specification <doxid-d4/da4/group__core__xml_1format_spec>`

.. index:: pair: function; cvWriteRawDataBase64
.. _doxid-d2/df8/group__core__c_1gafe94ee3b9b57b0cbc55594891d35dce7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteRawDataBase64(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const void* src,
		int len,
		const char* dt
		)

Writes multiple numbers in Base64.

If either CV_STORAGE_WRITE_BASE64 or :ref:`cv::FileStorage::WRITE_BASE64 <doxid-d9/df9/classcv_1_1_file_storage_1a973e41cb75ef6230412a567723b7482da74cdcbdb96c29f19e3ccc2ba4ab81614>` is used, this function will be the same as cvWriteRawData. If neither, the main difference is that it outputs a sequence in Base64 encoding rather than in plain text.

This function can only be used to write a sequence with a type "binary".

Consider the following two examples where their output is the same:

.. ref-code-block:: cpp

	:ref:`CvFileStorage <doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs = :ref:`cvOpenFileStorage <doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade>`( "example.xml", 0, :ref:`CV_STORAGE_WRITE <doxid-d2/df8/group__core__c_1ga45407b3c2338d30348ff51d576c7f204>` );
	// both CV_NODE_SEQ and "binary" are necessary.
	:ref:`cvStartWriteStruct <doxid-d2/df8/group__core__c_1ga93a7dfd1d34ffcd192302a7138aa39df>`(fs, "rawdata", :ref:`CV_NODE_SEQ <doxid-d2/df8/group__core__c_1ga6dafb706f7b7775ec3848db051940ffc>` | :ref:`CV_NODE_FLOW <doxid-d2/df8/group__core__c_1gaacbc352531b3f5a4976d37a16ca4c6d2>`, "binary");
	:ref:`cvWriteRawDataBase64 <doxid-d2/df8/group__core__c_1gafe94ee3b9b57b0cbc55594891d35dce7>`(fs, rawdata.data(), static_cast<int>(rawdata.size()), "i");
	:ref:`cvEndWriteStruct <doxid-d2/df8/group__core__c_1ga6915e36ae1e179593f818fb5ad8f3ba3>`(fs);
	:ref:`cvReleaseFileStorage <doxid-d2/df8/group__core__c_1gaa1ea8e6294d4f55f263bd670e135fa9e>`( &fs );

and

.. ref-code-block:: cpp

	:ref:`CvFileStorage <doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs = :ref:`cvOpenFileStorage <doxid-d2/df8/group__core__c_1gab4f85b2cc412d3a229499f240d6bfade>`( "example.xml", 0, :ref:`CV_STORAGE_WRITE_BASE64 <doxid-d2/df8/group__core__c_1gac4a1243b897e37fe1b13247b027e2460>`);
	// parameter, typename "binary" could be omitted.
	:ref:`cvStartWriteStruct <doxid-d2/df8/group__core__c_1ga93a7dfd1d34ffcd192302a7138aa39df>`(fs, "rawdata", :ref:`CV_NODE_SEQ <doxid-d2/df8/group__core__c_1ga6dafb706f7b7775ec3848db051940ffc>` | :ref:`CV_NODE_FLOW <doxid-d2/df8/group__core__c_1gaacbc352531b3f5a4976d37a16ca4c6d2>`);
	:ref:`cvWriteRawData <doxid-d2/df8/group__core__c_1ga4282b62c02747b384aab612f692a32fd>`(fs, rawdata.data(), static_cast<int>(rawdata.size()), "i");
	:ref:`cvEndWriteStruct <doxid-d2/df8/group__core__c_1ga6915e36ae1e179593f818fb5ad8f3ba3>`(fs);
	:ref:`cvReleaseFileStorage <doxid-d2/df8/group__core__c_1gaa1ea8e6294d4f55f263bd670e135fa9e>`( &fs );



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- src

		- Pointer to the written array

	*
		- len

		- Number of the array elements to write

	*
		- dt

		- Specification of each array element, see :ref:`format specification <doxid-d4/da4/group__core__xml_1format_spec>`

.. index:: pair: function; cvWriteReal
.. _doxid-d2/df8/group__core__c_1gaca9d8c8f76550e10f98a862d609397f6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteReal(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		double value
		)

Writes a floating-point value.

The function writes a single floating-point value (with or without a name) to file storage. Special values are encoded as follows: NaN (Not A Number) as .NaN, infinity as +.Inf or -.Inf.

The following example shows how to use the low-level writing functions to store custom structures, such as termination criteria, without registering a new type. :

.. ref-code-block:: cpp

	void write_termcriteria( CvFileStorage* fs, const char* struct_name,
	                         CvTermCriteria* termcrit )
	{
	    cvStartWriteStruct( fs, struct_name, CV_NODE_MAP, NULL, cvAttrList(0,0));
	    cvWriteComment( fs, "termination criteria", 1 ); // just a description
	    if( termcrit->type & CV_TERMCRIT_ITER )
	        cvWriteInteger( fs, "max_iterations", termcrit->max_iter );
	    if( termcrit->type & CV_TERMCRIT_EPS )
	        cvWriteReal( fs, "accuracy", termcrit->epsilon );
	    cvEndWriteStruct( fs );
	}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- name

		- Name of the written value. Should be NULL if and only if the parent structure is a sequence.

	*
		- value

		- The written value

.. index:: pair: function; cvWriteString
.. _doxid-d2/df8/group__core__c_1gaed4d39e436e192f6167abac48e314eb4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvWriteString(
		:ref:`CvFileStorage<doxid-d2/df8/group__core__c_1ga84556d1bb6f1b8b02c04c60246747a7e>`* fs,
		const char* name,
		const char* str,
		int quote = 0
		)

Writes a text string.

The function writes a text string to file storage.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fs

		- File storage

	*
		- name

		- Name of the written string . Should be NULL if and only if the parent structure is a sequence.

	*
		- str

		- The written text string

	*
		- quote

		- If non-zero, the written string is put in quotes, regardless of whether they are required. Otherwise, if the flag is zero, quotes are used only when they are required (e.g. when the string starts with a digit or contains spaces).

.. index:: pair: function; cvXor
.. _doxid-d2/df8/group__core__c_1ga65cef8e8cde6661d00ba26b6555a3bab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvXor(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src1,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src2,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(idx) = src1(idx) ^ src2(idx)

.. index:: pair: function; cvXorS
.. _doxid-d2/df8/group__core__c_1gad6b99fd6141450e6196403b5fb327e55:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvXorS(
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* src,
		:ref:`CvScalar<doxid-de/db0/struct_cv_scalar>` value,
		:ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* dst,
		const :ref:`CvArr<doxid-d2/df8/group__core__c_1gac5046bc0456e9295d80b37774384798c>`* mask = NULL
		)

dst(idx) = src(idx) ^ value

.. index:: pair: function; cvAttrList
.. _doxid-d2/df8/group__core__c_1ga8b7d4e01d67a37a2fdba930ad57ae790:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`
	cvAttrList(
		const char** attr = NULL,
		:ref:`CvAttrList<doxid-d8/dcd/struct_cv_attr_list>`* next = NULL
		)

initializes :ref:`CvAttrList <doxid-d8/dcd/struct_cv_attr_list>` structure

.. index:: pair: function; cvMat
.. _doxid-d2/df8/group__core__c_1ga079f05560fccce67a652486159e74eed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`
	cvMat(
		int rows,
		int cols,
		int type,
		void* data = NULL
		)

Inline constructor. No data is allocated internally!!! (Use together with cvCreateData, or use cvCreateMat instead to get a matrix with allocated data):

.. index:: pair: function; cvmGet
.. _doxid-d2/df8/group__core__c_1gab0fe4514a8d2a61558be7a955ef1e260:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvmGet(
		const :ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat,
		int row,
		int col
		)

Returns the particular element of single-channel floating-point matrix.

The function is a fast replacement for cvGetReal2D in the case of single-channel floating-point matrices. It is faster because it is inline, it does fewer checks for array type and array element type, and it checks for the row and column ranges only in debug mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- Input matrix

	*
		- row

		- The zero-based index of row

	*
		- col

		- The zero-based index of column

.. index:: pair: function; cvmSet
.. _doxid-d2/df8/group__core__c_1ga3995a5445b768a39764c2ed17acd4c55:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cvmSet(
		:ref:`CvMat<doxid-d6/dda/struct_cv_mat>`* mat,
		int row,
		int col,
		double value
		)

Sets a specific element of a single-channel floating-point matrix.

The function is a fast replacement for cvSetReal2D in the case of single-channel floating-point matrices. It is faster because it is inline, it does fewer checks for array type and array element type, and it checks for the row and column ranges only in debug mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- mat

		- The matrix

	*
		- row

		- The zero-based index of row

	*
		- col

		- The zero-based index of column

	*
		- value

		- The new value of the matrix element

.. index:: pair: function; cvPoint
.. _doxid-d2/df8/group__core__c_1ga8ccfebde83fdc77f06ad6cab82ab3e4f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`
	cvPoint(
		int x,
		int y
		)

constructs :ref:`CvPoint <doxid-d3/dc1/struct_cv_point>` structure.

.. index:: pair: function; cvPoint2D32f
.. _doxid-d2/df8/group__core__c_1ga78331196175b5b22c43a1ad59e3c9bad:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>`
	cvPoint2D32f(
		double x,
		double y
		)

constructs :ref:`CvPoint2D32f <doxid-df/dd9/struct_cv_point2_d32f>` structure.

.. index:: pair: function; cvPoint2D64f
.. _doxid-d2/df8/group__core__c_1ga5934de983bfb7b0d91fd5f5e0f0ed7d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint2D64f<doxid-d6/d0d/struct_cv_point2_d64f>`
	cvPoint2D64f(
		double x,
		double y
		)

constructs :ref:`CvPoint2D64f <doxid-d6/d0d/struct_cv_point2_d64f>` structure.

.. index:: pair: function; cvPoint3D32f
.. _doxid-d2/df8/group__core__c_1ga0c9768247085472730e196661587b298:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint3D32f<doxid-d9/df6/struct_cv_point3_d32f>`
	cvPoint3D32f(
		double x,
		double y,
		double z
		)

constructs :ref:`CvPoint3D32f <doxid-d9/df6/struct_cv_point3_d32f>` structure.

.. index:: pair: function; cvPoint3D64f
.. _doxid-d2/df8/group__core__c_1ga1af0b0e4fe4a28e247a96769d6d36cb5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint3D64f<doxid-db/d5a/struct_cv_point3_d64f>`
	cvPoint3D64f(
		double x,
		double y,
		double z
		)

constructs :ref:`CvPoint3D64f <doxid-db/d5a/struct_cv_point3_d64f>` structure.

.. index:: pair: function; cvPointFrom32f
.. _doxid-d2/df8/group__core__c_1ga47f42d7406807e241b91893eda21e770:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>`
	cvPointFrom32f(:ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>` point)

converts :ref:`CvPoint2D32f <doxid-df/dd9/struct_cv_point2_d32f>` to :ref:`CvPoint <doxid-d3/dc1/struct_cv_point>`.

.. index:: pair: function; cvPointTo32f
.. _doxid-d2/df8/group__core__c_1ga72a4700bf821a3273264f39be643c5f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvPoint2D32f<doxid-df/dd9/struct_cv_point2_d32f>`
	cvPointTo32f(:ref:`CvPoint<doxid-d3/dc1/struct_cv_point>` point)

converts :ref:`CvPoint <doxid-d3/dc1/struct_cv_point>` to :ref:`CvPoint2D32f <doxid-df/dd9/struct_cv_point2_d32f>`.

.. index:: pair: function; cvRandInt
.. _doxid-d2/df8/group__core__c_1ga89a3b315541d4b1a65f98ea11c0f4c32:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned
	cvRandInt(:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng)

Returns a 32-bit unsigned integer and updates RNG.

The function returns a uniformly-distributed random 32-bit unsigned integer and updates the RNG state. It is similar to the :ref:`rand() <doxid-dc/d8c/namespacecvflann_1a3518d4d5ff61789af64c0a5b12e9f44e>` function from the C runtime library, except that OpenCV functions always generates a 32-bit random number, regardless of the platform.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rng

		- CvRNG state initialized by cvRNG.

.. index:: pair: function; cvRandReal
.. _doxid-d2/df8/group__core__c_1ga955602a9d268dafd149c3120f7df661b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cvRandReal(:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`* rng)

Returns a floating-point random number and updates RNG.

The function returns a uniformly-distributed random floating-point number between 0 and 1 (1 is not included).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- rng

		- RNG state initialized by cvRNG

.. index:: pair: function; cvRect
.. _doxid-d2/df8/group__core__c_1ga95913af353bf3525d47234d1bcdacff5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvRect<doxid-de/d44/struct_cv_rect>`
	cvRect(
		int x,
		int y,
		int width,
		int height
		)

constructs :ref:`CvRect <doxid-de/d44/struct_cv_rect>` structure.

.. index:: pair: function; cvRNG
.. _doxid-d2/df8/group__core__c_1gafc3cbf181e41e9e82062d98ba4cbaa06:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvRNG<doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`
	cvRNG(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` seed = -1)

Initializes a random number generator state.

The function initializes a random number generator and returns the state. The pointer to the state can be then passed to the cvRandInt, cvRandReal and cvRandArr functions. In the current implementation a multiply-with-carry generator is used.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- seed

		- 64-bit value used to initiate a random sequence



.. rubric:: See also:

the C++ class RNG replaced :ref:`CvRNG <doxid-d2/df8/group__core__c_1ga1a96e51ab3a372962769bb72b8ebb95d>`.

.. index:: pair: function; cvSize
.. _doxid-d2/df8/group__core__c_1ga3b1085711581a23b5bbde7a148ceedb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSize<doxid-da/d4d/struct_cv_size>`
	cvSize(
		int width,
		int height
		)

constructs :ref:`CvSize <doxid-da/d4d/struct_cv_size>` structure.

.. index:: pair: function; cvSize2D32f
.. _doxid-d2/df8/group__core__c_1gaee3a98868a40348a109790e6d7c32e02:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`CvSize2D32f<doxid-de/d91/struct_cv_size2_d32f>`
	cvSize2D32f(
		double width,
		double height
		)

constructs :ref:`CvSize2D32f <doxid-de/d91/struct_cv_size2_d32f>` structure.

Macros
------

.. index:: pair: define; CV_ASSERT
.. _doxid-d2/df8/group__core__c_1ga3fa18df3d3c272116980d2f660f746da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_ASSERT(Condition)

Runtime assertion macro

.. index:: pair: define; CV_CALL
.. _doxid-d2/df8/group__core__c_1gaa809fef8ad413641fbfca4a1f9041e51:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_CALL(Func)

CV_CALL macro calls CV (or IPL) function, checks error status and signals a error if the function failed. Useful in "parent node" error procesing mode

.. index:: pair: define; CV_CHECK
.. _doxid-d2/df8/group__core__c_1ga25fe601c51a558325a1158636e0abee1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_CHECK()

CV_CHECK macro checks error status after CV (or IPL) function call. If error detected, control will be transferred to the exit label.

.. index:: pair: define; CV_COVAR_COLS
.. _doxid-d2/df8/group__core__c_1gaf36c975c638553c008e5e9ef840770fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_COVAR_COLS

flag for cvCalcCovarMatrix, all the input vectors are stored in a single matrix, as its columns

.. index:: pair: define; CV_COVAR_NORMAL
.. _doxid-d2/df8/group__core__c_1gabef8c99a4bceaf4ad246a7e082c94d3a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_COVAR_NORMAL

flag for cvCalcCovarMatrix, [v1-avg, v2-avg,...] \* transpose([v1-avg,v2-avg,...])

.. index:: pair: define; CV_COVAR_ROWS
.. _doxid-d2/df8/group__core__c_1ga0a3859b1654b24e3eee9155188de5cd2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_COVAR_ROWS

flag for cvCalcCovarMatrix, all the input vectors are stored in a single matrix, as its rows

.. index:: pair: define; CV_COVAR_SCALE
.. _doxid-d2/df8/group__core__c_1ga618c64175301e0265b18aebfda268289:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_COVAR_SCALE

flag for cvCalcCovarMatrix, scale the covariance matrix coefficients by number of the vectors

.. index:: pair: define; CV_COVAR_SCRAMBLED
.. _doxid-d2/df8/group__core__c_1ga886ef2715d57e9e50f95c679ea005c9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_COVAR_SCRAMBLED

flag for cvCalcCovarMatrix, transpose([v1-avg, v2-avg,...]) \* [v1-avg,v2-avg,...]

.. index:: pair: define; CV_COVAR_USE_AVG
.. _doxid-d2/df8/group__core__c_1ga6404bb79238d341d069a6ca19a04e8cc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_COVAR_USE_AVG

flag for cvCalcCovarMatrix, do not calc average (i.e. mean vector) - use the input vector instead (useful for calculating covariance matrix by parts)

.. index:: pair: define; CV_DXT_MUL_CONJ
.. _doxid-d2/df8/group__core__c_1ga39dc5da52f3283a11ec700a8a4df6dfc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_DXT_MUL_CONJ

conjugate the second argument of cvMulSpectrums

.. index:: pair: define; CV_DXT_ROWS
.. _doxid-d2/df8/group__core__c_1ga8fbff4e36e4b3d4fe9e20e848f344159:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_DXT_ROWS

transform each row individually

.. index:: pair: define; CV_DXT_SCALE
.. _doxid-d2/df8/group__core__c_1gad444d5205a52186792b8d962d427951f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_DXT_SCALE

divide result by size of array

.. index:: pair: define; CV_ERROR
.. _doxid-d2/df8/group__core__c_1gafd313864ced7e105ef39ea56774cf9ba:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_ERROR( \
		Code, \
		Msg \
		)

CV_ERROR macro unconditionally raises error with passed code and message. After raising error, control will be transferred to the exit label.

.. index:: pair: define; CV_FUNCNAME
.. _doxid-d2/df8/group__core__c_1gadd83d5a9bd103e4737680aa9ab99fae5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_FUNCNAME(Name)

CV_FUNCNAME macro defines icvFuncName constant which is used by CV_ERROR macro

.. index:: pair: define; CV_GRAPH_FIELDS
.. _doxid-d2/df8/group__core__c_1ga1a8b3af5e43cd3fe8907cb220bd375f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_GRAPH_FIELDS()

Graph is "derived" from the set (this is set a of vertices) and includes another set (edges)

.. index:: pair: define; CV_GRAPH_FLAG_ORIENTED
.. _doxid-d2/df8/group__core__c_1ga3f837c967cb6c9e176fccdb9d7aee6fa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_GRAPH_FLAG_ORIENTED

flags for graphs

.. index:: pair: define; CV_GRAPH_ITEM_VISITED_FLAG
.. _doxid-d2/df8/group__core__c_1ga5e269d3a650ffada9e9a51af03ace971:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_GRAPH_ITEM_VISITED_FLAG

flags for graph vertices and edges

.. index:: pair: define; CV_HIST_RANGES_FLAG
.. _doxid-d2/df8/group__core__c_1ga4fcd85ae12a2427d46cc05a7da982486:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_HIST_RANGES_FLAG

indicates whether bin ranges are set already or not

.. index:: pair: define; CV_HIST_UNIFORM
.. _doxid-d2/df8/group__core__c_1ga066e12e85303e5b2c0213e75347b7760:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_HIST_UNIFORM

should be used as a parameter only, it turns to CV_HIST_UNIFORM_FLAG of hist->type

.. index:: pair: define; CV_IABS
.. _doxid-d2/df8/group__core__c_1gac93e1c415d87decc795096deb0e92eab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_IABS(a)

absolute value without jumps

.. index:: pair: define; CV_IMAGE_ELEM
.. _doxid-d2/df8/group__core__c_1ga6c980849bd6bf768b1f2830519bc19b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_IMAGE_ELEM( \
		image, \
		elemtype, \
		row, \
		col \
		)

get reference to pixel at (col,row), for multi-channel images (col) should be multiplied by number of channels

.. index:: pair: define; CV_IMIN
.. _doxid-d2/df8/group__core__c_1ga3ad8b321d30ceea2e550b408f4b43971:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_IMIN( \
		a, \
		b \
		)

min & max without jumps

.. index:: pair: define; CV_IS_SEQ_INDEX
.. _doxid-d2/df8/group__core__c_1ga217388eeccf5b8ebe4fd4aa00b6ffb8b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_IS_SEQ_INDEX(seq)

flag checking

.. index:: pair: define; CV_IS_SEQ_POINT_SET
.. _doxid-d2/df8/group__core__c_1ga5c604c63d812be8b2e043df5ebc6bc5a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_IS_SEQ_POINT_SET(seq)

type checking macros

.. index:: pair: define; CV_IS_SET_ELEM
.. _doxid-d2/df8/group__core__c_1gaf5ef56c5a64a711c129c87c84efd75f7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_IS_SET_ELEM(ptr)

Checks whether the element pointed by ptr belongs to a set or not

.. index:: pair: define; CV_KMEANS_USE_INITIAL_LABELS
.. _doxid-d2/df8/group__core__c_1ga7d20074a9df74d6f433a61fd296983d8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_KMEANS_USE_INITIAL_LABELS

The function implements the K-means algorithm for clustering an array of sample vectors in a specified number of classes

.. index:: pair: define; CV_NEXT_GRAPH_EDGE
.. _doxid-d2/df8/group__core__c_1gab913ccc6aa4e066feed5e44ce59046e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_NEXT_GRAPH_EDGE( \
		edge, \
		vertex \
		)

Return next graph edge for given vertex:

.. index:: pair: define; CV_NEXT_SEQ_ELEM
.. _doxid-d2/df8/group__core__c_1gac3d497983cb693a78a8e5be3f05294ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_NEXT_SEQ_ELEM( \
		elem_size, \
		reader \
		)

Move reader position forward:

.. index:: pair: define; CV_NODE_FLOW
.. _doxid-d2/df8/group__core__c_1gaacbc352531b3f5a4976d37a16ca4c6d2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_NODE_FLOW

file node flags Used only for writing structures in YAML format.

.. index:: pair: define; CV_NODE_REF
.. _doxid-d2/df8/group__core__c_1gaf7107853703d4629b2260c78854cf0b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_NODE_REF

not used

.. index:: pair: define; CV_PREV_SEQ_ELEM
.. _doxid-d2/df8/group__core__c_1gaa0060cbc242ede391fe041f4f66a681b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_PREV_SEQ_ELEM( \
		elem_size, \
		reader \
		)

Move reader position backward:

.. index:: pair: define; CV_READ_SEQ_ELEM
.. _doxid-d2/df8/group__core__c_1ga80132983fd958950dabbbde6acdfc318:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_READ_SEQ_ELEM( \
		elem, \
		reader \
		)

Read element and move read position forward:

.. index:: pair: define; CV_REV_READ_SEQ_ELEM
.. _doxid-d2/df8/group__core__c_1gada18e4264190e1bdbd29d77a0815ffd0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_REV_READ_SEQ_ELEM( \
		elem, \
		reader \
		)

Read element and move read position backward:

.. index:: pair: define; CV_SEQUENCE_FIELDS
.. _doxid-d2/df8/group__core__c_1ga3f5852a742b680f784f3d05eb1a40f59:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQUENCE_FIELDS()

Read/Write sequence. Elements can be dynamically inserted to or deleted from the sequence.Pointer to the first sequence block.

.. index:: pair: define; CV_SEQ_CHAIN
.. _doxid-d2/df8/group__core__c_1gaf045ccc4a3937d68b4981b40bf107a7f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_CHAIN

chain-coded curves

.. index:: pair: define; CV_SEQ_CONNECTED_COMP
.. _doxid-d2/df8/group__core__c_1gaf0ce693e65355fd7edd9d38988177a48:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_CONNECTED_COMP

sequence of the connected components

.. index:: pair: define; CV_SEQ_ELTYPE_CODE
.. _doxid-d2/df8/group__core__c_1gaa302109aff162da7b0c591f8ef70aec2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_CODE

freeman code: 0..7

.. index:: pair: define; CV_SEQ_ELTYPE_CONNECTED_COMP
.. _doxid-d2/df8/group__core__c_1ga52115593995eb0069ca7f5a026e7886c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_CONNECTED_COMP

connected component

.. index:: pair: define; CV_SEQ_ELTYPE_GRAPH_EDGE
.. _doxid-d2/df8/group__core__c_1ga35055c16a7367cb97b1e344f7bfdb4a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_GRAPH_EDGE

&next_o, &next_d, &vtx_o, &vtx_d

.. index:: pair: define; CV_SEQ_ELTYPE_GRAPH_VERTEX
.. _doxid-d2/df8/group__core__c_1ga635c7575d5ab9d37588ed8f57da75687:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_GRAPH_VERTEX

first_edge, &(x,y)

.. index:: pair: define; CV_SEQ_ELTYPE_INDEX
.. _doxid-d2/df8/group__core__c_1gaee57725a49b8421768989110756469bf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_INDEX

#(x,y)

.. index:: pair: define; CV_SEQ_ELTYPE_POINT
.. _doxid-d2/df8/group__core__c_1ga92a532b5819b4fab0bc06dd63e1ba036:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_POINT

(x,y)

.. index:: pair: define; CV_SEQ_ELTYPE_POINT3D
.. _doxid-d2/df8/group__core__c_1ga40e4e5b4f48bfabb69b5dc54d32d6d50:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_POINT3D

(x,y,z)

.. index:: pair: define; CV_SEQ_ELTYPE_PPOINT
.. _doxid-d2/df8/group__core__c_1ga471f695b4e75d20545431fe7f3f60a0b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_PPOINT

&(x,y)

.. index:: pair: define; CV_SEQ_ELTYPE_TRIAN_ATR
.. _doxid-d2/df8/group__core__c_1gab0c86b2526be6bebb0e61062ca70e554:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_ELTYPE_TRIAN_ATR

vertex of the binary tree

.. index:: pair: define; CV_SEQ_FLAG_CLOSED
.. _doxid-d2/df8/group__core__c_1gad18c44feb78c5d9096af708447b126ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_FLAG_CLOSED

flags for curves

.. index:: pair: define; CV_SEQ_INDEX
.. _doxid-d2/df8/group__core__c_1ga4de86c60c90d8e737242b8ab96c7d0d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_INDEX

sequence of the integer numbers

.. index:: pair: define; CV_SEQ_KIND_GENERIC
.. _doxid-d2/df8/group__core__c_1ga27259a8209b5ec8bcd138063590d2bdf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_KIND_GENERIC

types of sequences

.. index:: pair: define; CV_SEQ_KIND_GRAPH
.. _doxid-d2/df8/group__core__c_1ga054f3b997ccd418f561f2654894b5bce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_KIND_GRAPH

types of sparse sequences (sets)

.. index:: pair: define; CV_SEQ_POINT_SET
.. _doxid-d2/df8/group__core__c_1gab31f9cd6601c6d8a20af1873e308e253:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_POINT_SET

point sets

.. index:: pair: define; CV_SEQ_POLYGON_TREE
.. _doxid-d2/df8/group__core__c_1gaa049aa36bf1c64a975429fd77135fe9a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_POLYGON_TREE

binary tree for the contour

.. index:: pair: define; CV_SEQ_READER_FIELDS
.. _doxid-d2/df8/group__core__c_1ga32c178732ea99af712416f09fcb6f87a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_READER_FIELDS()

pointer to previous element

.. index:: pair: define; CV_SEQ_WRITER_FIELDS
.. _doxid-d2/df8/group__core__c_1ga9f2d7f6496dbc453f0bd2909fb2aad36:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SEQ_WRITER_FIELDS()

pointer to the end of block

.. index:: pair: define; CV_SET_ELEM_FIELDS
.. _doxid-d2/df8/group__core__c_1ga1b27742ae136a4ad516c0274adc978c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_SET_ELEM_FIELDS(elem_type)

Set Order is not preserved. There can be gaps between sequence elements. After the element has been inserted it stays in the same place all the time. The MSB(most-significant or sign bit) of the first field (flags) is 0 iff the element exists.

.. index:: pair: define; CV_STORAGE_READ
.. _doxid-d2/df8/group__core__c_1ga35bfa6581e0e915245c796db3996ada3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_STORAGE_READ

Storage flags:

.. index:: pair: define; CV_TREE_NODE_FIELDS
.. _doxid-d2/df8/group__core__c_1gad8807dac71fcde9e625288ff3d237c2d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_TREE_NODE_FIELDS(node_type)

2nd next sequence.

.. index:: pair: define; CV_WRITE_SEQ_ELEM_VAR
.. _doxid-d2/df8/group__core__c_1gac49f14134071765716a83f763002bafe:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_WRITE_SEQ_ELEM_VAR( \
		elem_ptr, \
		writer \
		)

Add element to sequence:

.. index:: pair: define; IPL_BORDER_REFLECT_101
.. _doxid-d2/df8/group__core__c_1gaf188eae22ad796f4291e64db23bfe6b6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define IPL_BORDER_REFLECT_101

extra border mode

.. index:: pair: define; IPL_DEPTH_64F
.. _doxid-d2/df8/group__core__c_1gaccc1236475a7267d3d8024bdca433267:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define IPL_DEPTH_64F

for storing double-precision floating point data in :ref:`IplImage <doxid-dd/d51/struct_ipl_image>` 's

.. index:: pair: define; cvGetGraphVtx
.. _doxid-d2/df8/group__core__c_1ga2e8c4a2419426aa7b6c8a243824837a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define cvGetGraphVtx( \
		graph, \
		idx \
		)

Retrieves graph vertex by given index

.. index:: pair: define; cvGraphEdgeIdx
.. _doxid-d2/df8/group__core__c_1ga2139ffd4b7ebebc1db64496a269ea467:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define cvGraphEdgeIdx( \
		graph, \
		edge \
		)

Retrieves index of a graph edge given its pointer

.. index:: pair: define; cvGraphVtxIdx
.. _doxid-d2/df8/group__core__c_1ga4aabb7cbdec1c9ec6b2486111261ac83:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define cvGraphVtxIdx( \
		graph, \
		vtx \
		)

Retrieves index of a graph vertex given its pointer

.. index:: pair: define; cvMatMulAdd
.. _doxid-d2/df8/group__core__c_1ga508ba5d1f7cb9477033e337fa3126536:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define cvMatMulAdd( \
		src1, \
		src2, \
		src3, \
		dst \
		)

Matrix transform: dst = A\*B + C, C is optional

