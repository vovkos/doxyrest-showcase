.. index:: pair: group; OpenGL interoperability
.. _doxid-d2/d3c/group__core__opengl:

OpenGL interoperability
=======================

.. toctree::
	:hidden:

	group_cuda.rst
	namespace_cv_cuda.rst
	namespace_cv_ogl_ocl.rst
	enum_cv_ogl_RenderModes.rst
	class_cv_ogl_Arrays.rst
	class_cv_ogl_Buffer.rst
	class_cv_ogl_Texture2D.rst

Overview
~~~~~~~~

This section describes OpenGL interoperability. :ref:`More...<details-d2/d3c/group__core__opengl>`

|	:ref:`CUDA-accelerated Computer Vision<doxid-d1/d1e/group__cuda>`
|		:ref:`Background Segmentation<doxid-d6/d17/group__cudabgsegm>`
|		:ref:`Core part<doxid-d7/d05/group__cudacore>`
|			:ref:`Data Structures<doxid-d9/d41/group__cudacore__struct>`
|			:ref:`Initalization and Information<doxid-d8/d40/group__cudacore__init>`
|		:ref:`Device layer<doxid-df/dfc/group__cudev>`
|		:ref:`Feature Detection and Description<doxid-d6/d1d/group__cudafeatures2d>`
|		:ref:`Image Filtering<doxid-dc/d66/group__cudafilters>`
|		:ref:`Image Processing<doxid-d0/d05/group__cudaimgproc>`
|			:ref:`Color space processing<doxid-db/d8c/group__cudaimgproc__color>`
|			:ref:`Feature Detection<doxid-dc/d6d/group__cudaimgproc__feature>`
|			:ref:`Histogram Calculation<doxid-d8/d0e/group__cudaimgproc__hist>`
|			:ref:`Hough Transform<doxid-d2/d15/group__cudaimgproc__hough>`
|		:ref:`Image Warping<doxid-db/d29/group__cudawarping>`
|		:ref:`Legacy support<doxid-d5/dc3/group__cudalegacy>`
|			:ref:`NPPST Core<doxid-d5/ddd/group__core__npp>`
|			:ref:`NPPST Image Processing<doxid-d1/d0d/group__nppi>`
|			:ref:`NPPST Signal Processing<doxid-de/d25/group__npps>`
|		:ref:`Object Detection<doxid-d9/d3f/group__cudaobjdetect>`
|		:ref:`Operations on Matrices<doxid-d5/d8e/group__cudaarithm>`
|			:ref:`Arithm Operations on Matrices<doxid-d9/d88/group__cudaarithm__arithm>`
|			:ref:`Core Operations on Matrices<doxid-de/d09/group__cudaarithm__core>`
|			:ref:`Matrix Reductions<doxid-d5/de6/group__cudaarithm__reduce>`
|			:ref:`Per-element Operations<doxid-d8/d34/group__cudaarithm__elem>`
|		:ref:`Optical Flow<doxid-d7/d3f/group__cudaoptflow>`
|		:ref:`Stereo Correspondence<doxid-dd/d47/group__cudastereo>`
|		:ref:`Video Encoding/Decoding<doxid-d0/d61/group__cudacodec>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// namespaces

	namespace :ref:`cv::cuda<doxid-d1/d1a/namespacecv_1_1cuda>`;
	namespace :ref:`cv::ogl::ocl<doxid-d1/d36/namespacecv_1_1ogl_1_1ocl>`;

	// enums

	enum :ref:`cv::ogl::RenderModes<doxid-d2/d3c/group__core__opengl_1gaf53526c205a92260f356fe6589460aab>`;

	// classes

	class :ref:`cv::ogl::Arrays<doxid-dd/d66/classcv_1_1ogl_1_1_arrays>`;
	class :ref:`cv::ogl::Buffer<doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`;
	class :ref:`cv::ogl::Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`;

	// global functions

	void
	:ref:`cv::cuda::setGlDevice<doxid-d2/d3c/group__core__opengl_1ga7da4b94fc78501f4239c132901387730>`(int device = 0);

	void
	:ref:`cv::ogl::convertFromGLTexture2D<doxid-d2/d3c/group__core__opengl_1gad2a559f1b93a89fa4936948f4c4c4bb2>`(
		const :ref:`Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`& texture,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		);

	void
	:ref:`cv::ogl::convertToGLTexture2D<doxid-d2/d3c/group__core__opengl_1ga5ab4018bf271aecf8b7144e46ff363e9>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`& texture
		);

	:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`
	:ref:`cv::ogl::mapGLBuffer<doxid-d2/d3c/group__core__opengl_1gaa7595c713e3a7c389b84f0f8f2827d4b>`(
		const :ref:`Buffer<doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`& buffer,
		int accessFlags = :ref:`ACCESS_READ<doxid-dc/d84/group__core__basic_1gga399140175919325d93e19dc058339ec8a39d5f615d02cac084ab1dd0cb4f7c221>`|:ref:`ACCESS_WRITE<doxid-dc/d84/group__core__basic_1gga399140175919325d93e19dc058339ec8afcb8f7013ace1726cd1bbeea800bc7b6>`
		);

	void
	:ref:`cv::ogl::render<doxid-d2/d3c/group__core__opengl_1ga64c7a6323ba1b978f2f9142a4bad5ca1>`(
		const :ref:`Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`& tex,
		:ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double> wndRect = :ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double>(0.0, 0.0, 1.0, 1.0),
		:ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double> texRect = :ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double>(0.0, 0.0, 1.0, 1.0)
		);

	void
	:ref:`cv::ogl::render<doxid-d2/d3c/group__core__opengl_1ga0f86b878c8b65fe081fd4f7ac1e62110>`(
		const :ref:`Arrays<doxid-dd/d66/classcv_1_1ogl_1_1_arrays>`& arr,
		int mode = :ref:`POINTS<doxid-d2/d3c/group__core__opengl_1ggaf53526c205a92260f356fe6589460aaba8b467f66c33c13df37f24aa3f1196f14>`,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` color = :ref:`Scalar::all<doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255)
		);

	void
	:ref:`cv::ogl::render<doxid-d2/d3c/group__core__opengl_1ga090c1f371c37a575dea8b5c6371aec70>`(
		const :ref:`Arrays<doxid-dd/d66/classcv_1_1ogl_1_1_arrays>`& arr,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` indices,
		int mode = :ref:`POINTS<doxid-d2/d3c/group__core__opengl_1ggaf53526c205a92260f356fe6589460aaba8b467f66c33c13df37f24aa3f1196f14>`,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` color = :ref:`Scalar::all<doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255)
		);

	void
	:ref:`cv::ogl::unmapGLBuffer<doxid-d2/d3c/group__core__opengl_1ga7503c23aabed6fbe4f20b500bb921e71>`(:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& u);

	:ref:`Context<doxid-d1/dbe/classcv_1_1ocl_1_1_context>`&
	:ref:`cv::ogl::ocl::initializeContextFromGL<doxid-d2/d3c/group__core__opengl_1ga41441ed4320bfc507d81c5e2cbc41233>`();

.. _details-d2/d3c/group__core__opengl:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This section describes OpenGL interoperability.

To enable OpenGL support, configure OpenCV using CMake with WITH_OPENGL=ON . Currently OpenGL is supported only with WIN32, GTK and Qt backends on Windows and Linux (MacOS and Android are not supported). For GTK backend gtkglext-1.0 library is required.

To use OpenGL functionality you should first create OpenGL context (window or frame buffer). You can do this with namedWindow function or with other OpenGL toolkit (GLUT, for example).

Global Functions
----------------

.. index:: pair: function; setGlDevice
.. _doxid-d2/d3c/group__core__opengl_1ga7da4b94fc78501f4239c132901387730:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::setGlDevice(int device = 0)

Sets a CUDA device and initializes it for the current thread with OpenGL interoperability.

This function should be explicitly called after OpenGL context creation and before any CUDA calls.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- device

		- System index of a CUDA device starting with 0.

.. index:: pair: function; convertFromGLTexture2D
.. _doxid-d2/d3c/group__core__opengl_1gad2a559f1b93a89fa4936948f4c4c4bb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ogl::convertFromGLTexture2D(
		const :ref:`Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`& texture,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst
		)

Converts :ref:`Texture2D <doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>` object to OutputArray.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- texture

		- - source :ref:`Texture2D <doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>` object.

	*
		- dst

		- - destination OutputArray.

.. index:: pair: function; convertToGLTexture2D
.. _doxid-d2/d3c/group__core__opengl_1ga5ab4018bf271aecf8b7144e46ff363e9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ogl::convertToGLTexture2D(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`& texture
		)

Converts InputArray to :ref:`Texture2D <doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>` object.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- - source InputArray.

	*
		- texture

		- - destination :ref:`Texture2D <doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>` object.

.. index:: pair: function; mapGLBuffer
.. _doxid-d2/d3c/group__core__opengl_1gaa7595c713e3a7c389b84f0f8f2827d4b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`
	cv::ogl::mapGLBuffer(
		const :ref:`Buffer<doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`& buffer,
		int accessFlags = :ref:`ACCESS_READ<doxid-dc/d84/group__core__basic_1gga399140175919325d93e19dc058339ec8a39d5f615d02cac084ab1dd0cb4f7c221>`|:ref:`ACCESS_WRITE<doxid-dc/d84/group__core__basic_1gga399140175919325d93e19dc058339ec8afcb8f7013ace1726cd1bbeea800bc7b6>`
		)

Maps :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object to process on CL side (convert to :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`).

Function creates CL buffer from GL one, and then constructs :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` that can be used to process buffer data with OpenCV functions. Note that in current implementation :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` constructed this way doesn't own corresponding GL buffer object, so it is the user responsibility to close down CL/GL buffers relationships by explicitly calling :ref:`unmapGLBuffer() <doxid-d2/d3c/group__core__opengl_1ga7503c23aabed6fbe4f20b500bb921e71>` function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- buffer

		- - source :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object.

	*
		- accessFlags

		- - data access flags (ACCESS_READ\|ACCESS_WRITE).



.. rubric:: Returns:

Returns :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` object

.. index:: pair: function; render
.. _doxid-d2/d3c/group__core__opengl_1ga64c7a6323ba1b978f2f9142a4bad5ca1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ogl::render(
		const :ref:`Texture2D<doxid-d4/d91/classcv_1_1ogl_1_1_texture2_d>`& tex,
		:ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double> wndRect = :ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double>(0.0, 0.0, 1.0, 1.0),
		:ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double> texRect = :ref:`Rect_<doxid-d6/db0/classcv_1_1_rect__>`<double>(0.0, 0.0, 1.0, 1.0)
		)

Render OpenGL texture or primitives.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- tex

		- Texture to draw.

	*
		- wndRect

		- Region of window, where to draw a texture (normalized coordinates).

	*
		- texRect

		- Region of texture to draw (normalized coordinates).

.. index:: pair: function; render
.. _doxid-d2/d3c/group__core__opengl_1ga0f86b878c8b65fe081fd4f7ac1e62110:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ogl::render(
		const :ref:`Arrays<doxid-dd/d66/classcv_1_1ogl_1_1_arrays>`& arr,
		int mode = :ref:`POINTS<doxid-d2/d3c/group__core__opengl_1ggaf53526c205a92260f356fe6589460aaba8b467f66c33c13df37f24aa3f1196f14>`,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` color = :ref:`Scalar::all<doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255)
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array of privitives vertices.

	*
		- mode

		- Render mode. One of :ref:`cv::ogl::RenderModes <doxid-d2/d3c/group__core__opengl_1gaf53526c205a92260f356fe6589460aab>`

	*
		- color

		- Color for all vertices. Will be used if arr doesn't contain color array.

.. index:: pair: function; render
.. _doxid-d2/d3c/group__core__opengl_1ga090c1f371c37a575dea8b5c6371aec70:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ogl::render(
		const :ref:`Arrays<doxid-dd/d66/classcv_1_1ogl_1_1_arrays>`& arr,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` indices,
		int mode = :ref:`POINTS<doxid-d2/d3c/group__core__opengl_1ggaf53526c205a92260f356fe6589460aaba8b467f66c33c13df37f24aa3f1196f14>`,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` color = :ref:`Scalar::all<doxid-d7/d13/classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f>`(255)
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- arr

		- Array of privitives vertices.

	*
		- indices

		- Array of vertices indices (host or device memory).

	*
		- mode

		- Render mode. One of :ref:`cv::ogl::RenderModes <doxid-d2/d3c/group__core__opengl_1gaf53526c205a92260f356fe6589460aab>`

	*
		- color

		- Color for all vertices. Will be used if arr doesn't contain color array.

.. index:: pair: function; unmapGLBuffer
.. _doxid-d2/d3c/group__core__opengl_1ga7503c23aabed6fbe4f20b500bb921e71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ogl::unmapGLBuffer(:ref:`UMat<doxid-d8/d82/classcv_1_1_u_mat>`& u)

Unmaps :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>` object (releases :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`, previously mapped from :ref:`Buffer <doxid-d5/de0/classcv_1_1ogl_1_1_buffer>`).

Function must be called explicitly by the user for each :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>` previously constructed by the call to :ref:`mapGLBuffer() <doxid-d2/d3c/group__core__opengl_1gaa7595c713e3a7c389b84f0f8f2827d4b>` function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- u

		- - source :ref:`UMat <doxid-d8/d82/classcv_1_1_u_mat>`, created by :ref:`mapGLBuffer() <doxid-d2/d3c/group__core__opengl_1gaa7595c713e3a7c389b84f0f8f2827d4b>`.

.. index:: pair: function; initializeContextFromGL
.. _doxid-d2/d3c/group__core__opengl_1ga41441ed4320bfc507d81c5e2cbc41233:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Context<doxid-d1/dbe/classcv_1_1ocl_1_1_context>`&
	cv::ogl::ocl::initializeContextFromGL()

Creates OpenCL context from GL.



.. rubric:: Returns:

Returns reference to OpenCL Context

