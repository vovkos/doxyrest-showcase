.. index:: pair: group; Optimization Algorithms
.. _doxid-da/d01/group__core__optim:

Optimization Algorithms
=======================

.. toctree::
	:hidden:

	enum_cv_SolveLPResult.rst
	class_cv_ConjGradSolver.rst
	class_cv_DownhillSolver.rst
	class_cv_MinProblemSolver.rst

Overview
~~~~~~~~

The algorithms in this section minimize or maximize function value within specified constraints or without any constraints. :ref:`More...<details-da/d01/group__core__optim>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::SolveLPResult<doxid-da/d01/group__core__optim_1ga86a370deffb37af51deb405a634eb14c>`;

	// classes

	class :ref:`cv::ConjGradSolver<doxid-df/d8a/classcv_1_1_conj_grad_solver>`;
	class :ref:`cv::DownhillSolver<doxid-df/dac/classcv_1_1_downhill_solver>`;
	class :ref:`cv::MinProblemSolver<doxid-d0/d39/classcv_1_1_min_problem_solver>`;

	// global functions

	int
	:ref:`cv::solveLP<doxid-da/d01/group__core__optim_1ga6364eb49b9b0722cd7a4eb361f9896cd>`(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& Func,
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& Constr,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& z
		);

.. _details-da/d01/group__core__optim:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The algorithms in this section minimize or maximize function value within specified constraints or without any constraints.

Global Functions
----------------

.. index:: pair: function; solveLP
.. _doxid-da/d01/group__core__optim_1ga6364eb49b9b0722cd7a4eb361f9896cd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::solveLP(
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& Func,
		const :ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& Constr,
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& z
		)

Solve given (non-integer) linear programming problem using the Simplex :ref:`Algorithm <doxid-d1/d41/classcv_1_1_algorithm>` (Simplex Method).

What we mean here by "linear programming problem" (or LP problem, for short) can be formulated as:

.. math::

	\mbox{Maximize } c\cdot x\\ \mbox{Subject to:}\\ Ax\leq b\\ x\geq 0

Where :math:`c` is fixed ``1`` -by- ``n`` row-vector, :math:`A` is fixed ``m`` -by- ``n`` matrix, :math:`b` is fixed ``m`` -by- ``1`` column vector and :math:`x` is an arbitrary ``n`` -by- ``1`` column vector, which satisfies the constraints.

Simplex algorithm is one of many algorithms that are designed to handle this sort of problems efficiently. Although it is not optimal in theoretical sense (there exist algorithms that can solve any problem written as above in polynomial time, while simplex method degenerates to exponential time for some special cases), it is well-studied, easy to implement and is shown to work well for real-life purposes.

The particular implementation is taken almost verbatim from **Introduction to Algorithms, third edition** by T. H. Cormen, C. E. Leiserson, R. L. Rivest and Clifford Stein. In particular, the Bland's rule `http://en.wikipedia.org/wiki/Bland%27s_rule <http://en.wikipedia.org/wiki/Bland%27s_rule>`__ is used to prevent cycling.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- Func

		- This row-vector corresponds to :math:`c` in the LP problem formulation (see above). It should contain 32- or 64-bit floating point numbers. As a convenience, column-vector may be also submitted, in the latter case it is understood to correspond to :math:`c^T`.

	*
		- Constr

		- ``m`` -by- ``n+1`` matrix, whose rightmost column corresponds to :math:`b` in formulation above and the remaining to :math:`A`. It should containt 32- or 64-bit floating point numbers.

	*
		- z

		- The solution will be returned here as a column-vector - it corresponds to :math:`c` in the formulation above. It will contain 64-bit floating point numbers.



.. rubric:: Returns:

One of :ref:`cv::SolveLPResult <doxid-da/d01/group__core__optim_1ga86a370deffb37af51deb405a634eb14c>`

