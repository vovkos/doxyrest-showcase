.. index:: pair: group; Utility and system functions and macros
.. _doxid-db/de0/group__core__utils:

Utility and system functions and macros
=======================================

.. toctree::
	:hidden:

	group_core_utils_neon.rst
	group_core_utils_sse.rst
	namespace_cv_Error.rst
	enum_CpuFeatures.rst
	enum_cv_SortFlags.rst
	struct_cv_Hamming.rst
	union_Cv16suf.rst
	union_Cv32suf.rst
	union_Cv64suf.rst
	class_cv_Allocator.rst
	class_cv_AutoBuffer.rst
	class_cv_AutoLock.rst
	class_cv_CommandLineParser.rst
	class_cv_Exception.rst
	class_cv_Mutex.rst
	class_cv_ParallelLoopBody.rst
	class_cv_TLSData.rst
	class_cv_TLSDataContainer.rst
	class_cv_TickMeter.rst

Overview
~~~~~~~~



|	:ref:`NEON utilities<doxid-d8/d45/group__core__utils__neon>`
|	:ref:`SSE utilities<doxid-d6/d06/group__core__utils__sse>`



.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// namespaces

	namespace :ref:`cv::Error<doxid-d6/d43/namespacecv_1_1_error>`;

	// typedefs

	typedef int (*:target:`cv::ErrorCallback<doxid-db/de0/group__core__utils_1gae52d6d11c71181d60f0a30eed078d66d>`)(
		int status,
		const char *func_name,
		const char *err_msg,
		const char *file_name,
		int line,
		void *userdata
		);

	typedef :ref:`Hamming<doxid-d1/d33/structcv_1_1_hamming>` :target:`cv::HammingLUT<doxid-db/de0/group__core__utils_1ga682e9949b0344ee3afdaece6de39027c>`;

	// enums

	enum :ref:`CpuFeatures<doxid-db/de0/group__core__utils_1ga74405b66c7a701d17cec08a50b8b2802>`;
	enum :ref:`cv::SortFlags<doxid-db/de0/group__core__utils_1ga8e88a1f27e41e12f81caab17cf81667b>`;

	// structs

	struct :ref:`cv::Hamming<doxid-d1/d33/structcv_1_1_hamming>`;

	// unions

	union :ref:`Cv16suf<doxid-dc/db7/union_cv16suf>`;
	union :ref:`Cv32suf<doxid-db/d19/union_cv32suf>`;
	union :ref:`Cv64suf<doxid-d3/dee/union_cv64suf>`;

	// classes

	template <typename _Tp>
	class :ref:`cv::Allocator<doxid-da/dfb/classcv_1_1_allocator>`;

	template <
		typename _Tp,
		size_t fixed_size = 1024/sizeof(_Tp)+8
		>
	class :ref:`cv::AutoBuffer<doxid-df/d8c/classcv_1_1_auto_buffer>`;

	class :ref:`cv::AutoLock<doxid-dc/de4/classcv_1_1_auto_lock>`;
	class :ref:`cv::CommandLineParser<doxid-da/dd8/classcv_1_1_command_line_parser>`;
	class :ref:`cv::Exception<doxid-d7/d6f/classcv_1_1_exception>`;
	class :ref:`cv::Mutex<doxid-d5/d0c/classcv_1_1_mutex>`;
	class :ref:`cv::ParallelLoopBody<doxid-d2/d46/classcv_1_1_parallel_loop_body>`;

	template <typename T>
	class :ref:`cv::TLSData<doxid-da/de5/classcv_1_1_t_l_s_data>`;

	class :ref:`cv::TLSDataContainer<doxid-df/db0/classcv_1_1_t_l_s_data_container>`;
	class :ref:`cv::TickMeter<doxid-d5/d33/classcv_1_1_tick_meter>`;

	// global functions

	template <typename _Tp>
	static
	_Tp*
	:ref:`cv::alignPtr<doxid-db/de0/group__core__utils_1ga138b3f05c8a26bc74038142b4367cc31>`(
		_Tp* ptr,
		int n = (int) sizeof(_Tp)
		);

	static
	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	:ref:`cv::alignSize<doxid-db/de0/group__core__utils_1gaf2ff8f837e7a44f288b050765492f800>`(
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz,
		int n
		);

	bool
	:ref:`cv::checkHardwareSupport<doxid-db/de0/group__core__utils_1ga83400136ccc28490087722ef5b3a27d9>`(int feature);

	bool
	:ref:`cv::Cholesky<doxid-db/de0/group__core__utils_1gab39ce257149bdae7f9552e05c05c7642>`(
		float* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		float* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		);

	bool
	:ref:`cv::Cholesky<doxid-db/de0/group__core__utils_1gac8d860b8a49bf2ed304b1c82acb916e5>`(
		double* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		double* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		);

	float
	:ref:`cv::cubeRoot<doxid-db/de0/group__core__utils_1ga51452a9a5b6b232e0d67855c8e27f436>`(float val);

	template <typename _Tp>
	_Tp
	:target:`cv::cv_abs<doxid-db/de0/group__core__utils_1gab3fbec499b8b9ec34ebbc038aa0df479>`(_Tp x);

	int
	:target:`cv::cv_abs<doxid-db/de0/group__core__utils_1ga7ff9da9e1d83d45c8778435633074fd7>`(:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>` x);

	int
	:target:`cv::cv_abs<doxid-db/de0/group__core__utils_1ga39fbc1a33aedb130e3c0e59e8c2f64ec>`(:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>` x);

	int
	:target:`cv::cv_abs<doxid-db/de0/group__core__utils_1ga276f90264ac8083f22d139520f62c44f>`(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` x);

	int
	:target:`cv::cv_abs<doxid-db/de0/group__core__utils_1ga4f5a784b6921093228ec0ffd3b464fa5>`(short x);

	void
	:ref:`cv::error<doxid-db/de0/group__core__utils_1ga4910d7f86336cd4eff9dd05575667e41>`(const :ref:`Exception<doxid-d7/d6f/classcv_1_1_exception>`& exc);

	void
	:ref:`cv::error<doxid-db/de0/group__core__utils_1gacbd081fdb20423a63cf731569ba70b2b>`(
		int _code,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& _err,
		const char* _func,
		const char* _file,
		int _line
		);

	void
	:ref:`cv::errorNoReturn<doxid-db/de0/group__core__utils_1gafa9d164ef0f7b3f14a57f77f4e4bc71b>`(
		int _code,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& _err,
		const char* _func,
		const char* _file,
		int _line
		);

	float
	:ref:`cv::fastAtan2<doxid-db/de0/group__core__utils_1ga7b356498dd314380a0c386b059852270>`(
		float y,
		float x
		);

	void
	:ref:`cv::fastFree<doxid-db/de0/group__core__utils_1ga4b0d54a6957761ba64880fa51c4b8a6b>`(void* ptr);

	void*
	:ref:`cv::fastMalloc<doxid-db/de0/group__core__utils_1ga0ad6f1fcb40635cb776ade61f9b88c6e>`(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bufSize);

	:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
	:ref:`cv::format<doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409>`(
		const char* fmt,
		...
		);

	const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`&
	:ref:`cv::getBuildInformation<doxid-db/de0/group__core__utils_1ga0ae377100bc03ce22322926bba7fdbb5>`();

	:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`
	:ref:`cv::getCPUTickCount<doxid-db/de0/group__core__utils_1gaf3070efdcfef6f1e7ac28d2b6a29a7c0>`();

	static
	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	:target:`cv::getElemSize<doxid-db/de0/group__core__utils_1gacd16cccbc7be62773bcf60568e9a7b74>`(int type);

	int
	:ref:`cv::getNumberOfCPUs<doxid-db/de0/group__core__utils_1gadf09fc982bf4f17bc84bd1abce5d0863>`();

	int
	:ref:`cv::getNumThreads<doxid-db/de0/group__core__utils_1ga2db334ec41d98da3129ef4a2342fc4d4>`();

	int
	:ref:`cv::getThreadNum<doxid-db/de0/group__core__utils_1gaf9cc0cb10097686a9da60f6c587e5774>`();

	:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`
	:ref:`cv::getTickCount<doxid-db/de0/group__core__utils_1gae73f58000611a1af25dd36d496bf4487>`();

	double
	:ref:`cv::getTickFrequency<doxid-db/de0/group__core__utils_1ga705441a9ef01f47acdc55d87fbe5090c>`();

	void
	:target:`cv::glob<doxid-db/de0/group__core__utils_1gaf91b7f383218e2d3f760939140942297>`(
		:ref:`String<doxid-dc/d0e/classcv_1_1_string>` pattern,
		std::vector<:ref:`String<doxid-dc/d0e/classcv_1_1_string>`>& result,
		bool recursive = false
		);

	int
	:ref:`cv::LU<doxid-db/de0/group__core__utils_1ga6caa4b9c6213b619c6e6f7523dc520fb>`(
		float* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		float* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		);

	int
	:ref:`cv::LU<doxid-db/de0/group__core__utils_1gaf80b646047515ac185536d342f3219a5>`(
		double* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		double* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		);

	template <
		typename _Tp,
		typename _AccTp
		>
	static
	_AccTp
	:target:`cv::normInf<doxid-db/de0/group__core__utils_1gafbc6702d6233a210781b69505fe35657>`(
		const _Tp* a,
		int n
		);

	template <
		typename _Tp,
		typename _AccTp
		>
	static
	_AccTp
	:target:`cv::normInf<doxid-db/de0/group__core__utils_1ga88d10ad6fabc12581122af0655f14528>`(
		const _Tp* a,
		const _Tp* b,
		int n
		);

	template <
		typename _Tp,
		typename _AccTp
		>
	static
	_AccTp
	:target:`cv::normL1<doxid-db/de0/group__core__utils_1gacb7cee5ed28705cf01ea141ae7927545>`(
		const _Tp* a,
		int n
		);

	template <
		typename _Tp,
		typename _AccTp
		>
	static
	_AccTp
	:target:`cv::normL1<doxid-db/de0/group__core__utils_1ga442c3185940fc1879e26e8676253e0c5>`(
		const _Tp* a,
		const _Tp* b,
		int n
		);

	float
	:target:`cv::normL1<doxid-db/de0/group__core__utils_1gac43f78105ba75ece4056964547b23c19>`(
		const float* a,
		const float* b,
		int n
		);

	int
	:target:`cv::normL1<doxid-db/de0/group__core__utils_1gae0f0a5246a545bc9aff70680c9efed22>`(
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* a,
		const :ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`* b,
		int n
		);

	template <
		typename _Tp,
		typename _AccTp
		>
	static
	_AccTp
	:target:`cv::normL2Sqr<doxid-db/de0/group__core__utils_1gaf0e07145e0927234be3e0311f0658e83>`(
		const _Tp* a,
		int n
		);

	template <
		typename _Tp,
		typename _AccTp
		>
	static
	_AccTp
	:target:`cv::normL2Sqr<doxid-db/de0/group__core__utils_1gae4cfcbe0059f7678012af41dbfcdfbe9>`(
		const _Tp* a,
		const _Tp* b,
		int n
		);

	static
	float
	:target:`cv::normL2Sqr<doxid-db/de0/group__core__utils_1ga6a653487f2dc0d579c803be43ddac124>`(
		const float* a,
		const float* b,
		int n
		);

	static
	std::ostream&
	:ref:`cv::operator<<<doxid-db/de0/group__core__utils_1ga5cdb7018d77509d22194d74f8e066f4c>`(
		std::ostream& out,
		const :ref:`TickMeter<doxid-d5/d33/classcv_1_1_tick_meter>`& tm
		);

	void
	:ref:`cv::parallel_for_<doxid-db/de0/group__core__utils_1gaa42ec9937b847cb52a97c613fc894c4a>`(
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& range,
		const :ref:`ParallelLoopBody<doxid-d2/d46/classcv_1_1_parallel_loop_body>`& body,
		double nstripes = -1.
		);

	:ref:`ErrorCallback<doxid-db/de0/group__core__utils_1gae52d6d11c71181d60f0a30eed078d66d>`
	:ref:`cv::redirectError<doxid-db/de0/group__core__utils_1ga8cd28eccccb695570cdaf86a572d2c0c>`(
		:ref:`ErrorCallback<doxid-db/de0/group__core__utils_1gae52d6d11c71181d60f0a30eed078d66d>` errCallback,
		void* userdata = 0,
		void** prevUserdata = 0
		);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1gab93126370b85fda2c8bfaf8c811faeaf>`(:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>` v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1ga01c0a05cb440634930ee867e52588281>`(:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>` v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1ga1464104e6565d72aed3ba05faca9bca7>`(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1ga55c0488a57595affa92c66c23fd8fb5f>`(short v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1ga08265fce1b6339d66f93787d044710d1>`(unsigned v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1ga9024811d61f2918858725a162a3aa7c9>`(int v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1gab4564cac4a7ff9d778b3632eaf47c929>`(float v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1gaa8c8aec7a8c03978852a4e91ac3ddcbf>`(double v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1gafe791a19c82a2e1f02a9402d6f83990c>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` v);

	template <typename _Tp>
	static
	_Tp
	:ref:`cv::saturate_cast<doxid-db/de0/group__core__utils_1ga5b5f1aef348ef82f0adf0464f0513013>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1gae1c96d1acbd436addabcfec6bee46a78>`(:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>` v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1gae28d54c3b982221c9a5476791c30135f>`(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1ga096260914c593c4764f588c876604beb>`(int v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1ga0d53cb04a6c671bf7a1e23bea46dfe75>`(short v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1ga5a69d0e8a848b888bcb98b975269f773>`(unsigned v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1ga9b9d98b74d781bb70b46c67cd70173f4>`(float v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1ga1b9da70e72e5a6b1ad32ace3b45c0bbf>`(double v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1ga544b394d825265f03f96535b66a7b0d5>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` v);

	:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>`
	:target:`cv::saturate_cast< schar ><doxid-db/de0/group__core__utils_1gaae16f431992f3d0e8393c09f933377ff>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga69af8961066ed7ff0abb69ac0a011e6e>`(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga7412c11051d743eb205d938ee14f6e14>`(int v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga73b7591f276a1341c64c490855e09392>`(unsigned v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga5cc3558b1356e57f382e09f301c05267>`(float v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga1cf19710f8f0d05b05e51873d5f8cb69>`(double v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga34934406a6b84f81cbec0769448d094a>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` v);

	short
	:target:`cv::saturate_cast< short ><doxid-db/de0/group__core__utils_1ga151b0d50e4f35cce93b5f9dfe5f0bd82>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1ga2858f5fe522e46a2e17662669199f6ff>`(:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>` v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1gad5146ed5f6911e421712048dc8152937>`(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1ga124d8b79de99e19bc1f6a1327bcc7865>`(int v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1ga68c9897d4f20d6f75aeefa3f463b96fb>`(short v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1gacbe14a50f82d3f79b940bd14aa270fd8>`(unsigned v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1gaaed1e14390c69784007a94d6e71482a1>`(float v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1ga678742b234d2097f865a5120c06a5141>`(double v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1ga2fd840e837a7e8046d577208bcf2d606>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` v);

	:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>`
	:target:`cv::saturate_cast< uchar ><doxid-db/de0/group__core__utils_1gad47a9e5d5775742acf7ce72ca4848e7f>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` v);

	unsigned
	:target:`cv::saturate_cast< unsigned ><doxid-db/de0/group__core__utils_1gaade231f022e1047fc12d90239a39acc6>`(float v);

	unsigned
	:target:`cv::saturate_cast< unsigned ><doxid-db/de0/group__core__utils_1ga4fa1f08b18a5a39f72c52ace9c460e19>`(double v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1ga76c1b61875701eb6ddbbea23468daf60>`(:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>` v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1gacf39a62e64bed7a1e6acead97556c4b2>`(short v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1ga5bf3d066c7efa8ae0434bdebbae2c127>`(int v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1ga7f68905aebc081a1d3a5b7a3e8954d2f>`(unsigned v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1ga8bbab11fa8e18035cc061261256f8fe6>`(float v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1ga5af18f1ff122ad9d99c3798feffcfc98>`(double v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1gab077dbff27322353dbc4a98be5d10084>`(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` v);

	:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>`
	:target:`cv::saturate_cast< ushort ><doxid-db/de0/group__core__utils_1ga45b8fa706ff9308c9edff546bd9dcf82>`(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` v);

	bool
	:ref:`cv::setBreakOnError<doxid-db/de0/group__core__utils_1gae4904ef072dede53cf161d9a6869083f>`(bool flag);

	void
	:ref:`cv::setNumThreads<doxid-db/de0/group__core__utils_1gae78625c3c2aa9e0b83ed31b73c6549c0>`(int nthreads);

	void
	:ref:`cv::setUseOptimized<doxid-db/de0/group__core__utils_1ga3c8487ea4449e550bc39575ede094c7a>`(bool onoff);

	:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
	:target:`cv::tempfile<doxid-db/de0/group__core__utils_1ga9fcedbe6d0104d7ce012987478b060d4>`(const char* suffix = 0);

	bool
	:ref:`cv::useOptimized<doxid-db/de0/group__core__utils_1gafa6d5d04eff341825573ec6c0aa6519f>`();

	:target:`CV_XADD<doxid-db/de0/group__core__utils_1ga80f9fa74288b59dbfe00795d5357e390>`(
		int* addr,
		int delta
		);

	int
	:ref:`cvCeil<doxid-db/de0/group__core__utils_1ga2938a33996791626f9f122e054ed34c4>`(double value);

	int
	:ref:`cvCeil<doxid-db/de0/group__core__utils_1ga859c43a2bc10d1bc89a9a538ec41dc80>`(float value);

	int
	:ref:`cvCeil<doxid-db/de0/group__core__utils_1gaf724f15663be3c0130026d0eab7fc5ae>`(int value);

	int
	:ref:`cvFloor<doxid-db/de0/group__core__utils_1ga1c4500a953c96901f87178f098c781af>`(double value);

	int
	:ref:`cvFloor<doxid-db/de0/group__core__utils_1gab482bef3966b6f9641d1995c3c05b160>`(float value);

	int
	:ref:`cvFloor<doxid-db/de0/group__core__utils_1gaff8dcaaf14e156f04f42e79a3db5956e>`(int value);

	int
	:ref:`cvIsInf<doxid-db/de0/group__core__utils_1gae04046b1211c77ff19a535bd78c15964>`(double value);

	int
	:ref:`cvIsInf<doxid-db/de0/group__core__utils_1gafe19ff681b44d364c0e1991d138d680c>`(float value);

	int
	:ref:`cvIsNaN<doxid-db/de0/group__core__utils_1gae41ccc6a43a73d4d8e79794c8c544407>`(double value);

	int
	:ref:`cvIsNaN<doxid-db/de0/group__core__utils_1ga572cd5c424274efedf0d43b3484e2ee5>`(float value);

	int
	:ref:`cvRound<doxid-db/de0/group__core__utils_1ga085eca238176984a0b72df2818598d85>`(double value);

	int
	:ref:`cvRound<doxid-db/de0/group__core__utils_1ga977608301213682f12e68dcf1f77c288>`(float value);

	int
	:ref:`cvRound<doxid-db/de0/group__core__utils_1ga47ead185bfeefb70d09e90d8fe8afde7>`(int value);

	// macros

	#define :target:`CV_2PI<doxid-db/de0/group__core__utils_1ga1ff4e987d10b07a31704ff710fda8df8>`
	#define :ref:`CV_Assert<doxid-db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b>`(expr)
	#define :target:`CV_CPU_AVX<doxid-db/de0/group__core__utils_1ga3bd7fc9990bb0778bbed4b893ea12e7d>`
	#define :target:`CV_CPU_AVX2<doxid-db/de0/group__core__utils_1ga57fea9517fed3010669087abadd3a759>`
	#define :target:`CV_CPU_AVX_512BW<doxid-db/de0/group__core__utils_1ga2dd8f3c21ded53b4e25d58cf605543ce>`
	#define :target:`CV_CPU_AVX_512CD<doxid-db/de0/group__core__utils_1ga2711ff80efef5096eade24e3e02248ef>`
	#define :target:`CV_CPU_AVX_512DQ<doxid-db/de0/group__core__utils_1ga7c5017b20347d73264330eb54d942c61>`
	#define :target:`CV_CPU_AVX_512ER<doxid-db/de0/group__core__utils_1ga74fcd0b4e1fab1d597e2eecbb285a681>`
	#define :target:`CV_CPU_AVX_512F<doxid-db/de0/group__core__utils_1ga0c59ee4ea12c56920f2ea6342d025146>`
	#define :target:`CV_CPU_AVX_512IFMA512<doxid-db/de0/group__core__utils_1ga04467719f0c0d036f25cef0f6a4a7f4c>`
	#define :target:`CV_CPU_AVX_512PF<doxid-db/de0/group__core__utils_1ga457eef7720e763d6718ded380227cbfa>`
	#define :target:`CV_CPU_AVX_512VBMI<doxid-db/de0/group__core__utils_1ga8322455e6dcfa4a4e7dc0f67bab69206>`
	#define :target:`CV_CPU_AVX_512VL<doxid-db/de0/group__core__utils_1ga926510f35fd39ef1adc378139fe71c37>`
	#define :target:`CV_CPU_FMA3<doxid-db/de0/group__core__utils_1ga9db70f4811a1136f8279069afdb04c47>`
	#define :target:`CV_CPU_FP16<doxid-db/de0/group__core__utils_1gadd3882bf2ff8dbfd5228b4dab2872f7a>`
	#define :target:`CV_CPU_MMX<doxid-db/de0/group__core__utils_1gaa481472118e08e296fd42fc8e5abf9ac>`
	#define :target:`CV_CPU_NEON<doxid-db/de0/group__core__utils_1gafad79db0bcd08b82f973fb680166d8d2>`
	#define :target:`CV_CPU_NONE<doxid-db/de0/group__core__utils_1ga104b95e4b2eec07215d29596064f47cb>`
	#define :target:`CV_CPU_POPCNT<doxid-db/de0/group__core__utils_1gaa40a6af4861eb57b2424dbf0352aa007>`
	#define :target:`CV_CPU_SSE<doxid-db/de0/group__core__utils_1gabb389e2e9724962a4e34b1af20a79d61>`
	#define :target:`CV_CPU_SSE2<doxid-db/de0/group__core__utils_1gab1df28a9e1b1be2549e89164ca8f071f>`
	#define :target:`CV_CPU_SSE3<doxid-db/de0/group__core__utils_1gae85ae2cf0c12946ba63fd038d3791c6e>`
	#define :target:`CV_CPU_SSE4_1<doxid-db/de0/group__core__utils_1gafa9ac4475f854fb05a2c638bf0e994a4>`
	#define :target:`CV_CPU_SSE4_2<doxid-db/de0/group__core__utils_1gac5eecc3ec419583730de850144327359>`
	#define :target:`CV_CPU_SSSE3<doxid-db/de0/group__core__utils_1ga2d225e0524b22cfcb76e95ec6f1ffea3>`
	#define :target:`CV_DECL_ALIGNED<doxid-db/de0/group__core__utils_1ga37ad1490cadef420db822300ba567bef>`(x)
	#define :ref:`CV_DbgAssert<doxid-db/de0/group__core__utils_1gafbcb487cba05bd288dbe18c433de4f6f>`(expr)
	#define :ref:`CV_ELEM_SIZE<doxid-db/de0/group__core__utils_1gafede26477297ba5774c779f6b74f451b>`(type)
	#define :ref:`CV_ELEM_SIZE1<doxid-db/de0/group__core__utils_1ga52623447b967d8e2c68794c5f709da1e>`(type)
	#define :target:`CV_ENABLE_UNROLLED<doxid-db/de0/group__core__utils_1gaf9dda5d0186a96c60bb2a1d36fff2e34>`
	#define :target:`CV_EXPORTS<doxid-db/de0/group__core__utils_1ga1bf9f0e121b54272da02379cfccd0a2b>`
	#define :target:`CV_EXPORTS_AS<doxid-db/de0/group__core__utils_1ga288d5d11e4d8675aab962ec2b2066855>`(synonym)
	#define :target:`CV_EXPORTS_W<doxid-db/de0/group__core__utils_1ga67ea671a3582ce612ac3c281e067f480>`
	#define :target:`CV_EXPORTS_W_MAP<doxid-db/de0/group__core__utils_1gaff7195942cab00fc5eafdd8ed777fac5>`
	#define :target:`CV_EXPORTS_W_SIMPLE<doxid-db/de0/group__core__utils_1ga13d649e3f5582a106caaa98f187dd34b>`
	#define :target:`CV_EXTERN_C<doxid-db/de0/group__core__utils_1ga1bfe8d7a4ade4c675fe4c5e1b7584977>`

	#define :ref:`CV_Error<doxid-db/de0/group__core__utils_1ga5b48c333c777666e076bd7052799f891>`( \
		code, \
		msg \
		)

	#define :ref:`CV_ErrorNoReturn<doxid-db/de0/group__core__utils_1ga11007dbe7d6c1bb92aa30735dea6d981>`( \
		code, \
		msg \
		)

	#define :ref:`CV_ErrorNoReturn_<doxid-db/de0/group__core__utils_1ga5c5b667353be27bdf2e378b1e4d9e9fd>`( \
		code, \
		args \
		)

	#define :ref:`CV_Error_<doxid-db/de0/group__core__utils_1ga1c0cd6e5bd9a5f915c6cab9c0632f969>`( \
		code, \
		args \
		)

	#define :target:`CV_FP16_TYPE<doxid-db/de0/group__core__utils_1gaf729e3e1d0b8d2d70df8c228bb9c7f61>`
	#define :target:`CV_Func<doxid-db/de0/group__core__utils_1ga41df7094eff07ba50594b833797da1cc>`
	#define :target:`CV_HARDWARE_MAX_FEATURE<doxid-db/de0/group__core__utils_1ga1883364dc95a41d4ed2c2a678eb323df>`
	#define :target:`CV_IN_OUT<doxid-db/de0/group__core__utils_1ga3ebcb7da2dea1ae77f77f643f54dcf09>`
	#define :target:`CV_IS_CONT_MAT<doxid-db/de0/group__core__utils_1ga533c5ceefc8e939b1b0a4d79f70d58fa>`
	#define :target:`CV_IS_MAT_CONT<doxid-db/de0/group__core__utils_1ga5d380f9788823e5f6339e468fbb08905>`(flags)
	#define :target:`CV_IS_SUBMAT<doxid-db/de0/group__core__utils_1gab477ea83aff3a1e64d55dd94d9c0ce17>`(flags)
	#define :target:`CV_LOG2<doxid-db/de0/group__core__utils_1gaba83942e77a0b0e6cd7eee6c41a9550e>`
	#define :target:`CV_MAT_CN<doxid-db/de0/group__core__utils_1ga645f5d1efbab7bb8fdd460df6e633ebc>`(flags)
	#define :target:`CV_MAT_CN_MASK<doxid-db/de0/group__core__utils_1ga9674cdb1652c965abdd63f4a8b35cd29>`
	#define :target:`CV_MAT_CONT_FLAG<doxid-db/de0/group__core__utils_1ga33697d633cfb0cc8e0855420ac031b39>`
	#define :target:`CV_MAT_CONT_FLAG_SHIFT<doxid-db/de0/group__core__utils_1ga4e8901cf64ec3224be98b260434145ef>`
	#define :target:`CV_MAT_TYPE<doxid-db/de0/group__core__utils_1ga96a7faeae8e745d65fb59a1e98b32098>`(flags)
	#define :target:`CV_MAT_TYPE_MASK<doxid-db/de0/group__core__utils_1ga258b1347e5201a388695587807009b4b>`
	#define :target:`CV_OUT<doxid-db/de0/group__core__utils_1ga4e999bc21cb894d3ed789f3f0bc26778>`
	#define :target:`CV_PI<doxid-db/de0/group__core__utils_1ga677b89fae9308b340ddaebf0dba8455f>`
	#define :target:`CV_PROP<doxid-db/de0/group__core__utils_1ga6fefb17d69c36b334374f612e3795a64>`
	#define :target:`CV_PROP_RW<doxid-db/de0/group__core__utils_1ga9e800d960e0fc30e7f83c67c98e69ed2>`
	#define :target:`CV_SUBMAT_FLAG<doxid-db/de0/group__core__utils_1gac29e34f0ff2d7d991cda4371609a4346>`
	#define :target:`CV_SUBMAT_FLAG_SHIFT<doxid-db/de0/group__core__utils_1ga89d1249ff6d3dea7477d418622f89c92>`
	#define :target:`CV_WRAP<doxid-db/de0/group__core__utils_1gae435babf3ce7cca990524b23adf6b4a3>`
	#define :target:`CV_WRAP_AS<doxid-db/de0/group__core__utils_1ga6a1f29cf8d55c0ee1b4687f6006da0b9>`(synonym)

	#define :target:`MAX<doxid-db/de0/group__core__utils_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f>`( \
		a, \
		b \
		)

	#define :target:`MIN<doxid-db/de0/group__core__utils_1ga3acffbd305ee72dcd4593c0d8af64a4f>`( \
		a, \
		b \
		)

	#define :target:`OPENCV_ABI_COMPATIBILITY<doxid-db/de0/group__core__utils_1ga811b0124be39dd6b027481429bd377aa>`

	#define :target:`__CV_CAT<doxid-db/de0/group__core__utils_1gaeafc02a0b798693c56fe860a82151e92>`( \
		x, \
		y \
		)

	#define :target:`__CV_CAT_<doxid-db/de0/group__core__utils_1gafd0e78e6713f2803d64939a63244a42f>`( \
		x, \
		y \
		)

	#define :target:`__CV_CAT__<doxid-db/de0/group__core__utils_1ga2dea0308d694f8811d9f3bc817d3d2e8>`( \
		x, \
		y \
		)

	#define :target:`__CV_EXPAND<doxid-db/de0/group__core__utils_1ga81155a470e691e2a248e98c914dc35ab>`(x)

.. _details-db/de0/group__core__utils:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; alignPtr
.. _doxid-db/de0/group__core__utils_1ga138b3f05c8a26bc74038142b4367cc31:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp*
	cv::alignPtr(
		_Tp* ptr,
		int n = (int) sizeof(_Tp)
		)

Aligns a pointer to the specified number of bytes.

The function returns the aligned pointer of the same type as the input pointer:

.. math::

	\texttt{(_Tp*)(((size_t)ptr + n-1) & -n)}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- Aligned pointer.

	*
		- n

		- Alignment size that must be a power of two.

.. index:: pair: function; alignSize
.. _doxid-db/de0/group__core__utils_1gaf2ff8f837e7a44f288b050765492f800:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>`
	cv::alignSize(
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` sz,
		int n
		)

Aligns a buffer size to the specified number of bytes.

The function returns the minimum number that is greater or equal to sz and is divisible by n :

.. math::

	\texttt{(sz + n-1) & -n}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- sz

		- Buffer size to align.

	*
		- n

		- Alignment size that must be a power of two.

.. index:: pair: function; checkHardwareSupport
.. _doxid-db/de0/group__core__utils_1ga83400136ccc28490087722ef5b3a27d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::checkHardwareSupport(int feature)

Returns true if the specified feature is supported by the host hardware.

The function returns true if the host hardware supports the specified feature. When user calls setUseOptimized(false), the subsequent calls to :ref:`checkHardwareSupport() <doxid-db/de0/group__core__utils_1ga83400136ccc28490087722ef5b3a27d9>` will return false until setUseOptimized(true) is called. This way user can dynamically switch on and off the optimized code in OpenCV.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- feature

		- The feature of interest, one of cv::CpuFeatures

.. index:: pair: function; Cholesky
.. _doxid-db/de0/group__core__utils_1gab39ce257149bdae7f9552e05c05c7642:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::Cholesky(
		float* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		float* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		)

proxy for hal::Cholesky

.. index:: pair: function; Cholesky
.. _doxid-db/de0/group__core__utils_1gac8d860b8a49bf2ed304b1c82acb916e5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::Cholesky(
		double* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		double* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		)

proxy for hal::Cholesky

.. index:: pair: function; cubeRoot
.. _doxid-db/de0/group__core__utils_1ga51452a9a5b6b232e0d67855c8e27f436:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	cv::cubeRoot(float val)

Computes the cube root of an argument.

The function cubeRoot computes :math:`\sqrt[3]{\texttt{val}}`. Negative arguments are handled correctly. NaN and Inf are not handled. The accuracy approaches the maximum possible accuracy for single-precision data.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- val

		- A function argument.

.. index:: pair: function; error
.. _doxid-db/de0/group__core__utils_1ga4910d7f86336cd4eff9dd05575667e41:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::error(const :ref:`Exception<doxid-d7/d6f/classcv_1_1_exception>`& exc)

Signals an error and raises the exception.

By default the function prints information about the error to stderr, then it either stops if :ref:`cv::setBreakOnError() <doxid-db/de0/group__core__utils_1gae4904ef072dede53cf161d9a6869083f>` had been called before or raises the exception. It is possible to alternate error processing by using :ref:`cv::redirectError() <doxid-db/de0/group__core__utils_1ga8cd28eccccb695570cdaf86a572d2c0c>`. Deprecated drop this version



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- exc

		- the exception raisen.

.. index:: pair: function; error
.. _doxid-db/de0/group__core__utils_1gacbd081fdb20423a63cf731569ba70b2b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::error(
		int _code,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& _err,
		const char* _func,
		const char* _file,
		int _line
		)

Signals an error and raises the exception.

By default the function prints information about the error to stderr, then it either stops if :ref:`setBreakOnError() <doxid-db/de0/group__core__utils_1gae4904ef072dede53cf161d9a6869083f>` had been called before or raises the exception. It is possible to alternate error processing by using :ref:`redirectError() <doxid-db/de0/group__core__utils_1ga8cd28eccccb695570cdaf86a572d2c0c>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- _code

		- - error code (:ref:`Error::Code <doxid-d6/d43/namespacecv_1_1_error_1a759fa1af92f7aa7377c76ffb142abcca>`)

	*
		- _err

		- - error description

	*
		- _func

		- - function name. Available only when the compiler supports getting it

	*
		- _file

		- - source file name where the error has occurred

	*
		- _line

		- - line number in the source file where the error has occurred



.. rubric:: See also:

:ref:`CV_Error <doxid-db/de0/group__core__utils_1ga5b48c333c777666e076bd7052799f891>`, :ref:`CV_Error\_ <doxid-db/de0/group__core__utils_1ga1c0cd6e5bd9a5f915c6cab9c0632f969>`, :ref:`CV_ErrorNoReturn <doxid-db/de0/group__core__utils_1ga11007dbe7d6c1bb92aa30735dea6d981>`, :ref:`CV_ErrorNoReturn\_ <doxid-db/de0/group__core__utils_1ga5c5b667353be27bdf2e378b1e4d9e9fd>`, :ref:`CV_Assert <doxid-db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b>`, :ref:`CV_DbgAssert <doxid-db/de0/group__core__utils_1gafbcb487cba05bd288dbe18c433de4f6f>`

.. index:: pair: function; errorNoReturn
.. _doxid-db/de0/group__core__utils_1gafa9d164ef0f7b3f14a57f77f4e4bc71b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::errorNoReturn(
		int _code,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& _err,
		const char* _func,
		const char* _file,
		int _line
		)

same as :ref:`cv::error <doxid-db/de0/group__core__utils_1gacbd081fdb20423a63cf731569ba70b2b>`, but does not return

.. index:: pair: function; fastAtan2
.. _doxid-db/de0/group__core__utils_1ga7b356498dd314380a0c386b059852270:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	float
	cv::fastAtan2(
		float y,
		float x
		)

Calculates the angle of a 2D vector in degrees.

The function fastAtan2 calculates the full-range angle of an input 2D vector. The angle is measured in degrees and varies from 0 to 360 degrees. The accuracy is about 0.3 degrees.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- x-coordinate of the vector.

	*
		- y

		- y-coordinate of the vector.

.. index:: pair: function; fastFree
.. _doxid-db/de0/group__core__utils_1ga4b0d54a6957761ba64880fa51c4b8a6b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::fastFree(void* ptr)

Deallocates a memory buffer.

The function deallocates the buffer allocated with fastMalloc . If NULL pointer is passed, the function does nothing. C version of the function clears the pointer *pptr* to avoid problems with double memory deallocation.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ptr

		- Pointer to the allocated buffer.

.. index:: pair: function; fastMalloc
.. _doxid-db/de0/group__core__utils_1ga0ad6f1fcb40635cb776ade61f9b88c6e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	cv::fastMalloc(:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bufSize)

Allocates an aligned memory buffer.

The function allocates the buffer of the specified size and returns it. When the buffer size is 16 bytes or more, the returned buffer is aligned to 16 bytes.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- bufSize

		- Allocated buffer size.

.. index:: pair: function; format
.. _doxid-db/de0/group__core__utils_1ga0cccdb2f73859309b0611cf70b1b9409:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`String<doxid-dc/d0e/classcv_1_1_string>`
	cv::format(
		const char* fmt,
		...
		)

Returns a text string formatted using the printf-like expression.

The function acts like sprintf but forms and returns an STL string. It can be used to form an error message in the :ref:`Exception <doxid-d7/d6f/classcv_1_1_exception>` constructor.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fmt

		- printf-compatible formatting specifiers.

.. index:: pair: function; getBuildInformation
.. _doxid-db/de0/group__core__utils_1ga0ae377100bc03ce22322926bba7fdbb5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`&
	cv::getBuildInformation()

Returns full configuration time cmake output.

Returned value is raw cmake output including version control system revision, compiler version, compiler flags, enabled modules and third party libraries, etc. Output format depends on target architecture.

.. index:: pair: function; getCPUTickCount
.. _doxid-db/de0/group__core__utils_1gaf3070efdcfef6f1e7ac28d2b6a29a7c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`
	cv::getCPUTickCount()

Returns the number of CPU ticks.

The function returns the current number of CPU ticks on some architectures (such as x86, x64, PowerPC). On other platforms the function is equivalent to getTickCount. It can also be used for very accurate time measurements, as well as for :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>` initialization. Note that in case of multi-CPU systems a thread, from which getCPUTickCount is called, can be suspended and resumed at another CPU with its own counter. So, theoretically (and practically) the subsequent calls to the function do not necessary return the monotonously increasing values. Also, since a modern CPU varies the CPU frequency depending on the load, the number of CPU clocks spent in some code cannot be directly converted to time units. Therefore, getTickCount is generally a preferable solution for measuring execution time.

.. index:: pair: function; getNumberOfCPUs
.. _doxid-db/de0/group__core__utils_1gadf09fc982bf4f17bc84bd1abce5d0863:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::getNumberOfCPUs()

Returns the number of logical CPUs available for the process.

.. index:: pair: function; getNumThreads
.. _doxid-db/de0/group__core__utils_1ga2db334ec41d98da3129ef4a2342fc4d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::getNumThreads()

Returns the number of threads used by OpenCV for parallel regions.

Always returns 1 if OpenCV is built without threading support.

The exact meaning of return value depends on the threading framework used by OpenCV library:

* ``TBB`` – The number of threads, that OpenCV will try to use for parallel regions. If there is any tbb::thread_scheduler_init in user code conflicting with OpenCV, then function returns default number of threads used by TBB library.

* ``OpenMP`` – An upper bound on the number of threads that could be used to form a new team.

* ``Concurrency`` – The number of threads, that OpenCV will try to use for parallel regions.

* ``GCD`` – Unsupported; returns the GCD thread pool limit (512) for compatibility.

* ``C=`` – The number of threads, that OpenCV will try to use for parallel regions, if before called setNumThreads with threads > 0, otherwise returns the number of logical CPUs, available for the process.



.. rubric:: See also:

:ref:`setNumThreads <doxid-db/de0/group__core__utils_1gae78625c3c2aa9e0b83ed31b73c6549c0>`, :ref:`getThreadNum <doxid-db/de0/group__core__utils_1gaf9cc0cb10097686a9da60f6c587e5774>`

.. index:: pair: function; getThreadNum
.. _doxid-db/de0/group__core__utils_1gaf9cc0cb10097686a9da60f6c587e5774:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::getThreadNum()

Returns the index of the currently executed thread within the current parallel region. Always returns 0 if called outside of parallel region.

The exact meaning of return value depends on the threading framework used by OpenCV library:

* ``TBB`` – Unsupported with current 4.1 TBB release. Maybe will be supported in future.

* ``OpenMP`` – The thread number, within the current team, of the calling thread.

* ``Concurrency`` – An ID for the virtual processor that the current context is executing on (0 for master thread and unique number for others, but not necessary 1,2,3,...).

* ``GCD`` – System calling thread's ID. Never returns 0 inside parallel region.

* ``C=`` – The index of the current parallel task.



.. rubric:: See also:

:ref:`setNumThreads <doxid-db/de0/group__core__utils_1gae78625c3c2aa9e0b83ed31b73c6549c0>`, :ref:`getNumThreads <doxid-db/de0/group__core__utils_1ga2db334ec41d98da3129ef4a2342fc4d4>`

.. index:: pair: function; getTickCount
.. _doxid-db/de0/group__core__utils_1gae73f58000611a1af25dd36d496bf4487:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>`
	cv::getTickCount()

Returns the number of ticks.

The function returns the number of ticks after the certain event (for example, when the machine was turned on). It can be used to initialize :ref:`RNG <doxid-d3/df8/classcv_1_1_r_n_g>` or to measure a function execution time by reading the tick count before and after the function call.



.. rubric:: See also:

:ref:`getTickFrequency <doxid-db/de0/group__core__utils_1ga705441a9ef01f47acdc55d87fbe5090c>`, :ref:`TickMeter <doxid-d5/d33/classcv_1_1_tick_meter>`

.. index:: pair: function; getTickFrequency
.. _doxid-db/de0/group__core__utils_1ga705441a9ef01f47acdc55d87fbe5090c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::getTickFrequency()

Returns the number of ticks per second.

The function returns the number of ticks per second. That is, the following code computes the execution time in seconds:

.. ref-code-block:: cpp

	double t = (double)getTickCount();
	// do something ...
	t = ((double)getTickCount() - t)/getTickFrequency();



.. rubric:: See also:

:ref:`getTickCount <doxid-db/de0/group__core__utils_1gae73f58000611a1af25dd36d496bf4487>`, :ref:`TickMeter <doxid-d5/d33/classcv_1_1_tick_meter>`

.. index:: pair: function; LU
.. _doxid-db/de0/group__core__utils_1ga6caa4b9c6213b619c6e6f7523dc520fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::LU(
		float* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		float* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		)

proxy for hal::LU

.. index:: pair: function; LU
.. _doxid-db/de0/group__core__utils_1gaf80b646047515ac185536d342f3219a5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::LU(
		double* A,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` astep,
		int m,
		double* b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` bstep,
		int n
		)

proxy for hal::LU

.. index:: pair: function; operator<<
.. _doxid-db/de0/group__core__utils_1ga5cdb7018d77509d22194d74f8e066f4c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	std::ostream&
	cv::operator<<(
		std::ostream& out,
		const :ref:`TickMeter<doxid-d5/d33/classcv_1_1_tick_meter>`& tm
		)

output operator

.. ref-code-block:: cpp

	TickMeter tm;
	tm.start();
	// do something ...
	tm.stop();
	std::cout << tm;

.. index:: pair: function; parallel_for_
.. _doxid-db/de0/group__core__utils_1gaa42ec9937b847cb52a97c613fc894c4a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::parallel_for_(
		const :ref:`Range<doxid-d7/d65/classcv_1_1_range>`& range,
		const :ref:`ParallelLoopBody<doxid-d2/d46/classcv_1_1_parallel_loop_body>`& body,
		double nstripes = -1.
		)

Parallel data processor.

.. index:: pair: function; redirectError
.. _doxid-db/de0/group__core__utils_1ga8cd28eccccb695570cdaf86a572d2c0c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`ErrorCallback<doxid-db/de0/group__core__utils_1gae52d6d11c71181d60f0a30eed078d66d>`
	cv::redirectError(
		:ref:`ErrorCallback<doxid-db/de0/group__core__utils_1gae52d6d11c71181d60f0a30eed078d66d>` errCallback,
		void* userdata = 0,
		void** prevUserdata = 0
		)

Sets the new error handler and the optional user data.

The function sets the new error handler, called from :ref:`cv::error() <doxid-db/de0/group__core__utils_1gacbd081fdb20423a63cf731569ba70b2b>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- errCallback

		- the new error handler. If NULL, the default error handler is used.

	*
		- userdata

		- the optional user data pointer, passed to the callback.

	*
		- prevUserdata

		- the optional output parameter where the previous user data pointer is stored



.. rubric:: Returns:

the previous error handler

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1gab93126370b85fda2c8bfaf8c811faeaf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(:ref:`uchar<doxid-d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc>` v)

Template function for accurate conversion from one primitive type to another.

The functions saturate_cast resemble the standard C++ cast operations, such as static_cast<T>() and others. They perform an efficient and accurate conversion from one primitive type to another (see the introduction chapter). saturate in the name means that when the input value v is out of the range of the target type, the result is not formed just by taking low bits of the input, but instead the value is clipped. For example:

.. ref-code-block:: cpp

	uchar a = saturate_cast<uchar>(-100); // a = 0 (UCHAR_MIN)
	short b = saturate_cast<short>(33333.33333); // b = 32767 (SHRT_MAX)

Such clipping is done when the target type is unsigned char , signed char , unsigned short or signed short . For 32-bit integers, no clipping is done.

When the parameter is a floating-point value and the target type is an integer (8-, 16- or 32-bit), the floating-point value is first rounded to the nearest integer and then clipped if needed (when the target type is 8- or 16-bit).

This operation is used in the simplest or most complex image processing functions in OpenCV.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- v

		- Function parameter.



.. rubric:: See also:

:ref:`add <doxid-d2/de8/group__core__array_1ga10ac1bfb180e2cfda1701d06c24fdbd6>`, :ref:`subtract <doxid-d2/de8/group__core__array_1gaa0f00d98b4b5edeaeb7b8333b2de353b>`, :ref:`multiply <doxid-d2/de8/group__core__array_1ga979d898a58d7f61c53003e162e7ad89f>`, :ref:`divide <doxid-d2/de8/group__core__array_1ga6db555d30115642fedae0cda05604874>`, :ref:`Mat::convertTo <doxid-db/de6/classcv_1_1_mat_1adf88c60c5b4980e05bb556080916978b>`

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1ga01c0a05cb440634930ee867e52588281:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(:ref:`schar<doxid-d1/d1b/group__core__hal__interface_1ga0fd9ce9d735064461bebfe6037026093>` v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1ga1464104e6565d72aed3ba05faca9bca7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(:ref:`ushort<doxid-d1/d1b/group__core__hal__interface_1gab95f123a6c9bcfee6a343170ef8c5f69>` v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1ga55c0488a57595affa92c66c23fd8fb5f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(short v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1ga08265fce1b6339d66f93787d044710d1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(unsigned v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1ga9024811d61f2918858725a162a3aa7c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(int v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1gab4564cac4a7ff9d778b3632eaf47c929:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(float v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1gaa8c8aec7a8c03978852a4e91ac3ddcbf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(double v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1gafe791a19c82a2e1f02a9402d6f83990c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(:ref:`int64<doxid-d1/d1b/group__core__hal__interface_1ga7cde0074dfd288f2d70c0e035dacb28a>` v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; saturate_cast
.. _doxid-db/de0/group__core__utils_1ga5b5f1aef348ef82f0adf0464f0513013:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename _Tp>
	static
	_Tp
	cv::saturate_cast(:ref:`uint64<doxid-d1/d1b/group__core__hal__interface_1gabc0f5bc07737e498f287334775dff2b6>` v)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; setBreakOnError
.. _doxid-db/de0/group__core__utils_1gae4904ef072dede53cf161d9a6869083f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::setBreakOnError(bool flag)

Sets/resets the break-on-error mode.

When the break-on-error mode is set, the default error handler issues a hardware exception, which can make debugging more convenient.



.. rubric:: Returns:

the previous state

.. index:: pair: function; setNumThreads
.. _doxid-db/de0/group__core__utils_1gae78625c3c2aa9e0b83ed31b73c6549c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::setNumThreads(int nthreads)

OpenCV will try to set the number of threads for the next parallel region.

If threads == 0, OpenCV will disable threading optimizations and run all it's functions sequentially. Passing threads < 0 will reset threads number to system default. This function must be called outside of parallel region.

OpenCV will try to run it's functions with specified threads number, but some behaviour differs from framework:

* ``TBB`` – User-defined parallel constructions will run with the same threads number, if another does not specified. If later on user creates own scheduler, OpenCV will use it.

* ``OpenMP`` – No special defined behaviour.

* ``Concurrency`` – If threads == 1, OpenCV will disable threading optimizations and run it's functions sequentially.

* ``GCD`` – Supports only values <= 0.

* ``C=`` – No special defined behaviour.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- nthreads

		- Number of threads used by OpenCV.



.. rubric:: See also:

:ref:`getNumThreads <doxid-db/de0/group__core__utils_1ga2db334ec41d98da3129ef4a2342fc4d4>`, :ref:`getThreadNum <doxid-db/de0/group__core__utils_1gaf9cc0cb10097686a9da60f6c587e5774>`

.. index:: pair: function; setUseOptimized
.. _doxid-db/de0/group__core__utils_1ga3c8487ea4449e550bc39575ede094c7a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::setUseOptimized(bool onoff)

Enables or disables the optimized code.

The function can be used to dynamically turn on and off optimized code (code that uses SSE2, AVX, and other instructions on the platforms that support it). It sets a global flag that is further checked by OpenCV functions. Since the flag is not checked in the inner OpenCV loops, it is only safe to call the function on the very top level in your application where you can be sure that no other OpenCV function is currently executed.

By default, the optimized code is enabled unless you disable it in CMake. The current status can be retrieved using useOptimized.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- onoff

		- The boolean flag specifying whether the optimized code should be used (onoff=true) or not (onoff=false).

.. index:: pair: function; useOptimized
.. _doxid-db/de0/group__core__utils_1gafa6d5d04eff341825573ec6c0aa6519f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::useOptimized()

Returns the status of optimized code usage.

The function returns true if the optimized code is enabled. Otherwise, it returns false.

.. index:: pair: function; cvCeil
.. _doxid-db/de0/group__core__utils_1ga2938a33996791626f9f122e054ed34c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvCeil(double value)

Rounds floating-point number to the nearest integer not smaller than the original.

The function computes an integer i such that:

.. math::

	i \le \texttt{value} < i+1



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- value

		- floating-point number. If the value is outside of INT_MIN ... INT_MAX range, the result is not defined.

.. index:: pair: function; cvCeil
.. _doxid-db/de0/group__core__utils_1ga859c43a2bc10d1bc89a9a538ec41dc80:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvCeil(float value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvCeil
.. _doxid-db/de0/group__core__utils_1gaf724f15663be3c0130026d0eab7fc5ae:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvCeil(int value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvFloor
.. _doxid-db/de0/group__core__utils_1ga1c4500a953c96901f87178f098c781af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvFloor(double value)

Rounds floating-point number to the nearest integer not larger than the original.

The function computes an integer i such that:

.. math::

	i \le \texttt{value} < i+1



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- value

		- floating-point number. If the value is outside of INT_MIN ... INT_MAX range, the result is not defined.

.. index:: pair: function; cvFloor
.. _doxid-db/de0/group__core__utils_1gab482bef3966b6f9641d1995c3c05b160:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvFloor(float value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvFloor
.. _doxid-db/de0/group__core__utils_1gaff8dcaaf14e156f04f42e79a3db5956e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvFloor(int value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvIsInf
.. _doxid-db/de0/group__core__utils_1gae04046b1211c77ff19a535bd78c15964:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvIsInf(double value)

Determines if the argument is Infinity.

The function returns 1 if the argument is a plus or minus infinity (as defined by IEEE754 standard) and 0 otherwise.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- value

		- The input floating-point value

.. index:: pair: function; cvIsInf
.. _doxid-db/de0/group__core__utils_1gafe19ff681b44d364c0e1991d138d680c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvIsInf(float value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvIsNaN
.. _doxid-db/de0/group__core__utils_1gae41ccc6a43a73d4d8e79794c8c544407:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvIsNaN(double value)

Determines if the argument is Not A Number.

The function returns 1 if the argument is Not A Number (as defined by IEEE754 standard), 0 otherwise.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- value

		- The input floating-point value

.. index:: pair: function; cvIsNaN
.. _doxid-db/de0/group__core__utils_1ga572cd5c424274efedf0d43b3484e2ee5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvIsNaN(float value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvRound
.. _doxid-db/de0/group__core__utils_1ga085eca238176984a0b72df2818598d85:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvRound(double value)

Rounds floating-point number to the nearest integer.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- value

		- floating-point number. If the value is outside of INT_MIN ... INT_MAX range, the result is not defined.

.. index:: pair: function; cvRound
.. _doxid-db/de0/group__core__utils_1ga977608301213682f12e68dcf1f77c288:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvRound(float value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; cvRound
.. _doxid-db/de0/group__core__utils_1ga47ead185bfeefb70d09e90d8fe8afde7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cvRound(int value)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

Macros
------

.. index:: pair: define; CV_Assert
.. _doxid-db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_Assert(expr)

Checks a condition at runtime and throws exception if it fails.

The macros CV_Assert (and :ref:`CV_DbgAssert(expr) <doxid-db/de0/group__core__utils_1gafbcb487cba05bd288dbe18c433de4f6f>`) evaluate the specified expression. If it is 0, the macros raise an error (see :ref:`cv::error <doxid-db/de0/group__core__utils_1gacbd081fdb20423a63cf731569ba70b2b>`). The macro CV_Assert checks the condition in both Debug and Release configurations while CV_DbgAssert is only retained in the Debug configuration.

.. index:: pair: define; CV_DbgAssert
.. _doxid-db/de0/group__core__utils_1gafbcb487cba05bd288dbe18c433de4f6f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_DbgAssert(expr)

replaced with :ref:`CV_Assert(expr) <doxid-db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b>` in Debug configuration

.. index:: pair: define; CV_ELEM_SIZE
.. _doxid-db/de0/group__core__utils_1gafede26477297ba5774c779f6b74f451b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_ELEM_SIZE(type)

0x3a50 = 11 10 10 01 01 00 00 ~ array of log2(sizeof(arr_type_elem))

.. index:: pair: define; CV_ELEM_SIZE1
.. _doxid-db/de0/group__core__utils_1ga52623447b967d8e2c68794c5f709da1e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_ELEM_SIZE1(type)

Size of each channel item, 0x8442211 = 1000 0100 0100 0010 0010 0001 0001 ~ array of sizeof(arr_type_elem)

.. index:: pair: define; CV_Error
.. _doxid-db/de0/group__core__utils_1ga5b48c333c777666e076bd7052799f891:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_Error( \
		code, \
		msg \
		)

Call the error handler.

Currently, the error handler prints the error code and the error message to the standard error stream ``stderr``. In the Debug configuration, it then provokes memory access violation, so that the execution stack and all the parameters can be analyzed by the debugger. In the Release configuration, the exception is thrown.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- code

		- one of Error::Code

	*
		- msg

		- error message

.. index:: pair: define; CV_ErrorNoReturn
.. _doxid-db/de0/group__core__utils_1ga11007dbe7d6c1bb92aa30735dea6d981:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_ErrorNoReturn( \
		code, \
		msg \
		)

same as :ref:`CV_Error(code,msg) <doxid-db/de0/group__core__utils_1ga5b48c333c777666e076bd7052799f891>`, but does not return

.. index:: pair: define; CV_ErrorNoReturn_
.. _doxid-db/de0/group__core__utils_1ga5c5b667353be27bdf2e378b1e4d9e9fd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_ErrorNoReturn_( \
		code, \
		args \
		)

same as :ref:`CV_Error\_(code,args) <doxid-db/de0/group__core__utils_1ga1c0cd6e5bd9a5f915c6cab9c0632f969>`, but does not return

.. index:: pair: define; CV_Error_
.. _doxid-db/de0/group__core__utils_1ga1c0cd6e5bd9a5f915c6cab9c0632f969:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define CV_Error_( \
		code, \
		args \
		)

Call the error handler.

This macro can be used to construct an error message on-fly to include some dynamic information, for example:

.. ref-code-block:: cpp

	// note the extra parentheses around the formatted text message
	CV_Error_( CV_StsOutOfRange,
	("the value at (%d, %d)=%g is out of range", badPt.x, badPt.y, badValue));



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- code

		- one of Error::Code

	*
		- args

		- printf-like formatted error message in parentheses

