.. index:: pair: group; Per-element Operations
.. _doxid-d8/d34/group__cudaarithm__elem:

Per-element Operations
======================

.. toctree::
	:hidden:

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// global functions

	void
	:ref:`cv::cuda::abs<doxid-d8/d34/group__cudaarithm__elem_1ga54a72bd772494ab34d05406fd76df2b6>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::absdiff<doxid-d8/d34/group__cudaarithm__elem_1gac062b283cf46ee90f74a773d3382ab54>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::add<doxid-d8/d34/group__cudaarithm__elem_1ga5d9794bde97ed23d1c1485249074a8b1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::addWeighted<doxid-d8/d34/group__cudaarithm__elem_1ga2cd14a684ea70c6ab2a63ee90ffe6201>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double beta,
		double gamma,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::bitwise_and<doxid-d8/d34/group__cudaarithm__elem_1ga78d7c1a013877abd4237fbfc4e13bd76>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::bitwise_not<doxid-d8/d34/group__cudaarithm__elem_1gae58159a2259ae1acc76b531c171cf06a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::bitwise_or<doxid-d8/d34/group__cudaarithm__elem_1gafd098ee3e51c68daa793999c1da3dfb7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::bitwise_xor<doxid-d8/d34/group__cudaarithm__elem_1ga3d95d4faafb099aacf18e8b915a4ad8d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::cartToPolar<doxid-d8/d34/group__cudaarithm__elem_1ga82210c7d1c1d42e616e554bf75a53480>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::compare<doxid-d8/d34/group__cudaarithm__elem_1ga4d41cd679f4a83862a3de71a6057db54>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int cmpop,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::divide<doxid-d8/d34/group__cudaarithm__elem_1ga124315aa226260841e25cc0b9ea99dc3>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::exp<doxid-d8/d34/group__cudaarithm__elem_1gac6e51541d3bb0a7a396128e4d5919b61>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::log<doxid-d8/d34/group__cudaarithm__elem_1gaae9c60739e2d1a977b4d3250a0be42ca>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::lshift<doxid-d8/d34/group__cudaarithm__elem_1gafd072accecb14c9adccdad45e3bf2300>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`Scalar_<doxid-d7/d13/classcv_1_1_scalar__>`<int> val,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::magnitude<doxid-d8/d34/group__cudaarithm__elem_1ga3d17f4fcd79d7c01fadd217969009463>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` xy,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::magnitude<doxid-d8/d34/group__cudaarithm__elem_1ga140ce0b9e03c34ca416bc86ddae07a10>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::magnitudeSqr<doxid-d8/d34/group__cudaarithm__elem_1ga7613e382d257e150033d0ce4d6098f6a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` xy,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::magnitudeSqr<doxid-d8/d34/group__cudaarithm__elem_1gaa4982e5866671f77697d1c342921db6c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::max<doxid-d8/d34/group__cudaarithm__elem_1gadb5dd3d870f10c0866035755b929b1e7>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::min<doxid-d8/d34/group__cudaarithm__elem_1ga74f0b05a65b3d949c237abb5e6c60867>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::multiply<doxid-d8/d34/group__cudaarithm__elem_1ga497cc0615bf717e1e615143b56f00591>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::phase<doxid-d8/d34/group__cudaarithm__elem_1ga5b75ec01be06dcd6e27ada09a0d4656a>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::polarToCart<doxid-d8/d34/group__cudaarithm__elem_1ga01516a286a329c303c2db746513dd9df>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` magnitude,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` angle,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` x,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` y,
		bool angleInDegrees = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::pow<doxid-d8/d34/group__cudaarithm__elem_1ga82d04ef4bcc4dfa9bfbe76488007c6c4>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double power,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::rshift<doxid-d8/d34/group__cudaarithm__elem_1ga87af0b66358cc302676f35c1fd56c2ed>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`Scalar_<doxid-d7/d13/classcv_1_1_scalar__>`<int> val,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	static
	void
	:ref:`cv::cuda::scaleAdd<doxid-d8/d34/group__cudaarithm__elem_1ga9670da19276361e1681f69226e2071fb>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::sqr<doxid-d8/d34/group__cudaarithm__elem_1ga8aae233da90ce0ffe309ab8004342acb>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::sqrt<doxid-d8/d34/group__cudaarithm__elem_1ga09303680cb1a5521a922b6d392028d8c>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	void
	:ref:`cv::cuda::subtract<doxid-d8/d34/group__cudaarithm__elem_1ga6eab60fc250059e2fda79c5636bd067f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

	double
	:ref:`cv::cuda::threshold<doxid-d8/d34/group__cudaarithm__elem_1ga40f1c94ae9a9456df3cad48e3cb008e1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double thresh,
		double maxval,
		int type,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		);

.. _details-d8/d34/group__cudaarithm__elem:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; abs
.. _doxid-d8/d34/group__cudaarithm__elem_1ga54a72bd772494ab34d05406fd76df2b6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::abs(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes an absolute value of each matrix element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`abs <doxid-d8/d34/group__cudaarithm__elem_1ga54a72bd772494ab34d05406fd76df2b6>`

.. index:: pair: function; absdiff
.. _doxid-d8/d34/group__cudaarithm__elem_1gac062b283cf46ee90f74a773d3382ab54:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::absdiff(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes per-element absolute difference of two matrices (or of a matrix and scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`absdiff <doxid-d8/d34/group__cudaarithm__elem_1gac062b283cf46ee90f74a773d3382ab54>`

.. index:: pair: function; add
.. _doxid-d8/d34/group__cudaarithm__elem_1ga5d9794bde97ed23d1c1485249074a8b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::add(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a matrix-matrix or matrix-scalar sum.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar. Matrix should have the same size and type as src1 .

	*
		- dst

		- Destination matrix that has the same size and number of channels as the input array(s). The depth is defined by dtype or src1 depth.

	*
		- mask

		- Optional operation mask, 8-bit single channel array, that specifies elements of the destination array to be changed. The mask can be used only with single channel images.

	*
		- dtype

		- Optional depth of the output array.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`add <doxid-d8/d34/group__cudaarithm__elem_1ga5d9794bde97ed23d1c1485249074a8b1>`

.. index:: pair: function; addWeighted
.. _doxid-d8/d34/group__cudaarithm__elem_1ga2cd14a684ea70c6ab2a63ee90ffe6201:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::addWeighted(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		double beta,
		double gamma,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes the weighted sum of two arrays.

The function addWeighted calculates the weighted sum of two arrays as follows:

.. math::

	\texttt{dst} (I)= \texttt{saturate} ( \texttt{src1} (I)* \texttt{alpha} + \texttt{src2} (I)* \texttt{beta} + \texttt{gamma} )

where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each channel is processed independently.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source array.

	*
		- alpha

		- Weight for the first array elements.

	*
		- src2

		- Second source array of the same size and channel number as src1 .

	*
		- beta

		- Weight for the second array elements.

	*
		- dst

		- Destination array that has the same size and number of channels as the input arrays.

	*
		- gamma

		- Scalar added to each sum.

	*
		- dtype

		- Optional depth of the destination array. When both input arrays have the same depth, dtype can be set to -1, which will be equivalent to src1.depth().

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`addWeighted <doxid-d8/d34/group__cudaarithm__elem_1ga2cd14a684ea70c6ab2a63ee90ffe6201>`

.. index:: pair: function; bitwise_and
.. _doxid-d8/d34/group__cudaarithm__elem_1ga78d7c1a013877abd4237fbfc4e13bd76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::bitwise_and(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a per-element bitwise conjunction of two matrices (or of matrix and scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- mask

		- Optional operation mask, 8-bit single channel array, that specifies elements of the destination array to be changed. The mask can be used only with single channel images.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; bitwise_not
.. _doxid-d8/d34/group__cudaarithm__elem_1gae58159a2259ae1acc76b531c171cf06a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::bitwise_not(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a per-element bitwise inversion.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- mask

		- Optional operation mask, 8-bit single channel array, that specifies elements of the destination array to be changed. The mask can be used only with single channel images.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; bitwise_or
.. _doxid-d8/d34/group__cudaarithm__elem_1gafd098ee3e51c68daa793999c1da3dfb7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::bitwise_or(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a per-element bitwise disjunction of two matrices (or of matrix and scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- mask

		- Optional operation mask, 8-bit single channel array, that specifies elements of the destination array to be changed. The mask can be used only with single channel images.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; bitwise_xor
.. _doxid-d8/d34/group__cudaarithm__elem_1ga3d95d4faafb099aacf18e8b915a4ad8d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::bitwise_xor(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs a per-element bitwise exclusive or operation of two matrices (or of matrix and scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- mask

		- Optional operation mask, 8-bit single channel array, that specifies elements of the destination array to be changed. The mask can be used only with single channel images.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; cartToPolar
.. _doxid-d8/d34/group__cudaarithm__elem_1ga82210c7d1c1d42e616e554bf75a53480:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::cartToPolar(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Converts Cartesian coordinates into polar.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- Source matrix containing real components ( CV_32FC1 ).

	*
		- y

		- Source matrix containing imaginary components ( CV_32FC1 ).

	*
		- magnitude

		- Destination matrix of float magnitudes ( CV_32FC1 ).

	*
		- angle

		- Destination matrix of angles ( CV_32FC1 ).

	*
		- angleInDegrees

		- Flag for angles that must be evaluated in degrees.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`cartToPolar <doxid-d8/d34/group__cudaarithm__elem_1ga82210c7d1c1d42e616e554bf75a53480>`

.. index:: pair: function; compare
.. _doxid-d8/d34/group__cudaarithm__elem_1ga4d41cd679f4a83862a3de71a6057db54:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::compare(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int cmpop,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Compares elements of two matrices (or of a matrix and scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- cmpop

		- 
		  Flag specifying the relation between the elements to be checked:
		  
		  * **CMP_EQ:** a(.) == b(.)
		  
		  * **CMP_GT:** a(.) > b(.)
		  
		  * **CMP_GE:** a(.) >= b(.)
		  
		  * **CMP_LT:** a(.) < b(.)
		  
		  * **CMP_LE:** a(.) <= b(.)
		  
		  * **CMP_NE:** a(.) != b(.)

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`compare <doxid-d8/d34/group__cudaarithm__elem_1ga4d41cd679f4a83862a3de71a6057db54>`

.. index:: pair: function; divide
.. _doxid-d8/d34/group__cudaarithm__elem_1ga124315aa226260841e25cc0b9ea99dc3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::divide(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a matrix-matrix or matrix-scalar division.

This function, in contrast to divide, uses a round-down rounding mode.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or a scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and number of channels as the input array(s). The depth is defined by dtype or src1 depth.

	*
		- scale

		- Optional scale factor.

	*
		- dtype

		- Optional depth of the output array.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`divide <doxid-d8/d34/group__cudaarithm__elem_1ga124315aa226260841e25cc0b9ea99dc3>`

.. index:: pair: function; exp
.. _doxid-d8/d34/group__cudaarithm__elem_1gac6e51541d3bb0a7a396128e4d5919b61:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::exp(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes an exponent of each matrix element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`exp <doxid-d8/d34/group__cudaarithm__elem_1gac6e51541d3bb0a7a396128e4d5919b61>`

.. index:: pair: function; log
.. _doxid-d8/d34/group__cudaarithm__elem_1gaae9c60739e2d1a977b4d3250a0be42ca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::log(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a natural logarithm of absolute value of each matrix element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`log <doxid-d8/d34/group__cudaarithm__elem_1gaae9c60739e2d1a977b4d3250a0be42ca>`

.. index:: pair: function; lshift
.. _doxid-d8/d34/group__cudaarithm__elem_1gafd072accecb14c9adccdad45e3bf2300:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::lshift(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`Scalar_<doxid-d7/d13/classcv_1_1_scalar__>`<int> val,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs pixel by pixel right left of an image by a constant value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix. Supports 1, 3 and 4 channels images with CV_8U , CV_16U or CV_32S depth.

	*
		- val

		- Constant values, one per channel.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; magnitude
.. _doxid-d8/d34/group__cudaarithm__elem_1ga3d17f4fcd79d7c01fadd217969009463:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::magnitude(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` xy,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes magnitudes of complex matrix elements.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- xy

		- Source complex matrix in the interleaved format ( CV_32FC2 ).

	*
		- magnitude

		- Destination matrix of float magnitudes ( CV_32FC1 ).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`magnitude <doxid-d8/d34/group__cudaarithm__elem_1ga3d17f4fcd79d7c01fadd217969009463>`

.. index:: pair: function; magnitude
.. _doxid-d8/d34/group__cudaarithm__elem_1ga140ce0b9e03c34ca416bc86ddae07a10:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::magnitude(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. computes magnitude of each (x(i), y(i)) vector supports only floating-point source



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- Source matrix containing real components ( CV_32FC1 ).

	*
		- y

		- Source matrix containing imaginary components ( CV_32FC1 ).

	*
		- magnitude

		- Destination matrix of float magnitudes ( CV_32FC1 ).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; magnitudeSqr
.. _doxid-d8/d34/group__cudaarithm__elem_1ga7613e382d257e150033d0ce4d6098f6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::magnitudeSqr(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` xy,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes squared magnitudes of complex matrix elements.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- xy

		- Source complex matrix in the interleaved format ( CV_32FC2 ).

	*
		- magnitude

		- Destination matrix of float magnitude squares ( CV_32FC1 ).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; magnitudeSqr
.. _doxid-d8/d34/group__cudaarithm__elem_1gaa4982e5866671f77697d1c342921db6c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::magnitudeSqr(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` magnitude,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. computes squared magnitude of each (x(i), y(i)) vector supports only floating-point source



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- Source matrix containing real components ( CV_32FC1 ).

	*
		- y

		- Source matrix containing imaginary components ( CV_32FC1 ).

	*
		- magnitude

		- Destination matrix of float magnitude squares ( CV_32FC1 ).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; max
.. _doxid-d8/d34/group__cudaarithm__elem_1gadb5dd3d870f10c0866035755b929b1e7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::max(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes the per-element maximum of two matrices (or a matrix and a scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`max <doxid-d8/d34/group__cudaarithm__elem_1gadb5dd3d870f10c0866035755b929b1e7>`

.. index:: pair: function; min
.. _doxid-d8/d34/group__cudaarithm__elem_1ga74f0b05a65b3d949c237abb5e6c60867:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::min(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes the per-element minimum of two matrices (or a matrix and a scalar).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and type as the input array(s).

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`min <doxid-d8/d34/group__cudaarithm__elem_1ga74f0b05a65b3d949c237abb5e6c60867>`

.. index:: pair: function; multiply
.. _doxid-d8/d34/group__cudaarithm__elem_1ga497cc0615bf717e1e615143b56f00591:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::multiply(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double scale = 1,
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a matrix-matrix or matrix-scalar per-element product.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar.

	*
		- dst

		- Destination matrix that has the same size and number of channels as the input array(s). The depth is defined by dtype or src1 depth.

	*
		- scale

		- Optional scale factor.

	*
		- dtype

		- Optional depth of the output array.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`multiply <doxid-d8/d34/group__cudaarithm__elem_1ga497cc0615bf717e1e615143b56f00591>`

.. index:: pair: function; phase
.. _doxid-d8/d34/group__cudaarithm__elem_1ga5b75ec01be06dcd6e27ada09a0d4656a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::phase(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` x,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` y,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` angle,
		bool angleInDegrees = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes polar angles of complex matrix elements.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- x

		- Source matrix containing real components ( CV_32FC1 ).

	*
		- y

		- Source matrix containing imaginary components ( CV_32FC1 ).

	*
		- angle

		- Destination matrix of angles ( CV_32FC1 ).

	*
		- angleInDegrees

		- Flag for angles that must be evaluated in degrees.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`phase <doxid-d8/d34/group__cudaarithm__elem_1ga5b75ec01be06dcd6e27ada09a0d4656a>`

.. index:: pair: function; polarToCart
.. _doxid-d8/d34/group__cudaarithm__elem_1ga01516a286a329c303c2db746513dd9df:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::polarToCart(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` magnitude,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` angle,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` x,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` y,
		bool angleInDegrees = false,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Converts polar coordinates into Cartesian.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- magnitude

		- Source matrix containing magnitudes ( CV_32FC1 ).

	*
		- angle

		- Source matrix containing angles ( CV_32FC1 ).

	*
		- x

		- Destination matrix of real components ( CV_32FC1 ).

	*
		- y

		- Destination matrix of imaginary components ( CV_32FC1 ).

	*
		- angleInDegrees

		- Flag that indicates angles in degrees.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; pow
.. _doxid-d8/d34/group__cudaarithm__elem_1ga82d04ef4bcc4dfa9bfbe76488007c6c4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::pow(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		double power,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Raises every matrix element to a power.

The function pow raises every element of the input matrix to power :

.. math::

	\texttt{dst} (I) = \fork{\texttt{src}(I)^power}{if \texttt{power} is integer}{|\texttt{src}(I)|^power}{otherwise}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- power

		- Exponent of power.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`pow <doxid-d8/d34/group__cudaarithm__elem_1ga82d04ef4bcc4dfa9bfbe76488007c6c4>`

.. index:: pair: function; rshift
.. _doxid-d8/d34/group__cudaarithm__elem_1ga87af0b66358cc302676f35c1fd56c2ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::rshift(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`Scalar_<doxid-d7/d13/classcv_1_1_scalar__>`<int> val,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Performs pixel by pixel right shift of an image by a constant value.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix. Supports 1, 3 and 4 channels images with integers elements.

	*
		- val

		- Constant values, one per channel.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; scaleAdd
.. _doxid-d8/d34/group__cudaarithm__elem_1ga9670da19276361e1681f69226e2071fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	cv::cuda::scaleAdd(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		double alpha,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

adds scaled array to another one (dst = alpha\*src1 + src2)

.. index:: pair: function; sqr
.. _doxid-d8/d34/group__cudaarithm__elem_1ga8aae233da90ce0ffe309ab8004342acb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::sqr(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a square value of each matrix element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.

.. index:: pair: function; sqrt
.. _doxid-d8/d34/group__cudaarithm__elem_1ga09303680cb1a5521a922b6d392028d8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::sqrt(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a square root of each matrix element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source matrix.

	*
		- dst

		- Destination matrix with the same size and type as src .

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`sqrt <doxid-d8/d34/group__cudaarithm__elem_1ga09303680cb1a5521a922b6d392028d8c>`

.. index:: pair: function; subtract
.. _doxid-d8/d34/group__cudaarithm__elem_1ga6eab60fc250059e2fda79c5636bd067f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cuda::subtract(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src1,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src2,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` mask = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int dtype = -1,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Computes a matrix-matrix or matrix-scalar difference.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src1

		- First source matrix or scalar.

	*
		- src2

		- Second source matrix or scalar. Matrix should have the same size and type as src1 .

	*
		- dst

		- Destination matrix that has the same size and number of channels as the input array(s). The depth is defined by dtype or src1 depth.

	*
		- mask

		- Optional operation mask, 8-bit single channel array, that specifies elements of the destination array to be changed. The mask can be used only with single channel images.

	*
		- dtype

		- Optional depth of the output array.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`subtract <doxid-d8/d34/group__cudaarithm__elem_1ga6eab60fc250059e2fda79c5636bd067f>`

.. index:: pair: function; threshold
.. _doxid-d8/d34/group__cudaarithm__elem_1ga40f1c94ae9a9456df3cad48e3cb008e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::cuda::threshold(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double thresh,
		double maxval,
		int type,
		:ref:`Stream<doxid-d1/d04/classcv_1_1cuda_1_1_stream>`& stream = :ref:`Stream::Null<doxid-d1/d04/classcv_1_1cuda_1_1_stream_1a680af5adfeeb1cdaa5b7b13f680c0131>`()
		)

Applies a fixed-level threshold to each array element.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source array (single-channel).

	*
		- dst

		- Destination array with the same size and type as src .

	*
		- thresh

		- Threshold value.

	*
		- maxval

		- Maximum value to use with THRESH_BINARY and THRESH_BINARY_INV threshold types.

	*
		- type

		- Threshold type. For details, see threshold . The THRESH_OTSU and THRESH_TRIANGLE threshold types are not supported.

	*
		- stream

		- :ref:`Stream <doxid-d1/d04/classcv_1_1cuda_1_1_stream>` for the asynchronous version.



.. rubric:: See also:

:ref:`threshold <doxid-d8/d34/group__cudaarithm__elem_1ga40f1c94ae9a9456df3cad48e3cb008e1>`

