.. index:: pair: group; Video Encoding/Decoding
.. _doxid-d0/d61/group__cudacodec:

Video Encoding/Decoding
=======================

.. toctree::
	:hidden:

	enum_cv_cudacodec_ChromaFormat.rst
	enum_cv_cudacodec_Codec.rst
	enum_cv_cudacodec_SurfaceFormat.rst
	struct_cv_cudacodec_EncoderParams.rst
	struct_cv_cudacodec_FormatInfo.rst
	class_cv_cudacodec_EncoderCallBack.rst
	class_cv_cudacodec_RawVideoSource.rst
	class_cv_cudacodec_VideoReader.rst
	class_cv_cudacodec_VideoWriter.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::cudacodec::ChromaFormat<doxid-d0/d61/group__cudacodec_1ga1887af7daca9ccca0f51f90bc8777280>`;
	enum :ref:`cv::cudacodec::Codec<doxid-d0/d61/group__cudacodec_1ga71943a1181287609b5d649f53ce6c146>`;
	enum :ref:`cv::cudacodec::SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>`;

	// structs

	struct :ref:`cv::cudacodec::EncoderParams<doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`;
	struct :ref:`cv::cudacodec::FormatInfo<doxid-d9/d58/structcv_1_1cudacodec_1_1_format_info>`;

	// classes

	class :ref:`cv::cudacodec::EncoderCallBack<doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`;
	class :ref:`cv::cudacodec::RawVideoSource<doxid-d8/d7f/classcv_1_1cudacodec_1_1_raw_video_source>`;
	class :ref:`cv::cudacodec::VideoReader<doxid-d4/d90/classcv_1_1cudacodec_1_1_video_reader>`;
	class :ref:`cv::cudacodec::VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`;

	// global functions

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoReader<doxid-d4/d90/classcv_1_1cudacodec_1_1_video_reader>`>
	:ref:`cv::cudacodec::createVideoReader<doxid-d0/d61/group__cudacodec_1gafd67042ff937f5152fa1b682c5c589ed>`(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename);

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoReader<doxid-d4/d90/classcv_1_1cudacodec_1_1_video_reader>`>
	:ref:`cv::cudacodec::createVideoReader<doxid-d0/d61/group__cudacodec_1gac5a44b5a3d7b50ce7bcafaf75a2cfedf>`(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`RawVideoSource<doxid-d8/d7f/classcv_1_1cudacodec_1_1_raw_video_source>`>& source);

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	:ref:`cv::cudacodec::createVideoWriter<doxid-d0/d61/group__cudacodec_1ga35ff9d2f016b6998aae9eea986930880>`(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& fileName,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		);

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	:ref:`cv::cudacodec::createVideoWriter<doxid-d0/d61/group__cudacodec_1ga451e56bd4b63d064d05484119a2bbdb2>`(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& fileName,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		const :ref:`EncoderParams<doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`& params,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		);

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	:ref:`cv::cudacodec::createVideoWriter<doxid-d0/d61/group__cudacodec_1ga51c780666e8cc98a7897c198ad4f89e6>`(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`EncoderCallBack<doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`>& encoderCallback,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		);

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	:ref:`cv::cudacodec::createVideoWriter<doxid-d0/d61/group__cudacodec_1ga4e21fa6f31a567dcda943fc5e566f85e>`(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`EncoderCallBack<doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`>& encoderCallback,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		const :ref:`EncoderParams<doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`& params,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		);

.. _details-d0/d61/group__cudacodec:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; createVideoReader
.. _doxid-d0/d61/group__cudacodec_1gafd67042ff937f5152fa1b682c5c589ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoReader<doxid-d4/d90/classcv_1_1cudacodec_1_1_video_reader>`>
	cv::cudacodec::createVideoReader(const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& filename)

Creates video reader.

FFMPEG is used to read videos. User can implement own demultiplexing with :ref:`cudacodec::RawVideoSource <doxid-d8/d7f/classcv_1_1cudacodec_1_1_raw_video_source>`



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- filename

		- Name of the input video file.

.. index:: pair: function; createVideoReader
.. _doxid-d0/d61/group__cudacodec_1gac5a44b5a3d7b50ce7bcafaf75a2cfedf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoReader<doxid-d4/d90/classcv_1_1cudacodec_1_1_video_reader>`>
	cv::cudacodec::createVideoReader(const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`RawVideoSource<doxid-d8/d7f/classcv_1_1cudacodec_1_1_raw_video_source>`>& source)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- source

		- RAW video source implemented by user.

.. index:: pair: function; createVideoWriter
.. _doxid-d0/d61/group__cudacodec_1ga35ff9d2f016b6998aae9eea986930880:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	cv::cudacodec::createVideoWriter(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& fileName,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		)

Creates video writer.

The constructors initialize video writer. FFMPEG is used to write videos. User can implement own multiplexing with :ref:`cudacodec::EncoderCallBack <doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fileName

		- Name of the output video file. Only AVI file format is supported.

	*
		- frameSize

		- Size of the input video frames.

	*
		- fps

		- Framerate of the created video stream.

	*
		- format

		- Surface format of input frames ( SF_UYVY , SF_YUY2 , SF_YV12 , SF_NV12 , SF_IYUV , SF_BGR or SF_GRAY). BGR or gray frames will be converted to YV12 format before encoding, frames with other formats will be used as is.

.. index:: pair: function; createVideoWriter
.. _doxid-d0/d61/group__cudacodec_1ga451e56bd4b63d064d05484119a2bbdb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	cv::cudacodec::createVideoWriter(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& fileName,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		const :ref:`EncoderParams<doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`& params,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- fileName

		- Name of the output video file. Only AVI file format is supported.

	*
		- frameSize

		- Size of the input video frames.

	*
		- fps

		- Framerate of the created video stream.

	*
		- params

		- Encoder parameters. See :ref:`cudacodec::EncoderParams <doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`.

	*
		- format

		- Surface format of input frames ( SF_UYVY , SF_YUY2 , SF_YV12 , SF_NV12 , SF_IYUV , SF_BGR or SF_GRAY). BGR or gray frames will be converted to YV12 format before encoding, frames with other formats will be used as is.

.. index:: pair: function; createVideoWriter
.. _doxid-d0/d61/group__cudacodec_1ga51c780666e8cc98a7897c198ad4f89e6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	cv::cudacodec::createVideoWriter(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`EncoderCallBack<doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`>& encoderCallback,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- encoderCallback

		- Callbacks for video encoder. See :ref:`cudacodec::EncoderCallBack <doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`. Use it if you want to work with raw video stream.

	*
		- frameSize

		- Size of the input video frames.

	*
		- fps

		- Framerate of the created video stream.

	*
		- format

		- Surface format of input frames ( SF_UYVY , SF_YUY2 , SF_YV12 , SF_NV12 , SF_IYUV , SF_BGR or SF_GRAY). BGR or gray frames will be converted to YV12 format before encoding, frames with other formats will be used as is.

.. index:: pair: function; createVideoWriter
.. _doxid-d0/d61/group__cudacodec_1ga4e21fa6f31a567dcda943fc5e566f85e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`VideoWriter<doxid-da/de5/classcv_1_1cudacodec_1_1_video_writer>`>
	cv::cudacodec::createVideoWriter(
		const :ref:`Ptr<doxid-d2/d56/structcv_1_1_ptr>`<:ref:`EncoderCallBack<doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`>& encoderCallback,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` frameSize,
		double fps,
		const :ref:`EncoderParams<doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`& params,
		:ref:`SurfaceFormat<doxid-d0/d61/group__cudacodec_1gaaac1ece32d7b3efa9afc9811315d35cb>` format = :ref:`SF_BGR<doxid-d0/d61/group__cudacodec_1ggaaac1ece32d7b3efa9afc9811315d35cba4984532228f149a206ed70dc7be2b054>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- encoderCallback

		- Callbacks for video encoder. See :ref:`cudacodec::EncoderCallBack <doxid-d5/db3/classcv_1_1cudacodec_1_1_encoder_call_back>`. Use it if you want to work with raw video stream.

	*
		- frameSize

		- Size of the input video frames.

	*
		- fps

		- Framerate of the created video stream.

	*
		- params

		- Encoder parameters. See :ref:`cudacodec::EncoderParams <doxid-d6/d7d/structcv_1_1cudacodec_1_1_encoder_params>`.

	*
		- format

		- Surface format of input frames ( SF_UYVY , SF_YUY2 , SF_YV12 , SF_NV12 , SF_IYUV , SF_BGR or SF_GRAY). BGR or gray frames will be converted to YV12 format before encoding, frames with other formats will be used as is.

