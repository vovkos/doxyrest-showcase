.. index:: pair: group; Drawing Functions
.. _doxid-d6/d6e/group__imgproc__draw:

Drawing Functions
=================

.. toctree::
	:hidden:

	enum_cv_MarkerTypes.rst
	class_cv_LineIterator.rst

Overview
~~~~~~~~

Drawing functions work with matrices/images of arbitrary depth. :ref:`More...<details-d6/d6e/group__imgproc__draw>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::MarkerTypes<doxid-d6/d6e/group__imgproc__draw_1ga0ad87faebef1039ec957737ecc633b7b>`;

	// classes

	class :ref:`cv::LineIterator<doxid-dd/d2f/classcv_1_1_line_iterator>`;

	// global functions

	void
	:ref:`cv::arrowedLine<doxid-d6/d6e/group__imgproc__draw_1ga0a165a3ca093fd488ac709fdf10c05b2>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt2,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int line_type = 8,
		int shift = 0,
		double tipLength = 0.1
		);

	void
	:ref:`cv::circle<doxid-d6/d6e/group__imgproc__draw_1gaf10604b069374903dbd0f0488cb43670>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` center,
		int radius,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	bool
	:ref:`cv::clipLine<doxid-d6/d6e/group__imgproc__draw_1gaf483cb46ad6b049bc35ec67052ef1c2c>`(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imgSize,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt2
		);

	bool
	:ref:`cv::clipLine<doxid-d6/d6e/group__imgproc__draw_1gab156b52ae9174369cb035f1e9dfb29e1>`(
		:ref:`Size2l<doxid-dc/d84/group__core__basic_1ga153b6b90ce30f84239c9a39613e836d3>` imgSize,
		:ref:`Point2l<doxid-dc/d84/group__core__basic_1ga2f6c21f7cbd3a08bfc6467fd20df2f7e>`& pt1,
		:ref:`Point2l<doxid-dc/d84/group__core__basic_1ga2f6c21f7cbd3a08bfc6467fd20df2f7e>`& pt2
		);

	bool
	:ref:`cv::clipLine<doxid-d6/d6e/group__imgproc__draw_1ga36117422ae2f891c7b03023261e25928>`(
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` imgRect,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt2
		);

	void
	:ref:`cv::drawContours<doxid-d6/d6e/group__imgproc__draw_1ga746c0625f1781f1ffc9056259103edbc>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` contours,
		int contourIdx,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` hierarchy = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int maxLevel = INT_MAX,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		);

	void
	:ref:`cv::drawMarker<doxid-d6/d6e/group__imgproc__draw_1ga482fa7b0f578fcdd8a174904592a6250>`(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` position,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int markerType = :ref:`MARKER_CROSS<doxid-d6/d6e/group__imgproc__draw_1gga0ad87faebef1039ec957737ecc633b7baf28ad04b7620b2f232ab3c3faef142d5>`,
		int markerSize = 20,
		int thickness = 1,
		int line_type = 8
		);

	void
	:ref:`cv::ellipse<doxid-d6/d6e/group__imgproc__draw_1ga28b2267d35786f5f890ca167236cbc69>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` center,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` axes,
		double angle,
		double startAngle,
		double endAngle,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::ellipse<doxid-d6/d6e/group__imgproc__draw_1ga57be400d8eff22fb946ae90c8e7441f9>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		const :ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`& box,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`
		);

	void
	:ref:`cv::ellipse2Poly<doxid-d6/d6e/group__imgproc__draw_1ga727a72a3f6a625a2ae035f957c61051f>`(
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` center,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` axes,
		int angle,
		int arcStart,
		int arcEnd,
		int delta,
		std::vector<:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`>& pts
		);

	void
	:ref:`cv::ellipse2Poly<doxid-d6/d6e/group__imgproc__draw_1ga3d9494192ef3a9fd07f02e2377897faf>`(
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>` center,
		:ref:`Size2d<doxid-dc/d84/group__core__basic_1gaff96e5bec8019ca9917fd1e4c0cf8267>` axes,
		int angle,
		int arcStart,
		int arcEnd,
		int delta,
		std::vector<:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`>& pts
		);

	void
	:ref:`cv::fillConvexPoly<doxid-d6/d6e/group__imgproc__draw_1ga906aae1606ea4ed2f27bec1537f6c5c2>`(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		const :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* pts,
		int npts,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::fillConvexPoly<doxid-d6/d6e/group__imgproc__draw_1ga9bb982be9d641dc51edd5e8ae3624e1f>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::fillPoly<doxid-d6/d6e/group__imgproc__draw_1gaf30888828337aa4c6b56782b5dfbd4b7>`(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		const :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`** pts,
		const int* npts,
		int ncontours,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		);

	void
	:ref:`cv::fillPoly<doxid-d6/d6e/group__imgproc__draw_1ga311160e71d37e3b795324d097cb3a7dc>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` pts,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		);

	:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
	:ref:`cv::getTextSize<doxid-d6/d6e/group__imgproc__draw_1ga3d2abfcb995fd2db908c8288199dba82>`(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& text,
		int fontFace,
		double fontScale,
		int thickness,
		int* baseLine
		);

	void
	:ref:`cv::line<doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt2,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::polylines<doxid-d6/d6e/group__imgproc__draw_1ga444cb8a2666320f47f09d5af08d91ffb>`(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		const :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`*const* pts,
		const int* npts,
		int ncontours,
		bool isClosed,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::polylines<doxid-d6/d6e/group__imgproc__draw_1gaa3c25f9fb764b6bef791bf034f6e26f5>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` pts,
		bool isClosed,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::putText<doxid-d6/d6e/group__imgproc__draw_1ga5126f47f883d730f633d74f07456c576>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& text,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` org,
		int fontFace,
		double fontScale,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		bool bottomLeftOrigin = false
		);

	void
	:ref:`cv::rectangle<doxid-d6/d6e/group__imgproc__draw_1ga07d2f74cadcf8e305e810ce8eed13bc9>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt2,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

	void
	:ref:`cv::rectangle<doxid-d6/d6e/group__imgproc__draw_1ga346ac30b5c74e9b5137576c9ee9e0e8c>`(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rec,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		);

.. _details-d6/d6e/group__imgproc__draw:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Drawing functions work with matrices/images of arbitrary depth. The boundaries of the shapes can be rendered with antialiasing (implemented only for 8-bit images for now). All the functions include the parameter color that uses an RGB value (that may be constructed with the Scalar constructor ) for color images and brightness for grayscale images. For color images, the channel ordering is normally *Blue, Green, Red*. This is what imshow, imread, and imwrite expect. So, if you form a color using the Scalar constructor, it should look like:

.. math::

	\texttt{Scalar} (blue \_ component, green \_ component, red \_ component[, alpha \_ component])

If you are using your own image rendering and I/O functions, you can use any channel ordering. The drawing functions process each channel independently and do not depend on the channel order or even on the used color space. The whole image can be converted from BGR to RGB or to a different color space using cvtColor .

If a drawn figure is partially or completely outside the image, the drawing functions clip it. Also, many drawing functions can handle pixel coordinates specified with sub-pixel accuracy. This means that the coordinates can be passed as fixed-point numbers encoded as integers. The number of fractional bits is specified by the shift parameter and the real point coordinates are calculated as :math:`\texttt{Point}(x,y)\rightarrow\texttt{Point2f}(x*2^{-shift},y*2^{-shift})`. This feature is especially effective when rendering antialiased shapes.

The functions do not support alpha-transparency when the target image is 4-channel. In this case, the color[3] is simply copied to the repainted pixels. Thus, if you want to paint semi-transparent shapes, you can paint them in a separate buffer and then blend it with the main image.

Global Functions
----------------

.. index:: pair: function; arrowedLine
.. _doxid-d6/d6e/group__imgproc__draw_1ga0a165a3ca093fd488ac709fdf10c05b2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::arrowedLine(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt2,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int line_type = 8,
		int shift = 0,
		double tipLength = 0.1
		)

Draws a arrow segment pointing from the first point to the second one.

The function arrowedLine draws an arrow between pt1 and pt2 points in the image. See also :ref:`cv::line <doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2>`.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- pt1

		- The point the arrow starts from.

	*
		- pt2

		- The point the arrow points to.

	*
		- color

		- Line color.

	*
		- thickness

		- Line thickness.

	*
		- line_type

		- Type of the line, see :ref:`cv::LineTypes <doxid-d0/de1/group__core_1gaf076ef45de481ac96e0ab3dc2c29a777>`

	*
		- shift

		- Number of fractional bits in the point coordinates.

	*
		- tipLength

		- The length of the arrow tip in relation to the arrow length

.. index:: pair: function; circle
.. _doxid-d6/d6e/group__imgproc__draw_1gaf10604b069374903dbd0f0488cb43670:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::circle(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` center,
		int radius,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

Draws a circle.

The function circle draws a simple or filled circle with a given center and radius.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image where the circle is drawn.

	*
		- center

		- Center of the circle.

	*
		- radius

		- Radius of the circle.

	*
		- color

		- Circle color.

	*
		- thickness

		- Thickness of the circle outline, if positive. Negative thickness means that a filled circle is to be drawn.

	*
		- lineType

		- Type of the circle boundary. See the line description.

	*
		- shift

		- Number of fractional bits in the coordinates of the center and in the radius value.

.. index:: pair: function; clipLine
.. _doxid-d6/d6e/group__imgproc__draw_1gaf483cb46ad6b049bc35ec67052ef1c2c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::clipLine(
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` imgSize,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt2
		)

Clips the line against the image rectangle.

The function :ref:`cv::clipLine <doxid-d6/d6e/group__imgproc__draw_1gaf483cb46ad6b049bc35ec67052ef1c2c>` calculates a part of the line segment that is entirely within the specified rectangle. it returns false if the line segment is completely outside the rectangle. Otherwise, it returns true .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- imgSize

		- Image size. The image rectangle is Rect(0, 0, imgSize.width, imgSize.height) .

	*
		- pt1

		- First line point.

	*
		- pt2

		- Second line point.

.. index:: pair: function; clipLine
.. _doxid-d6/d6e/group__imgproc__draw_1gab156b52ae9174369cb035f1e9dfb29e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::clipLine(
		:ref:`Size2l<doxid-dc/d84/group__core__basic_1ga153b6b90ce30f84239c9a39613e836d3>` imgSize,
		:ref:`Point2l<doxid-dc/d84/group__core__basic_1ga2f6c21f7cbd3a08bfc6467fd20df2f7e>`& pt1,
		:ref:`Point2l<doxid-dc/d84/group__core__basic_1ga2f6c21f7cbd3a08bfc6467fd20df2f7e>`& pt2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- imgSize

		- Image size. The image rectangle is Rect(0, 0, imgSize.width, imgSize.height) .

	*
		- pt1

		- First line point.

	*
		- pt2

		- Second line point.

.. index:: pair: function; clipLine
.. _doxid-d6/d6e/group__imgproc__draw_1ga36117422ae2f891c7b03023261e25928:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	cv::clipLine(
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` imgRect,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`& pt2
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- imgRect

		- Image rectangle.

	*
		- pt1

		- First line point.

	*
		- pt2

		- Second line point.

.. index:: pair: function; drawContours
.. _doxid-d6/d6e/group__imgproc__draw_1ga746c0625f1781f1ffc9056259103edbc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::drawContours(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` contours,
		int contourIdx,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` hierarchy = :ref:`noArray<doxid-dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346>`(),
		int maxLevel = INT_MAX,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		)

Draws contours outlines or filled contours.

The function draws contour outlines in the image if :math:`\texttt{thickness} \ge 0` or fills the area bounded by the contours if :math:`\texttt{thickness}<0`. The example below shows how to retrieve connected components from the binary image and label them: :

.. ref-code-block:: cpp

	#include "opencv2/imgproc.hpp"
	#include "opencv2/highgui.hpp"
	
	using namespace cv;
	using namespace std;
	
	int main( int argc, char** argv )
	{
	    Mat src;
	    // the first command-line parameter must be a filename of the binary
	    // (black-n-white) image
	    if( argc != 2 || !(src=imread(argv[1], 0)).data)
	        return -1;
	
	    Mat dst = Mat::zeros(src.rows, src.cols, CV_8UC3);
	
	    src = src > 1;
	    namedWindow( "Source", 1 );
	    imshow( "Source", src );
	
	    vector<vector<Point> > contours;
	    vector<Vec4i> hierarchy;
	
	    findContours( src, contours, hierarchy,
	        RETR_CCOMP, CHAIN_APPROX_SIMPLE );
	
	    // iterate through all the top-level contours,
	    // draw each connected component with its own random color
	    int idx = 0;
	    for( ; idx >= 0; idx = hierarchy[idx][0] )
	    {
	        Scalar color( rand()&255, rand()&255, rand()&255 );
	        drawContours( dst, contours, idx, color, FILLED, 8, hierarchy );
	    }
	
	    namedWindow( "Components", 1 );
	    imshow( "Components", dst );
	    waitKey(0);
	}



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Destination image.

	*
		- contours

		- All the input contours. Each contour is stored as a point vector.

	*
		- contourIdx

		- Parameter indicating a contour to draw. If it is negative, all the contours are drawn.

	*
		- color

		- Color of the contours.

	*
		- thickness

		- Thickness of lines the contours are drawn with. If it is negative (for example, thickness=CV_FILLED ), the contour interiors are drawn.

	*
		- lineType

		- Line connectivity. See :ref:`cv::LineTypes <doxid-d0/de1/group__core_1gaf076ef45de481ac96e0ab3dc2c29a777>`.

	*
		- hierarchy

		- Optional information about hierarchy. It is only needed if you want to draw only some of the contours (see maxLevel ).

	*
		- maxLevel

		- Maximal level for drawn contours. If it is 0, only the specified contour is drawn. If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account when there is hierarchy available.

	*
		- offset

		- Optional contour shift parameter. Shift all the drawn contours by the specified :math:`\texttt{offset}=(dx,dy)`.

.. index:: pair: function; drawMarker
.. _doxid-d6/d6e/group__imgproc__draw_1ga482fa7b0f578fcdd8a174904592a6250:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::drawMarker(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` position,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int markerType = :ref:`MARKER_CROSS<doxid-d6/d6e/group__imgproc__draw_1gga0ad87faebef1039ec957737ecc633b7baf28ad04b7620b2f232ab3c3faef142d5>`,
		int markerSize = 20,
		int thickness = 1,
		int line_type = 8
		)

Draws a marker on a predefined position in an image.

The function drawMarker draws a marker on a given position in the image. For the moment several marker types are supported, see :ref:`cv::MarkerTypes <doxid-d6/d6e/group__imgproc__draw_1ga0ad87faebef1039ec957737ecc633b7b>` for more information.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- position

		- The point where the crosshair is positioned.

	*
		- color

		- Line color.

	*
		- markerType

		- The specific type of marker you want to use, see :ref:`cv::MarkerTypes <doxid-d6/d6e/group__imgproc__draw_1ga0ad87faebef1039ec957737ecc633b7b>`

	*
		- thickness

		- Line thickness.

	*
		- line_type

		- Type of the line, see :ref:`cv::LineTypes <doxid-d0/de1/group__core_1gaf076ef45de481ac96e0ab3dc2c29a777>`

	*
		- markerSize

		- The length of the marker axis [default = 20 pixels]

.. index:: pair: function; ellipse
.. _doxid-d6/d6e/group__imgproc__draw_1ga28b2267d35786f5f890ca167236cbc69:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ellipse(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` center,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` axes,
		double angle,
		double startAngle,
		double endAngle,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

Draws a simple or thick elliptic arc or fills an ellipse sector.

The function :ref:`cv::ellipse <doxid-d6/d6e/group__imgproc__draw_1ga28b2267d35786f5f890ca167236cbc69>` with more parameters draws an ellipse outline, a filled ellipse, an elliptic arc, or a filled ellipse sector. The drawing code uses general parametric form. A piecewise-linear curve is used to approximate the elliptic arc boundary. If you need more control of the ellipse rendering, you can retrieve the curve using :ref:`cv::ellipse2Poly <doxid-d6/d6e/group__imgproc__draw_1ga727a72a3f6a625a2ae035f957c61051f>` and then render it with polylines or fill it with :ref:`cv::fillPoly <doxid-d6/d6e/group__imgproc__draw_1gaf30888828337aa4c6b56782b5dfbd4b7>`. If you use the first variant of the function and want to draw the whole ellipse, not an arc, pass ``startAngle=0`` and ``endAngle=360``. If ``startAngle`` is greater than ``endAngle``, they are swapped. The figure below explains the meaning of the parameters to draw the blue arc.

.. image:: ellipse.svg
	:alt: Parameters of Elliptic Arc



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- center

		- Center of the ellipse.

	*
		- axes

		- Half of the size of the ellipse main axes.

	*
		- angle

		- Ellipse rotation angle in degrees.

	*
		- startAngle

		- Starting angle of the elliptic arc in degrees.

	*
		- endAngle

		- Ending angle of the elliptic arc in degrees.

	*
		- color

		- Ellipse color.

	*
		- thickness

		- Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that a filled ellipse sector is to be drawn.

	*
		- lineType

		- Type of the ellipse boundary. See the line description.

	*
		- shift

		- Number of fractional bits in the coordinates of the center and values of axes.

.. index:: pair: function; ellipse
.. _doxid-d6/d6e/group__imgproc__draw_1ga57be400d8eff22fb946ae90c8e7441f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ellipse(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		const :ref:`RotatedRect<doxid-d5/d1f/classcv_1_1_rotated_rect>`& box,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- box

		- Alternative ellipse representation via :ref:`RotatedRect <doxid-d5/d1f/classcv_1_1_rotated_rect>`. This means that the function draws an ellipse inscribed in the rotated rectangle.

	*
		- color

		- Ellipse color.

	*
		- thickness

		- Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that a filled ellipse sector is to be drawn.

	*
		- lineType

		- Type of the ellipse boundary. See the line description.

.. index:: pair: function; ellipse2Poly
.. _doxid-d6/d6e/group__imgproc__draw_1ga727a72a3f6a625a2ae035f957c61051f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ellipse2Poly(
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` center,
		:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>` axes,
		int angle,
		int arcStart,
		int arcEnd,
		int delta,
		std::vector<:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`>& pts
		)

Approximates an elliptic arc with a polyline.

The function ellipse2Poly computes the vertices of a polyline that approximates the specified elliptic arc. It is used by :ref:`cv::ellipse <doxid-d6/d6e/group__imgproc__draw_1ga28b2267d35786f5f890ca167236cbc69>`. If ``arcStart`` is greater than ``arcEnd``, they are swapped.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- center

		- Center of the arc.

	*
		- axes

		- Half of the size of the ellipse main axes. See the ellipse for details.

	*
		- angle

		- Rotation angle of the ellipse in degrees. See the ellipse for details.

	*
		- arcStart

		- Starting angle of the elliptic arc in degrees.

	*
		- arcEnd

		- Ending angle of the elliptic arc in degrees.

	*
		- delta

		- Angle between the subsequent polyline vertices. It defines the approximation accuracy.

	*
		- pts

		- Output vector of polyline vertices.

.. index:: pair: function; ellipse2Poly
.. _doxid-d6/d6e/group__imgproc__draw_1ga3d9494192ef3a9fd07f02e2377897faf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::ellipse2Poly(
		:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>` center,
		:ref:`Size2d<doxid-dc/d84/group__core__basic_1gaff96e5bec8019ca9917fd1e4c0cf8267>` axes,
		int angle,
		int arcStart,
		int arcEnd,
		int delta,
		std::vector<:ref:`Point2d<doxid-dc/d84/group__core__basic_1ga32986d8c6fd05949688352abd112509f>`>& pts
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- center

		- Center of the arc.

	*
		- axes

		- Half of the size of the ellipse main axes. See the ellipse for details.

	*
		- angle

		- Rotation angle of the ellipse in degrees. See the ellipse for details.

	*
		- arcStart

		- Starting angle of the elliptic arc in degrees.

	*
		- arcEnd

		- Ending angle of the elliptic arc in degrees.

	*
		- delta

		- Angle between the subsequent polyline vertices. It defines the approximation accuracy.

	*
		- pts

		- Output vector of polyline vertices.

.. index:: pair: function; fillConvexPoly
.. _doxid-d6/d6e/group__imgproc__draw_1ga906aae1606ea4ed2f27bec1537f6c5c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::fillConvexPoly(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		const :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`* pts,
		int npts,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; fillConvexPoly
.. _doxid-d6/d6e/group__imgproc__draw_1ga9bb982be9d641dc51edd5e8ae3624e1f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::fillConvexPoly(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` points,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

Fills a convex polygon.

The function fillConvexPoly draws a filled convex polygon. This function is much faster than the function :ref:`cv::fillPoly <doxid-d6/d6e/group__imgproc__draw_1gaf30888828337aa4c6b56782b5dfbd4b7>`. It can fill not only convex polygons but any monotonic polygon without self-intersections, that is, a polygon whose contour intersects every horizontal line (scan line) twice at the most (though, its top-most and/or the bottom edge could be horizontal).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- points

		- Polygon vertices.

	*
		- color

		- Polygon color.

	*
		- lineType

		- Type of the polygon boundaries. See the line description.

	*
		- shift

		- Number of fractional bits in the vertex coordinates.

.. index:: pair: function; fillPoly
.. _doxid-d6/d6e/group__imgproc__draw_1gaf30888828337aa4c6b56782b5dfbd4b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::fillPoly(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		const :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`** pts,
		const int* npts,
		int ncontours,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; fillPoly
.. _doxid-d6/d6e/group__imgproc__draw_1ga311160e71d37e3b795324d097cb3a7dc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::fillPoly(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` pts,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` offset = :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`()
		)

Fills the area bounded by one or more polygons.

The function fillPoly fills an area bounded by several polygonal contours. The function can fill complex areas, for example, areas with holes, contours with self-intersections (some of their parts), and so forth.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- pts

		- Array of polygons where each polygon is represented as an array of points.

	*
		- color

		- Polygon color.

	*
		- lineType

		- Type of the polygon boundaries. See the line description.

	*
		- shift

		- Number of fractional bits in the vertex coordinates.

	*
		- offset

		- Optional offset of all points of the contours.

.. index:: pair: function; getTextSize
.. _doxid-d6/d6e/group__imgproc__draw_1ga3d2abfcb995fd2db908c8288199dba82:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Size<doxid-dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0>`
	cv::getTextSize(
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& text,
		int fontFace,
		double fontScale,
		int thickness,
		int* baseLine
		)

Calculates the width and height of a text string.

The function getTextSize calculates and returns the size of a box that contains the specified text. That is, the following code renders some text, the tight box surrounding it, and the baseline: :

.. ref-code-block:: cpp

	String text = "Funny text inside the box";
	int fontFace = FONT_HERSHEY_SCRIPT_SIMPLEX;
	double fontScale = 2;
	int thickness = 3;
	
	Mat img(600, 800, CV_8UC3, Scalar::all(0));
	
	int baseline=0;
	Size textSize = getTextSize(text, fontFace,
	                            fontScale, thickness, &baseline);
	baseline += thickness;
	
	// center the text
	Point textOrg((img.cols - textSize.width)/2,
	              (img.rows + textSize.height)/2);
	
	// draw the box
	rectangle(img, textOrg + Point(0, baseline),
	          textOrg + Point(textSize.width, -textSize.height),
	          Scalar(0,0,255));
	// ... and the baseline first
	line(img, textOrg + Point(0, thickness),
	     textOrg + Point(textSize.width, thickness),
	     Scalar(0, 0, 255));
	
	// then put the text itself
	putText(img, text, textOrg, fontFace, fontScale,
	        Scalar::all(255), thickness, 8);



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- text

		- Input text string.

	*
		- fontFace

		- Font to use, see :ref:`cv::HersheyFonts <doxid-d0/de1/group__core_1ga0f9314ea6e35f99bb23f29567fc16e11>`.

	*
		- fontScale

		- Font scale factor that is multiplied by the font-specific base size.

	*
		- thickness

		- Thickness of lines used to render the text. See putText for details.

	*
		- baseLine

		- y-coordinate of the baseline relative to the bottom-most text point.



.. rubric:: Returns:

The size of a box that contains the specified text.



.. rubric:: See also:

:ref:`cv::putText <doxid-d6/d6e/group__imgproc__draw_1ga5126f47f883d730f633d74f07456c576>`

.. index:: pair: function; line
.. _doxid-d6/d6e/group__imgproc__draw_1ga7078a9fae8c7e7d13d24dac2520ae4a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::line(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt2,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

Draws a line segment connecting two points.

The function line draws the line segment between pt1 and pt2 points in the image. The line is clipped by the image boundaries. For non-antialiased lines with integer coordinates, the 8-connected or 4-connected Bresenham algorithm is used. Thick lines are drawn with rounding endings. Antialiased lines are drawn using Gaussian filtering.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- pt1

		- First point of the line segment.

	*
		- pt2

		- Second point of the line segment.

	*
		- color

		- Line color.

	*
		- thickness

		- Line thickness.

	*
		- lineType

		- Type of the line, see :ref:`cv::LineTypes <doxid-d0/de1/group__core_1gaf076ef45de481ac96e0ab3dc2c29a777>`.

	*
		- shift

		- Number of fractional bits in the point coordinates.

.. index:: pair: function; polylines
.. _doxid-d6/d6e/group__imgproc__draw_1ga444cb8a2666320f47f09d5af08d91ffb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::polylines(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		const :ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>`*const* pts,
		const int* npts,
		int ncontours,
		bool isClosed,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; polylines
.. _doxid-d6/d6e/group__imgproc__draw_1gaa3c25f9fb764b6bef791bf034f6e26f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::polylines(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`InputArrayOfArrays<doxid-dc/d84/group__core__basic_1ga606feabe3b50ab6838f1ba89727aa07a>` pts,
		bool isClosed,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

Draws several polygonal curves.

The function polylines draws one or more polygonal curves.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- pts

		- Array of polygonal curves.

	*
		- isClosed

		- Flag indicating whether the drawn polylines are closed or not. If they are closed, the function draws a line from the last vertex of each curve to its first vertex.

	*
		- color

		- Polyline color.

	*
		- thickness

		- Thickness of the polyline edges.

	*
		- lineType

		- Type of the line segments. See the line description.

	*
		- shift

		- Number of fractional bits in the vertex coordinates.

.. index:: pair: function; putText
.. _doxid-d6/d6e/group__imgproc__draw_1ga5126f47f883d730f633d74f07456c576:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::putText(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		const :ref:`String<doxid-dc/d0e/classcv_1_1_string>`& text,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` org,
		int fontFace,
		double fontScale,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		bool bottomLeftOrigin = false
		)

Draws a text string.

The function putText renders the specified text string in the image. Symbols that cannot be rendered using the specified font are replaced by question marks. See getTextSize for a text rendering code example.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- text

		- Text string to be drawn.

	*
		- org

		- Bottom-left corner of the text string in the image.

	*
		- fontFace

		- Font type, see :ref:`cv::HersheyFonts <doxid-d0/de1/group__core_1ga0f9314ea6e35f99bb23f29567fc16e11>`.

	*
		- fontScale

		- Font scale factor that is multiplied by the font-specific base size.

	*
		- color

		- Text color.

	*
		- thickness

		- Thickness of the lines used to draw a text.

	*
		- lineType

		- Line type. See the line for details.

	*
		- bottomLeftOrigin

		- When true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner.

.. index:: pair: function; rectangle
.. _doxid-d6/d6e/group__imgproc__draw_1ga07d2f74cadcf8e305e810ce8eed13bc9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::rectangle(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` img,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt1,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` pt2,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

Draws a simple, thick, or filled up-right rectangle.

The function rectangle draws a rectangle outline or a filled rectangle whose two opposite corners are pt1 and pt2.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Image.

	*
		- pt1

		- Vertex of the rectangle.

	*
		- pt2

		- Vertex of the rectangle opposite to pt1 .

	*
		- color

		- Rectangle color or brightness (grayscale image).

	*
		- thickness

		- Thickness of lines that make up the rectangle. Negative values, like CV_FILLED , mean that the function has to draw a filled rectangle.

	*
		- lineType

		- Type of the line. See the line description.

	*
		- shift

		- Number of fractional bits in the point coordinates.

.. index:: pair: function; rectangle
.. _doxid-d6/d6e/group__imgproc__draw_1ga346ac30b5c74e9b5137576c9ee9e0e8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::rectangle(
		:ref:`Mat<doxid-db/de6/classcv_1_1_mat>`& img,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rec,
		const :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`& color,
		int thickness = 1,
		int lineType = :ref:`LINE_8<doxid-d0/de1/group__core_1ggaf076ef45de481ac96e0ab3dc2c29a777a5d32eda7017db273a37f158e5b51442a>`,
		int shift = 0
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

use ``rec`` parameter as alternative specification of the drawn rectangle: ``r.tl() and r.br()-Point(1,1)`` are opposite corners

