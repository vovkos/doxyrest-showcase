.. index:: pair: group; Miscellaneous Image Transformations
.. _doxid-d7/d1b/group__imgproc__misc:

Miscellaneous Image Transformations
===================================

.. toctree::
	:hidden:

	enum_cv_AdaptiveThresholdTypes.rst
	enum_cv_ColorConversionCodes.rst
	enum_cv_DistanceTransformLabelTypes.rst
	enum_cv_DistanceTransformMasks.rst
	enum_cv_DistanceTypes.rst
	enum_cv_FloodFillFlags.rst
	enum_cv_GrabCutClasses.rst
	enum_cv_GrabCutModes.rst
	enum_cv_ThresholdTypes.rst
	enum_cv_UndistortTypes.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// enums

	enum :ref:`cv::AdaptiveThresholdTypes<doxid-d7/d1b/group__imgproc__misc_1gaa42a3e6ef26247da787bf34030ed772c>`;
	enum :ref:`cv::ColorConversionCodes<doxid-d7/d1b/group__imgproc__misc_1ga4e0972be5de079fed4e3a10e24ef5ef0>`;
	enum :ref:`cv::DistanceTransformLabelTypes<doxid-d7/d1b/group__imgproc__misc_1ga3fe343d63844c40318ee627bd1c1c42f>`;
	enum :ref:`cv::DistanceTransformMasks<doxid-d7/d1b/group__imgproc__misc_1gaaa68392323ccf7fad87570e41259b497>`;
	enum :ref:`cv::DistanceTypes<doxid-d7/d1b/group__imgproc__misc_1gaa2bfbebbc5c320526897996aafa1d8eb>`;
	enum :ref:`cv::FloodFillFlags<doxid-d7/d1b/group__imgproc__misc_1gab87810a476a9cb660435a4cd7871c9eb>`;
	enum :ref:`cv::GrabCutClasses<doxid-d7/d1b/group__imgproc__misc_1gad43d3e4208d3cf025d8304156b02ba38>`;
	enum :ref:`cv::GrabCutModes<doxid-d7/d1b/group__imgproc__misc_1gaf8b5832ba85e59fc7a98a2afd034e558>`;
	enum :ref:`cv::ThresholdTypes<doxid-d7/d1b/group__imgproc__misc_1gaa9e58d2860d4afa658ef70a9b1115576>`;
	enum :ref:`cv::UndistortTypes<doxid-d7/d1b/group__imgproc__misc_1gace497823594b601f2094d32dde6a3c94>`;

	// global functions

	void
	:ref:`cv::adaptiveThreshold<doxid-d7/d1b/group__imgproc__misc_1ga72b913f352e4a1b1b397736707afcde3>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double maxValue,
		int adaptiveMethod,
		int thresholdType,
		int blockSize,
		double C
		);

	void
	:ref:`cv::cvtColor<doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int code,
		int dstCn = 0
		);

	void
	:ref:`cv::distanceTransform<doxid-d7/d1b/group__imgproc__misc_1ga8a0b7fdfcb7a13dde018988ba3a43042>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		int distanceType,
		int maskSize,
		int labelType = :ref:`DIST_LABEL_CCOMP<doxid-d7/d1b/group__imgproc__misc_1gga3fe343d63844c40318ee627bd1c1c42fa631de3e838ee72d6a9d991b8fbce4c1d>`
		);

	void
	:ref:`cv::distanceTransform<doxid-d7/d1b/group__imgproc__misc_1ga25c259e7e2fa2ac70de4606ea800f12f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int distanceType,
		int maskSize,
		int dstType = :ref:`CV_32F<doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`
		);

	int
	:ref:`cv::floodFill<doxid-d7/d1b/group__imgproc__misc_1gaf1f55a048f8a45bc3383586e80b1f0d0>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` seedPoint,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` newVal,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* rect = 0,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` loDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` upDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		int flags = 4
		);

	int
	:ref:`cv::floodFill<doxid-d7/d1b/group__imgproc__misc_1ga366aae45a6c1289b341d140839f18717>`(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` seedPoint,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` newVal,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* rect = 0,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` loDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` upDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		int flags = 4
		);

	void
	:ref:`cv::grabCut<doxid-d7/d1b/group__imgproc__misc_1ga909c1dda50efcbeaa3ce126be862b37f>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` img,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rect,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` bgdModel,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` fgdModel,
		int iterCount,
		int mode = :ref:`GC_EVAL<doxid-d7/d1b/group__imgproc__misc_1ggaf8b5832ba85e59fc7a98a2afd034e558aef3752e3c27c4af9445d0b5590b6aa05>`
		);

	void
	:ref:`cv::integral<doxid-d7/d1b/group__imgproc__misc_1gadeaf38d7701d7ad371278d663c50c77d>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
		int sdepth = -1
		);

	void
	:ref:`cv::integral<doxid-d7/d1b/group__imgproc__misc_1ga8408f27268badd5478b9d3e39124d645>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sqsum,
		int sdepth = -1,
		int sqdepth = -1
		);

	void
	:ref:`cv::integral<doxid-d7/d1b/group__imgproc__misc_1ga97b87bec26908237e8ba0f6e96d23e28>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sqsum,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tilted,
		int sdepth = -1,
		int sqdepth = -1
		);

	double
	:ref:`cv::threshold<doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double thresh,
		double maxval,
		int type
		);

	void
	:ref:`cv::watershed<doxid-d7/d1b/group__imgproc__misc_1ga3267243e4d3f95165d55a618c65ac6e1>`(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` markers
		);

.. _details-d7/d1b/group__imgproc__misc:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; adaptiveThreshold
.. _doxid-d7/d1b/group__imgproc__misc_1ga72b913f352e4a1b1b397736707afcde3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::adaptiveThreshold(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double maxValue,
		int adaptiveMethod,
		int thresholdType,
		int blockSize,
		double C
		)

Applies an adaptive threshold to an array.

The function transforms a grayscale image to a binary image according to the formulae:

* **THRESH_BINARY**
  
  .. math::
  
  	dst(x,y) = \fork{\texttt{maxValue}}{if \(src(x,y) > T(x,y)\)}{0}{otherwise}

* **THRESH_BINARY_INV**
  
  .. math::
  
  	dst(x,y) = \fork{0}{if \(src(x,y) > T(x,y)\)}{\texttt{maxValue}}{otherwise}
  
  where :math:`T(x,y)` is a threshold calculated individually for each pixel (see adaptiveMethod parameter).

The function can process the image in-place.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- Source 8-bit single-channel image.

	*
		- dst

		- Destination image of the same size and the same type as src.

	*
		- maxValue

		- Non-zero value assigned to the pixels for which the condition is satisfied

	*
		- adaptiveMethod

		- Adaptive thresholding algorithm to use, see :ref:`cv::AdaptiveThresholdTypes <doxid-d7/d1b/group__imgproc__misc_1gaa42a3e6ef26247da787bf34030ed772c>`

	*
		- thresholdType

		- Thresholding type that must be either THRESH_BINARY or THRESH_BINARY_INV, see :ref:`cv::ThresholdTypes <doxid-d7/d1b/group__imgproc__misc_1gaa9e58d2860d4afa658ef70a9b1115576>`.

	*
		- blockSize

		- Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on.

	*
		- C

		- Constant subtracted from the mean or weighted mean (see the details below). Normally, it is positive but may be zero or negative as well.



.. rubric:: See also:

:ref:`threshold <doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57>`, :ref:`blur <doxid-d4/d86/group__imgproc__filter_1ga8c45db9afe636703801b0b2e440fce37>`, :ref:`GaussianBlur <doxid-d4/d86/group__imgproc__filter_1gaabe8c836e97159a9193fb0b11ac52cf1>`

.. index:: pair: function; cvtColor
.. _doxid-d7/d1b/group__imgproc__misc_1ga397ae87e1288a81d2363b61574eb8cab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::cvtColor(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int code,
		int dstCn = 0
		)

Converts an image from one color space to another.

The function converts an input image from one color space to another. In case of a transformation to-from RGB color space, the order of the channels should be specified explicitly (RGB or BGR). Note that the default color format in OpenCV is often referred to as RGB but it is actually BGR (the bytes are reversed). So the first byte in a standard (24-bit) color image will be an 8-bit Blue component, the second byte will be Green, and the third byte will be Red. The fourth, fifth, and sixth bytes would then be the second pixel (Blue, then Green, then Red), and so on.

The conventional ranges for R, G, and B channel values are:

* 0 to 255 for CV_8U images

* 0 to 65535 for CV_16U images

* 0 to 1 for CV_32F images

In case of linear transformations, the range does not matter. But in case of a non-linear transformation, an input RGB image should be normalized to the proper value range to get the correct results, for example, for RGB :math:`\rightarrow` L\*u\*v\* transformation. For example, if you have a 32-bit floating-point image directly converted from an 8-bit image without any scaling, then it will have the 0..255 value range instead of 0..1 assumed by the function. So, before calling cvtColor , you need first to scale the image down:

.. ref-code-block:: cpp

	img *= 1./255;
	cvtColor(img, img, COLOR_BGR2Luv);

If you use cvtColor with 8-bit images, the conversion will have some information lost. For many applications, this will not be noticeable but it is recommended to use 32-bit images in applications that need the full range of colors or that convert an image before an operation and then convert back.

If conversion adds the alpha channel, its value will set to the maximum of corresponding channel range: 255 for CV_8U, 65535 for CV_16U, 1 for CV_32F.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input image: 8-bit unsigned, 16-bit unsigned ( CV_16UC... ), or single-precision floating-point.

	*
		- dst

		- output image of the same size and depth as src.

	*
		- code

		- color space conversion code (see :ref:`cv::ColorConversionCodes <doxid-d7/d1b/group__imgproc__misc_1ga4e0972be5de079fed4e3a10e24ef5ef0>`).

	*
		- dstCn

		- number of channels in the destination image; if the parameter is 0, the number of the channels is derived automatically from src and code.



.. rubric:: See also:

:ref:`Color conversions <doxid-de/d25/imgproc_color_conversions>`

.. index:: pair: function; distanceTransform
.. _doxid-d7/d1b/group__imgproc__misc_1ga8a0b7fdfcb7a13dde018988ba3a43042:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::distanceTransform(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` labels,
		int distanceType,
		int maskSize,
		int labelType = :ref:`DIST_LABEL_CCOMP<doxid-d7/d1b/group__imgproc__misc_1gga3fe343d63844c40318ee627bd1c1c42fa631de3e838ee72d6a9d991b8fbce4c1d>`
		)

Calculates the distance to the closest zero pixel for each pixel of the source image.

The function :ref:`cv::distanceTransform <doxid-d7/d1b/group__imgproc__misc_1ga8a0b7fdfcb7a13dde018988ba3a43042>` calculates the approximate or precise distance from every binary image pixel to the nearest zero pixel. For zero image pixels, the distance will obviously be zero.

When maskSize == DIST_MASK_PRECISE and distanceType == DIST_L2 , the function runs the algorithm described in :ref:`[25] <doxid-d0/de3/citelist_1CITEREF_Felzenszwalb04>`. This algorithm is parallelized with the TBB library.

In other cases, the algorithm :ref:`[5] <doxid-d0/de3/citelist_1CITEREF_Borgefors86>` is used. This means that for a pixel the function finds the shortest path to the nearest zero pixel consisting of basic shifts: horizontal, vertical, diagonal, or knight's move (the latest is available for a :math:`5\times 5` mask). The overall distance is calculated as a sum of these basic distances. Since the distance function should be symmetric, all of the horizontal and vertical shifts must have the same cost (denoted as a ), all the diagonal shifts must have the same cost (denoted as ``b``), and all knight's moves must have the same cost (denoted as ``c``). For the :ref:`cv::DIST_C <doxid-d7/d1b/group__imgproc__misc_1ggaa2bfbebbc5c320526897996aafa1d8eba507b16eb5ef95ea784ca1b3cb7b0d7ee>` and :ref:`cv::DIST_L1 <doxid-d7/d1b/group__imgproc__misc_1ggaa2bfbebbc5c320526897996aafa1d8ebae5b2dfaf2ba5024d7ce47885001fad86>` types, the distance is calculated precisely, whereas for :ref:`cv::DIST_L2 <doxid-d7/d1b/group__imgproc__misc_1ggaa2bfbebbc5c320526897996aafa1d8ebaff0d1f5be0fc152a56a9b9716d158b96>` (Euclidean distance) the distance can be calculated only with a relative error (a :math:`5\times 5` mask gives more accurate results). For ``a``, ``b``, and ``c``, OpenCV uses the values suggested in the original paper:

* DIST_L1: ``a = 1, b = 2``

* DIST_L2:
  
  * ``3 x 3`` : ``a=0.955, b=1.3693``
  
  * ``5 x 5`` : ``a=1, b=1.4, c=2.1969``

* DIST_C: ``a = 1, b = 1``

Typically, for a fast, coarse distance estimation DIST_L2, a :math:`3\times 3` mask is used. For a more accurate distance estimation DIST_L2, a :math:`5\times 5` mask or the precise algorithm is used. Note that both the precise and the approximate algorithms are linear on the number of pixels.

This variant of the function does not only compute the minimum distance for each pixel :math:`(x, y)` but also identifies the nearest connected component consisting of zero pixels (labelType==DIST_LABEL_CCOMP) or the nearest zero pixel (labelType==DIST_LABEL_PIXEL). Index of the component/pixel is stored in ``labels(x, y)``. When labelType==DIST_LABEL_CCOMP, the function automatically finds connected components of zero pixels in the input image and marks them with distinct labels. When labelType==DIST_LABEL_CCOMP, the function scans through the input image and marks all the zero pixels with distinct labels.

In this mode, the complexity is still linear. That is, the function provides a very fast way to compute the Voronoi diagram for a binary image. Currently, the second variant can use only the approximate distance transform algorithm, i.e. maskSize=DIST_MASK_PRECISE is not supported yet.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- 8-bit, single-channel (binary) source image.

	*
		- dst

		- Output image with calculated distances. It is a 8-bit or 32-bit floating-point, single-channel image of the same size as src.

	*
		- labels

		- Output 2D array of labels (the discrete Voronoi diagram). It has the type CV_32SC1 and the same size as src.

	*
		- distanceType

		- Type of distance, see :ref:`cv::DistanceTypes <doxid-d7/d1b/group__imgproc__misc_1gaa2bfbebbc5c320526897996aafa1d8eb>`

	*
		- maskSize

		- Size of the distance transform mask, see :ref:`cv::DistanceTransformMasks <doxid-d7/d1b/group__imgproc__misc_1gaaa68392323ccf7fad87570e41259b497>`. DIST_MASK_PRECISE is not supported by this variant. In case of the DIST_L1 or DIST_C distance type, the parameter is forced to 3 because a :math:`3\times 3` mask gives the same result as :math:`5\times 5` or any larger aperture.

	*
		- labelType

		- Type of the label array to build, see :ref:`cv::DistanceTransformLabelTypes <doxid-d7/d1b/group__imgproc__misc_1ga3fe343d63844c40318ee627bd1c1c42f>`.

.. index:: pair: function; distanceTransform
.. _doxid-d7/d1b/group__imgproc__misc_1ga25c259e7e2fa2ac70de4606ea800f12f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::distanceTransform(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		int distanceType,
		int maskSize,
		int dstType = :ref:`CV_32F<doxid-d1/d1b/group__core__hal__interface_1ga4a3def5d72b74bed31f5f8ab7676099c>`
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- 8-bit, single-channel (binary) source image.

	*
		- dst

		- Output image with calculated distances. It is a 8-bit or 32-bit floating-point, single-channel image of the same size as src .

	*
		- distanceType

		- Type of distance, see :ref:`cv::DistanceTypes <doxid-d7/d1b/group__imgproc__misc_1gaa2bfbebbc5c320526897996aafa1d8eb>`

	*
		- maskSize

		- Size of the distance transform mask, see :ref:`cv::DistanceTransformMasks <doxid-d7/d1b/group__imgproc__misc_1gaaa68392323ccf7fad87570e41259b497>`. In case of the DIST_L1 or DIST_C distance type, the parameter is forced to 3 because a :math:`3\times 3` mask gives the same result as :math:`5\times 5` or any larger aperture.

	*
		- dstType

		- Type of output image. It can be CV_8U or CV_32F. Type CV_8U can be used only for the first variant of the function and distanceType == DIST_L1.

.. index:: pair: function; floodFill
.. _doxid-d7/d1b/group__imgproc__misc_1gaf1f55a048f8a45bc3383586e80b1f0d0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::floodFill(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` seedPoint,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` newVal,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* rect = 0,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` loDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` upDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		int flags = 4
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

variant without ``mask`` parameter

.. index:: pair: function; floodFill
.. _doxid-d7/d1b/group__imgproc__misc_1ga366aae45a6c1289b341d140839f18717:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	cv::floodFill(
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` image,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask,
		:ref:`Point<doxid-dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192>` seedPoint,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` newVal,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>`* rect = 0,
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` loDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		:ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>` upDiff = :ref:`Scalar<doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(),
		int flags = 4
		)

Fills a connected component with the given color.

The function :ref:`cv::floodFill <doxid-d7/d1b/group__imgproc__misc_1gaf1f55a048f8a45bc3383586e80b1f0d0>` fills a connected component starting from the seed point with the specified color. The connectivity is determined by the color/brightness closeness of the neighbor pixels. The pixel at :math:`(x,y)` is considered to belong to the repainted domain if:

* in case of a grayscale image and floating range
  
  .. math::
  
  	\texttt{src} (x',y')- \texttt{loDiff} \leq \texttt{src} (x,y) \leq \texttt{src} (x',y')+ \texttt{upDiff}

* in case of a grayscale image and fixed range
  
  .. math::
  
  	\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)- \texttt{loDiff} \leq \texttt{src} (x,y) \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)+ \texttt{upDiff}

* in case of a color image and floating range
  
  .. math::
  
  	\texttt{src} (x',y')_r- \texttt{loDiff} _r \leq \texttt{src} (x,y)_r \leq \texttt{src} (x',y')_r+ \texttt{upDiff} _r,
  
  
  
  .. math::
  
  	\texttt{src} (x',y')_g- \texttt{loDiff} _g \leq \texttt{src} (x,y)_g \leq \texttt{src} (x',y')_g+ \texttt{upDiff} _g
  
  and
  
  .. math::
  
  	\texttt{src} (x',y')_b- \texttt{loDiff} _b \leq \texttt{src} (x,y)_b \leq \texttt{src} (x',y')_b+ \texttt{upDiff} _b

* in case of a color image and fixed range
  
  .. math::
  
  	\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_r- \texttt{loDiff} _r \leq \texttt{src} (x,y)_r \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_r+ \texttt{upDiff} _r,
  
  
  
  .. math::
  
  	\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_g- \texttt{loDiff} _g \leq \texttt{src} (x,y)_g \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_g+ \texttt{upDiff} _g
  
  and
  
  .. math::
  
  	\texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_b- \texttt{loDiff} _b \leq \texttt{src} (x,y)_b \leq \texttt{src} ( \texttt{seedPoint} .x, \texttt{seedPoint} .y)_b+ \texttt{upDiff} _b

where :math:`src(x',y')` is the value of one of pixel neighbors that is already known to belong to the component. That is, to be added to the connected component, a color/brightness of the pixel should be close enough to:

* Color/brightness of one of its neighbors that already belong to the connected component in case of a floating range.

* Color/brightness of the seed point in case of a fixed range.

Use these functions to either mark a connected component with the specified color in-place, or build a mask and then extract the contour, or copy the region to another image, and so on.

Since the mask is larger than the filled image, a pixel :math:`(x, y)` in image corresponds to the pixel :math:`(x+1, y+1)` in the mask .



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Input/output 1- or 3-channel, 8-bit, or floating-point image. It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the second variant of the function. See the details below.

	*
		- mask

		- Operation mask that should be a single-channel 8-bit image, 2 pixels wider and 2 pixels taller than image. Since this is both an input and output parameter, you must take responsibility of initializing it. Flood-filling cannot go across non-zero pixels in the input mask. For example, an edge detector output can be used as a mask to stop filling at edges. On output, pixels in the mask corresponding to filled pixels in the image are set to 1 or to the a value specified in flags as described below. It is therefore possible to use the same mask in multiple calls to the function to make sure the filled areas do not overlap.

	*
		- seedPoint

		- Starting point.

	*
		- newVal

		- New value of the repainted domain pixels.

	*
		- loDiff

		- Maximal lower brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component.

	*
		- upDiff

		- Maximal upper brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component.

	*
		- rect

		- Optional output parameter set by the function to the minimum bounding rectangle of the repainted domain.

	*
		- flags

		- Operation flags. The first 8 bits contain a connectivity value. The default value of 4 means that only the four nearest neighbor pixels (those that share an edge) are considered. A connectivity value of 8 means that the eight nearest neighbor pixels (those that share a corner) will be considered. The next 8 bits (8-16) contain a value between 1 and 255 with which to fill the mask (the default value is 1). For example, 4 \| ( 255 << 8 ) will consider 4 nearest neighbours and fill the mask with a value of 255. The following additional options occupy higher bits and therefore may be further combined with the connectivity and mask fill values using bit-wise or (\|), see :ref:`cv::FloodFillFlags <doxid-d7/d1b/group__imgproc__misc_1gab87810a476a9cb660435a4cd7871c9eb>`.



.. rubric:: See also:

:ref:`findContours <doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`

.. index:: pair: function; grabCut
.. _doxid-d7/d1b/group__imgproc__misc_1ga909c1dda50efcbeaa3ce126be862b37f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::grabCut(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` img,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` mask,
		:ref:`Rect<doxid-dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8>` rect,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` bgdModel,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` fgdModel,
		int iterCount,
		int mode = :ref:`GC_EVAL<doxid-d7/d1b/group__imgproc__misc_1ggaf8b5832ba85e59fc7a98a2afd034e558aef3752e3c27c4af9445d0b5590b6aa05>`
		)

Runs the GrabCut algorithm.

The function implements the `GrabCut image segmentation algorithm <http://en.wikipedia.org/wiki/GrabCut>`__.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- img

		- Input 8-bit 3-channel image.

	*
		- mask

		- Input/output 8-bit single-channel mask. The mask is initialized by the function when mode is set to GC_INIT_WITH_RECT. Its elements may have one of the :ref:`cv::GrabCutClasses <doxid-d7/d1b/group__imgproc__misc_1gad43d3e4208d3cf025d8304156b02ba38>`.

	*
		- rect

		- ROI containing a segmented object. The pixels outside of the ROI are marked as "obvious background". The parameter is only used when mode==GC_INIT_WITH_RECT .

	*
		- bgdModel

		- Temporary array for the background model. Do not modify it while you are processing the same image.

	*
		- fgdModel

		- Temporary arrays for the foreground model. Do not modify it while you are processing the same image.

	*
		- iterCount

		- Number of iterations the algorithm should make before returning the result. Note that the result can be refined with further calls with mode==GC_INIT_WITH_MASK or mode==GC_EVAL .

	*
		- mode

		- Operation mode that could be one of the :ref:`cv::GrabCutModes <doxid-d7/d1b/group__imgproc__misc_1gaf8b5832ba85e59fc7a98a2afd034e558>`

.. index:: pair: function; integral
.. _doxid-d7/d1b/group__imgproc__misc_1gadeaf38d7701d7ad371278d663c50c77d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::integral(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
		int sdepth = -1
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; integral
.. _doxid-d7/d1b/group__imgproc__misc_1ga8408f27268badd5478b9d3e39124d645:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::integral(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sqsum,
		int sdepth = -1,
		int sqdepth = -1
		)

This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.

.. index:: pair: function; integral
.. _doxid-d7/d1b/group__imgproc__misc_1ga97b87bec26908237e8ba0f6e96d23e28:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::integral(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sum,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` sqsum,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` tilted,
		int sdepth = -1,
		int sqdepth = -1
		)

Calculates the integral of an image.

The function calculates one or more integral images for the source image as follows:

.. math::

	\texttt{sum} (X,Y) = \sum _{x<X,y<Y} \texttt{image} (x,y)

.. math::

	\texttt{sqsum} (X,Y) = \sum _{x<X,y<Y} \texttt{image} (x,y)^2

.. math::

	\texttt{tilted} (X,Y) = \sum _{y<Y,abs(x-X+1) \leq Y-y-1} \texttt{image} (x,y)

Using these integral images, you can calculate sum, mean, and standard deviation over a specific up-right or rotated rectangular region of the image in a constant time, for example:

.. math::

	\sum _{x_1 \leq x < x_2, \, y_1 \leq y < y_2} \texttt{image} (x,y) = \texttt{sum} (x_2,y_2)- \texttt{sum} (x_1,y_2)- \texttt{sum} (x_2,y_1)+ \texttt{sum} (x_1,y_1)

It makes possible to do a fast blurring or fast block correlation with a variable window size, for example. In case of multi-channel images, sums for each channel are accumulated independently.

As a practical example, the next figure shows the calculation of the integral of a straight rectangle Rect(3,3,3,2) and of a tilted rectangle Rect(5,1,2,3) . The selected pixels in the original image are shown, as well as the relative pixels in the integral images sum and tilted .

.. image:: integral.png
	:alt: integral calculation example



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input image as :math:`W \times H`, 8-bit or floating-point (32f or 64f).

	*
		- sum

		- integral image as :math:`(W+1)\times (H+1)`, 32-bit integer or floating-point (32f or 64f).

	*
		- sqsum

		- integral image for squared pixel values; it is :math:`(W+1)\times (H+1)`, double-precision floating-point (64f) array.

	*
		- tilted

		- integral for the image rotated by 45 degrees; it is :math:`(W+1)\times (H+1)` array with the same data type as sum.

	*
		- sdepth

		- desired depth of the integral and the tilted integral images, CV_32S, CV_32F, or CV_64F.

	*
		- sqdepth

		- desired depth of the integral image of squared pixel values, CV_32F or CV_64F.

.. index:: pair: function; threshold
.. _doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	cv::threshold(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` src,
		:ref:`OutputArray<doxid-dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0>` dst,
		double thresh,
		double maxval,
		int type
		)

Applies a fixed-level threshold to each array element.

The function applies fixed-level thresholding to a multiple-channel array. The function is typically used to get a bi-level (binary) image out of a grayscale image (:ref:`cv::compare <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>` could be also used for this purpose) or for removing a noise, that is, filtering out pixels with too small or too large values. There are several types of thresholding supported by the function. They are determined by type parameter.

Also, the special values :ref:`cv::THRESH_OTSU <doxid-d7/d1b/group__imgproc__misc_1ggaa9e58d2860d4afa658ef70a9b1115576a95251923e8e22f368ffa86ba8bce87ff>` or :ref:`cv::THRESH_TRIANGLE <doxid-d7/d1b/group__imgproc__misc_1ggaa9e58d2860d4afa658ef70a9b1115576a22ffcf680811aed95be6c7f5cd809621>` may be combined with one of the above values. In these cases, the function determines the optimal threshold value using the Otsu's or Triangle algorithm and uses it instead of the specified thresh . The function returns the computed threshold value. Currently, the Otsu's and Triangle methods are implemented only for 8-bit images.

Input image should be single channel only in case of CV_THRESH_OTSU or CV_THRESH_TRIANGLE flags



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- src

		- input array (multiple-channel, 8-bit or 32-bit floating point).

	*
		- dst

		- output array of the same size and type and the same number of channels as src.

	*
		- thresh

		- threshold value.

	*
		- maxval

		- maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV thresholding types.

	*
		- type

		- thresholding type (see the :ref:`cv::ThresholdTypes <doxid-d7/d1b/group__imgproc__misc_1gaa9e58d2860d4afa658ef70a9b1115576>`).



.. rubric:: See also:

:ref:`adaptiveThreshold <doxid-d7/d1b/group__imgproc__misc_1ga72b913f352e4a1b1b397736707afcde3>`, :ref:`findContours <doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`, :ref:`compare <doxid-d2/de8/group__core__array_1ga303cfb72acf8cbb36d884650c09a3a97>`, :ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`, :ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`

.. index:: pair: function; watershed
.. _doxid-d7/d1b/group__imgproc__misc_1ga3267243e4d3f95165d55a618c65ac6e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cv::watershed(
		:ref:`InputArray<doxid-dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba>` image,
		:ref:`InputOutputArray<doxid-dc/d84/group__core__basic_1gaf77c9a14ef956c50c1efd4547f444e63>` markers
		)

Performs a marker-based image segmentation using the watershed algorithm.

The function implements one of the variants of watershed, non-parametric marker-based segmentation algorithm, described in :ref:`[58] <doxid-d0/de3/citelist_1CITEREF_Meyer92>`.

Before passing the image to the function, you have to roughly outline the desired regions in the image markers with positive (>0) indices. So, every region is represented as one or more connected components with the pixel values 1, 2, 3, and so on. Such markers can be retrieved from a binary mask using findContours and drawContours (see the watershed.cpp demo). The markers are "seeds" of the future image regions. All the other pixels in markers , whose relation to the outlined regions is not known and should be defined by the algorithm, should be set to 0's. In the function output, each pixel in markers is set to a value of the "seed" components or to -1 at boundaries between the regions.

Any two neighbor connected components are not necessarily separated by a watershed boundary (-1's pixels); for example, they can touch each other in the initial marker image passed to the function.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- image

		- Input 8-bit 3-channel image.

	*
		- markers

		- Input/output 32-bit single-channel image (map) of markers. It should have the same size as image .



.. rubric:: See also:

:ref:`findContours <doxid-d3/dc0/group__imgproc__shape_1ga17ed9f5d79ae97bd4c7cf18403e1689a>`

