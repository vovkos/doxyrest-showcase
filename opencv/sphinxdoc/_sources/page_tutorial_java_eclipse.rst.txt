.. index:: pair: page; Using OpenCV Java with Eclipse
.. _doxid-d1/d0a/tutorial_java_eclipse:

Using OpenCV Java with Eclipse
==============================

Since version 2.4.4 `OpenCV supports Java <http://opencv.org/opencv-java-api.html>`__. In this tutorial I will explain how to setup development environment for using OpenCV Java with Eclipse in **Windows**, so you can enjoy the benefits of garbage collected, very refactorable (rename variable, extract method and whatnot) modern language that enables you to write code with less effort and make less mistakes. Here we go.

.. rubric:: Configuring Eclipse

First, obtain a fresh release of OpenCV `from download page <http://opencv.org/releases.html>`__ and extract it under a simple location like ``C:\OpenCV-2.4.6\``. I am using version 2.4.6, but the steps are more or less the same for other versions.

Now, we will define OpenCV as a user library in Eclipse, so we can reuse the configuration for any project. Launch Eclipse and select Window> Preferences from the menu.

.. image:: 1-window-preferences.png

Navigate under Java> Build Path> User Libraries and click New....

.. image:: 2-user-library-new.png

Enter a name, e.g. OpenCV-2.4.6, for your new library.

.. image:: 3-library-name.png

Now select your new user library and click Add External JARs....

.. image:: 4-add-external-jars.png

Browse through ``C:\OpenCV-2.4.6\build\java\`` and select opencv-246.jar. After adding the jar, extend the opencv-246.jar and select Native library location and press Edit....

.. image:: 5-native-library.png

Select External Folder... and browse to select the folder ``C:\OpenCV-2.4.6\build\java\x64``. If you have a 32-bit system you need to select the x86 folder instead of x64.

.. image:: 6-external-folder.png

Your user library configuration should look like this:

.. image:: 7-user-library-final.png

.. rubric:: Testing the configuration on a new Java project

Now start creating a new Java project.

.. image:: 7_5-new-java-project.png

On the Java Settings step, under Libraries tab, select Add Library... and select OpenCV-2.4.6, then click Finish.

.. image:: 8-add-library.png

.. image:: 9-select-user-lib.png

Libraries should look like this:

.. image:: 10-new-project-created.png

Now you have created and configured a new Java project it is time to test it. Create a new java file. Here is a starter code for your convenience:

.. ref-code-block:: cpp

	import org.opencv.core.Core;
	import org.opencv.core.CvType;
	import org.opencv.core.Mat;
	
	public class Hello
	{
	   public static void main( String[] args )
	   {
	      System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
	      Mat mat = Mat.eye( 3, 3, :ref:`CvType <doxid-d5/dea/struct_cv_type>`.CV_8UC1 );
	      System.out.println( "mat = " + mat.dump() );
	   }
	}

When you run the code you should see 3x3 identity matrix as output.

.. image:: 11-the-code.png

That is it, whenever you start a new project just add the OpenCV user library that you have defined to your project and you are good to go. Enjoy your powerful, less painful development environment :)

