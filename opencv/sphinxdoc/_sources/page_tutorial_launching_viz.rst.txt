.. index:: pair: page; Launching Viz
.. _doxid-d5/d7d/tutorial_launching_viz:

Launching Viz
=============

.. rubric:: Goal

In this tutorial you will learn how to

* Open a visualization window.

* Access a window by its name.

* Start event loop.

* Start event loop for a given amount of time.

.. rubric:: Code

You can download the code from `here <https://github.com/opencv/opencv/tree/master/samples/cpp/tutorial_code/viz/launching_viz.cpp>`__.

.. ref-code-block:: cpp

	
	#include <opencv2/viz.hpp>
	#include <iostream>
	
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	
	static void help()
	{
	    cout
	    << "--------------------------------------------------------------------------" << endl
	    << "This program shows how to launch a 3D visualization window. You can stop event loop to continue executing. "
	    << "You can access the same window via its name. You can run event loop for a given period of time. " << endl
	    << "Usage:"                                                                     << endl
	    << "./launching_viz"                                                            << endl
	    << endl;
	}
	
	int main()
	{
	    help();
	    :ref:`viz::Viz3d <doxid-dd/d47/classcv_1_1viz_1_1_viz3d>` myWindow("Viz Demo");
	
	    myWindow.spin();
	
	    cout << "First event loop is over" << endl;
	
	    :ref:`viz::Viz3d <doxid-dd/d47/classcv_1_1viz_1_1_viz3d>` sameWindow = :ref:`viz::getWindowByName <doxid-d1/d19/group__viz_1ga91ed3eefdd38bcc0d3d8be527a58c6c7>`("Viz Demo");
	
	    sameWindow.:ref:`spin <doxid-dd/d47/classcv_1_1viz_1_1_viz3d_1a26114066f4d49398fb1b98bde3b5dc78>`();
	
	    cout << "Second event loop is over" << endl;
	
	    sameWindow.:ref:`spinOnce <doxid-dd/d47/classcv_1_1viz_1_1_viz3d_1a481d977ad11a63da44ece08e7f76fdef>`(1, true);
	    while(!sameWindow.:ref:`wasStopped <doxid-dd/d47/classcv_1_1viz_1_1_viz3d_1aded2483c7f71d0e598aa25258b1b6fe7>`())
	    {
	
	        sameWindow.:ref:`spinOnce <doxid-dd/d47/classcv_1_1viz_1_1_viz3d_1a481d977ad11a63da44ece08e7f76fdef>`(1, true);
	    }
	
	    cout << "Last event loop is over" << endl;
	    return 0;
	}

.. rubric:: Explanation

Here is the general structure of the program:

* Create a window.
  
  .. ref-code-block:: cpp
  
  	viz::Viz3d myWindow("Viz Demo");

* Start event loop. This event loop will run until user terminates it by pressing **e**, **E**, **q**, **Q**.
  
  .. ref-code-block:: cpp
  
  	myWindow.spin();

* Access same window via its name. Since windows are implicitly shared, **sameWindow** is exactly the same with **myWindow**. If the name does not exist, a new window is created.
  
  .. ref-code-block:: cpp
  
  	viz::Viz3d sameWindow = viz::get("Viz Demo");

* Start a controlled event loop. Once it starts, **wasStopped** is set to false. Inside the while loop, in each iteration, **spinOnce** is called to prevent event loop from completely stopping. Inside the while loop, user can execute other statements including those which interact with the window.
  
  .. ref-code-block:: cpp
  
  	sameWindow.spinOnce(1, true);
  	while(!sameWindow.wasStopped())
  	{
  	
  	    sameWindow.spinOnce(1, true);
  	}

.. rubric:: Results

Here is the result of the program.

.. image:: window_demo.png

