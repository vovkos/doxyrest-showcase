.. index:: pair: page; Thresholding Operations using inRange
.. _doxid-dd/df3/tutorial_threshold_in_range:

Thresholding Operations using inRange
=====================================

.. rubric:: Goal

In this tutorial you will learn how to:

* Perform basic thresholding operations using OpenCV function :ref:`cv::inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`

* Detect an object based on the range of pixel values it has

.. rubric:: Theory

* In the previous tutorial, we learnt how perform thresholding using :ref:`cv::threshold <doxid-d7/d1b/group__imgproc__misc_1gae8a4a146d1ca78c626a53577199e9c57>` function.

* In this tutorial, we will learn how to do it using :ref:`cv::inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>` function.

* The concept remains same, but now we add a range of pixel values we need.

.. rubric:: Code

The tutorial code's is shown lines below. You can also download it from `here <https://github.com/opencv/opencv/tree/master/samples/cpp/tutorial_code/ImgProc/Threshold_inRange.cpp>`__

.. ref-code-block:: cpp

	#include "opencv2/imgproc.hpp"
	#include "opencv2/highgui.hpp"
	
	#include <iostream>
	#include <stdlib.h>
	
	using namespace :ref:`std <doxid-d8/dcc/namespacestd>`;
	using namespace :ref:`cv <doxid-d2/d75/namespacecv>`;
	
	void on_low_r_thresh_trackbar(int, void *);
	void on_high_r_thresh_trackbar(int, void *);
	void on_low_g_thresh_trackbar(int, void *);
	void on_high_g_thresh_trackbar(int, void *);
	void on_low_b_thresh_trackbar(int, void *);
	void on_high_b_thresh_trackbar(int, void *);
	
	int low_r=30, low_g=30, low_b=30;
	int high_r=100, high_g=100, high_b=100;
	
	int main()
	{
	    :ref:`Mat <doxid-db/de6/classcv_1_1_mat>` frame, frame_threshold;
	    :ref:`VideoCapture <doxid-df/dcb/classcv_1_1_video_capture>` cap(0);
	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Video Capture", :ref:`WINDOW_NORMAL <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3a29e45c5af696f73ce5e153601e5ca0f1>`);
	    :ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Object Detection", :ref:`WINDOW_NORMAL <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3a29e45c5af696f73ce5e153601e5ca0f1>`);
	    //-- Trackbars to set thresholds for RGB values
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("Low R","Object Detection", &low_r, 255, on_low_r_thresh_trackbar);
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("High R","Object Detection", &high_r, 255, on_high_r_thresh_trackbar);
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("Low G","Object Detection", &low_g, 255, on_low_g_thresh_trackbar);
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("High G","Object Detection", &high_g, 255, on_high_g_thresh_trackbar);
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("Low B","Object Detection", &low_b, 255, on_low_b_thresh_trackbar);
	    :ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("High B","Object Detection", &high_b, 255, on_high_b_thresh_trackbar);
	    while((char):ref:`waitKey <doxid-d7/dfc/group__highgui_1ga5628525ad33f52eab17feebcfba38bd7>`(1)!='q'){
	        cap>>frame;
	        if(frame.empty())
	            break;
	        //-- Detect the object based on RGB Range Values
	        :ref:`inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`(frame,:ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(low_b,low_g,low_r), :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(high_b,high_g,high_r),frame_threshold);
	        //-- Show the frames
	        :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Video Capture",frame);
	        :ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Object Detection",frame_threshold);
	    }
	    return 0;
	}
	
	void on_low_r_thresh_trackbar(int, void *)
	{
	    low_r = :ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`(high_r-1, low_r);
	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("Low R","Object Detection", low_r);
	}
	
	void on_high_r_thresh_trackbar(int, void *)
	{
	    high_r = :ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`(high_r, low_r+1);
	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("High R", "Object Detection", high_r);
	}
	
	void on_low_g_thresh_trackbar(int, void *)
	{
	    low_g = :ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`(high_g-1, low_g);
	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("Low G","Object Detection", low_g);
	}
	
	void on_high_g_thresh_trackbar(int, void *)
	{
	    high_g = :ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`(high_g, low_g+1);
	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("High G", "Object Detection", high_g);
	}
	
	void on_low_b_thresh_trackbar(int, void *)
	{
	    low_b= :ref:`min <doxid-d2/d75/namespacecv_1ac48df53b8fd34b87e7b121fa8fd4c379>`(high_b-1, low_b);
	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("Low B","Object Detection", low_b);
	}
	
	void on_high_b_thresh_trackbar(int, void *)
	{
	    high_b = :ref:`max <doxid-d2/d75/namespacecv_1a78f988f6cfa6223610298cbd4f86ec66>`(high_b, low_b+1);
	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("High B", "Object Detection", high_b);
	}

.. rubric:: Explanation

#. Let's check the general structure of the program:
   
   * Create two Matrix elements to store the frames
     
     .. ref-code-block:: cpp
     
     	Mat frame, frame_threshold;
   
   * Capture the video stream from default capturing device.
     
     .. ref-code-block:: cpp
     
     	VideoCapture cap(0);
   
   * Create a window to display the default frame and the threshold frame.
     
     .. ref-code-block:: cpp
     
     	:ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Video Capture", :ref:`WINDOW_NORMAL <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3a29e45c5af696f73ce5e153601e5ca0f1>`);
     	:ref:`namedWindow <doxid-d7/dfc/group__highgui_1ga5afdf8410934fd099df85c75b2e0888b>`("Object Detection", :ref:`WINDOW_NORMAL <doxid-d7/dfc/group__highgui_1ggabf7d2c5625bc59ac130287f925557ac3a29e45c5af696f73ce5e153601e5ca0f1>`);
   
   * Create trackbars to set the range of RGB values
     
     .. ref-code-block:: cpp
     
     	//-- Trackbars to set thresholds for RGB values
     	:ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("Low R","Object Detection", &low_r, 255, on_low_r_thresh_trackbar);
     	:ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("High R","Object Detection", &high_r, 255, on_high_r_thresh_trackbar);
     	:ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("Low G","Object Detection", &low_g, 255, on_low_g_thresh_trackbar);
     	:ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("High G","Object Detection", &high_g, 255, on_high_g_thresh_trackbar);
     	:ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("Low B","Object Detection", &low_b, 255, on_low_b_thresh_trackbar);
     	:ref:`createTrackbar <doxid-d7/dfc/group__highgui_1gaf78d2155d30b728fc413803745b67a9b>`("High B","Object Detection", &high_b, 255, on_high_b_thresh_trackbar);
   
   * Until the user want the program to exit do the following
     
     .. ref-code-block:: cpp
     
     	cap>>frame;
     	if(frame.empty())
     	    break;
     	//-- Detect the object based on RGB Range Values
     	:ref:`inRange <doxid-d2/de8/group__core__array_1ga48af0ab51e36436c5d04340e036ce981>`(frame,:ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(low_b,low_g,low_r), :ref:`Scalar <doxid-dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb>`(high_b,high_g,high_r),frame_threshold);
   
   * Show the images
     
     .. ref-code-block:: cpp
     
     	//-- Show the frames
     	:ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Video Capture",frame);
     	:ref:`imshow <doxid-d7/dfc/group__highgui_1ga453d42fe4cb60e5723281a89973ee563>`("Object Detection",frame_threshold);
   
   * For a trackbar which controls the lower range, say for example Red value:
     
     .. ref-code-block:: cpp
     
     	
     	void on_low_r_thresh_trackbar(int, void *)
     	{
     	    low_r = :ref:`min <doxid-d9/ddc/classcv_1_1_mat_expr_1ac22d7d32f1ec91fd106760a98a6f4731>`(high_r-1, low_r);
     	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("Low R","Object Detection", low_r);
     	}
   
   * For a trackbar which controls the upper range, say for example Red value:
     
     .. ref-code-block:: cpp
     
     	
     	void on_high_r_thresh_trackbar(int, void *)
     	{
     	    high_r = :ref:`max <doxid-d9/ddc/classcv_1_1_mat_expr_1a6dff8b6e9105b6d817b493e7be157c90>`(high_r, low_r+1);
     	    :ref:`setTrackbarPos <doxid-d7/dfc/group__highgui_1ga67d73c4c9430f13481fd58410d01bd8d>`("High R", "Object Detection", high_r);
     	}
   
   * It is necessary to find the maximum and minimum value to avoid discrepancies such as the high value of threshold becoming less the low value.

.. rubric:: Results

#. After compiling this program, run it. The program will open two windows

#. As you set the RGB range values from the trackbar, the resulting frame will be visible in the other window.
   
   .. image:: Threshold_inRange_Tutorial_Result_input.jpeg
   
   
   
   .. image:: Threshold_inRange_Tutorial_Result_output.jpeg

