.. index:: pair: struct; cvflann::L2
.. _doxid-d9/d21/structcvflann_1_1_l2:

template struct cvflann::L2
===========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Squared Euclidean distance functor, optimized version :ref:`More...<details-d9/d21/structcvflann_1_1_l2>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <dist.h>
	
	template <class T>
	struct L2
	{
		// typedefs
	
		typedef T :target:`ElementType<doxid-d9/d21/structcvflann_1_1_l2_1a947248fbf703551189651b69d75435db>`;
		typedef :ref:`True<doxid-d7/daa/classcvflann_1_1_true>` :target:`is_kdtree_distance<doxid-d9/d21/structcvflann_1_1_l2_1a3da7a47efd79776d2eff26fcd3b6d3b1>`;
		typedef :ref:`True<doxid-d7/daa/classcvflann_1_1_true>` :target:`is_vector_space_distance<doxid-d9/d21/structcvflann_1_1_l2_1aaab92e6462f69adb45b3822b922a232d>`;
		typedef :ref:`Accumulator<doxid-d4/d03/structcvflann_1_1_accumulator>`<T>::Type :target:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>`;

		// methods
	
		template <
			typename U,
			typename V
			>
		:ref:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>`
		:ref:`accum_dist<doxid-d9/d21/structcvflann_1_1_l2_1a86c4bc5fd49df86e4c04a960150b4ca2>`(
			const U& a,
			const V& b,
			int
			) const;
	
		template <
			typename Iterator1,
			typename Iterator2
			>
		:ref:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>`
		:ref:`operator()<doxid-d9/d21/structcvflann_1_1_l2_1a1c954bc53b3e5ab18a17657ce7e9a518>`(
			Iterator1 a,
			Iterator2 b,
			:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size,
			:ref:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>` worst_dist = -1
			) const;
	};
.. _details-d9/d21/structcvflann_1_1_l2:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Squared Euclidean distance functor, optimized version

Methods
-------

.. index:: pair: function; accum_dist
.. _doxid-d9/d21/structcvflann_1_1_l2_1a86c4bc5fd49df86e4c04a960150b4ca2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename U,
		typename V
		>
	:ref:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>`
	accum_dist(
		const U& a,
		const V& b,
		int
		) const

Partial euclidean distance, using just one dimension. This is used by the kd-tree when computing partial distances while traversing the tree.

Squared root is omitted for efficiency.

.. index:: pair: function; operator()
.. _doxid-d9/d21/structcvflann_1_1_l2_1a1c954bc53b3e5ab18a17657ce7e9a518:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <
		typename Iterator1,
		typename Iterator2
		>
	:ref:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>`
	operator()(
		Iterator1 a,
		Iterator2 b,
		:ref:`size_t<doxid-da/d06/autogenerated_2opencl__core_8hpp_1a6ff403ead16f7faa1f7228274eb6b01d>` size,
		:ref:`ResultType<doxid-d9/d21/structcvflann_1_1_l2_1a725e8728f510569bbdf7a14656be074f>` worst_dist = -1
		) const

Compute the squared Euclidean distance between two vectors.

This is highly optimised, with loop unrolling, as it is one of the most expensive inner loops.

The computation of squared root at the end is omitted for efficiency.

