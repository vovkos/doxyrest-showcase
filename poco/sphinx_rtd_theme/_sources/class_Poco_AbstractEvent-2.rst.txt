.. index:: pair: class; Poco::AbstractEvent
.. _doxid-class_poco_1_1_abstract_event:

template class Poco::AbstractEvent
==================================

.. toctree::
	:hidden:

	struct_Poco_AbstractEvent_NotifyAsyncParams.rst

Overview
~~~~~~~~

An :ref:`AbstractEvent <doxid-class_poco_1_1_abstract_event>` is the base class of all events. :ref:`More...<details-class_poco_1_1_abstract_event>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <AbstractEvent.h>
	
	template <
		class TArgs,
		class TStrategy,
		class TDelegate,
		class TMutex = FastMutex
		>
	class AbstractEvent
	{
	public:
		// typedefs
	
		typedef TDelegate* :target:`DelegateHandle<doxid-class_poco_1_1_abstract_event_1a9fac264fa3f677c0c30856ea4d5c6fa7>`;
		typedef TArgs :target:`Args<doxid-class_poco_1_1_abstract_event_1a0b045274392d17cc631b7ac49aac4e39>`;

		// structs
	
		struct :ref:`NotifyAsyncParams<doxid-struct_poco_1_1_abstract_event_1_1_notify_async_params>`;

		// construction
	
		:target:`AbstractEvent<doxid-class_poco_1_1_abstract_event_1ac9281737dfd26525eef5d941bf3e0e0a>`();
		:target:`AbstractEvent<doxid-class_poco_1_1_abstract_event_1acc439d0bec710ecf736e9af3f1441801>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TStrategy& strat);

		// methods
	
		void
		:ref:`operator+=<doxid-class_poco_1_1_abstract_event_1a133c0d952fc402c57cee2cfb2526ca25>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TDelegate& aDelegate);
	
		void
		:ref:`operator-=<doxid-class_poco_1_1_abstract_event_1ad627ecd5fd49b7a98c31c7426caabcf8>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TDelegate& aDelegate);
	
		:ref:`DelegateHandle<doxid-class_poco_1_1_abstract_event_1a9fac264fa3f677c0c30856ea4d5c6fa7>`
		:ref:`add<doxid-class_poco_1_1_abstract_event_1acafbf7db97c1fb57a45a7053287b9312>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TDelegate& aDelegate);
	
		void
		:ref:`remove<doxid-class_poco_1_1_abstract_event_1a0f3a376ebfb2ebf76bf2ad6c6b0d926d>`(:ref:`DelegateHandle<doxid-class_poco_1_1_abstract_event_1a9fac264fa3f677c0c30856ea4d5c6fa7>` delegateHandle);
	
		void
		:ref:`operator()<doxid-class_poco_1_1_abstract_event_1ad51b75d6062ab032ccb39d160d1e6045>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` void* pSender,
			TArgs& args
			);
	
		void
		:ref:`operator()<doxid-class_poco_1_1_abstract_event_1a3d56eb2f5ccf5f3b0d83cc2cbca7683e>`(TArgs& args);
	
		void
		:ref:`notify<doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` void* pSender,
			TArgs& args
			);
	
		bool
		:target:`hasDelegates<doxid-class_poco_1_1_abstract_event_1a6eb29a3cc5f9a7d1e792ef7e018be895>`() const;
	
		:ref:`ActiveResult<doxid-class_poco_1_1_active_result>`<TArgs>
		:ref:`notifyAsync<doxid-class_poco_1_1_abstract_event_1aed56afbf8d9a88baf16595ef23b9fca0>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` void* pSender,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TArgs& args
			);
	
		void
		:ref:`enable<doxid-class_poco_1_1_abstract_event_1aef29037015a0dd0da571ac14cf2f3f7d>`();
	
		void
		:ref:`disable<doxid-class_poco_1_1_abstract_event_1a96b51d924987da8fcc49b0f7ea2dd124>`();
	
		bool
		:target:`isEnabled<doxid-class_poco_1_1_abstract_event_1a1ebca7efa6ae69ee5779ca7a25722208>`() const;
	
		void
		:ref:`clear<doxid-class_poco_1_1_abstract_event_1a0042c86c734856b71d286d2cbad2dbfa>`();
	
		bool
		:ref:`empty<doxid-class_poco_1_1_abstract_event_1a39e727dce7dc1562dd8aa35efcc8ad66>`() const;

	protected:
		// fields
	
		:ref:`ActiveMethod<doxid-class_poco_1_1_active_method>`<TArgs, :ref:`NotifyAsyncParams<doxid-struct_poco_1_1_abstract_event_1_1_notify_async_params>`, AbstractEvent> :target:`_executeAsync<doxid-class_poco_1_1_abstract_event_1a1f3fd164c27b8b8697b22b78ab844500>`;
		TStrategy :ref:`_strategy<doxid-class_poco_1_1_abstract_event_1a2130834295f875c44c7097180082b9ab>`;
		bool :ref:`_enabled<doxid-class_poco_1_1_abstract_event_1a9c85d9be160eb7a76dfec02220fa1d2e>`;
		TMutex :target:`_mutex<doxid-class_poco_1_1_abstract_event_1acf9b88d3fa006366e116816e0dac5e4a>`;

		// methods
	
		TArgs
		:target:`executeAsyncImpl<doxid-class_poco_1_1_abstract_event_1aa14e55318d09b2c6eac2fdec84b6a867>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`NotifyAsyncParams<doxid-struct_poco_1_1_abstract_event_1_1_notify_async_params>`& par);
	};

	// direct descendants

	template <
		class TArgs,
		class TMutex = FastMutex
		>
	class :ref:`BasicEvent<doxid-class_poco_1_1_basic_event>`;

	template <
		class TArgs,
		class TMutex = FastMutex
		>
	class :ref:`FIFOEvent<doxid-class_poco_1_1_f_i_f_o_event>`;

	template <
		class TArgs,
		class TMutex = FastMutex
		>
	class :ref:`PriorityEvent<doxid-class_poco_1_1_priority_event>`;
.. _details-class_poco_1_1_abstract_event:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

An :ref:`AbstractEvent <doxid-class_poco_1_1_abstract_event>` is the base class of all events.

It works similar to the way C# handles notifications (aka events in C#).

Events can be used to send information to a set of delegates which are registered with the event. The type of the data is specified with the template parameter TArgs. The TStrategy parameter must be a subclass of :ref:`NotificationStrategy <doxid-class_poco_1_1_notification_strategy>`. The parameter TDelegate can either be a subclass of :ref:`AbstractDelegate <doxid-class_poco_1_1_abstract_delegate>` or of :ref:`AbstractPriorityDelegate <doxid-class_poco_1_1_abstract_priority_delegate>`.

Note that :ref:`AbstractEvent <doxid-class_poco_1_1_abstract_event>` should never be used directly. One ought to use one of its subclasses which set the TStrategy and TDelegate template parameters to fixed values. For most use-cases the :ref:`BasicEvent <doxid-class_poco_1_1_basic_event>` template will be sufficient:

.. ref-code-block:: cpp

	#include "Poco/BasicEvent.h"
	#include "Poco/Delegate.h"

Note that as of release 1.4.2, the behavior of :ref:`BasicEvent <doxid-class_poco_1_1_basic_event>` equals that of :ref:`FIFOEvent <doxid-class_poco_1_1_f_i_f_o_event>`, so the :ref:`FIFOEvent <doxid-class_poco_1_1_f_i_f_o_event>` class is no longer necessary and provided for backwards compatibility only.

:ref:`BasicEvent <doxid-class_poco_1_1_basic_event>` works with a standard delegate. They allow one object to register one or more delegates with an event. In contrast, a :ref:`PriorityDelegate <doxid-class_poco_1_1_priority_delegate>` comes with an attached priority value and allows one object to register for one priority value one or more delegates. Note that PriorityDelegates only work with PriorityEvents:

.. ref-code-block:: cpp

	#include "Poco/PriorityEvent.h"
	#include "Poco/PriorityDelegate.h"

Use events by adding them as public members to the object which is throwing notifications:

.. ref-code-block:: cpp

	class MyData
	{
	public:
	    Poco::BasicEvent<int> dataChanged;
	    
	    MyData();
	    ...
	    void setData(int i);
	    ...
	private:
	    int _data;
	};

Firing the event is done either by calling the event's :ref:`notify() <doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18>` or :ref:`notifyAsync() <doxid-class_poco_1_1_abstract_event_1aed56afbf8d9a88baf16595ef23b9fca0>` method:

.. ref-code-block:: cpp

	void MyData::setData(int i)
	{
	    this->_data = i;
	    dataChanged.notify(this, this->_data);
	}

Alternatively, instead of :ref:`notify() <doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18>`, operator () can be used.

.. ref-code-block:: cpp

	void MyData::setData(int i)
	{
	    this->_data = i;
	    dataChanged(this, this->_data);
	}

Note that operator (), :ref:`notify() <doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18>` and :ref:`notifyAsync() <doxid-class_poco_1_1_abstract_event_1aed56afbf8d9a88baf16595ef23b9fca0>` do not catch exceptions, i.e. in case a delegate throws an exception, notifying is immediately aborted and the exception is propagated back to the caller.

Delegates can register methods at the event. In the case of a :ref:`BasicEvent <doxid-class_poco_1_1_basic_event>` the :ref:`Delegate <doxid-class_poco_1_1_delegate>` template is used, in case of an :ref:`PriorityEvent <doxid-class_poco_1_1_priority_event>` a :ref:`PriorityDelegate <doxid-class_poco_1_1_priority_delegate>` is used. Mixing of delegates, e.g. using a :ref:`PriorityDelegate <doxid-class_poco_1_1_priority_delegate>` with a :ref:`BasicEvent <doxid-class_poco_1_1_basic_event>` is not allowed and can lead to compile-time and/or run-time errors. The standalone :ref:`delegate() <doxid-namespace_poco_1a3c92b935465d543414d807c7884396ff>` functions can be used to construct :ref:`Delegate <doxid-class_poco_1_1_delegate>` objects.

Events require the observers to have one of the following method signatures:

.. ref-code-block:: cpp

	void onEvent(const void* pSender, TArgs& args);
	void onEvent(TArgs& args);
	static void onEvent(const void* pSender, TArgs& args);
	static void onEvent(void* pSender, TArgs& args);
	static void onEvent(TArgs& args);

For performance reasons arguments are always sent by reference. This also allows observers to modify the event argument. To prevent that, use <[const TArg]> as template parameter. A non-conformant method signature leads to compile errors.

Assuming that the observer meets the method signature requirement, it can register this method with the += operator:

.. ref-code-block:: cpp

	class MyController
	{
	protected:
	    MyData _data;
	    
	    void onDataChanged(void* pSender, int& data);
	    ...
	};
	    
	MyController::MyController()
	{
	    _data.dataChanged += delegate(this, &MyController::onDataChanged);
	}

In some cases it might be desirable to work with automatically expiring registrations. Simply add to delegate as 3rd parameter a expireValue (in milliseconds):

.. ref-code-block:: cpp

	_data.dataChanged += delegate(this, &MyController::onDataChanged, 1000);

This will add a delegate to the event which will automatically be removed in 1000 millisecs.

Unregistering happens via the -= operator. Forgetting to unregister a method will lead to segmentation faults later, when one tries to send a notify to a no longer existing object.

.. ref-code-block:: cpp

	MyController::~MyController()
	{
	    _data.dataChanged -= delegate(this, &MyController::onDataChanged);
	}

Working with :ref:`PriorityDelegate <doxid-class_poco_1_1_priority_delegate>` 's as similar to working with :ref:`BasicEvent <doxid-class_poco_1_1_basic_event>`. Instead of :ref:`delegate() <doxid-namespace_poco_1a3c92b935465d543414d807c7884396ff>`, the :ref:`priorityDelegate() <doxid-namespace_poco_1a2f48d7b2c7774e22e565fc0afb97218f>` function must be used to create the :ref:`PriorityDelegate <doxid-class_poco_1_1_priority_delegate>`.

Fields
------

.. index:: pair: variable; _strategy
.. _doxid-class_poco_1_1_abstract_event_1a2130834295f875c44c7097180082b9ab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TStrategy _strategy

The strategy used to notify observers.

.. index:: pair: variable; _enabled
.. _doxid-class_poco_1_1_abstract_event_1a9c85d9be160eb7a76dfec02220fa1d2e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool _enabled

Stores if an event is enabled. Notfies on disabled events have no effect.

Methods
-------

.. index:: pair: function; operator+=
.. _doxid-class_poco_1_1_abstract_event_1a133c0d952fc402c57cee2cfb2526ca25:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	operator+=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TDelegate& aDelegate)

Adds a delegate to the event.

Exact behavior is determined by the TStrategy.

.. index:: pair: function; operator-=
.. _doxid-class_poco_1_1_abstract_event_1ad627ecd5fd49b7a98c31c7426caabcf8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	operator-=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TDelegate& aDelegate)

Removes a delegate from the event.

If the delegate is not found, this function does nothing.

.. index:: pair: function; add
.. _doxid-class_poco_1_1_abstract_event_1acafbf7db97c1fb57a45a7053287b9312:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`DelegateHandle<doxid-class_poco_1_1_abstract_event_1a9fac264fa3f677c0c30856ea4d5c6fa7>`
	add(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TDelegate& aDelegate)

Adds a delegate to the event.

Exact behavior is determined by the TStrategy.

Returns a DelegateHandle which can be used in call to :ref:`remove() <doxid-class_poco_1_1_abstract_event_1a0f3a376ebfb2ebf76bf2ad6c6b0d926d>` to remove the delegate.

.. index:: pair: function; remove
.. _doxid-class_poco_1_1_abstract_event_1a0f3a376ebfb2ebf76bf2ad6c6b0d926d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	remove(:ref:`DelegateHandle<doxid-class_poco_1_1_abstract_event_1a9fac264fa3f677c0c30856ea4d5c6fa7>` delegateHandle)

Removes a delegate from the event using a DelegateHandle returned by :ref:`add() <doxid-class_poco_1_1_abstract_event_1acafbf7db97c1fb57a45a7053287b9312>`.

If the delegate is not found, this function does nothing.

.. index:: pair: function; operator()
.. _doxid-class_poco_1_1_abstract_event_1ad51b75d6062ab032ccb39d160d1e6045:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	operator()(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` void* pSender,
		TArgs& args
		)

Shortcut for notify(pSender, args);.

.. index:: pair: function; operator()
.. _doxid-class_poco_1_1_abstract_event_1a3d56eb2f5ccf5f3b0d83cc2cbca7683e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	operator()(TArgs& args)

Shortcut for notify(args).

.. index:: pair: function; notify
.. _doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	notify(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` void* pSender,
		TArgs& args
		)

Sends a notification to all registered delegates.

The order is determined by the TStrategy. This method is blocking. While executing, the list of delegates may be modified. These changes don't influence the current active notifications but are activated with the next notify. If a delegate is removed during a :ref:`notify() <doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18>`, the delegate will no longer be invoked (unless it has already been invoked prior to removal). If one of the delegates throws an exception, the notify method is immediately aborted and the exception is propagated to the caller.

.. index:: pair: function; notifyAsync
.. _doxid-class_poco_1_1_abstract_event_1aed56afbf8d9a88baf16595ef23b9fca0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`ActiveResult<doxid-class_poco_1_1_active_result>`<TArgs>
	notifyAsync(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` void* pSender,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TArgs& args
		)

Sends a notification to all registered delegates.

The order is determined by the TStrategy. This method is not blocking and will immediately return. The delegates are invoked in a seperate thread. Call activeResult.wait() to wait until the notification has ended. While executing, other objects can change the delegate list. These changes don't influence the current active notifications but are activated with the next notify. If a delegate is removed during a :ref:`notify() <doxid-class_poco_1_1_abstract_event_1a05309c533e007161d10f4540ea570b18>`, the delegate will no longer be invoked (unless it has already been invoked prior to removal). If one of the delegates throws an exception, the execution is aborted and the exception is propagated to the caller.

.. index:: pair: function; enable
.. _doxid-class_poco_1_1_abstract_event_1aef29037015a0dd0da571ac14cf2f3f7d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	enable()

Enables the event.

.. index:: pair: function; disable
.. _doxid-class_poco_1_1_abstract_event_1a96b51d924987da8fcc49b0f7ea2dd124:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	disable()

Disables the event.

notify and notifyAsnyc will be ignored, but adding/removing delegates is still allowed.

.. index:: pair: function; clear
.. _doxid-class_poco_1_1_abstract_event_1a0042c86c734856b71d286d2cbad2dbfa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	clear()

Removes all delegates.

.. index:: pair: function; empty
.. _doxid-class_poco_1_1_abstract_event_1a39e727dce7dc1562dd8aa35efcc8ad66:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	empty() const

Checks if any delegates are registered at the delegate.

