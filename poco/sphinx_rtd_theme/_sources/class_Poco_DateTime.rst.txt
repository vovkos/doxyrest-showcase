.. index:: pair: class; Poco::DateTime
.. _doxid-class_poco_1_1_date_time:

class Poco::DateTime
====================

.. toctree::
	:hidden:

	enum_Poco_DateTime_DaysOfWeek.rst
	enum_Poco_DateTime_Months.rst

Overview
~~~~~~~~

This class represents an instant in time, expressed in years, months, days, hours, minutes, seconds and milliseconds based on the Gregorian calendar. :ref:`More...<details-class_poco_1_1_date_time>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <DateTime.h>
	
	class DateTime
	{
	public:
		// enums
	
		enum :ref:`DaysOfWeek<doxid-class_poco_1_1_date_time_1a7ebedf052bc79beae5b355587fae0629>`;
		enum :ref:`Months<doxid-class_poco_1_1_date_time_1a3bf4ac49e58649f070040a89a875e58a>`;

		// construction
	
		:ref:`DateTime<doxid-class_poco_1_1_date_time_1a173fa618558da877a53b7ccdf24f35cb>`();
		:ref:`DateTime<doxid-class_poco_1_1_date_time_1a8a1ca442d722c4a2447137495da328d4>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timestamp<doxid-class_poco_1_1_timestamp>`& timestamp);
	
		:ref:`DateTime<doxid-class_poco_1_1_date_time_1ae70abe700f0ada856ccbb01919c7a398>`(
			int year,
			int month,
			int day,
			int hour = 0,
			int minute = 0,
			int second = 0,
			int millisecond = 0,
			int microsecond = 0
			);
	
		:ref:`DateTime<doxid-class_poco_1_1_date_time_1a229dc10d729d5cede7a256363cbfbdad>`(double julianDay);
	
		:ref:`DateTime<doxid-class_poco_1_1_date_time_1aed7c927236879f926cc40f55b9c624e5>`(
			:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>` utcTime,
			:ref:`Timestamp::TimeDiff<doxid-class_poco_1_1_timestamp_1a23501cdddede36b1551ce48525777b31>` diff
			);
	
		:ref:`DateTime<doxid-class_poco_1_1_date_time_1ae37f8f37e85505c9b5068f228986d6d3>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime);

		// methods
	
		DateTime&
		:ref:`operator=<doxid-class_poco_1_1_date_time_1a457d39ecfbc4c3b04f0b5160deb9cfc7>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime);
	
		DateTime&
		:ref:`operator=<doxid-class_poco_1_1_date_time_1a3bfb030ee8fa1f18c0e60972197e0102>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timestamp<doxid-class_poco_1_1_timestamp>`& timestamp);
	
		DateTime&
		:ref:`operator=<doxid-class_poco_1_1_date_time_1adc5cc8523945dc2d056950e1b4230133>`(double julianDay);
	
		DateTime&
		:ref:`assign<doxid-class_poco_1_1_date_time_1ac78ce9e388556c3a19d8ff9916ead8b7>`(
			int year,
			int month,
			int day,
			int hour = 0,
			int minute = 0,
			int second = 0,
			int millisecond = 0,
			int microseconds = 0
			);
	
		void
		:ref:`swap<doxid-class_poco_1_1_date_time_1a04d5a3895eb20c08dad31bcf445d1659>`(DateTime& dateTime);
	
		int
		:ref:`year<doxid-class_poco_1_1_date_time_1acbaa48137150a0cb522903eee4599df8>`() const;
	
		int
		:ref:`month<doxid-class_poco_1_1_date_time_1ae4c8b4732c1cecfca350d86741d97ecf>`() const;
	
		int
		:ref:`week<doxid-class_poco_1_1_date_time_1ab9c0b92c21df1edf1a246c43e7103f68>`(int firstDayOfWeek = :ref:`MONDAY<doxid-class_poco_1_1_date_time_1a7ebedf052bc79beae5b355587fae0629aebcfe95041ec9d2f454c7781b999a523>`) const;
	
		int
		:ref:`day<doxid-class_poco_1_1_date_time_1a5e7e9a650f652015def2e63dec6f2c45>`() const;
	
		int
		:ref:`dayOfWeek<doxid-class_poco_1_1_date_time_1ad34c02c4bca029b9acc81c553e271164>`() const;
	
		int
		:ref:`dayOfYear<doxid-class_poco_1_1_date_time_1a707c08dd8941d34ade1609bb05643dbf>`() const;
	
		int
		:ref:`hour<doxid-class_poco_1_1_date_time_1a50e33d99c1574a9347509a7d7db88105>`() const;
	
		int
		:ref:`hourAMPM<doxid-class_poco_1_1_date_time_1a767b784e63ed5351d0873d99fb69cac6>`() const;
	
		bool
		:ref:`isAM<doxid-class_poco_1_1_date_time_1aff779de79b10e10460b7c8ae01da4428>`() const;
	
		bool
		:ref:`isPM<doxid-class_poco_1_1_date_time_1a5cccdc70c7794d06b3a860b2ece7320c>`() const;
	
		int
		:ref:`minute<doxid-class_poco_1_1_date_time_1afe89a3a4024a0ec5569a979d230df3a3>`() const;
	
		int
		:ref:`second<doxid-class_poco_1_1_date_time_1abb2ddbc4093f146e6325a2ff29836f6d>`() const;
	
		int
		:ref:`millisecond<doxid-class_poco_1_1_date_time_1a1206b8f6bdeaaca145d87c90452e1d74>`() const;
	
		int
		:ref:`microsecond<doxid-class_poco_1_1_date_time_1a365a4f359875de90d97376b96264bc77>`() const;
	
		double
		:ref:`julianDay<doxid-class_poco_1_1_date_time_1a798dcc5bc709914bbce5f481c3e730f8>`() const;
	
		:ref:`Timestamp<doxid-class_poco_1_1_timestamp>`
		:ref:`timestamp<doxid-class_poco_1_1_date_time_1ab9b29631beb7d1046e798624e1e86735>`() const;
	
		:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>`
		:ref:`utcTime<doxid-class_poco_1_1_date_time_1a36e74286dbe2fd1ef7920ddc62948a89>`() const;
	
		bool
		:target:`operator==<doxid-class_poco_1_1_date_time_1ac2f65c65fb4f393af9f02cf7bf4d557d>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_date_time_1a186e758094c7b0435edbbf8968ca2c21>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_date_time_1a3cd3b8edafcfab0e38e9242b5e05f9d8>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_date_time_1a0713c763c04e90e26ea08d866d1869ab>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_date_time_1a5a816adff96239d9d72f9630df9d7a06>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_date_time_1a5b91c4e3fddc0e91f07c8b41831171f6>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		DateTime
		:target:`operator+<doxid-class_poco_1_1_date_time_1aef32f3b9357cb1e4da43c5c41ee49821>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timespan<doxid-class_poco_1_1_timespan>`& span) const;
	
		DateTime
		:target:`operator-<doxid-class_poco_1_1_date_time_1aa4e0af14a32e3bfbd08ae968ed71aa16>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timespan<doxid-class_poco_1_1_timespan>`& span) const;
	
		:ref:`Timespan<doxid-class_poco_1_1_timespan>`
		:target:`operator-<doxid-class_poco_1_1_date_time_1a90e2e723dbb3a4fbcfe013806ab548e8>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime) const;
	
		DateTime&
		:target:`operator+=<doxid-class_poco_1_1_date_time_1abc251ed1e2589c81d48397d8da36ff79>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timespan<doxid-class_poco_1_1_timespan>`& span);
	
		DateTime&
		:target:`operator-=<doxid-class_poco_1_1_date_time_1a52e0751ed9335a288fd1812ba0d58519>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timespan<doxid-class_poco_1_1_timespan>`& span);
	
		void
		:ref:`makeUTC<doxid-class_poco_1_1_date_time_1a1f5d855964cdc75f8a60235191d2bfc1>`(int tzd);
	
		void
		:ref:`makeLocal<doxid-class_poco_1_1_date_time_1a830d21d3773ea648fcb065e06d2c36c0>`(int tzd);
	
		static
		bool
		:ref:`isLeapYear<doxid-class_poco_1_1_date_time_1a1b534e0f560f8609bbcbc718b4fbd719>`(int year);
	
		static
		int
		:ref:`daysOfMonth<doxid-class_poco_1_1_date_time_1ad099dd6bed5981c8fff9b5669d9cadca>`(
			int year,
			int month
			);
	
		static
		bool
		:ref:`isValid<doxid-class_poco_1_1_date_time_1a13b5737d43a2c5414a944dc6ef1dfee4>`(
			int year,
			int month,
			int day,
			int hour = 0,
			int minute = 0,
			int second = 0,
			int millisecond = 0,
			int microsecond = 0
			);

	protected:
		// methods
	
		static
		double
		:ref:`toJulianDay<doxid-class_poco_1_1_date_time_1a6c3af2eb771578616c824288ead9cb8c>`(:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>` utcTime);
	
		static
		double
		:ref:`toJulianDay<doxid-class_poco_1_1_date_time_1a7b1a6da48b02adf86620d5eac1083a04>`(
			int year,
			int month,
			int day,
			int hour = 0,
			int minute = 0,
			int second = 0,
			int millisecond = 0,
			int microsecond = 0
			);
	
		static
		:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>`
		:ref:`toUtcTime<doxid-class_poco_1_1_date_time_1a0eceb619fc2c02104d9cda453b98da03>`(double julianDay);
	
		void
		:ref:`computeGregorian<doxid-class_poco_1_1_date_time_1ad190f27dda3d72a5847645d21c8196f6>`(double julianDay);
	
		void
		:ref:`computeDaytime<doxid-class_poco_1_1_date_time_1a4bb75577a91b72023404e5e0bd543263>`();
	};
.. _details-class_poco_1_1_date_time:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class represents an instant in time, expressed in years, months, days, hours, minutes, seconds and milliseconds based on the Gregorian calendar.

The class is mainly useful for conversions between UTC, Julian day and Gregorian calendar dates.

The date and time stored in a :ref:`DateTime <doxid-class_poco_1_1_date_time>` is always in UTC (Coordinated Universal Time) and thus independent of the timezone in effect on the system.

Conversion calculations are based on algorithms collected and described by Peter Baum at `http://vsg.cape.com/~pbaum/date/date0.htm <http://vsg.cape.com/~pbaum/date/date0.htm>`__

Internally, this class stores a date/time in two forms (UTC and broken down) for performance reasons. Only use this class for conversions between date/time representations. Use the :ref:`Timestamp <doxid-class_poco_1_1_timestamp>` class for everything else.

Notes:

.. ref-code-block:: cpp

	* Zero is a valid year (in accordance with ISO 8601 and astronomical year numbering)
	* Year zero (0) is a leap year
	* Negative years (years preceding 1 BC) are not supported

For more information, please see:

.. ref-code-block:: cpp

	* http://en.wikipedia.org/wiki/Gregorian_Calendar
	* http://en.wikipedia.org/wiki/Julian_day
	* http://en.wikipedia.org/wiki/UTC
	* http://en.wikipedia.org/wiki/ISO_8601

Construction
------------

.. index:: pair: function; DateTime
.. _doxid-class_poco_1_1_date_time_1a173fa618558da877a53b7ccdf24f35cb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime()

Creates a :ref:`DateTime <doxid-class_poco_1_1_date_time>` for the current date and time.

.. index:: pair: function; DateTime
.. _doxid-class_poco_1_1_date_time_1a8a1ca442d722c4a2447137495da328d4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timestamp<doxid-class_poco_1_1_timestamp>`& timestamp)

Creates a :ref:`DateTime <doxid-class_poco_1_1_date_time>` for the date and time given in a :ref:`Timestamp <doxid-class_poco_1_1_timestamp>`.

.. index:: pair: function; DateTime
.. _doxid-class_poco_1_1_date_time_1ae70abe700f0ada856ccbb01919c7a398:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime(
		int year,
		int month,
		int day,
		int hour = 0,
		int minute = 0,
		int second = 0,
		int millisecond = 0,
		int microsecond = 0
		)

Creates a :ref:`DateTime <doxid-class_poco_1_1_date_time>` for the given Gregorian date and time.

.. ref-code-block:: cpp

	* year is from 0 to 9999.
	* month is from 1 to 12.
	* day is from 1 to 31.
	* hour is from 0 to 23.
	* minute is from 0 to 59.
	* second is from 0 to 60 (allowing leap seconds).
	* millisecond is from 0 to 999.
	* microsecond is from 0 to 999.

.. index:: pair: function; DateTime
.. _doxid-class_poco_1_1_date_time_1a229dc10d729d5cede7a256363cbfbdad:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime(double julianDay)

Creates a :ref:`DateTime <doxid-class_poco_1_1_date_time>` for the given Julian day.

.. index:: pair: function; DateTime
.. _doxid-class_poco_1_1_date_time_1aed7c927236879f926cc40f55b9c624e5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime(
		:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>` utcTime,
		:ref:`Timestamp::TimeDiff<doxid-class_poco_1_1_timestamp_1a23501cdddede36b1551ce48525777b31>` diff
		)

Creates a :ref:`DateTime <doxid-class_poco_1_1_date_time>` from an UtcTimeVal and a TimeDiff.

Mainly used internally by :ref:`DateTime <doxid-class_poco_1_1_date_time>` and friends.

.. index:: pair: function; DateTime
.. _doxid-class_poco_1_1_date_time_1ae37f8f37e85505c9b5068f228986d6d3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime)

Copy constructor. Creates the :ref:`DateTime <doxid-class_poco_1_1_date_time>` from another one.

Methods
-------

.. index:: pair: function; operator=
.. _doxid-class_poco_1_1_date_time_1a457d39ecfbc4c3b04f0b5160deb9cfc7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime&
	operator=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` DateTime& dateTime)

Assigns another :ref:`DateTime <doxid-class_poco_1_1_date_time>`.

.. index:: pair: function; operator=
.. _doxid-class_poco_1_1_date_time_1a3bfb030ee8fa1f18c0e60972197e0102:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime&
	operator=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Timestamp<doxid-class_poco_1_1_timestamp>`& timestamp)

Assigns a :ref:`Timestamp <doxid-class_poco_1_1_timestamp>`.

.. index:: pair: function; operator=
.. _doxid-class_poco_1_1_date_time_1adc5cc8523945dc2d056950e1b4230133:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime&
	operator=(double julianDay)

Assigns a Julian day.

.. index:: pair: function; assign
.. _doxid-class_poco_1_1_date_time_1ac78ce9e388556c3a19d8ff9916ead8b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	DateTime&
	assign(
		int year,
		int month,
		int day,
		int hour = 0,
		int minute = 0,
		int second = 0,
		int millisecond = 0,
		int microseconds = 0
		)

Assigns a Gregorian date and time.

.. ref-code-block:: cpp

	* year is from 0 to 9999.
	* month is from 1 to 12.
	* day is from 1 to 31.
	* hour is from 0 to 23.
	* minute is from 0 to 59.
	* second is from 0 to 60 (allowing leap seconds).
	* millisecond is from 0 to 999.
	* microsecond is from 0 to 999.

.. index:: pair: function; swap
.. _doxid-class_poco_1_1_date_time_1a04d5a3895eb20c08dad31bcf445d1659:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	swap(DateTime& dateTime)

Swaps the :ref:`DateTime <doxid-class_poco_1_1_date_time>` with another one.

.. index:: pair: function; year
.. _doxid-class_poco_1_1_date_time_1acbaa48137150a0cb522903eee4599df8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	year() const

Returns the year.

.. index:: pair: function; month
.. _doxid-class_poco_1_1_date_time_1ae4c8b4732c1cecfca350d86741d97ecf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	month() const

Returns the month (1 to 12).

.. index:: pair: function; week
.. _doxid-class_poco_1_1_date_time_1ab9c0b92c21df1edf1a246c43e7103f68:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	week(int firstDayOfWeek = :ref:`MONDAY<doxid-class_poco_1_1_date_time_1a7ebedf052bc79beae5b355587fae0629aebcfe95041ec9d2f454c7781b999a523>`) const

Returns the week number within the year.

FirstDayOfWeek should be either SUNDAY (0) or MONDAY (1). The returned week number will be from 0 to 53. Week number 1 is the week containing January 4. This is in accordance to ISO 8601.

The following example assumes that firstDayOfWeek is MONDAY. For 2005, which started on a Saturday, week 1 will be the week starting on Monday, January 3. January 1 and 2 will fall within week 0 (or the last week of the previous year).

For 2007, which starts on a Monday, week 1 will be the week startung on Monday, January 1. There will be no week 0 in 2007.

.. index:: pair: function; day
.. _doxid-class_poco_1_1_date_time_1a5e7e9a650f652015def2e63dec6f2c45:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	day() const

Returns the day witin the month (1 to 31).

.. index:: pair: function; dayOfWeek
.. _doxid-class_poco_1_1_date_time_1ad34c02c4bca029b9acc81c553e271164:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	dayOfWeek() const

Returns the weekday (0 to 6, where 0 = Sunday, 1 = Monday, ..., 6 = Saturday).

.. index:: pair: function; dayOfYear
.. _doxid-class_poco_1_1_date_time_1a707c08dd8941d34ade1609bb05643dbf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	dayOfYear() const

Returns the number of the day in the year.

January 1 is 1, February 1 is 32, etc.

.. index:: pair: function; hour
.. _doxid-class_poco_1_1_date_time_1a50e33d99c1574a9347509a7d7db88105:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hour() const

Returns the hour (0 to 23).

.. index:: pair: function; hourAMPM
.. _doxid-class_poco_1_1_date_time_1a767b784e63ed5351d0873d99fb69cac6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	hourAMPM() const

Returns the hour (0 to 12).

.. index:: pair: function; isAM
.. _doxid-class_poco_1_1_date_time_1aff779de79b10e10460b7c8ae01da4428:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	isAM() const

Returns true if hour < 12;.

.. index:: pair: function; isPM
.. _doxid-class_poco_1_1_date_time_1a5cccdc70c7794d06b3a860b2ece7320c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	isPM() const

Returns true if hour >= 12.

.. index:: pair: function; minute
.. _doxid-class_poco_1_1_date_time_1afe89a3a4024a0ec5569a979d230df3a3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	minute() const

Returns the minute (0 to 59).

.. index:: pair: function; second
.. _doxid-class_poco_1_1_date_time_1abb2ddbc4093f146e6325a2ff29836f6d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	second() const

Returns the second (0 to 59).

.. index:: pair: function; millisecond
.. _doxid-class_poco_1_1_date_time_1a1206b8f6bdeaaca145d87c90452e1d74:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	millisecond() const

Returns the millisecond (0 to 999)

.. index:: pair: function; microsecond
.. _doxid-class_poco_1_1_date_time_1a365a4f359875de90d97376b96264bc77:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	microsecond() const

Returns the microsecond (0 to 999)

.. index:: pair: function; julianDay
.. _doxid-class_poco_1_1_date_time_1a798dcc5bc709914bbce5f481c3e730f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	double
	julianDay() const

Returns the julian day for the date and time.

.. index:: pair: function; timestamp
.. _doxid-class_poco_1_1_date_time_1ab9b29631beb7d1046e798624e1e86735:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Timestamp<doxid-class_poco_1_1_timestamp>`
	timestamp() const

Returns the date and time expressed as a :ref:`Timestamp <doxid-class_poco_1_1_timestamp>`.

.. index:: pair: function; utcTime
.. _doxid-class_poco_1_1_date_time_1a36e74286dbe2fd1ef7920ddc62948a89:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>`
	utcTime() const

Returns the date and time expressed in UTC-based time.

UTC base time is midnight, October 15, 1582. Resolution is 100 nanoseconds.

.. index:: pair: function; makeUTC
.. _doxid-class_poco_1_1_date_time_1a1f5d855964cdc75f8a60235191d2bfc1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	makeUTC(int tzd)

Converts a local time into UTC, by applying the given time zone differential.

.. index:: pair: function; makeLocal
.. _doxid-class_poco_1_1_date_time_1a830d21d3773ea648fcb065e06d2c36c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	makeLocal(int tzd)

Converts a UTC time into a local time, by applying the given time zone differential.

.. index:: pair: function; isLeapYear
.. _doxid-class_poco_1_1_date_time_1a1b534e0f560f8609bbcbc718b4fbd719:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	bool
	isLeapYear(int year)

Returns true if the given year is a leap year; false otherwise.

.. index:: pair: function; daysOfMonth
.. _doxid-class_poco_1_1_date_time_1ad099dd6bed5981c8fff9b5669d9cadca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	int
	daysOfMonth(
		int year,
		int month
		)

Returns the number of days in the given month and year.

Month is from 1 to 12.

.. index:: pair: function; isValid
.. _doxid-class_poco_1_1_date_time_1a13b5737d43a2c5414a944dc6ef1dfee4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	bool
	isValid(
		int year,
		int month,
		int day,
		int hour = 0,
		int minute = 0,
		int second = 0,
		int millisecond = 0,
		int microsecond = 0
		)

Checks if the given date and time is valid (all arguments are within a proper range).

Returns true if all arguments are valid, false otherwise.

.. index:: pair: function; toJulianDay
.. _doxid-class_poco_1_1_date_time_1a6c3af2eb771578616c824288ead9cb8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	double
	toJulianDay(:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>` utcTime)

Computes the Julian day for an UTC time.

.. index:: pair: function; toJulianDay
.. _doxid-class_poco_1_1_date_time_1a7b1a6da48b02adf86620d5eac1083a04:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	double
	toJulianDay(
		int year,
		int month,
		int day,
		int hour = 0,
		int minute = 0,
		int second = 0,
		int millisecond = 0,
		int microsecond = 0
		)

Computes the Julian day for a gregorian calendar date and time.

See `http://vsg.cape.com/~pbaum/date/jdimp.htm <http://vsg.cape.com/~pbaum/date/jdimp.htm>`__, section 2.3.1 for the algorithm.

.. index:: pair: function; toUtcTime
.. _doxid-class_poco_1_1_date_time_1a0eceb619fc2c02104d9cda453b98da03:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	:ref:`Timestamp::UtcTimeVal<doxid-class_poco_1_1_timestamp_1a06b805d545e2f0261b4e4d20f8e445c4>`
	toUtcTime(double julianDay)

Computes the UTC time for a Julian day.

.. index:: pair: function; computeGregorian
.. _doxid-class_poco_1_1_date_time_1ad190f27dda3d72a5847645d21c8196f6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	computeGregorian(double julianDay)

Computes the Gregorian date for the given Julian day.

See `http://vsg.cape.com/~pbaum/date/injdimp.htm <http://vsg.cape.com/~pbaum/date/injdimp.htm>`__, section 3.3.1 for the algorithm.

.. index:: pair: function; computeDaytime
.. _doxid-class_poco_1_1_date_time_1a4bb75577a91b72023404e5e0bd543263:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	computeDaytime()

Extracts the daytime (hours, minutes, seconds, etc.) from the stored utcTime.

