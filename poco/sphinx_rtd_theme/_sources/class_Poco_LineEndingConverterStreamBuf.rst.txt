.. index:: pair: class; Poco::LineEndingConverterStreamBuf
.. _doxid-class_poco_1_1_line_ending_converter_stream_buf:

class Poco::LineEndingConverterStreamBuf
========================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This stream buffer performs line ending conversion on text streams. :ref:`More...<details-class_poco_1_1_line_ending_converter_stream_buf>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <LineEndingConverter.h>
	
	class LineEndingConverterStreamBuf: public :ref:`Poco::BasicUnbufferedStreamBuf<doxid-class_poco_1_1_basic_unbuffered_stream_buf>`
	{
	public:
		// construction
	
		:ref:`LineEndingConverterStreamBuf<doxid-class_poco_1_1_line_ending_converter_stream_buf_1a3db45b454cbd21de6c92ae63f284e296>`(std::istream& istr);
		:ref:`LineEndingConverterStreamBuf<doxid-class_poco_1_1_line_ending_converter_stream_buf_1a7464ceba4e3be70c1048b59fa3fb3571>`(std::ostream& ostr);

		// methods
	
		void
		:ref:`setNewLine<doxid-class_poco_1_1_line_ending_converter_stream_buf_1a797af69bc8592e372fb3db6fdc43591f>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& newLineCharacters);
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
		:ref:`getNewLine<doxid-class_poco_1_1_line_ending_converter_stream_buf_1aff7facb12075527a8d79c3c95467850d>`() const;

	protected:
		// methods
	
		virtual
		int
		:target:`readFromDevice<doxid-class_poco_1_1_line_ending_converter_stream_buf_1a60bf58a178c1fe2476796f38ae063146>`();
	
		int
		:target:`writeToDevice<doxid-class_poco_1_1_line_ending_converter_stream_buf_1a0ebc0653c75e99fc2c7f4ccc22ae4620>`(char c);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>`
		:ref:`overflow<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a383786cdc9ee1858c2be846a6bb95eb5>`(:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>` c);
	
		virtual
		:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>`
		:ref:`underflow<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a6a1ec03bd68ac0d7d0b690df307548c3>`();
	
		virtual
		:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>`
		:ref:`uflow<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1ac9bdf1db12470b9213e598b6a697a1c8>`();
	
		virtual
		:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>`
		:ref:`pbackfail<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a25fb7df73df7f7e51fcdf520af0e9c0c>`(:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>` c);
	
		virtual
		std::streamsize
		:ref:`xsgetn<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1ab637da26331962c509da9050b9eb3d6f>`(
			:ref:`char_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1ae1adb26f3babc92ffa99d19d260486dd>`* p,
			std::streamsize count
			);

	protected:
		// typedefs
	
		typedef std::basic_streambuf<ch, tr> :ref:`Base<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a8d4e5dd8a6723d41cf27e864804335c3>`;
		typedef std::basic_ios<ch, tr> :ref:`IOS<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4fc862b52cd539e16848d4e6e7c1375>`;
		typedef ch :ref:`char_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1ae1adb26f3babc92ffa99d19d260486dd>`;
		typedef tr :ref:`char_traits<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a92ac446a28fe6bda224f89a836db052f>`;
		typedef Base::int_type :ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>`;
		typedef Base::pos_type :ref:`pos_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a7ff4716397c4aa1a590431c31c98db79>`;
		typedef Base::off_type :ref:`off_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a6b0ee0a102317c7d40e4af00994a7007>`;
		typedef IOS::openmode :ref:`openmode<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a338f2102e31674bb03238208165ba872>`;

		// methods
	
		static
		:ref:`int_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1af4ed13f581184a5758933d22d83ed58e>`
		:ref:`charToInt<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1a2071547aeb7e1813ec16232c3bc5abe4>`(:ref:`char_type<doxid-class_poco_1_1_basic_unbuffered_stream_buf_1ae1adb26f3babc92ffa99d19d260486dd>` c);

.. _details-class_poco_1_1_line_ending_converter_stream_buf:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This stream buffer performs line ending conversion on text streams.

The converter can convert from and to the Unix (LF), Mac (CR) and DOS/Windows/Network (CF-LF) endings.

:ref:`Any <doxid-class_poco_1_1_any>` newline sequence in the source will be replaced by the target newline sequence.

Construction
------------

.. index:: pair: function; LineEndingConverterStreamBuf
.. _doxid-class_poco_1_1_line_ending_converter_stream_buf_1a3db45b454cbd21de6c92ae63f284e296:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	LineEndingConverterStreamBuf(std::istream& istr)

Creates the :ref:`LineEndingConverterStreamBuf <doxid-class_poco_1_1_line_ending_converter_stream_buf>` and connects it to the given input stream.

.. index:: pair: function; LineEndingConverterStreamBuf
.. _doxid-class_poco_1_1_line_ending_converter_stream_buf_1a7464ceba4e3be70c1048b59fa3fb3571:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	LineEndingConverterStreamBuf(std::ostream& ostr)

Creates the :ref:`LineEndingConverterStreamBuf <doxid-class_poco_1_1_line_ending_converter_stream_buf>` and connects it to the given output stream.

Methods
-------

.. index:: pair: function; setNewLine
.. _doxid-class_poco_1_1_line_ending_converter_stream_buf_1a797af69bc8592e372fb3db6fdc43591f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	setNewLine(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& newLineCharacters)

Sets the target line ending for the converter.

Possible values are:

.. ref-code-block:: cpp

	* NEWLINE_DEFAULT (whatever is appropriate for the current platform)
	* NEWLINE_CRLF    (Windows),
	* NEWLINE_LF      (Unix),
	* NEWLINE_CR      (Macintosh)

In theory, any character sequence can be used as newline sequence. In practice, however, only the above three make sense.

.. index:: pair: function; getNewLine
.. _doxid-class_poco_1_1_line_ending_converter_stream_buf_1aff7facb12075527a8d79c3c95467850d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
	getNewLine() const

Returns the line ending currently in use.

