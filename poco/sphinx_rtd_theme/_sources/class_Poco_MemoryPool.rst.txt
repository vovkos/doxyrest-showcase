.. index:: pair: class; Poco::MemoryPool
.. _doxid-class_poco_1_1_memory_pool:

class Poco::MemoryPool
======================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A simple pool for fixed-size memory blocks. :ref:`More...<details-class_poco_1_1_memory_pool>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <MemoryPool.h>
	
	class MemoryPool
	{
	public:
		// construction
	
		:ref:`MemoryPool<doxid-class_poco_1_1_memory_pool_1ac6fa5c1a7de36dfd128245446f37bbb3>`(
			std::size_t blockSize,
			int preAlloc = 0,
			int maxAlloc = 0
			);

		// methods
	
		void*
		:ref:`get<doxid-class_poco_1_1_memory_pool_1a8988ebf4513c293608ce0137e7643779>`();
	
		void
		:ref:`release<doxid-class_poco_1_1_memory_pool_1acea2c318900379bfe9faa950528c1244>`(void* ptr);
	
		std::size_t
		:ref:`blockSize<doxid-class_poco_1_1_memory_pool_1ab6fad3a846de194e1e620fb6a170490e>`() const;
	
		int
		:ref:`allocated<doxid-class_poco_1_1_memory_pool_1a4860f3afb8ea2a2a04031ce5148ac8c9>`() const;
	
		int
		:ref:`available<doxid-class_poco_1_1_memory_pool_1aad571bf76d8672be21f0ff891a90087c>`() const;
	};
.. _details-class_poco_1_1_memory_pool:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A simple pool for fixed-size memory blocks.

The main purpose of this class is to speed-up memory allocations, as well as to reduce memory fragmentation in situations where the same blocks are allocated all over again, such as in server applications.

All allocated blocks are retained for future use. A limit on the number of blocks can be specified. Blocks can be preallocated.

Construction
------------

.. index:: pair: function; MemoryPool
.. _doxid-class_poco_1_1_memory_pool_1ac6fa5c1a7de36dfd128245446f37bbb3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MemoryPool(
		std::size_t blockSize,
		int preAlloc = 0,
		int maxAlloc = 0
		)

Creates a :ref:`MemoryPool <doxid-class_poco_1_1_memory_pool>` for blocks with the given blockSize.

The number of blocks given in preAlloc are preallocated.

Methods
-------

.. index:: pair: function; get
.. _doxid-class_poco_1_1_memory_pool_1a8988ebf4513c293608ce0137e7643779:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void*
	get()

Returns a memory block.

If there are no more blocks in the pool, a new block will be allocated.

If maxAlloc blocks are already allocated, an OutOfMemoryException is thrown.

.. index:: pair: function; release
.. _doxid-class_poco_1_1_memory_pool_1acea2c318900379bfe9faa950528c1244:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	release(void* ptr)

Releases a memory block and returns it to the pool.

.. index:: pair: function; blockSize
.. _doxid-class_poco_1_1_memory_pool_1ab6fad3a846de194e1e620fb6a170490e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::size_t
	blockSize() const

Returns the block size.

.. index:: pair: function; allocated
.. _doxid-class_poco_1_1_memory_pool_1a4860f3afb8ea2a2a04031ce5148ac8c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	allocated() const

Returns the number of allocated blocks.

.. index:: pair: function; available
.. _doxid-class_poco_1_1_memory_pool_1aad571bf76d8672be21f0ff891a90087c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	available() const

Returns the number of available blocks in the pool.

