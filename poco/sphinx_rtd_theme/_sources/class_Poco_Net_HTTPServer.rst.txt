.. index:: pair: class; Poco::Net::HTTPServer
.. _doxid-class_poco_1_1_net_1_1_h_t_t_p_server:

class Poco::Net::HTTPServer
===========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A subclass of :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` that implements a full-featured multithreaded HTTP server. :ref:`More...<details-class_poco_1_1_net_1_1_h_t_t_p_server>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <HTTPServer.h>
	
	class HTTPServer: public :ref:`Poco::Net::TCPServer<doxid-class_poco_1_1_net_1_1_t_c_p_server>`
	{
	public:
		// construction
	
		:ref:`HTTPServer<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1a78326f49689a23d73d6df2885a015a44>`(
			:ref:`HTTPRequestHandlerFactory::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory_1a81e58cdba1c795a65506e8ef950a85d1>` pFactory,
			Poco::UInt16 portNumber = 80,
			:ref:`HTTPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params_1a1a215b5a26295406cd76c6a41b4fcbdb>` pParams = new :ref:`HTTPServerParams<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params>`
			);
	
		:ref:`HTTPServer<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1acb7ba96f0438f76acc1709cc8259efc6>`(
			:ref:`HTTPRequestHandlerFactory::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory_1a81e58cdba1c795a65506e8ef950a85d1>` pFactory,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
			:ref:`HTTPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params_1a1a215b5a26295406cd76c6a41b4fcbdb>` pParams
			);
	
		:ref:`HTTPServer<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1aab96e13e4c6214da02d3539123306954>`(
			:ref:`HTTPRequestHandlerFactory::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory_1a81e58cdba1c795a65506e8ef950a85d1>` pFactory,
			:ref:`Poco::ThreadPool<doxid-class_poco_1_1_thread_pool>`& threadPool,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
			:ref:`HTTPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params_1a1a215b5a26295406cd76c6a41b4fcbdb>` pParams
			);

		// methods
	
		void
		:ref:`stopAll<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1a3f27df8139fc269fcb445023b5dcbb91>`(bool abortCurrent = false);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_runnable_1ad89816e81207bf5f1e52d5df860d11d4>`() = 0;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`TCPServerParams<doxid-class_poco_1_1_net_1_1_t_c_p_server_params>`&
		:ref:`params<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6c689b68536f9ac1cefe180e4a00927e>`() const;
	
		void
		:ref:`start<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>`();
	
		void
		:ref:`stop<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>`();
	
		int
		:ref:`currentThreads<doxid-class_poco_1_1_net_1_1_t_c_p_server_1adb989551ec0c23a65542c261bb134328>`() const;
	
		int
		:ref:`maxThreads<doxid-class_poco_1_1_net_1_1_t_c_p_server_1aee2fdf0ff13c936c8bfe366063ebfdb4>`() const;
	
		int
		:ref:`totalConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a1edced53972cedbf77eab201c4781ace>`() const;
	
		int
		:ref:`currentConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a252e17555a6a67f24fe478239286df89>`() const;
	
		int
		:ref:`maxConcurrentConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a1425611ac8189b46e9cfa71c905e6028>`() const;
	
		int
		:ref:`queuedConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1aaf5fca39eb0c7c35e9debe9a08302a23>`() const;
	
		int
		:ref:`refusedConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1ac5bcdb3c3af656373e472f48561865a9>`() const;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`&
		:ref:`socket<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ee6be81654b293141abc25e9bd0d30f>`() const;
	
		Poco::UInt16
		:ref:`port<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9b653aa0e98a43ccabd599087719a773>`() const;

	protected:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a379293584aabdd0f8099be0294994636>`();
	
		static
		std::string
		:ref:`threadName<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ba8f2418beab79ed90014051f93bbe0>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket);

.. _details-class_poco_1_1_net_1_1_h_t_t_p_server:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A subclass of :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` that implements a full-featured multithreaded HTTP server.

A :ref:`HTTPRequestHandlerFactory <doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory>` must be supplied. The :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>` must be bound and in listening state.

To configure various aspects of the server, a :ref:`HTTPServerParams <doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params>` object can be passed to the constructor.

The server supports:

.. ref-code-block:: cpp

	- HTTP/1.0 and HTTP/1.1
	- automatic handling of persistent connections.
	- automatic decoding/encoding of request/response message bodies
	  using chunked transfer encoding.

Please see the :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` class for information about connection and thread handling.

See RFC 2616 `http://www.faqs.org/rfcs/rfc2616.html <http://www.faqs.org/rfcs/rfc2616.html>`__ for more information about the HTTP protocol.

Construction
------------

.. index:: pair: function; HTTPServer
.. _doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1a78326f49689a23d73d6df2885a015a44:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	HTTPServer(
		:ref:`HTTPRequestHandlerFactory::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory_1a81e58cdba1c795a65506e8ef950a85d1>` pFactory,
		Poco::UInt16 portNumber = 80,
		:ref:`HTTPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params_1a1a215b5a26295406cd76c6a41b4fcbdb>` pParams = new :ref:`HTTPServerParams<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params>`
		)

Creates :ref:`HTTPServer <doxid-class_poco_1_1_net_1_1_h_t_t_p_server>` listening on the given port (default 80).

The server takes ownership of the HTTPRequstHandlerFactory and deletes it when it's no longer needed.

New threads are taken from the default thread pool.

.. index:: pair: function; HTTPServer
.. _doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1acb7ba96f0438f76acc1709cc8259efc6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	HTTPServer(
		:ref:`HTTPRequestHandlerFactory::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory_1a81e58cdba1c795a65506e8ef950a85d1>` pFactory,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
		:ref:`HTTPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params_1a1a215b5a26295406cd76c6a41b4fcbdb>` pParams
		)

Creates the :ref:`HTTPServer <doxid-class_poco_1_1_net_1_1_h_t_t_p_server>`, using the given :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>`.

The server takes ownership of the HTTPRequstHandlerFactory and deletes it when it's no longer needed.

The server also takes ownership of the :ref:`HTTPServerParams <doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params>` object.

New threads are taken from the default thread pool.

.. index:: pair: function; HTTPServer
.. _doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1aab96e13e4c6214da02d3539123306954:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	HTTPServer(
		:ref:`HTTPRequestHandlerFactory::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_request_handler_factory_1a81e58cdba1c795a65506e8ef950a85d1>` pFactory,
		:ref:`Poco::ThreadPool<doxid-class_poco_1_1_thread_pool>`& threadPool,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
		:ref:`HTTPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params_1a1a215b5a26295406cd76c6a41b4fcbdb>` pParams
		)

Creates the :ref:`HTTPServer <doxid-class_poco_1_1_net_1_1_h_t_t_p_server>`, using the given :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>`.

The server takes ownership of the HTTPRequstHandlerFactory and deletes it when it's no longer needed.

The server also takes ownership of the :ref:`HTTPServerParams <doxid-class_poco_1_1_net_1_1_h_t_t_p_server_params>` object.

New threads are taken from the given thread pool.

Methods
-------

.. index:: pair: function; stopAll
.. _doxid-class_poco_1_1_net_1_1_h_t_t_p_server_1a3f27df8139fc269fcb445023b5dcbb91:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	stopAll(bool abortCurrent = false)

Stops the server.

In contrast to :ref:`TCPServer::stop() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>`, which also stops the server, but allows all client connections to finish at their pace, this allows finer control over client connections.

If abortCurrent is false, all current requests are allowed to complete. If abortCurrent is true, the underlying sockets of all client connections are shut down, causing all requests to abort.

