.. index:: pair: class; Poco::Net::TCPServer
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server:

class Poco::Net::TCPServer
==========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class implements a multithreaded TCP server. :ref:`More...<details-class_poco_1_1_net_1_1_t_c_p_server>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <TCPServer.h>
	
	class TCPServer: public :ref:`Poco::Runnable<doxid-class_poco_1_1_runnable>`
	{
	public:
		// construction
	
		:ref:`TCPServer<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a0e2692906c078075a91d8e1b8d5806b9>`(
			:ref:`TCPServerConnectionFactory::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory_1ae0d969474f313a3d530187fc72024688>` pFactory,
			Poco::UInt16 portNumber = 0,
			:ref:`TCPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_params_1a2764661030f4c5fd7da346cb2fdddb83>` pParams = 0
			);
	
		:ref:`TCPServer<doxid-class_poco_1_1_net_1_1_t_c_p_server_1ad70fef4f2ba86945abe9a6ce3b9cad39>`(
			:ref:`TCPServerConnectionFactory::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory_1ae0d969474f313a3d530187fc72024688>` pFactory,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
			:ref:`TCPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_params_1a2764661030f4c5fd7da346cb2fdddb83>` pParams = 0
			);
	
		:ref:`TCPServer<doxid-class_poco_1_1_net_1_1_t_c_p_server_1aeec6e901870e9e33429976d17200bdcf>`(
			:ref:`TCPServerConnectionFactory::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory_1ae0d969474f313a3d530187fc72024688>` pFactory,
			:ref:`Poco::ThreadPool<doxid-class_poco_1_1_thread_pool>`& threadPool,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
			:ref:`TCPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_params_1a2764661030f4c5fd7da346cb2fdddb83>` pParams = 0
			);

		// methods
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`TCPServerParams<doxid-class_poco_1_1_net_1_1_t_c_p_server_params>`&
		:ref:`params<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6c689b68536f9ac1cefe180e4a00927e>`() const;
	
		void
		:ref:`start<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>`();
	
		void
		:ref:`stop<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>`();
	
		int
		:ref:`currentThreads<doxid-class_poco_1_1_net_1_1_t_c_p_server_1adb989551ec0c23a65542c261bb134328>`() const;
	
		int
		:ref:`maxThreads<doxid-class_poco_1_1_net_1_1_t_c_p_server_1aee2fdf0ff13c936c8bfe366063ebfdb4>`() const;
	
		int
		:ref:`totalConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a1edced53972cedbf77eab201c4781ace>`() const;
	
		int
		:ref:`currentConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a252e17555a6a67f24fe478239286df89>`() const;
	
		int
		:ref:`maxConcurrentConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a1425611ac8189b46e9cfa71c905e6028>`() const;
	
		int
		:ref:`queuedConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1aaf5fca39eb0c7c35e9debe9a08302a23>`() const;
	
		int
		:ref:`refusedConnections<doxid-class_poco_1_1_net_1_1_t_c_p_server_1ac5bcdb3c3af656373e472f48561865a9>`() const;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`&
		:ref:`socket<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ee6be81654b293141abc25e9bd0d30f>`() const;
	
		Poco::UInt16
		:ref:`port<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9b653aa0e98a43ccabd599087719a773>`() const;

	protected:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a379293584aabdd0f8099be0294994636>`();
	
		static
		std::string
		:ref:`threadName<doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ba8f2418beab79ed90014051f93bbe0>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket);
	};

	// direct descendants

	class :ref:`HTTPServer<doxid-class_poco_1_1_net_1_1_h_t_t_p_server>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_runnable_1ad89816e81207bf5f1e52d5df860d11d4>`() = 0;

.. _details-class_poco_1_1_net_1_1_t_c_p_server:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class implements a multithreaded TCP server.

The server uses a :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>` to listen for incoming connections. The :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>` must have been bound to an address before it is passed to the :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` constructor. Additionally, the :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>` must be put into listening state before the :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` is started by calling the :ref:`start() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>` method.

The server uses a thread pool to assign threads to incoming connections. Before incoming connections are assigned to a connection thread, they are put into a queue. Connection threads fetch new connections from the queue as soon as they become free. Thus, a connection thread may serve more than one connection.

As soon as a connection thread fetches the next connection from the queue, it creates a :ref:`TCPServerConnection <doxid-class_poco_1_1_net_1_1_t_c_p_server_connection>` object for it (using the :ref:`TCPServerConnectionFactory <doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory>` passed to the constructor) and calls the :ref:`TCPServerConnection <doxid-class_poco_1_1_net_1_1_t_c_p_server_connection>` 's :ref:`start() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>` method. When the :ref:`start() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>` method returns, the connection object is deleted.

The number of connection threads is adjusted dynamically, depending on the number of connections waiting to be served.

It is possible to specify a maximum number of queued connections. This prevents the connection queue from overflowing in the case of an extreme server load. In such a case, connections that cannot be queued are silently and immediately closed.

:ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` uses a separate thread to accept incoming connections. Thus, the call to :ref:`start() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>` returns immediately, and the server continues to run in the background.

To stop the server from accepting new connections, call :ref:`stop() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>`.

After calling :ref:`stop() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>`, no new connections will be accepted and all queued connections will be discarded. Already served connections, however, will continue being served.

Construction
------------

.. index:: pair: function; TCPServer
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a0e2692906c078075a91d8e1b8d5806b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TCPServer(
		:ref:`TCPServerConnectionFactory::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory_1ae0d969474f313a3d530187fc72024688>` pFactory,
		Poco::UInt16 portNumber = 0,
		:ref:`TCPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_params_1a2764661030f4c5fd7da346cb2fdddb83>` pParams = 0
		)

Creates the :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>`, with :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>` listening on the given port.

Default port is zero, allowing any available port. The port number can be queried through :ref:`TCPServer::port() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9b653aa0e98a43ccabd599087719a773>` member.

The server takes ownership of the :ref:`TCPServerConnectionFactory <doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory>` and deletes it when it's no longer needed.

The server also takes ownership of the :ref:`TCPServerParams <doxid-class_poco_1_1_net_1_1_t_c_p_server_params>` object. If no :ref:`TCPServerParams <doxid-class_poco_1_1_net_1_1_t_c_p_server_params>` object is given, the server's :ref:`TCPServerDispatcher <doxid-class_poco_1_1_net_1_1_t_c_p_server_dispatcher>` creates its own one.

New threads are taken from the default thread pool.

.. index:: pair: function; TCPServer
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1ad70fef4f2ba86945abe9a6ce3b9cad39:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TCPServer(
		:ref:`TCPServerConnectionFactory::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory_1ae0d969474f313a3d530187fc72024688>` pFactory,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
		:ref:`TCPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_params_1a2764661030f4c5fd7da346cb2fdddb83>` pParams = 0
		)

Creates the :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>`, using the given :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>`.

The server takes ownership of the :ref:`TCPServerConnectionFactory <doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory>` and deletes it when it's no longer needed.

The server also takes ownership of the :ref:`TCPServerParams <doxid-class_poco_1_1_net_1_1_t_c_p_server_params>` object. If no :ref:`TCPServerParams <doxid-class_poco_1_1_net_1_1_t_c_p_server_params>` object is given, the server's :ref:`TCPServerDispatcher <doxid-class_poco_1_1_net_1_1_t_c_p_server_dispatcher>` creates its own one.

New threads are taken from the default thread pool.

.. index:: pair: function; TCPServer
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1aeec6e901870e9e33429976d17200bdcf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TCPServer(
		:ref:`TCPServerConnectionFactory::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory_1ae0d969474f313a3d530187fc72024688>` pFactory,
		:ref:`Poco::ThreadPool<doxid-class_poco_1_1_thread_pool>`& threadPool,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket,
		:ref:`TCPServerParams::Ptr<doxid-class_poco_1_1_net_1_1_t_c_p_server_params_1a2764661030f4c5fd7da346cb2fdddb83>` pParams = 0
		)

Creates the :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>`, using the given :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>`.

The server takes ownership of the :ref:`TCPServerConnectionFactory <doxid-class_poco_1_1_net_1_1_t_c_p_server_connection_factory>` and deletes it when it's no longer needed.

The server also takes ownership of the :ref:`TCPServerParams <doxid-class_poco_1_1_net_1_1_t_c_p_server_params>` object. If no :ref:`TCPServerParams <doxid-class_poco_1_1_net_1_1_t_c_p_server_params>` object is given, the server's :ref:`TCPServerDispatcher <doxid-class_poco_1_1_net_1_1_t_c_p_server_dispatcher>` creates its own one.

New threads are taken from the given thread pool.

Methods
-------

.. index:: pair: function; params
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6c689b68536f9ac1cefe180e4a00927e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`TCPServerParams<doxid-class_poco_1_1_net_1_1_t_c_p_server_params>`&
	params() const

Returns a const reference to the TCPServerParam object used by the server's :ref:`TCPServerDispatcher <doxid-class_poco_1_1_net_1_1_t_c_p_server_dispatcher>`.

.. index:: pair: function; start
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	start()

Starts the server.

A new thread will be created that waits for and accepts incoming connections.

Before :ref:`start() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ff153080fed486a3cb26e774b42ba60>` is called, the :ref:`ServerSocket <doxid-class_poco_1_1_net_1_1_server_socket>` passed to :ref:`TCPServer <doxid-class_poco_1_1_net_1_1_t_c_p_server>` must have been bound and put into listening state.

.. index:: pair: function; stop
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	stop()

Stops the server.

No new connections will be accepted. Already handled connections will continue to be served.

Once the server has been stopped, it cannot be restarted.

.. index:: pair: function; currentThreads
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1adb989551ec0c23a65542c261bb134328:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	currentThreads() const

Returns the number of currently used connection threads.

.. index:: pair: function; maxThreads
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1aee2fdf0ff13c936c8bfe366063ebfdb4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	maxThreads() const

Returns the maximum number of threads available.

.. index:: pair: function; totalConnections
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a1edced53972cedbf77eab201c4781ace:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	totalConnections() const

Returns the total number of handled connections.

.. index:: pair: function; currentConnections
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a252e17555a6a67f24fe478239286df89:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	currentConnections() const

Returns the number of currently handled connections.

.. index:: pair: function; maxConcurrentConnections
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a1425611ac8189b46e9cfa71c905e6028:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	maxConcurrentConnections() const

Returns the maximum number of concurrently handled connections.

.. index:: pair: function; queuedConnections
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1aaf5fca39eb0c7c35e9debe9a08302a23:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	queuedConnections() const

Returns the number of queued connections.

.. index:: pair: function; refusedConnections
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1ac5bcdb3c3af656373e472f48561865a9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	refusedConnections() const

Returns the number of refused connections.

.. index:: pair: function; socket
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ee6be81654b293141abc25e9bd0d30f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`&
	socket() const

Returns the underlying server socket.

.. index:: pair: function; port
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9b653aa0e98a43ccabd599087719a773:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Poco::UInt16
	port() const

Returns the port the server socket listens on.

.. index:: pair: function; run
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a379293584aabdd0f8099be0294994636:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	run()

Runs the server.

The server will run until the :ref:`stop() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>` method is called, or the server object is destroyed, which implicitly calls the :ref:`stop() <doxid-class_poco_1_1_net_1_1_t_c_p_server_1a9e4c0b8310cc06328e6bedfa649aed66>` method.

.. index:: pair: function; threadName
.. _doxid-class_poco_1_1_net_1_1_t_c_p_server_1a6ba8f2418beab79ed90014051f93bbe0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	std::string
	threadName(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`ServerSocket<doxid-class_poco_1_1_net_1_1_server_socket>`& socket)

Returns a thread name for the server thread.

