.. index:: pair: class; Poco::SharedPtr
.. _doxid-class_poco_1_1_shared_ptr:

template class Poco::SharedPtr
==============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` is a "smart" pointer for classes implementing reference counting based garbage collection. :ref:`More...<details-class_poco_1_1_shared_ptr>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <SharedPtr.h>
	
	template <
		class C,
		class RC = ReferenceCounter,
		class RP = ReleasePolicy<C>
		>
	class SharedPtr
	{
	public:
		// construction
	
		:target:`SharedPtr<doxid-class_poco_1_1_shared_ptr_1a69136e0f7c3cfcfaec21d636d1f29d15>`();
		:target:`SharedPtr<doxid-class_poco_1_1_shared_ptr_1a1ef6bd4265a822266a285edbf48f5881>`(C* ptr);
	
		template <
			class Other,
			class OtherRP
			>
		:target:`SharedPtr<doxid-class_poco_1_1_shared_ptr_1a5b68be38235108d59a8dd08fc847969c>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr<Other, RC, OtherRP>& ptr);
	
		:target:`SharedPtr<doxid-class_poco_1_1_shared_ptr_1a7faa546e26359998c907883898136069>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr);

		// methods
	
		SharedPtr&
		:target:`assign<doxid-class_poco_1_1_shared_ptr_1aa7798e7525f06e16e1d5b1a6ac5825d9>`(C* ptr);
	
		SharedPtr&
		:target:`assign<doxid-class_poco_1_1_shared_ptr_1a68ebe42bdfe80e1aa26e662a6c06f4b1>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr);
	
		template <
			class Other,
			class OtherRP
			>
		SharedPtr&
		:target:`assign<doxid-class_poco_1_1_shared_ptr_1a2db62669f501992ff16526f62017fe1f>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr<Other, RC, OtherRP>& ptr);
	
		SharedPtr&
		:target:`operator=<doxid-class_poco_1_1_shared_ptr_1ab1c45ce764075a32d6bf49154a01bafa>`(C* ptr);
	
		SharedPtr&
		:target:`operator=<doxid-class_poco_1_1_shared_ptr_1a54b6cc6fd74b63ff9597af7900738cb9>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr);
	
		template <
			class Other,
			class OtherRP
			>
		SharedPtr&
		:target:`operator=<doxid-class_poco_1_1_shared_ptr_1a1dd93ea4444022fd59d926b7527a0cc2>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr<Other, RC, OtherRP>& ptr);
	
		void
		:target:`swap<doxid-class_poco_1_1_shared_ptr_1a541b6d966bf0a6601ef3c92a97fbefa6>`(SharedPtr& ptr);
	
		template <class Other>
		SharedPtr<Other, RC, RP>
		:ref:`cast<doxid-class_poco_1_1_shared_ptr_1a29994113a9418dd384751d41404b674c>`() const;
	
		template <class Other>
		SharedPtr<Other, RC, RP>
		:ref:`unsafeCast<doxid-class_poco_1_1_shared_ptr_1abcc33fac6cc6913945b6cea2559bcc7e>`() const;
	
		C*
		:target:`operator-><doxid-class_poco_1_1_shared_ptr_1accbe0041dd0ce10adfa90ad722ad7010>`();
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C*
		:target:`operator-><doxid-class_poco_1_1_shared_ptr_1aec759def94e3fd3bb227860a7fa9ea26>`() const;
	
		C&
		:target:`operator*<doxid-class_poco_1_1_shared_ptr_1aa3b712bed3a3d1931863b730b0d00e63>`();
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C&
		:target:`operator*<doxid-class_poco_1_1_shared_ptr_1ad2d189d52befef0482eb280bf6726f1b>`() const;
	
		C*
		:target:`get<doxid-class_poco_1_1_shared_ptr_1abc171304dafde7cbad510571a53b3580>`();
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C*
		:target:`get<doxid-class_poco_1_1_shared_ptr_1a2f894c2c8c87fbe889e0d591a1df66d9>`() const;
	
		:target:`operator C*<doxid-class_poco_1_1_shared_ptr_1a03db8db54e3b7785101d982c45496e0d>`();
		:target:`operator const C *<doxid-class_poco_1_1_shared_ptr_1abaf63777abe499891c4e7a420d9a2c99>`() const;
	
		bool
		:target:`operator!<doxid-class_poco_1_1_shared_ptr_1ae2a6061b68dcbae473e53cdc82929ab2>`() const;
	
		bool
		:target:`isNull<doxid-class_poco_1_1_shared_ptr_1af04598ca0ecf598802c144836cfd3b5a>`() const;
	
		bool
		:target:`operator==<doxid-class_poco_1_1_shared_ptr_1a5f3cf816cf9c4331a71e5b3e7fab7c51>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr) const;
	
		bool
		:target:`operator==<doxid-class_poco_1_1_shared_ptr_1adc30623884cbf3d98bcb0a5e1a49dbd1>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator==<doxid-class_poco_1_1_shared_ptr_1a783190b2075b1c71d16ef6910a83191f>`(C* ptr) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_shared_ptr_1a02e9146a97b73743db41791f28626acd>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_shared_ptr_1a69eb915a75c893b9e19b6c4a05b5d2ea>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_shared_ptr_1a7920771c9877a0a078fb76acc9e7e075>`(C* ptr) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_shared_ptr_1af4ce5c686f43f82a3afeefbaaee8f64e>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_shared_ptr_1a44d82b9a668752ffaa9dae2436183589>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_shared_ptr_1afb3afeb8d73cfe1a34c57fcea0d9c9f0>`(C* ptr) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_shared_ptr_1a7874aba0a7a385c6d873f0243872d717>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_shared_ptr_1a47e649e04c9dcc6378567304651a9384>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_shared_ptr_1a22381b5b606dc86ac2464ce72c5c3640>`(C* ptr) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_shared_ptr_1ade77ebfc728b59c6e3009b78165a7490>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_shared_ptr_1a73ff80e2a70012e9e1eb348a968db791>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_shared_ptr_1a6c40e5666bfe89d120e03d16de52bef2>`(C* ptr) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_shared_ptr_1a7ec2506482a0c669ed4ea69317b26aa4>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SharedPtr& ptr) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_shared_ptr_1a69aef017e719cb5fd8bce65116a39305>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_shared_ptr_1a488df484b942b59f98dcd18cb11ef473>`(C* ptr) const;
	
		int
		:target:`referenceCount<doxid-class_poco_1_1_shared_ptr_1ad5af5ede1cbb1174f4f7668bbf2981e5>`() const;
	};
.. _details-class_poco_1_1_shared_ptr:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` is a "smart" pointer for classes implementing reference counting based garbage collection.

:ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` is thus similar to :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>`. Unlike the :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` template, which can only be used with classes that support reference counting, :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` can be used with any class. For this to work, a :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` manages a reference count for the object it manages.

:ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` works in the following way: If an :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` is assigned an ordinary pointer to an object (via the constructor or the assignment operator), it takes ownership of the object and the object's reference count is initialized to one. If the :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` is assigned another :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>`, the object's reference count is incremented by one. The destructor of :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` decrements the object's reference count by one and deletes the object if the reference count reaches zero. :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` supports dereferencing with both the -> and the \* operator. An attempt to dereference a null :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` results in a NullPointerException being thrown. :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` also implements all relational operators and a cast operator in case dynamic casting of the encapsulated data types is required.

Methods
-------

.. index:: pair: function; cast
.. _doxid-class_poco_1_1_shared_ptr_1a29994113a9418dd384751d41404b674c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class Other>
	SharedPtr<Other, RC, RP>
	cast() const

Casts the :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` via a dynamic cast to the given type.

Returns an :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` containing NULL if the cast fails. Example: (assume class Sub: public Super)

.. ref-code-block:: cpp

	SharedPtr<Super> super(new Sub());
	SharedPtr<Sub> sub = super.cast<Sub>();
	poco_assert (sub.get());

.. index:: pair: function; unsafeCast
.. _doxid-class_poco_1_1_shared_ptr_1abcc33fac6cc6913945b6cea2559bcc7e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class Other>
	SharedPtr<Other, RC, RP>
	unsafeCast() const

Casts the :ref:`SharedPtr <doxid-class_poco_1_1_shared_ptr>` via a static cast to the given type.

Example: (assume class Sub: public Super)

.. ref-code-block:: cpp

	SharedPtr<Super> super(new Sub());
	SharedPtr<Sub> sub = super.unsafeCast<Sub>();
	poco_assert (sub.get());

