.. index:: pair: class; Poco::XML::ErrorHandler
.. _doxid-class_poco_1_1_x_m_l_1_1_error_handler:

class Poco::XML::ErrorHandler
=============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

If a SAX application needs to implement customized error handling, it must implement this interface and then register an instance with the :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` reader using the setErrorHandler method. :ref:`More...<details-class_poco_1_1_x_m_l_1_1_error_handler>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ErrorHandler.h>
	
	class ErrorHandler
	{
	public:
		// methods
	
		virtual
		void
		:ref:`warning<doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a706858cabf160a511f72e39c81aafdde>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SAXException& exc) = 0;
	
		virtual
		void
		:ref:`error<doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a86da5a0c23660a5ce964abc009e69142>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SAXException& exc) = 0;
	
		virtual
		void
		:ref:`fatalError<doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a26d09ee0698be53f2e03644414a047a4>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SAXException& exc) = 0;
	};

	// direct descendants

	class :ref:`DefaultHandler<doxid-class_poco_1_1_x_m_l_1_1_default_handler>`;
	class :ref:`XMLFilterImpl<doxid-class_poco_1_1_x_m_l_1_1_x_m_l_filter_impl>`;
.. _details-class_poco_1_1_x_m_l_1_1_error_handler:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

If a SAX application needs to implement customized error handling, it must implement this interface and then register an instance with the :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` reader using the setErrorHandler method.

The parser will then report all errors and warnings through this interface.

WARNING: If an application does not register an :ref:`ErrorHandler <doxid-class_poco_1_1_x_m_l_1_1_error_handler>`, :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` parsing errors will go unreported, except that SAXParseExceptions will be thrown for fatal errors. In order to detect validity errors, an :ref:`ErrorHandler <doxid-class_poco_1_1_x_m_l_1_1_error_handler>` that does something with :ref:`error() <doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a86da5a0c23660a5ce964abc009e69142>` calls must be registered.

For :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` processing errors, a SAX driver must use this interface in preference to throwing an exception: it is up to the application to decide whether to throw an exception for different types of errors and warnings. Note, however, that there is no requirement that the parser continue to report additional errors after a call to fatalError. In other words, a SAX driver class may throw an exception after reporting any fatalError. Also parsers may throw appropriate exceptions for non-XML errors. For example, :ref:`XMLReader::parse() <doxid-class_poco_1_1_x_m_l_1_1_x_m_l_reader_1aafa45ffeb18d9d9ebe9c7859bb413a37>` would throw an IOException for errors accessing entities or the document.

Methods
-------

.. index:: pair: function; warning
.. _doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a706858cabf160a511f72e39c81aafdde:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	warning(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SAXException& exc) = 0

Receive notification of a warning.

SAX parsers will use this method to report conditions that are not errors or fatal errors as defined by the :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` recommendation. The default behaviour is to take no action.

The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end.

Filters may use this method to report other, non-XML warnings as well.

.. index:: pair: function; error
.. _doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a86da5a0c23660a5ce964abc009e69142:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	error(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SAXException& exc) = 0

Receive notification of a recoverable error.

This corresponds to the definition of "error" in section 1.2 of the W3C :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` 1.0 Recommendation. For example, a validating parser would use this callback to report the violation of a validity constraint. The default behaviour is to take no action.

The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. If the application cannot do so, then the parser should report a fatal error even if the :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` recommendation does not require it to do so.

Filters may use this method to report other, non-XML errors as well.

.. index:: pair: function; fatalError
.. _doxid-class_poco_1_1_x_m_l_1_1_error_handler_1a26d09ee0698be53f2e03644414a047a4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	fatalError(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` SAXException& exc) = 0

Receive notification of a non-recoverable error.

The application must assume that the document is unusable after the parser has invoked this method, and should continue (if at all) only for the sake of collecting additional error messages: in fact, SAX parsers are free to stop reporting any other events once this method has been invoked.

