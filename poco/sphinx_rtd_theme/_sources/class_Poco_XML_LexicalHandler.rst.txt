.. index:: pair: class; Poco::XML::LexicalHandler
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler:

class Poco::XML::LexicalHandler
===============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This is an optional extension handler for SAX2 to provide lexical information about an :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` document, such as comments and CDATA section boundaries. :ref:`More...<details-class_poco_1_1_x_m_l_1_1_lexical_handler>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <LexicalHandler.h>
	
	class LexicalHandler
	{
	public:
		// methods
	
		virtual
		void
		:ref:`startDTD<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1aa49f67ae47140a7255011bf8abda98cf>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& publicId,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& systemId
			) = 0;
	
		virtual
		void
		:ref:`endDTD<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1ab3b753b9f30507ccac70c3b0b9d06982>`() = 0;
	
		virtual
		void
		:ref:`startEntity<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1ad2b193f0c27c3c0a237ae885736c9f4c>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& name) = 0;
	
		virtual
		void
		:ref:`endEntity<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1ab9cc2620980f6345fad4f9716550b4f7>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& name) = 0;
	
		virtual
		void
		:ref:`startCDATA<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1afb4c4514d789665dab556e2209ff4ca1>`() = 0;
	
		virtual
		void
		:ref:`endCDATA<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1aa5407765fa30f39b005cdf166ff687bd>`() = 0;
	
		virtual
		void
		:ref:`comment<doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1a0f2053f72dd6a59119f9a19881f4854e>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLChar<doxid-namespace_poco_1_1_x_m_l_1a5568873bf2fed7403036ef80480ad6b3>` ch [],
			int start,
			int length
			) = 0;
	};

	// direct descendants

	class :ref:`DOMBuilder<doxid-class_poco_1_1_x_m_l_1_1_d_o_m_builder>`;
	class :ref:`WhitespaceFilter<doxid-class_poco_1_1_x_m_l_1_1_whitespace_filter>`;
	class :ref:`XMLWriter<doxid-class_poco_1_1_x_m_l_1_1_x_m_l_writer>`;
.. _details-class_poco_1_1_x_m_l_1_1_lexical_handler:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This is an optional extension handler for SAX2 to provide lexical information about an :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` document, such as comments and CDATA section boundaries.

:ref:`XML <doxid-namespace_poco_1_1_x_m_l>` readers are not required to recognize this handler, and it is not part of core-only SAX2 distributions.

The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events must appear between the content handler's startDocument and endDocument events.

To set the :ref:`LexicalHandler <doxid-class_poco_1_1_x_m_l_1_1_lexical_handler>` for an :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` reader, use the setProperty method with the property name `http://xml.org/sax/properties/lexical-handler <http://xml.org/sax/properties/lexical-handler>`__ and an object implementing this interface (or null) as the value. If the reader does not report lexical events, it will throw a SAXNotRecognizedException when you attempt to register the handler.

Methods
-------

.. index:: pair: function; startDTD
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1aa49f67ae47140a7255011bf8abda98cf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	startDTD(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& name,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& publicId,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& systemId
		) = 0

Report the start of DTD declarations, if any.

This method is intended to report the beginning of the DOCTYPE declaration; if the document has no DOCTYPE declaration, this method will not be invoked.

All declarations reported through :ref:`DTDHandler <doxid-class_poco_1_1_x_m_l_1_1_d_t_d_handler>` or :ref:`DeclHandler <doxid-class_poco_1_1_x_m_l_1_1_decl_handler>` events must appear between the startDTD and endDTD events. Declarations are assumed to belong to the internal DTD subset unless they appear between startEntity and endEntity events. Comments and processing instructions from the DTD should also be reported between the startDTD and endDTD events, in their original order of (logical) occurrence; they are not required to appear in their correct locations relative to :ref:`DTDHandler <doxid-class_poco_1_1_x_m_l_1_1_d_t_d_handler>` or :ref:`DeclHandler <doxid-class_poco_1_1_x_m_l_1_1_decl_handler>` events, however.

Note that the start/endDTD events will appear within the start/endDocument events from :ref:`ContentHandler <doxid-class_poco_1_1_x_m_l_1_1_content_handler>` and before the first startElement event.

.. index:: pair: function; endDTD
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1ab3b753b9f30507ccac70c3b0b9d06982:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	endDTD() = 0

Report the end of DTD declarations.

This method is intended to report the end of the DOCTYPE declaration; if the document has no DOCTYPE declaration, this method will not be invoked.

.. index:: pair: function; startEntity
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1ad2b193f0c27c3c0a237ae885736c9f4c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	startEntity(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& name) = 0

Report the beginning of some internal and external :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` entities.

The reporting of parameter entities (including the external DTD subset) is optional, and SAX2 drivers that report :ref:`LexicalHandler <doxid-class_poco_1_1_x_m_l_1_1_lexical_handler>` events may not implement it; you can use the `http://xml.org/sax/features/lexical-handler/parameter-entities <http://xml.org/sax/features/lexical-handler/parameter-entities>`__ feature to query or control the reporting of parameter entities.

General entities are reported with their regular names, parameter entities have '' prepended to their names, and the external DTD subset has the pseudo-entity name "[dtd]".

When a SAX2 driver is providing these events, all other events must be properly nested within start/end entity events. There is no additional requirement that events from :ref:`DeclHandler <doxid-class_poco_1_1_x_m_l_1_1_decl_handler>` or :ref:`DTDHandler <doxid-class_poco_1_1_x_m_l_1_1_d_t_d_handler>` be properly ordered.

Note that skipped entities will be reported through the skippedEntity event, which is part of the :ref:`ContentHandler <doxid-class_poco_1_1_x_m_l_1_1_content_handler>` interface.

Because of the streaming event model that SAX uses, some entity boundaries cannot be reported under any circumstances:

.. ref-code-block:: cpp

	* general entities within attribute values
	* parameter entities within declarations

These will be silently expanded, with no indication of where the original entity boundaries were.

Note also that the boundaries of character references (which are not really entities anyway) are not reported.

All start/endEntity events must be properly nested.

.. index:: pair: function; endEntity
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1ab9cc2620980f6345fad4f9716550b4f7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	endEntity(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& name) = 0

Report the end of an entity.

.. index:: pair: function; startCDATA
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1afb4c4514d789665dab556e2209ff4ca1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	startCDATA() = 0

Report the start of a CDATA section.

The contents of the CDATA section will be reported through the regular characters event; this event is intended only to report the boundary.

.. index:: pair: function; endCDATA
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1aa5407765fa30f39b005cdf166ff687bd:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	endCDATA() = 0

Report the end of a CDATA section.

.. index:: pair: function; comment
.. _doxid-class_poco_1_1_x_m_l_1_1_lexical_handler_1a0f2053f72dd6a59119f9a19881f4854e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	comment(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLChar<doxid-namespace_poco_1_1_x_m_l_1a5568873bf2fed7403036ef80480ad6b3>` ch [],
		int start,
		int length
		) = 0

Report an :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` comment anywhere in the document.

This callback will be used for comments inside or outside the document element, including comments in the external DTD subset (if read). Comments in the DTD must be properly nested inside start/endDTD and start/endEntity events (if used).

