.. index:: pair: class; Poco::XML::NodeIterator
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator:

class Poco::XML::NodeIterator
=============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Iterators are used to step through a set of nodes, e.g. :ref:`More...<details-class_poco_1_1_x_m_l_1_1_node_iterator>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <NodeIterator.h>
	
	class NodeIterator
	{
	public:
		// construction
	
		:ref:`NodeIterator<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a7cc591a8e3dd4a0609d69c613ffc7da5>`(
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* root,
			unsigned long whatToShow,
			:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`* pFilter = 0
			);
	
		:ref:`NodeIterator<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a18053851d34046268355df2ece16a57f>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` NodeIterator& iterator);

		// methods
	
		NodeIterator&
		:ref:`operator=<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a00255173a5b9e174dac02ef2b43f7c5b>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` NodeIterator& iterator);
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`root<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a040dbf8cd943a378c3c0d04b45fe605b>`() const;
	
		unsigned long
		:ref:`whatToShow<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a817bd39255a7118ada7149fd070c117e>`() const;
	
		:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`*
		:ref:`filter<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1aa1ae971899d342ae7580a86a327d99a2>`() const;
	
		bool
		:ref:`expandEntityReferences<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1adf6f4ed360270f1e17ccf740c01c6401>`() const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`nextNode<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1aff6c0ce049db91a50a22a4242a2513d5>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`previousNode<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a8ed42d28b2267a6e780c7eae9679f7f8>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`currentNodeNP<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a6b61ad057a13f1d5f1e1f5b3dedc6970>`() const;
	
		void
		:ref:`detach<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a5b8a225cdba2b1b0675628154dac2b43>`();

	protected:
		// methods
	
		bool
		:target:`accept<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a10a2046fcfac701be411141e2f7c97fd>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* pNode) const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:target:`next<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1abeb90eabbd4eadf3aa1c261367988c1d>`() const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:target:`previous<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1ab264f403ba2605915dd32155a26655b3>`() const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:target:`last<doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a06f6391fdaafba6592a5dad890d442ae>`();
	};
.. _details-class_poco_1_1_x_m_l_1_1_node_iterator:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Iterators are used to step through a set of nodes, e.g.

the set of nodes in a :ref:`NodeList <doxid-class_poco_1_1_x_m_l_1_1_node_list>`, the document subtree governed by a particular :ref:`Node <doxid-class_poco_1_1_x_m_l_1_1_node>`, the results of a query, or any other set of nodes. The set of nodes to be iterated is determined by the implementation of the :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>`. DOM Level 2 specifies a single :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` implementation for document-order traversal of a document subtree.

A :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` can be directly instantiated using one of its constructors - the DocumentTraversal interface is not needed and therefore not implemented. Unlike most other DOM classes, :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` supports value semantics.

If the :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` 's current node is removed from the document, the result of calling any of the movement methods is undefined. This behavior does not conform to the DOM Level 2 Traversal specification.

Construction
------------

.. index:: pair: function; NodeIterator
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a7cc591a8e3dd4a0609d69c613ffc7da5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NodeIterator(
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* root,
		unsigned long whatToShow,
		:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`* pFilter = 0
		)

Creates a :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` over the subtree rooted at the specified node.

.. index:: pair: function; NodeIterator
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a18053851d34046268355df2ece16a57f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NodeIterator(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` NodeIterator& iterator)

Creates a :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` by copying another :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>`.

Methods
-------

.. index:: pair: function; operator=
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a00255173a5b9e174dac02ef2b43f7c5b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	NodeIterator&
	operator=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` NodeIterator& iterator)

Assignment operator.

.. index:: pair: function; root
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a040dbf8cd943a378c3c0d04b45fe605b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	root() const

The root node of the :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>`, as specified when it was created.

.. index:: pair: function; whatToShow
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a817bd39255a7118ada7149fd070c117e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned long
	whatToShow() const

This attribute determines which node types are presented via the iterator.

The available set of constants is defined in the :ref:`NodeFilter <doxid-class_poco_1_1_x_m_l_1_1_node_filter>` interface. Nodes not accepted by whatToShow will be skipped, but their children may still be considered. Note that this skip takes precedence over the filter, if any.

.. index:: pair: function; filter
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1aa1ae971899d342ae7580a86a327d99a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`*
	filter() const

The :ref:`NodeFilter <doxid-class_poco_1_1_x_m_l_1_1_node_filter>` used to screen nodes.

.. index:: pair: function; expandEntityReferences
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1adf6f4ed360270f1e17ccf740c01c6401:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	expandEntityReferences() const

The value of this flag determines whether the children of entity reference nodes are visible to the iterator.

If false, they and their descendants will be rejected. Note that this rejection takes precedence over whatToShow and the filter. Also note that this is currently the only situation where NodeIterators may reject a complete subtree rather than skipping individual nodes.

To produce a view of the document that has entity references expanded and does not expose the entity reference node itself, use the whatToShow flags to hide the entity reference node and set expandEntityReferences to true when creating the iterator. To produce a view of the document that has entity reference nodes but no entity expansion, use the whatToShow flags to show the entity reference node and set expandEntityReferences to false.

This implementation does not support entity reference expansion and thus always returns false.

.. index:: pair: function; nextNode
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1aff6c0ce049db91a50a22a4242a2513d5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	nextNode()

Returns the next node in the set and advances the position of the iterator in the set.

After a :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` is created, the first call to :ref:`nextNode() <doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1aff6c0ce049db91a50a22a4242a2513d5>` returns the first node in the set.

.. index:: pair: function; previousNode
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a8ed42d28b2267a6e780c7eae9679f7f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	previousNode()

Returns the previous node in the set and moves the position of the :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` backwards in the set.

.. index:: pair: function; currentNodeNP
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a6b61ad057a13f1d5f1e1f5b3dedc6970:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	currentNodeNP() const

Returns the current node in the set.

Leaves the :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` unchanged.

Warning: This is a proprietary extension to the DOM Level 2 :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` interface.

.. index:: pair: function; detach
.. _doxid-class_poco_1_1_x_m_l_1_1_node_iterator_1a5b8a225cdba2b1b0675628154dac2b43:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	detach()

Detaches the :ref:`NodeIterator <doxid-class_poco_1_1_x_m_l_1_1_node_iterator>` from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state.

After detach has been invoked, calls to nextNode or previousNode will raise the exception INVALID_STATE_ERR.

