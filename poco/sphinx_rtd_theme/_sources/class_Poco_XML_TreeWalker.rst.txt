.. index:: pair: class; Poco::XML::TreeWalker
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker:

class Poco::XML::TreeWalker
===========================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` objects are used to navigate a document tree or subtree using the view of the document defined by their whatToShow flags and filter (if any). :ref:`More...<details-class_poco_1_1_x_m_l_1_1_tree_walker>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <TreeWalker.h>
	
	class TreeWalker
	{
	public:
		// construction
	
		:ref:`TreeWalker<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a06f00c4162881c568a6daf56018dd322>`(
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* root,
			unsigned long whatToShow,
			:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`* pFilter = 0
			);
	
		:ref:`TreeWalker<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a10f2dd4855d30ad4a1aa8b842020a564>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TreeWalker& walker);

		// methods
	
		TreeWalker&
		:ref:`operator=<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a877ce26f13f6d64e44e1d076e6bbb526>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TreeWalker& walker);
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`root<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1abb98ce1dacef7613a925974d956401ae>`() const;
	
		unsigned long
		:ref:`whatToShow<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1aab6e801d4ecdee912140648066a37536>`() const;
	
		:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`*
		:ref:`filter<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ac1c3c8fb49833ed881f74407380dc6fc>`() const;
	
		bool
		:ref:`expandEntityReferences<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ae4651e5b7b0ff49d8e452db94fb7306a>`() const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`currentNode<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a88337f2000c09f9aedb8f9cb4cc88fbb>`() const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`getCurrentNode<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a4682378a3d5ef542a56941638cdf61b7>`() const;
	
		void
		:ref:`setCurrentNode<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a7f19801df2800e13f7a05ad891f2408c>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* pNode);
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`parentNode<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1af349cbfc7c9f5ed94550f8ea757ed459>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`firstChild<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a84155ea6bfa6a18f9bca3c3d48cbe3c7>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`lastChild<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ab61f5740aedea426b8e8544dcb959fe8>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`previousSibling<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a9996b9a422f94e5af37659011157d48a>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`nextSibling<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a19cd64a80f2e737aff5a6b88f26b3271>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`previousNode<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ad91366ac20471901f05cacbd8e7d43be>`();
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`nextNode<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a15a4f9e26c5e07cfb34c44b2307c75f5>`();

	protected:
		// methods
	
		int
		:target:`accept<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a06853267c716f5054fa77cc3c3336b09>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* pNode) const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:target:`next<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a126962305aca96ed46db0f9095d6c6a2>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* pNode) const;
	
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:target:`previous<doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1aa9b1356ebbb30ec9a7bb8efb237bd8d2>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* pNode) const;
	};
.. _details-class_poco_1_1_x_m_l_1_1_tree_walker:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` objects are used to navigate a document tree or subtree using the view of the document defined by their whatToShow flags and filter (if any).

:ref:`Any <doxid-class_poco_1_1_any>` function which performs navigation using a :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` will automatically support any view defined by a :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>`.

Omitting nodes from the logical view of a subtree can result in a structure that is substantially different from the same subtree in the complete, unfiltered document. Nodes that are siblings in the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` view may be children of different, widely separated nodes in the original view. For instance, consider a :ref:`NodeFilter <doxid-class_poco_1_1_x_m_l_1_1_node_filter>` that skips all nodes except for :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` nodes and the root node of a document. In the logical view that results, all text nodes will be siblings and appear as direct children of the root node, no matter how deeply nested the structure of the original document.

A :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` can be directly instantiated using one of its constructors - the DocumentTraversal interface is not needed and therefore not implemented. Unlike most other DOM classes, :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` supports value semantics.

If the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` 's current node is removed from the document, the result of calling any of the movement methods is undefined. This behavior does not conform to the DOM Level 2 Traversal specification.

Construction
------------

.. index:: pair: function; TreeWalker
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a06f00c4162881c568a6daf56018dd322:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TreeWalker(
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* root,
		unsigned long whatToShow,
		:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`* pFilter = 0
		)

Creates a :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` over the subtree rooted at the specified node.

.. index:: pair: function; TreeWalker
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a10f2dd4855d30ad4a1aa8b842020a564:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TreeWalker(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TreeWalker& walker)

Creates a :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` by copying another :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>`.

Methods
-------

.. index:: pair: function; operator=
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a877ce26f13f6d64e44e1d076e6bbb526:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	TreeWalker&
	operator=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` TreeWalker& walker)

Assignment operator.

.. index:: pair: function; root
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1abb98ce1dacef7613a925974d956401ae:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	root() const

The root node of the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>`, as specified when it was created.

.. index:: pair: function; whatToShow
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1aab6e801d4ecdee912140648066a37536:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	unsigned long
	whatToShow() const

This attribute determines which node types are presented via the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>`.

The available set of constants is defined in the :ref:`NodeFilter <doxid-class_poco_1_1_x_m_l_1_1_node_filter>` interface. Nodes not accepted by whatToShow will be skipped, but their children may still be considered. Note that this skip takes precedence over the filter, if any.

.. index:: pair: function; filter
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ac1c3c8fb49833ed881f74407380dc6fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`NodeFilter<doxid-class_poco_1_1_x_m_l_1_1_node_filter>`*
	filter() const

The :ref:`NodeFilter <doxid-class_poco_1_1_x_m_l_1_1_node_filter>` used to screen nodes.

.. index:: pair: function; expandEntityReferences
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ae4651e5b7b0ff49d8e452db94fb7306a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	expandEntityReferences() const

The value of this flag determines whether the children of entity reference nodes are visible to the iterator.

If false, they and their descendants will be rejected. Note that this rejection takes precedence over whatToShow and the filter. Also note that this is currently the only situation where NodeIterators may reject a complete subtree rather than skipping individual nodes.

To produce a view of the document that has entity references expanded and does not expose the entity reference node itself, use the whatToShow flags to hide the entity reference node and set expandEntityReferences to true when creating the iterator. To produce a view of the document that has entity reference nodes but no entity expansion, use the whatToShow flags to show the entity reference node and set expandEntityReferences to false.

This implementation does not support entity reference expansion and thus always returns false.

.. index:: pair: function; currentNode
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a88337f2000c09f9aedb8f9cb4cc88fbb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	currentNode() const

The node at which the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` is currently positioned.

Alterations to the DOM tree may cause the current node to no longer be accepted by the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` 's associated filter. currentNode may also be explicitly set to any node, whether or not it is within the subtree specified by the root node or would be accepted by the filter and whatToShow flags. Further traversal occurs relative to currentNode even if it is not part of the current view, by applying the filters in the requested direction; if no traversal is possible, currentNode is not changed.

.. index:: pair: function; getCurrentNode
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a4682378a3d5ef542a56941638cdf61b7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	getCurrentNode() const

See :ref:`currentNode() <doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a88337f2000c09f9aedb8f9cb4cc88fbb>`.

.. index:: pair: function; setCurrentNode
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a7f19801df2800e13f7a05ad891f2408c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	setCurrentNode(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* pNode)

Sets the current node.

.. index:: pair: function; parentNode
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1af349cbfc7c9f5ed94550f8ea757ed459:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	parentNode()

Moves to and returns the closest visible ancestor node of the current node.

If the search for parentNode attempts to step upward from the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` 's root node, or if it fails to find a visible ancestor node, this method retains the current position and returns null.

.. index:: pair: function; firstChild
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a84155ea6bfa6a18f9bca3c3d48cbe3c7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	firstChild()

Moves the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` to the first visible child of the current node, and returns the new node.

If the current node has no visible children, returns null, and retains the current node.

.. index:: pair: function; lastChild
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ab61f5740aedea426b8e8544dcb959fe8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	lastChild()

Moves the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` to the last visible child of the current node, and returns the new node.

If the current node has no visible children, returns null, and retains the current node.

.. index:: pair: function; previousSibling
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a9996b9a422f94e5af37659011157d48a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	previousSibling()

Moves the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` to the previous sibling of the current node, and returns the new node.

If the current node has no visible previous sibling, returns null, and retains the current node.

.. index:: pair: function; nextSibling
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a19cd64a80f2e737aff5a6b88f26b3271:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	nextSibling()

Moves the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` to the next sibling of the current node, and returns the new node.

If the current node has no visible next sibling, returns null, and retains the current node.

.. index:: pair: function; previousNode
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1ad91366ac20471901f05cacbd8e7d43be:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	previousNode()

Moves the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` to the previous visible node in document order relative to the current node, and returns the new node.

If the current node has no previous node, or if the search for previousNode attempts to step upward from the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` 's root node, returns null, and retains the current node.

.. index:: pair: function; nextNode
.. _doxid-class_poco_1_1_x_m_l_1_1_tree_walker_1a15a4f9e26c5e07cfb34c44b2307c75f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	nextNode()

Moves the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` to the next visible node in document order relative to the current node, and returns the new node.

If the current node has no next node, or if the search for nextNode attempts to step upward from the :ref:`TreeWalker <doxid-class_poco_1_1_x_m_l_1_1_tree_walker>` 's root node, returns null, and retains the current node.

