.. index:: pair: class; Poco::AutoPtr
.. _doxid-class_poco_1_1_auto_ptr:

template class Poco::AutoPtr
============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` is a "smart" pointer for classes implementing reference counting based garbage collection. :ref:`More...<details-class_poco_1_1_auto_ptr>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <AutoPtr.h>
	
	template <class C>
	class AutoPtr
	{
	public:
		// construction
	
		:target:`AutoPtr<doxid-class_poco_1_1_auto_ptr_1afe9c43fcf89950a84d91234b8a225f31>`();
		:target:`AutoPtr<doxid-class_poco_1_1_auto_ptr_1a7643508f15be193a81f19a67eccf55fb>`(C* ptr);
	
		:target:`AutoPtr<doxid-class_poco_1_1_auto_ptr_1a033db0f0fda167ec7e2902dc838bd964>`(
			C* ptr,
			bool shared
			);
	
		:target:`AutoPtr<doxid-class_poco_1_1_auto_ptr_1ab58b8212de906fae228c1cf54f04a18d>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr);
	
		template <class Other>
		:target:`AutoPtr<doxid-class_poco_1_1_auto_ptr_1ad3a7fd5462a030c7e02045904d204906>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr<Other>& ptr);

		// methods
	
		AutoPtr&
		:target:`assign<doxid-class_poco_1_1_auto_ptr_1a1b46952e5c8ff94fc9610efc4f718909>`(C* ptr);
	
		AutoPtr&
		:target:`assign<doxid-class_poco_1_1_auto_ptr_1abcfce9c0ceb87c66d71bb826c044764d>`(
			C* ptr,
			bool shared
			);
	
		AutoPtr&
		:target:`assign<doxid-class_poco_1_1_auto_ptr_1ae490b93db155f837e0d7101c75d63099>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr);
	
		template <class Other>
		AutoPtr&
		:target:`assign<doxid-class_poco_1_1_auto_ptr_1a68f237af5719167ca2aa668a8ff14997>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr<Other>& ptr);
	
		AutoPtr&
		:target:`operator=<doxid-class_poco_1_1_auto_ptr_1a6934d33db640dcd8e299d0e08c8eac1c>`(C* ptr);
	
		AutoPtr&
		:target:`operator=<doxid-class_poco_1_1_auto_ptr_1a195a2c81775ca61bcd0d993c567c7182>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr);
	
		template <class Other>
		AutoPtr&
		:target:`operator=<doxid-class_poco_1_1_auto_ptr_1ae4fa11b92999c600558fdc83651b149f>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr<Other>& ptr);
	
		void
		:target:`swap<doxid-class_poco_1_1_auto_ptr_1a97a7b436c51df36497c59e4aa08f5ead>`(AutoPtr& ptr);
	
		template <class Other>
		AutoPtr<Other>
		:ref:`cast<doxid-class_poco_1_1_auto_ptr_1a17febf4cf62fda75a2cc41539f2f3e04>`() const;
	
		template <class Other>
		AutoPtr<Other>
		:ref:`unsafeCast<doxid-class_poco_1_1_auto_ptr_1ae806ac7edcc5da562e379b0362938f3b>`() const;
	
		C*
		:target:`operator-><doxid-class_poco_1_1_auto_ptr_1afa4326df72362fc86bbd949a60874721>`();
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C*
		:target:`operator-><doxid-class_poco_1_1_auto_ptr_1a0a054511628a69effd6c1665c281961d>`() const;
	
		C&
		:target:`operator*<doxid-class_poco_1_1_auto_ptr_1a16c6e8adaf4e5a1c51fd7d42f6abf639>`();
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C&
		:target:`operator*<doxid-class_poco_1_1_auto_ptr_1af4785079f990a02dc1f6d7520eda09a0>`() const;
	
		C*
		:target:`get<doxid-class_poco_1_1_auto_ptr_1aa6160c2516e77726050e216d8003585c>`();
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C*
		:target:`get<doxid-class_poco_1_1_auto_ptr_1af8245654481a0585617186985821b26c>`() const;
	
		:target:`operator C*<doxid-class_poco_1_1_auto_ptr_1a313eac8fb2fee289dcac9cf1aed7bb6e>`();
		:target:`operator const C *<doxid-class_poco_1_1_auto_ptr_1afa1cfe5fa5d5a325e708c3041a2ff44e>`() const;
	
		bool
		:target:`operator!<doxid-class_poco_1_1_auto_ptr_1a99afa3dcd68b8a46857394d8f2b09590>`() const;
	
		bool
		:target:`isNull<doxid-class_poco_1_1_auto_ptr_1af886a7c10c94aae437731f35c328581b>`() const;
	
		C*
		:target:`duplicate<doxid-class_poco_1_1_auto_ptr_1a4551e28d5ee05702d91bc0550dce5186>`();
	
		bool
		:target:`operator==<doxid-class_poco_1_1_auto_ptr_1ab645ac2920e0cc7124f820c83644ef78>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr) const;
	
		bool
		:target:`operator==<doxid-class_poco_1_1_auto_ptr_1afda3654ea12e9af22f76bbc45fa13acb>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator==<doxid-class_poco_1_1_auto_ptr_1acdeba2daede18600e925e4edd5bc0613>`(C* ptr) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_auto_ptr_1a3374084d265c7ed97cd8af20c913753a>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_auto_ptr_1a5ec9e78e0d27119125e8816dc9babfc4>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator!=<doxid-class_poco_1_1_auto_ptr_1a2b2305e5d0e7e32a2b0b206b74cc5d43>`(C* ptr) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_auto_ptr_1a640a8740b29f9133a7fccd2e2d28a0d9>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_auto_ptr_1acf127a953fe7129409182b72084aa438>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator<<doxid-class_poco_1_1_auto_ptr_1a4a52044eafb3b28ffd632ada5e9d57e7>`(C* ptr) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_auto_ptr_1a9a59a0529bd7a4fe6a4dda6ca07207e2>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_auto_ptr_1affeffdb23b4efd4a9ff3b452e46e4f7a>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator<=<doxid-class_poco_1_1_auto_ptr_1ade06c66f63db4d9c4068b9ecd4e25307>`(C* ptr) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_auto_ptr_1a5adf11408f799b785ee15e569faab9e6>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_auto_ptr_1a59dd2c82ba9639fae43b969e266e46d1>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator><doxid-class_poco_1_1_auto_ptr_1aef0d2fce7a079abfa2520e493b3877aa>`(C* ptr) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_auto_ptr_1a3ad3be3f15daf5949497be0016190225>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AutoPtr& ptr) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_auto_ptr_1afdf0b4c4c2b1c6ed039237d89591ca32>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` C* ptr) const;
	
		bool
		:target:`operator>=<doxid-class_poco_1_1_auto_ptr_1a8957aecc8a7918133c07248b64732415>`(C* ptr) const;
	};
.. _details-class_poco_1_1_auto_ptr:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` is a "smart" pointer for classes implementing reference counting based garbage collection.

To be usable with the :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` template, a class must implement the following behaviour: A class must maintain a reference count. The constructors of the object initialize the reference count to one. The class must implement a public :ref:`duplicate() <doxid-class_poco_1_1_auto_ptr_1a4551e28d5ee05702d91bc0550dce5186>` method:

.. ref-code-block:: cpp

	void duplicate();

that increments the reference count by one. The class must implement a public release() method:

.. ref-code-block:: cpp

	void release()

that decrements the reference count by one, and, if the reference count reaches zero, deletes the object.

:ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` works in the following way: If an :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` is assigned an ordinary pointer to an object (via the constructor or the assignment operator), it takes ownership of the object and the object's reference count remains unchanged. If the :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` is assigned another :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>`, the object's reference count is incremented by one by calling :ref:`duplicate() <doxid-class_poco_1_1_auto_ptr_1a4551e28d5ee05702d91bc0550dce5186>` on its object. The destructor of :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` calls release() on its object. :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` supports dereferencing with both the -> and the \* operator. An attempt to dereference a null :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` results in a NullPointerException being thrown. :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` also implements all relational operators. Note that :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` allows casting of its encapsulated data types.

Methods
-------

.. index:: pair: function; cast
.. _doxid-class_poco_1_1_auto_ptr_1a17febf4cf62fda75a2cc41539f2f3e04:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class Other>
	AutoPtr<Other>
	cast() const

Casts the :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` via a dynamic cast to the given type.

Returns an :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` containing NULL if the cast fails. Example: (assume class Sub: public Super)

.. ref-code-block:: cpp

	AutoPtr<Super> super(new Sub());
	AutoPtr<Sub> sub = super.cast<Sub>();
	poco_assert (sub.get());

.. index:: pair: function; unsafeCast
.. _doxid-class_poco_1_1_auto_ptr_1ae806ac7edcc5da562e379b0362938f3b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class Other>
	AutoPtr<Other>
	unsafeCast() const

Casts the :ref:`AutoPtr <doxid-class_poco_1_1_auto_ptr>` via a static cast to the given type.

Example: (assume class Sub: public Super)

.. ref-code-block:: cpp

	AutoPtr<Super> super(new Sub());
	AutoPtr<Sub> sub = super.unsafeCast<Sub>();
	poco_assert (sub.get());

