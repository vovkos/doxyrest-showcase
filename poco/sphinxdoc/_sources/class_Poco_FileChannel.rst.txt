.. index:: pair: class; Poco::FileChannel
.. _doxid-class_poco_1_1_file_channel:

class Poco::FileChannel
=======================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A :ref:`Channel <doxid-class_poco_1_1_channel>` that writes to a file. :ref:`More...<details-class_poco_1_1_file_channel>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <FileChannel.h>
	
	class FileChannel: public :ref:`Poco::Channel<doxid-class_poco_1_1_channel>`
	{
	public:
		// fields
	
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_PATH<doxid-class_poco_1_1_file_channel_1a5626b72fdf523d26346171e3060925c1>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_ROTATION<doxid-class_poco_1_1_file_channel_1a1cb66c5ab16762c9b055a3f8f8ad093c>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_ARCHIVE<doxid-class_poco_1_1_file_channel_1a94f788a04bb75988f939dcd208a4fe32>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_TIMES<doxid-class_poco_1_1_file_channel_1a0319637b43d34a936f4d7101cd0e5bfe>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_COMPRESS<doxid-class_poco_1_1_file_channel_1a8700be818c3e69d30e221a530027222e>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_PURGEAGE<doxid-class_poco_1_1_file_channel_1a72893831ec82767a326603721ede3847>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_PURGECOUNT<doxid-class_poco_1_1_file_channel_1aa7f3ac10e213164091949499c02a4c64>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_FLUSH<doxid-class_poco_1_1_file_channel_1a597e2686b5594dc9b0f890ddb1fab902>`;
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string :target:`PROP_ROTATEONOPEN<doxid-class_poco_1_1_file_channel_1a63d7b5ff928f2d3e57d04cee060d6b32>`;

		// construction
	
		:ref:`FileChannel<doxid-class_poco_1_1_file_channel_1afd829da6713114ac4c32019e51621763>`();
		:ref:`FileChannel<doxid-class_poco_1_1_file_channel_1a494e549b0307dfb079f0f93c00ed12da>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& path);

		// methods
	
		virtual
		void
		:ref:`open<doxid-class_poco_1_1_file_channel_1a887422254aa0a370b18ed0b7c6e881cc>`();
	
		virtual
		void
		:ref:`close<doxid-class_poco_1_1_file_channel_1a78660cf11aa220ca6f484620d473bf29>`();
	
		virtual
		void
		:ref:`log<doxid-class_poco_1_1_file_channel_1a98cb6c5d9e70b4babcca7c346dd38278>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Message<doxid-class_poco_1_1_message>`& msg);
	
		virtual
		void
		:ref:`setProperty<doxid-class_poco_1_1_file_channel_1ac645e951d085ac76abba8d0c2f5e070d>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value
			);
	
		virtual
		std::string
		:ref:`getProperty<doxid-class_poco_1_1_file_channel_1ad281fd85cd0805d4805d2b16ee6bde88>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const;
	
		:ref:`Timestamp<doxid-class_poco_1_1_timestamp>`
		:ref:`creationDate<doxid-class_poco_1_1_file_channel_1a3d7110bf49ba6cc6c665fe38dc16e735>`() const;
	
		UInt64
		:ref:`size<doxid-class_poco_1_1_file_channel_1a7e74515b43a6417a6c63af2d8022db9e>`() const;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
		:ref:`path<doxid-class_poco_1_1_file_channel_1a9b1a70034729c1e1578fba78d5b48a55>`() const;

	protected:
		// methods
	
		void
		:target:`setRotation<doxid-class_poco_1_1_file_channel_1a4442e1df8b658029646fb9e8a5ebb534>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& rotation);
	
		void
		:target:`setArchive<doxid-class_poco_1_1_file_channel_1a6dc6fab117974440c3f30dbda88fb042>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& archive);
	
		void
		:target:`setCompress<doxid-class_poco_1_1_file_channel_1a4c254a4ba68024e2c38143ecab8b7fcb>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& compress);
	
		void
		:target:`setPurgeAge<doxid-class_poco_1_1_file_channel_1a3f22f5bc99f8cabab6c362e08db10009>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& age);
	
		void
		:target:`setPurgeCount<doxid-class_poco_1_1_file_channel_1a957b577782d1687c0b07a8c202ed5fb9>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& count);
	
		void
		:target:`setFlush<doxid-class_poco_1_1_file_channel_1a190433e8c8f1bf2c4505cec6a8b76909>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& flush);
	
		void
		:target:`setRotateOnOpen<doxid-class_poco_1_1_file_channel_1a139d669ee529d1a7af3e7b39b8d1cb12>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& rotateOnOpen);
	
		void
		:target:`purge<doxid-class_poco_1_1_file_channel_1a7c4ca720504ce7555b4df5f4f719942e>`();
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`setProperty<doxid-class_poco_1_1_configurable_1ae31289819bd01f4a1bda0be67144d5bf>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value
			) = 0;
	
		virtual
		std::string
		:ref:`getProperty<doxid-class_poco_1_1_configurable_1a565940a99f096c005743a68040ca5e25>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const = 0;
	
		void
		:ref:`duplicate<doxid-class_poco_1_1_ref_counted_object_1a13296da57127169ed0709b3dde86bf0d>`() const;
	
		void
		:ref:`release<doxid-class_poco_1_1_ref_counted_object_1a14bf204923a6ba4b97df6f8fdb9deb72>`() const;
	
		int
		:ref:`referenceCount<doxid-class_poco_1_1_ref_counted_object_1a45b62ccd833bcb06055399c2d889eb35>`() const;
	
		virtual
		void
		:ref:`open<doxid-class_poco_1_1_channel_1aef60226200d2e287068a62d9af5a4f6e>`();
	
		virtual
		void
		:ref:`close<doxid-class_poco_1_1_channel_1a2056a173f804c51411942649bd4d6408>`();
	
		virtual
		void
		:ref:`log<doxid-class_poco_1_1_channel_1aeafdcc5ce2e0e38d96f15a60a563da4e>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Message<doxid-class_poco_1_1_message>`& msg) = 0;
	
		virtual
		void
		:ref:`setProperty<doxid-class_poco_1_1_channel_1a67c2a274e476745b902ced03fb485c6e>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value
			);
	
		virtual
		std::string
		:ref:`getProperty<doxid-class_poco_1_1_channel_1a187321f59674dfde457599885a4f6ec0>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const;

.. _details-class_poco_1_1_file_channel:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A :ref:`Channel <doxid-class_poco_1_1_channel>` that writes to a file.

This class supports flexible log file rotation and archiving, as well as automatic purging of archived log files.

Only the message's text is written, followed by a newline.

Chain this channel to a :ref:`FormattingChannel <doxid-class_poco_1_1_formatting_channel>` with an appropriate :ref:`Formatter <doxid-class_poco_1_1_formatter>` to control what is in the text.

The :ref:`FileChannel <doxid-class_poco_1_1_file_channel>` support log file rotation based on log file size or time intervals. Archived log files can be compressed in gzip format. Older archived files can be automatically deleted (purged).

The rotation strategy can be specified with the "rotation" property, which can take one of the follwing values:

.. ref-code-block:: cpp

	* never:         no log rotation
	* [day,][hh]:mm: the file is rotated on specified day/time
	                 day - day is specified as long or short day name (Monday|Mon, Tuesday|Tue, ... );
	                       day can be omitted, in which case log is rotated every day
	                 hh  - valid hour range is 00-23;
	                       hour can be omitted, in which case log is rotated every hour
	                 mm  - valid minute range is 00-59;
	                       minute must be specified
	* daily:         the file is rotated daily
	* weekly:        the file is rotated every seven days
	* monthly:       the file is rotated every 30 days
	* <n> minutes:   the file is rotated every <n> minutes, 
	                 where <n> is an integer greater than zero.
	* <n> hours:     the file is rotated every <n> hours, where
	                 <n> is an integer greater than zero.
	* <n> days:      the file is rotated every <n> days, where
	                 <n> is an integer greater than zero.
	* <n> weeks:     the file is rotated every <n> weeks, where
	                 <n> is an integer greater than zero.
	* <n> months:    the file is rotated every <n> months, where
	                 <n> is an integer greater than zero and
	                 a month has 30 days.
	* <n>:           the file is rotated when its size exceeds
	                 <n> bytes.
	* <n> K:         the file is rotated when its size exceeds
	                 <n> Kilobytes.
	* <n> M:         the file is rotated when its size exceeds
	                 <n> Megabytes.

NOTE: For periodic log file rotation (daily, weekly, monthly, etc.), the date and time of log file creation or last rotation is written into the first line of the log file. This is because there is no reliable way to find out the real creation date of a file on many platforms (e.g., most Unix platforms do not provide the creation date, and Windows has its own issues with its "File System Tunneling Capabilities").

Using the "archive" property it is possible to specify how archived log files are named. The following values for the "archive" property are supported:

.. ref-code-block:: cpp

	* number:     A number, starting with 0, is appended to
	              the name of archived log files. The newest
	              archived log file always has the number 0.
	              For example, if the log file is named
	              "access.log", and it fulfils the criteria
	              for rotation, the file is renamed to
	              "access.log.0". If a file named "access.log.0"
	              already exists, it is renamed to "access.log.1",
	              and so on.
	* timestamp:  A timestamp is appended to the log file name.
	              For example, if the log file is named
	              "access.log", and it fulfils the criteria
	              for rotation, the file is renamed to
	              "access.log.20050802110300".

Using the "times" property it is possible to specify time mode for the day/time based rotation. The following values for the "times" property are supported:

.. ref-code-block:: cpp

	* utc:        Rotation strategy is based on UTC time (default).
	* local:      Rotation strategy is based on local time.

Archived log files can be compressed using the gzip compression method. Compressing can be controlled with the "compress" property. The following values for the "compress" property are supported:

.. ref-code-block:: cpp

	* true:       Compress archived log files.
	* false:      Do not compress archived log files.

Archived log files can be automatically purged, either if they reach a certain age, or if the number of archived log files reaches a given maximum number. This is controlled by the purgeAge and purgeCount properties.

The purgeAge property can have the following values:

.. ref-code-block:: cpp

	* <n> [seconds]: the maximum age is <n> seconds.
	* <n> minutes:   the maximum age is <n> minutes.
	* <n> hours:     the maximum age is <n> hours.
	* <n> days:      the maximum age is <n> days.
	* <n> weeks:     the maximum age is <n> weeks.
	* <n> months:    the maximum age is <n> months, where a month has 30 days.

The purgeCount property has an integer value that specifies the maximum number of archived log files. If the number is exceeded, archived log files are deleted, starting with the oldest. When "none" or empty string are supplied, they reset purgeCount to none (no purging).

The flush property specifies whether each log message is flushed immediately to the log file (which may hurt application performance, but ensures that everything is in the log in case of a system crash), Valid values are:

.. ref-code-block:: cpp

	* true:  Every essages is immediately flushed to the log file (default).
	* false: Messages are not immediately flushed to the log file.

The rotateOnOpen property specifies whether an existing log file should be rotated (and archived) when the channel is opened. Valid values are:

.. ref-code-block:: cpp

	* true:  The log file is rotated (and archived) when the channel is opened.
	* false: Log messages will be appended to an existing log file,
	         if it exists (unless other conditions for a rotation are met). 
	         This is the default.

For a more lightweight file channel class, see :ref:`SimpleFileChannel <doxid-class_poco_1_1_simple_file_channel>`.

Construction
------------

.. index:: pair: function; FileChannel
.. _doxid-class_poco_1_1_file_channel_1afd829da6713114ac4c32019e51621763:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	FileChannel()

Creates the :ref:`FileChannel <doxid-class_poco_1_1_file_channel>`.

.. index:: pair: function; FileChannel
.. _doxid-class_poco_1_1_file_channel_1a494e549b0307dfb079f0f93c00ed12da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	FileChannel(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& path)

Creates the :ref:`FileChannel <doxid-class_poco_1_1_file_channel>` for a file with the given path.

Methods
-------

.. index:: pair: function; open
.. _doxid-class_poco_1_1_file_channel_1a887422254aa0a370b18ed0b7c6e881cc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	open()

Opens the :ref:`FileChannel <doxid-class_poco_1_1_file_channel>` and creates the log file if necessary.

.. index:: pair: function; close
.. _doxid-class_poco_1_1_file_channel_1a78660cf11aa220ca6f484620d473bf29:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	close()

Closes the :ref:`FileChannel <doxid-class_poco_1_1_file_channel>`.

.. index:: pair: function; log
.. _doxid-class_poco_1_1_file_channel_1a98cb6c5d9e70b4babcca7c346dd38278:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	log(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Message<doxid-class_poco_1_1_message>`& msg)

Logs the given message to the file.

.. index:: pair: function; setProperty
.. _doxid-class_poco_1_1_file_channel_1ac645e951d085ac76abba8d0c2f5e070d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setProperty(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value
		)

Sets the property with the given name.

The following properties are supported:

.. ref-code-block:: cpp

	* path:         The log file's path.
	* rotation:     The log file's rotation mode. See the 
	                FileChannel class for details.
	* archive:      The log file's archive mode. See the
	                FileChannel class for details.
	* times:        The log file's time mode. See the
	                FileChannel class for details.
	* compress:     Enable or disable compression of
	                archived files. See the FileChannel class
	                for details.
	* purgeAge:     Maximum age of an archived log file before
	                it is purged. See the FileChannel class for
	                details.
	* purgeCount:   Maximum number of archived log files before
	                files are purged. See the FileChannel class
	                for details.
	* flush:        Specifies whether messages are immediately
	                flushed to the log file. See the FileChannel class
	                for details.
	* rotateOnOpen: Specifies whether an existing log file should be 
	                rotated and archived when the channel is opened.

.. index:: pair: function; getProperty
.. _doxid-class_poco_1_1_file_channel_1ad281fd85cd0805d4805d2b16ee6bde88:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	std::string
	getProperty(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const

Returns the value of the property with the given name.

See :ref:`setProperty() <doxid-class_poco_1_1_file_channel_1ac645e951d085ac76abba8d0c2f5e070d>` for a description of the supported properties.

.. index:: pair: function; creationDate
.. _doxid-class_poco_1_1_file_channel_1a3d7110bf49ba6cc6c665fe38dc16e735:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Timestamp<doxid-class_poco_1_1_timestamp>`
	creationDate() const

Returns the log file's creation date.

.. index:: pair: function; size
.. _doxid-class_poco_1_1_file_channel_1a7e74515b43a6417a6c63af2d8022db9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UInt64
	size() const

Returns the log file's current size in bytes.

.. index:: pair: function; path
.. _doxid-class_poco_1_1_file_channel_1a9b1a70034729c1e1578fba78d5b48a55:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
	path() const

Returns the log file's path.

