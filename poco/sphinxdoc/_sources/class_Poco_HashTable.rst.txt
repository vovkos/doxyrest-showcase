.. index:: pair: class; Poco::HashTable
.. _doxid-class_poco_1_1_hash_table:

template class Poco::HashTable
==============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A :ref:`HashTable <doxid-class_poco_1_1_hash_table>` stores a key value pair that can be looked up via a hashed key. :ref:`More...<details-class_poco_1_1_hash_table>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <HashTable.h>
	
	template <
		class Key,
		class Value,
		class KeyHashFunction = HashFunction<Key>
		>
	class HashTable
	{
	public:
		// typedefs
	
		typedef std::map<Key, Value> :target:`HashEntryMap<doxid-class_poco_1_1_hash_table_1ab89f16f58ffbf85fd2333ff644e3e1b9>`;
		typedef :ref:`HashEntryMap<doxid-class_poco_1_1_hash_table_1ab89f16f58ffbf85fd2333ff644e3e1b9>`** :target:`HashTableVector<doxid-class_poco_1_1_hash_table_1aa52799e7fa81980df752aa3659f0b77b>`;
		typedef HashEntryMap::const_iterator :target:`ConstIterator<doxid-class_poco_1_1_hash_table_1a081d78644f71e53e5e083141a748614f>`;
		typedef HashEntryMap::iterator :target:`Iterator<doxid-class_poco_1_1_hash_table_1a10783844f846721b8b360d41a6b83b2a>`;

		// construction
	
		:target:`HashTable<doxid-class_poco_1_1_hash_table_1aaf1fc1556ec21ec37a218bf47f69b6d6>`(UInt32 initialSize = 251);
		:target:`HashTable<doxid-class_poco_1_1_hash_table_1a3e73ca0552fa6b55399d4b15741e22e8>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` HashTable& ht);

		// methods
	
		HashTable&
		:target:`operator=<doxid-class_poco_1_1_hash_table_1a10d20788318515a327daf5010e403052>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` HashTable& ht);
	
		void
		:target:`clear<doxid-class_poco_1_1_hash_table_1a36ce0f4d79fda2c3307e6ddb47fddb08>`();
	
		UInt32
		:ref:`insert<doxid-class_poco_1_1_hash_table_1a6c97a003261d2764afcf48dee564e62a>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
			);
	
		Value&
		:ref:`insertRaw<doxid-class_poco_1_1_hash_table_1abc35f95d928d472b8258e14e968a2b45>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
			);
	
		UInt32
		:ref:`update<doxid-class_poco_1_1_hash_table_1ae4ca9a703d8628ad91627fbdb1d0f2b1>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
			);
	
		void
		:ref:`updateRaw<doxid-class_poco_1_1_hash_table_1a3f239a15d3b2edc936677c818dadd133>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
			);
	
		void
		:target:`remove<doxid-class_poco_1_1_hash_table_1a007c4b1e4df770e20b4b582d16d81022>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key);
	
		void
		:ref:`removeRaw<doxid-class_poco_1_1_hash_table_1a0d4160193d347f0d0ca6f5698ca30d33>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh
			);
	
		UInt32
		:target:`hash<doxid-class_poco_1_1_hash_table_1a60a3d204cb7262550ffe535a54dd17e2>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key) const;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value&
		:ref:`get<doxid-class_poco_1_1_hash_table_1a2040cd062ed7bd164df4df445ab8870a>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key) const;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value&
		:ref:`getRaw<doxid-class_poco_1_1_hash_table_1a0c5ea0f9c5fe1e0f87c07f2eb332625b>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh
			) const;
	
		Value&
		:ref:`get<doxid-class_poco_1_1_hash_table_1a3b8414b0eb0a359b5f45906fc9bf77f4>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key);
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value&
		:target:`operator[]<doxid-class_poco_1_1_hash_table_1a9394b49b17cb85e9d8b69f48855f43f2>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key) const;
	
		Value&
		:target:`operator[]<doxid-class_poco_1_1_hash_table_1ab7f62fb75c6f5890124c85c64b80e70b>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key);
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key&
		:ref:`getKeyRaw<doxid-class_poco_1_1_hash_table_1a4bcd2f962b7b8badb7f529bafff09660>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh
			);
	
		bool
		:ref:`get<doxid-class_poco_1_1_hash_table_1a574a6c9b21f703127ec817d5fc868cc1>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			Value& v
			) const;
	
		bool
		:ref:`getRaw<doxid-class_poco_1_1_hash_table_1a94b63b99c24d539a49171a0665f11157>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh,
			Value& v
			) const;
	
		bool
		:target:`exists<doxid-class_poco_1_1_hash_table_1ad9bd5095573d67789521735c64b6a3ba>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key);
	
		bool
		:target:`existsRaw<doxid-class_poco_1_1_hash_table_1aa0dc4a752d09df953e40a55fc18937a8>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
			UInt32 hsh
			);
	
		std::size_t
		:ref:`size<doxid-class_poco_1_1_hash_table_1aa627491e7ee2b9484901656e866ffd7f>`() const;
	
		UInt32
		:target:`maxCapacity<doxid-class_poco_1_1_hash_table_1ab19760fc1f3195e201a856e530b06e2d>`() const;
	
		void
		:ref:`resize<doxid-class_poco_1_1_hash_table_1a8dd73ef505cbf94fe587f2f736403827>`(UInt32 newSize);
	
		:ref:`HashStatistic<doxid-class_poco_1_1_hash_statistic>`
		:ref:`currentState<doxid-class_poco_1_1_hash_table_1ab1fb76583b021e9dec917e1fa84515f5>`(bool details = false) const;
	};
.. _details-class_poco_1_1_hash_table:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A :ref:`HashTable <doxid-class_poco_1_1_hash_table>` stores a key value pair that can be looked up via a hashed key.

Collision handling is done via overflow maps(!). With small hash tables performance of this data struct will be closer to that a map than a hash table, i.e. slower. On the plus side, this class offers remove operations. Also :ref:`HashTable <doxid-class_poco_1_1_hash_table>` full errors are not possible. If a fast :ref:`HashTable <doxid-class_poco_1_1_hash_table>` implementation is needed and the remove operation is not required, use :ref:`SimpleHashTable <doxid-class_poco_1_1_simple_hash_table>` instead.

This class is NOT thread safe.

Construction
------------

.. _doxid-class_poco_1_1_hash_table_1aec56832a7a30cf444d78ba99e14c0e2b:
.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	~HashTable()

Destroys the :ref:`HashTable <doxid-class_poco_1_1_hash_table>`.

Methods
-------

.. index:: pair: function; insert
.. _doxid-class_poco_1_1_hash_table_1a6c97a003261d2764afcf48dee564e62a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UInt32
	insert(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
		)

Returns the hash value of the inserted item.

Throws an exception if the entry was already inserted

.. index:: pair: function; insertRaw
.. _doxid-class_poco_1_1_hash_table_1abc35f95d928d472b8258e14e968a2b45:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Value&
	insertRaw(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		UInt32 hsh,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
		)

Returns the hash value of the inserted item.

Throws an exception if the entry was already inserted

.. index:: pair: function; update
.. _doxid-class_poco_1_1_hash_table_1ae4ca9a703d8628ad91627fbdb1d0f2b1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	UInt32
	update(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
		)

Returns the hash value of the inserted item.

Replaces an existing entry if it finds one

.. index:: pair: function; updateRaw
.. _doxid-class_poco_1_1_hash_table_1a3f239a15d3b2edc936677c818dadd133:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	updateRaw(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		UInt32 hsh,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value& value
		)

Returns the hash value of the inserted item.

Replaces an existing entry if it finds one

.. index:: pair: function; removeRaw
.. _doxid-class_poco_1_1_hash_table_1a0d4160193d347f0d0ca6f5698ca30d33:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	removeRaw(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		UInt32 hsh
		)

Performance version, allows to specify the hash value.

.. index:: pair: function; get
.. _doxid-class_poco_1_1_hash_table_1a2040cd062ed7bd164df4df445ab8870a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value&
	get(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key) const

Throws an exception if the value does not exist.

.. index:: pair: function; getRaw
.. _doxid-class_poco_1_1_hash_table_1a0c5ea0f9c5fe1e0f87c07f2eb332625b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Value&
	getRaw(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		UInt32 hsh
		) const

Throws an exception if the value does not exist.

.. index:: pair: function; get
.. _doxid-class_poco_1_1_hash_table_1a3b8414b0eb0a359b5f45906fc9bf77f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Value&
	get(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key)

Throws an exception if the value does not exist.

.. index:: pair: function; getKeyRaw
.. _doxid-class_poco_1_1_hash_table_1a4bcd2f962b7b8badb7f529bafff09660:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key&
	getKeyRaw(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		UInt32 hsh
		)

Throws an exception if the key does not exist.

returns a reference to the internally stored key. Useful when someone does an insert and wants for performance reason only to store a pointer to the key in another collection

.. index:: pair: function; get
.. _doxid-class_poco_1_1_hash_table_1a574a6c9b21f703127ec817d5fc868cc1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	get(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		Value& v
		) const

Sets v to the found value, returns false if no value was found.

.. index:: pair: function; getRaw
.. _doxid-class_poco_1_1_hash_table_1a94b63b99c24d539a49171a0665f11157:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	getRaw(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` Key& key,
		UInt32 hsh,
		Value& v
		) const

Sets v to the found value, returns false if no value was found.

.. index:: pair: function; size
.. _doxid-class_poco_1_1_hash_table_1aa627491e7ee2b9484901656e866ffd7f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::size_t
	size() const

Returns the number of elements already inserted into the :ref:`HashTable <doxid-class_poco_1_1_hash_table>`.

.. index:: pair: function; resize
.. _doxid-class_poco_1_1_hash_table_1a8dd73ef505cbf94fe587f2f736403827:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	resize(UInt32 newSize)

Resizes the hashtable, rehashes all existing entries. Expensive!

.. index:: pair: function; currentState
.. _doxid-class_poco_1_1_hash_table_1ab1fb76583b021e9dec917e1fa84515f5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`HashStatistic<doxid-class_poco_1_1_hash_statistic>`
	currentState(bool details = false) const

Returns the current internal state.

