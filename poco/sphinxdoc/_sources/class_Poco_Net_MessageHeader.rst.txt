.. index:: pair: class; Poco::Net::MessageHeader
.. _doxid-class_poco_1_1_net_1_1_message_header:

class Poco::Net::MessageHeader
==============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A collection of name-value pairs that are used in various internet protocols like HTTP and SMTP. :ref:`More...<details-class_poco_1_1_net_1_1_message_header>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <MessageHeader.h>
	
	class MessageHeader: public :ref:`Poco::Net::NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`
	{
	public:
		// construction
	
		:ref:`MessageHeader<doxid-class_poco_1_1_net_1_1_message_header_1a4f5768d0c5818d859b9b5ce42038fb5b>`();
		:ref:`MessageHeader<doxid-class_poco_1_1_net_1_1_message_header_1ad4ba403999f95f458cf727b87c45d394>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` MessageHeader& messageHeader);

		// methods
	
		MessageHeader&
		:ref:`operator=<doxid-class_poco_1_1_net_1_1_message_header_1a8eb761b5720dacd8672f91e707f6e0c6>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` MessageHeader& messageHeader);
	
		virtual
		void
		:ref:`write<doxid-class_poco_1_1_net_1_1_message_header_1a17d364fb83f557d453465a33143ef220>`(std::ostream& ostr) const;
	
		virtual
		void
		:ref:`read<doxid-class_poco_1_1_net_1_1_message_header_1aabf5802666bb656970cb2a44bd5f2e57>`(std::istream& istr);
	
		int
		:ref:`getFieldLimit<doxid-class_poco_1_1_net_1_1_message_header_1a90c47c2992a6444acb38f4333af6c014>`() const;
	
		void
		:ref:`setFieldLimit<doxid-class_poco_1_1_net_1_1_message_header_1a6bc78e56e2faa12781407fe2ef1f39f8>`(int limit);
	
		bool
		:ref:`hasToken<doxid-class_poco_1_1_net_1_1_message_header_1afc391d288b7d829ac47b6c3dbfff9e98>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& fieldName,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& token
			) const;
	
		static
		void
		:ref:`splitElements<doxid-class_poco_1_1_net_1_1_message_header_1a669e1ac2c689e9d7d454e54868ffb80b>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& s,
			std::vector<std::string>& elements,
			bool ignoreEmpty = true
			);
	
		static
		void
		:ref:`splitParameters<doxid-class_poco_1_1_net_1_1_message_header_1a73da407031c4cd73d62de3f52d10a675>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& s,
			std::string& value,
			:ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`& parameters
			);
	
		static
		void
		:ref:`splitParameters<doxid-class_poco_1_1_net_1_1_message_header_1af1a5c9177b17e6691ecb501a2e8bd4db>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string::const_iterator& begin,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string::const_iterator& end,
			:ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`& parameters
			);
	
		static
		void
		:ref:`quote<doxid-class_poco_1_1_net_1_1_message_header_1a54a24159534eb2122c91fde66af2533e>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value,
			std::string& result,
			bool allowSpace = false
			);
	};

	// direct descendants

	class :ref:`HTTPMessage<doxid-class_poco_1_1_net_1_1_h_t_t_p_message>`;
	class :ref:`MailMessage<doxid-class_poco_1_1_net_1_1_mail_message>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef :ref:`Poco::ListMap<doxid-class_poco_1_1_list_map>`<std::string, std::string> :ref:`HeaderMap<doxid-class_poco_1_1_net_1_1_name_value_collection_1a889018fb1c0aae12c1e7de4b47389a7e>`;
		typedef :ref:`HeaderMap::Iterator<doxid-class_poco_1_1_list_map_1ac24980819d69f5d97fa815fe37ed0eb3>` :ref:`Iterator<doxid-class_poco_1_1_net_1_1_name_value_collection_1ac919f49e1d364d95eea68af7e4eb1617>`;
		typedef :ref:`HeaderMap::ConstIterator<doxid-class_poco_1_1_list_map_1aa63760ba80d6b2762e692f244ff180eb>` :ref:`ConstIterator<doxid-class_poco_1_1_net_1_1_name_value_collection_1a61f0e090f5550e4e4f6629f5717ab92f>`;

		// methods
	
		:ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`&
		:ref:`operator=<doxid-class_poco_1_1_net_1_1_name_value_collection_1acdcc7227132ff791e43d09d751d294fb>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`& nvc);
	
		void
		:ref:`swap<doxid-class_poco_1_1_net_1_1_name_value_collection_1a215af88f41d3f58765b65103bd760919>`(:ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`& nvc);
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
		:ref:`operator[]<doxid-class_poco_1_1_net_1_1_name_value_collection_1a7ef53b6192a14918496819280d25bff6>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const;
	
		void
		:ref:`set<doxid-class_poco_1_1_net_1_1_name_value_collection_1a319a17ee26c18f9e83f8d6485104689d>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value
			);
	
		void
		:ref:`add<doxid-class_poco_1_1_net_1_1_name_value_collection_1a76e89d818b51c20841e5665487b62819>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value
			);
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
		:ref:`get<doxid-class_poco_1_1_net_1_1_name_value_collection_1a5294bc8a258aa595a8cc65815e8d0fbb>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string&
		:ref:`get<doxid-class_poco_1_1_net_1_1_name_value_collection_1a45e26a4bf08146aedf3067bdc207faff>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& defaultValue
			) const;
	
		bool
		:ref:`has<doxid-class_poco_1_1_net_1_1_name_value_collection_1a43d15e0244fa45ccaa8ae003aee2b9b8>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const;
	
		:ref:`ConstIterator<doxid-class_poco_1_1_net_1_1_name_value_collection_1a61f0e090f5550e4e4f6629f5717ab92f>`
		:ref:`find<doxid-class_poco_1_1_net_1_1_name_value_collection_1a591bbb5552626f58bcf1d1c463476110>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name) const;
	
		:ref:`ConstIterator<doxid-class_poco_1_1_net_1_1_name_value_collection_1a61f0e090f5550e4e4f6629f5717ab92f>`
		:ref:`begin<doxid-class_poco_1_1_net_1_1_name_value_collection_1a5406b45214d097281ee156c37c70341a>`() const;
	
		:ref:`ConstIterator<doxid-class_poco_1_1_net_1_1_name_value_collection_1a61f0e090f5550e4e4f6629f5717ab92f>`
		:ref:`end<doxid-class_poco_1_1_net_1_1_name_value_collection_1aa17a41875ec189a312d7353227f3a37f>`() const;
	
		bool
		:ref:`empty<doxid-class_poco_1_1_net_1_1_name_value_collection_1a28746ec396b429539754ad62e0f3e181>`() const;
	
		std::size_t
		:ref:`size<doxid-class_poco_1_1_net_1_1_name_value_collection_1a74d1b4eaf947b93117eb1c870a683195>`() const;
	
		void
		:ref:`erase<doxid-class_poco_1_1_net_1_1_name_value_collection_1abd0275666a498fc251ef56acfe70a43a>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& name);
	
		void
		:ref:`clear<doxid-class_poco_1_1_net_1_1_name_value_collection_1a2cb59fd68c3c27f7d50634a1849d64c4>`();

.. _details-class_poco_1_1_net_1_1_message_header:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A collection of name-value pairs that are used in various internet protocols like HTTP and SMTP.

The name is case-insensitive.

There can be more than one name-value pair with the same name.

:ref:`MessageHeader <doxid-class_poco_1_1_net_1_1_message_header>` supports writing and reading the header data in RFC 2822 format.

The maximum number of fields can be restricted by calling :ref:`setFieldLimit() <doxid-class_poco_1_1_net_1_1_message_header_1a6bc78e56e2faa12781407fe2ef1f39f8>`. This is useful to defend against certain kinds of denial-of-service attacks. The limit is only enforced when parsing header fields from a stream, not when programmatically adding them. The default limit is 100.

Construction
------------

.. index:: pair: function; MessageHeader
.. _doxid-class_poco_1_1_net_1_1_message_header_1a4f5768d0c5818d859b9b5ce42038fb5b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MessageHeader()

Creates the :ref:`MessageHeader <doxid-class_poco_1_1_net_1_1_message_header>`.

.. index:: pair: function; MessageHeader
.. _doxid-class_poco_1_1_net_1_1_message_header_1ad4ba403999f95f458cf727b87c45d394:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MessageHeader(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` MessageHeader& messageHeader)

Creates the :ref:`MessageHeader <doxid-class_poco_1_1_net_1_1_message_header>` by copying another one.

Methods
-------

.. index:: pair: function; operator=
.. _doxid-class_poco_1_1_net_1_1_message_header_1a8eb761b5720dacd8672f91e707f6e0c6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MessageHeader&
	operator=(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` MessageHeader& messageHeader)

Assigns the content of another :ref:`MessageHeader <doxid-class_poco_1_1_net_1_1_message_header>`.

.. index:: pair: function; write
.. _doxid-class_poco_1_1_net_1_1_message_header_1a17d364fb83f557d453465a33143ef220:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	write(std::ostream& ostr) const

Writes the message header to the given output stream.

The format is one name-value pair per line, with name and value separated by a colon and lines delimited by a carriage return and a linefeed character. See RFC 2822 for details.

.. index:: pair: function; read
.. _doxid-class_poco_1_1_net_1_1_message_header_1aabf5802666bb656970cb2a44bd5f2e57:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	read(std::istream& istr)

Reads the message header from the given input stream.

See :ref:`write() <doxid-class_poco_1_1_net_1_1_message_header_1a17d364fb83f557d453465a33143ef220>` for the expected format. Also supported is folding of field content, according to section 2.2.3 of RFC 2822.

Reading stops at the first empty line (a line only containing

or

), as well as at the end of the stream.

Some basic sanity checking of the input stream is performed.

Throws a MessageException if the input stream is malformed.

.. index:: pair: function; getFieldLimit
.. _doxid-class_poco_1_1_net_1_1_message_header_1a90c47c2992a6444acb38f4333af6c014:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	int
	getFieldLimit() const

Returns the maximum number of header fields allowed.

See :ref:`setFieldLimit() <doxid-class_poco_1_1_net_1_1_message_header_1a6bc78e56e2faa12781407fe2ef1f39f8>` for more information.

.. index:: pair: function; setFieldLimit
.. _doxid-class_poco_1_1_net_1_1_message_header_1a6bc78e56e2faa12781407fe2ef1f39f8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	setFieldLimit(int limit)

Sets the maximum number of header fields allowed.

This limit is used to defend certain kinds of denial-of-service attacks. Specify 0 for unlimited (not recommended).

The default limit is 100.

.. index:: pair: function; hasToken
.. _doxid-class_poco_1_1_net_1_1_message_header_1afc391d288b7d829ac47b6c3dbfff9e98:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	hasToken(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& fieldName,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& token
		) const

Returns true iff the field with the given fieldName contains the given token.

Tokens in a header field are expected to be comma-separated and are case insensitive.

.. index:: pair: function; splitElements
.. _doxid-class_poco_1_1_net_1_1_message_header_1a669e1ac2c689e9d7d454e54868ffb80b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	splitElements(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& s,
		std::vector<std::string>& elements,
		bool ignoreEmpty = true
		)

Splits the given string into separate elements.

Elements are expected to be separated by commas.

For example, the string

.. ref-code-block:: cpp

	text/plain; q=0.5, text/html, text/x-dvi; q=0.8

is split into the elements

.. ref-code-block:: cpp

	text/plain; q=0.5
	text/html
	text/x-dvi; q=0.8

Commas enclosed in double quotes do not split elements.

If ignoreEmpty is true, empty elements are not returned.

.. index:: pair: function; splitParameters
.. _doxid-class_poco_1_1_net_1_1_message_header_1a73da407031c4cd73d62de3f52d10a675:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	splitParameters(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& s,
		std::string& value,
		:ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`& parameters
		)

Splits the given string into a value and a collection of parameters.

Parameters are expected to be separated by semicolons.

Enclosing quotes of parameter values are removed.

For example, the string

.. ref-code-block:: cpp

	multipart/mixed; boundary="MIME_boundary_01234567"

is split into the value

.. ref-code-block:: cpp

	multipart/mixed

and the parameter

.. ref-code-block:: cpp

	boundary -> MIME_boundary_01234567

.. index:: pair: function; splitParameters
.. _doxid-class_poco_1_1_net_1_1_message_header_1af1a5c9177b17e6691ecb501a2e8bd4db:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	splitParameters(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string::const_iterator& begin,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string::const_iterator& end,
		:ref:`NameValueCollection<doxid-class_poco_1_1_net_1_1_name_value_collection>`& parameters
		)

Splits the given string into a collection of parameters.

Parameters are expected to be separated by semicolons.

Enclosing quotes of parameter values are removed.

.. index:: pair: function; quote
.. _doxid-class_poco_1_1_net_1_1_message_header_1a54a24159534eb2122c91fde66af2533e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static
	void
	quote(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` std::string& value,
		std::string& result,
		bool allowSpace = false
		)

Checks if the value must be quoted.

If so, the value is appended to result, enclosed in double-quotes. Otherwise, the value is appended to result as-is.

