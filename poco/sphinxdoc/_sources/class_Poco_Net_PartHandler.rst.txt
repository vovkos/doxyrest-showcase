.. index:: pair: class; Poco::Net::PartHandler
.. _doxid-class_poco_1_1_net_1_1_part_handler:

class Poco::Net::PartHandler
============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

The base class for all part or attachment handlers. :ref:`More...<details-class_poco_1_1_net_1_1_part_handler>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <PartHandler.h>
	
	class PartHandler
	{
	public:
		// methods
	
		virtual
		void
		:ref:`handlePart<doxid-class_poco_1_1_net_1_1_part_handler_1ad1e9b48c2f936ebf3583a8154e21647b>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`MessageHeader<doxid-class_poco_1_1_net_1_1_message_header>`& header,
			std::istream& stream
			) = 0;
	};

	// direct descendants

	class :ref:`NullPartHandler<doxid-class_poco_1_1_net_1_1_null_part_handler>`;
.. _details-class_poco_1_1_net_1_1_part_handler:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

The base class for all part or attachment handlers.

Part handlers are used for handling email parts and attachments in MIME multipart messages, as well as file uploads via HTML forms.

Subclasses must override :ref:`handlePart() <doxid-class_poco_1_1_net_1_1_part_handler_1ad1e9b48c2f936ebf3583a8154e21647b>`.

Construction
------------

.. _doxid-class_poco_1_1_net_1_1_part_handler_1a4d1f04a5c8924242bbe16671d804de17:
.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	~PartHandler()

Destroys the :ref:`PartHandler <doxid-class_poco_1_1_net_1_1_part_handler>`.

Methods
-------

.. index:: pair: function; handlePart
.. _doxid-class_poco_1_1_net_1_1_part_handler_1ad1e9b48c2f936ebf3583a8154e21647b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	handlePart(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`MessageHeader<doxid-class_poco_1_1_net_1_1_message_header>`& header,
		std::istream& stream
		) = 0

Called for every part encountered during the processing of an email message or an uploaded HTML form.

Information about the part can be extracted from the given message header. What information can be obtained from header depends on the kind of part.

The content of the part can be read from stream.

