.. index:: pair: class; Poco::Net::SocketReactor
.. _doxid-class_poco_1_1_net_1_1_socket_reactor:

class Poco::Net::SocketReactor
==============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class, which is part of the Reactor pattern, implements the "Initiation Dispatcher". :ref:`More...<details-class_poco_1_1_net_1_1_socket_reactor>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <SocketReactor.h>
	
	class SocketReactor: public :ref:`Poco::Runnable<doxid-class_poco_1_1_runnable>`
	{
	public:
		// construction
	
		:ref:`SocketReactor<doxid-class_poco_1_1_net_1_1_socket_reactor_1a486e92aff17984752a8e71be7a1b1643>`();
		:ref:`SocketReactor<doxid-class_poco_1_1_net_1_1_socket_reactor_1a79c05df73604e18d00f631d6ec983c1a>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::Timespan<doxid-class_poco_1_1_timespan>`& timeout);

		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_net_1_1_socket_reactor_1a6871c7b7de994a255a5d55ec26b8c178>`();
	
		void
		:ref:`stop<doxid-class_poco_1_1_net_1_1_socket_reactor_1aa63b954aded0ade13d59e60aa8241492>`();
	
		void
		:ref:`wakeUp<doxid-class_poco_1_1_net_1_1_socket_reactor_1aac64524d1d1ee6148262e472768fd710>`();
	
		void
		:ref:`setTimeout<doxid-class_poco_1_1_net_1_1_socket_reactor_1a516e53eef4ac2e0331685359684fd868>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::Timespan<doxid-class_poco_1_1_timespan>`& timeout);
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::Timespan<doxid-class_poco_1_1_timespan>`&
		:ref:`getTimeout<doxid-class_poco_1_1_net_1_1_socket_reactor_1a83f920d100fe1f8c0f0ca3628e10dd8c>`() const;
	
		void
		:ref:`addEventHandler<doxid-class_poco_1_1_net_1_1_socket_reactor_1af6d366d0de6f903709f61a07e21ab508>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::AbstractObserver<doxid-class_poco_1_1_abstract_observer>`& observer
			);
	
		bool
		:ref:`hasEventHandler<doxid-class_poco_1_1_net_1_1_socket_reactor_1abfb5ea7e2378c999495e294bb1a9ef01>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::AbstractObserver<doxid-class_poco_1_1_abstract_observer>`& observer
			);
	
		void
		:ref:`removeEventHandler<doxid-class_poco_1_1_net_1_1_socket_reactor_1a2c239f3cedcfb75af342c231bf7e8f9d>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::AbstractObserver<doxid-class_poco_1_1_abstract_observer>`& observer
			);

	protected:
		// methods
	
		virtual
		void
		:ref:`onTimeout<doxid-class_poco_1_1_net_1_1_socket_reactor_1af776c3f9c6205e278c4c522c98b7da27>`();
	
		virtual
		void
		:ref:`onIdle<doxid-class_poco_1_1_net_1_1_socket_reactor_1a12ff2423749461fce52913012383f923>`();
	
		virtual
		void
		:ref:`onShutdown<doxid-class_poco_1_1_net_1_1_socket_reactor_1a1270a2f51648df02d8f698c311421213>`();
	
		virtual
		void
		:ref:`onBusy<doxid-class_poco_1_1_net_1_1_socket_reactor_1a03c7d88e752c9df493d7d762813afbab>`();
	
		void
		:ref:`dispatch<doxid-class_poco_1_1_net_1_1_socket_reactor_1a93b8e692d6a2e233a3f763855287949d>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
			:ref:`SocketNotification<doxid-class_poco_1_1_net_1_1_socket_notification>`* pNotification
			);
	
		void
		:ref:`dispatch<doxid-class_poco_1_1_net_1_1_socket_reactor_1ad65fd72558fd3ae7a1f420dc0ef5b67f>`(:ref:`SocketNotification<doxid-class_poco_1_1_net_1_1_socket_notification>`* pNotification);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_runnable_1ad89816e81207bf5f1e52d5df860d11d4>`() = 0;

.. _details-class_poco_1_1_net_1_1_socket_reactor:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class, which is part of the Reactor pattern, implements the "Initiation Dispatcher".

The Reactor pattern has been described in the book "Pattern Languages of Program Design" by Jim Coplien and Douglas C. Schmidt (Addison Wesley, 1995).

The Reactor design pattern handles service requests that are delivered concurrently to an application by one or more clients. Each service in an application may consist of several methods and is represented by a separate event handler. The event handler is responsible for servicing service-specific requests. The :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` dispatches the event handlers.

:ref:`Event <doxid-class_poco_1_1_event>` handlers (any class can be an event handler - there is no base class for event handlers) can be registered with the :ref:`addEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1af6d366d0de6f903709f61a07e21ab508>` method and deregistered with the :ref:`removeEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1a2c239f3cedcfb75af342c231bf7e8f9d>` method.

An event handler is always registered for a certain socket, which is given in the call to :ref:`addEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1af6d366d0de6f903709f61a07e21ab508>`. :ref:`Any <doxid-class_poco_1_1_any>` method of the event handler class can be registered to handle the event - the only requirement is that the method takes a pointer to an instance of :ref:`SocketNotification <doxid-class_poco_1_1_net_1_1_socket_notification>` (or a subclass of it) as argument.

Once started, the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` waits for events on the registered sockets, using :ref:`Socket::select() <doxid-class_poco_1_1_net_1_1_socket_1a4b64fe1fc3848e6dec346b49f0708248>`. If an event is detected, the corresponding event handler is invoked. There are five event types (and corresponding notification classes) defined: :ref:`ReadableNotification <doxid-class_poco_1_1_net_1_1_readable_notification>`, :ref:`WritableNotification <doxid-class_poco_1_1_net_1_1_writable_notification>`, :ref:`ErrorNotification <doxid-class_poco_1_1_net_1_1_error_notification>`, :ref:`TimeoutNotification <doxid-class_poco_1_1_net_1_1_timeout_notification>`, :ref:`IdleNotification <doxid-class_poco_1_1_net_1_1_idle_notification>` and :ref:`ShutdownNotification <doxid-class_poco_1_1_net_1_1_shutdown_notification>`.

The :ref:`ReadableNotification <doxid-class_poco_1_1_net_1_1_readable_notification>` will be dispatched if a socket becomes readable. The :ref:`WritableNotification <doxid-class_poco_1_1_net_1_1_writable_notification>` will be dispatched if a socket becomes writable. The :ref:`ErrorNotification <doxid-class_poco_1_1_net_1_1_error_notification>` will be dispatched if there is an error condition on a socket.

If the timeout expires and no event has occurred, a :ref:`TimeoutNotification <doxid-class_poco_1_1_net_1_1_timeout_notification>` will be dispatched to all event handlers registered for it. This is done in the :ref:`onTimeout() <doxid-class_poco_1_1_net_1_1_socket_reactor_1af776c3f9c6205e278c4c522c98b7da27>` method which can be overridden by subclasses to perform custom timeout processing.

If there are no sockets for the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` to pass to :ref:`Socket::select() <doxid-class_poco_1_1_net_1_1_socket_1a4b64fe1fc3848e6dec346b49f0708248>`, an :ref:`IdleNotification <doxid-class_poco_1_1_net_1_1_idle_notification>` will be dispatched to all event handlers registered for it. This is done in the :ref:`onIdle() <doxid-class_poco_1_1_net_1_1_socket_reactor_1a12ff2423749461fce52913012383f923>` method which can be overridden by subclasses to perform custom idle processing. Since :ref:`onIdle() <doxid-class_poco_1_1_net_1_1_socket_reactor_1a12ff2423749461fce52913012383f923>` will be called repeatedly in a loop, it is recommended to do a short sleep or yield in the event handler.

Finally, when the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` is about to shut down (as a result of :ref:`stop() <doxid-class_poco_1_1_net_1_1_socket_reactor_1aa63b954aded0ade13d59e60aa8241492>` being called), it dispatches a :ref:`ShutdownNotification <doxid-class_poco_1_1_net_1_1_shutdown_notification>` to all event handlers. This is done in the :ref:`onShutdown() <doxid-class_poco_1_1_net_1_1_socket_reactor_1a1270a2f51648df02d8f698c311421213>` method which can be overridded by subclasses to perform custom shutdown processing.

The :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` is implemented so that it can run in its own thread. It is also possible to run multiple SocketReactors in parallel, as long as they work on different sockets.

It is safe to call :ref:`addEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1af6d366d0de6f903709f61a07e21ab508>` and :ref:`removeEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1a2c239f3cedcfb75af342c231bf7e8f9d>` from another thread while the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` is running. Also, it is safe to call :ref:`addEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1af6d366d0de6f903709f61a07e21ab508>` and :ref:`removeEventHandler() <doxid-class_poco_1_1_net_1_1_socket_reactor_1a2c239f3cedcfb75af342c231bf7e8f9d>` from event handlers.

Construction
------------

.. index:: pair: function; SocketReactor
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a486e92aff17984752a8e71be7a1b1643:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SocketReactor()

Creates the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>`.

.. index:: pair: function; SocketReactor
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a79c05df73604e18d00f631d6ec983c1a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	SocketReactor(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::Timespan<doxid-class_poco_1_1_timespan>`& timeout)

Creates the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>`, using the given timeout.

Methods
-------

.. index:: pair: function; run
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a6871c7b7de994a255a5d55ec26b8c178:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	run()

Runs the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>`.

The reactor will run until :ref:`stop() <doxid-class_poco_1_1_net_1_1_socket_reactor_1aa63b954aded0ade13d59e60aa8241492>` is called (in a separate thread).

.. index:: pair: function; stop
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1aa63b954aded0ade13d59e60aa8241492:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	stop()

Stops the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>`.

The reactor will be stopped when the next event (including a timeout event) occurs.

.. index:: pair: function; wakeUp
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1aac64524d1d1ee6148262e472768fd710:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	wakeUp()

Wakes up idle reactor.

.. index:: pair: function; setTimeout
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a516e53eef4ac2e0331685359684fd868:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	setTimeout(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::Timespan<doxid-class_poco_1_1_timespan>`& timeout)

Sets the timeout.

If no other event occurs for the given timeout interval, a timeout event is sent to all event listeners.

The default timeout is 250 milliseconds;

The timeout is passed to the :ref:`Socket::select() <doxid-class_poco_1_1_net_1_1_socket_1a4b64fe1fc3848e6dec346b49f0708248>` method.

.. index:: pair: function; getTimeout
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a83f920d100fe1f8c0f0ca3628e10dd8c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::Timespan<doxid-class_poco_1_1_timespan>`&
	getTimeout() const

Returns the timeout.

.. index:: pair: function; addEventHandler
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1af6d366d0de6f903709f61a07e21ab508:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	addEventHandler(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::AbstractObserver<doxid-class_poco_1_1_abstract_observer>`& observer
		)

Registers an event handler with the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>`.

Usage:

.. ref-code-block:: cpp

	Poco::Observer<MyEventHandler, SocketNotification> obs(*this, &MyEventHandler::handleMyEvent);
	reactor.addEventHandler(obs);

.. index:: pair: function; hasEventHandler
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1abfb5ea7e2378c999495e294bb1a9ef01:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool
	hasEventHandler(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::AbstractObserver<doxid-class_poco_1_1_abstract_observer>`& observer
		)

Returns true if the observer is registered with :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` for the given socket.

.. index:: pair: function; removeEventHandler
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a2c239f3cedcfb75af342c231bf7e8f9d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	removeEventHandler(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Poco::AbstractObserver<doxid-class_poco_1_1_abstract_observer>`& observer
		)

Unregisters an event handler with the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>`.

Usage:

.. ref-code-block:: cpp

	Poco::Observer<MyEventHandler, SocketNotification> obs(*this, &MyEventHandler::handleMyEvent);
	reactor.removeEventHandler(obs);

.. index:: pair: function; onTimeout
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1af776c3f9c6205e278c4c522c98b7da27:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	onTimeout()

Called if the timeout expires and no other events are available.

Can be overridden by subclasses. The default implementation dispatches the :ref:`TimeoutNotification <doxid-class_poco_1_1_net_1_1_timeout_notification>` and thus should be called by overriding implementations.

.. index:: pair: function; onIdle
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a12ff2423749461fce52913012383f923:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	onIdle()

Called if no sockets are available to call select() on.

Can be overridden by subclasses. The default implementation dispatches the :ref:`IdleNotification <doxid-class_poco_1_1_net_1_1_idle_notification>` and thus should be called by overriding implementations.

.. index:: pair: function; onShutdown
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a1270a2f51648df02d8f698c311421213:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	onShutdown()

Called when the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` is about to terminate.

Can be overridden by subclasses. The default implementation dispatches the :ref:`ShutdownNotification <doxid-class_poco_1_1_net_1_1_shutdown_notification>` and thus should be called by overriding implementations.

.. index:: pair: function; onBusy
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a03c7d88e752c9df493d7d762813afbab:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	onBusy()

Called when the :ref:`SocketReactor <doxid-class_poco_1_1_net_1_1_socket_reactor>` is busy and at least one notification has been dispatched.

Can be overridden by subclasses to perform additional periodic tasks. The default implementation does nothing.

.. index:: pair: function; dispatch
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1a93b8e692d6a2e233a3f763855287949d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	dispatch(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`Socket<doxid-class_poco_1_1_net_1_1_socket>`& socket,
		:ref:`SocketNotification<doxid-class_poco_1_1_net_1_1_socket_notification>`* pNotification
		)

Dispatches the given notification to all observers registered for the given socket.

.. index:: pair: function; dispatch
.. _doxid-class_poco_1_1_net_1_1_socket_reactor_1ad65fd72558fd3ae7a1f420dc0ef5b67f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	dispatch(:ref:`SocketNotification<doxid-class_poco_1_1_net_1_1_socket_notification>`* pNotification)

Dispatches the given notification to all observers.

