.. index:: pair: class; Poco::ThreadLocal
.. _doxid-class_poco_1_1_thread_local:

template class Poco::ThreadLocal
================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This template is used to declare type safe thread local variables. :ref:`More...<details-class_poco_1_1_thread_local>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <ThreadLocal.h>
	
	template <class C>
	class ThreadLocal
	{
	public:
		// methods
	
		C*
		:target:`operator-><doxid-class_poco_1_1_thread_local_1ade11e777f007bab59605823c98936e34>`();
	
		C&
		:ref:`operator*<doxid-class_poco_1_1_thread_local_1a5a5d5b81a53f5f3766931872d6a08bea>`();
	
		C&
		:ref:`get<doxid-class_poco_1_1_thread_local_1a5eba6068a9fbebc7dd68d081e426ed1e>`();
	};
.. _details-class_poco_1_1_thread_local:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This template is used to declare type safe thread local variables.

It can basically be used like a smart pointer class with the special feature that it references a different object in every thread. The underlying object will be created when it is referenced for the first time. See the :ref:`NestedDiagnosticContext <doxid-class_poco_1_1_nested_diagnostic_context>` class for an example how to use this template. Every thread only has access to its own thread local data. There is no way for a thread to access another thread's local data.

Methods
-------

.. index:: pair: function; operator*
.. _doxid-class_poco_1_1_thread_local_1a5a5d5b81a53f5f3766931872d6a08bea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	C&
	operator*()

"Dereferences" the smart pointer and returns a reference to the underlying data object.

The reference can be used to modify the object.

.. index:: pair: function; get
.. _doxid-class_poco_1_1_thread_local_1a5eba6068a9fbebc7dd68d081e426ed1e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	C&
	get()

Returns a reference to the underlying data object.

The reference can be used to modify the object.

