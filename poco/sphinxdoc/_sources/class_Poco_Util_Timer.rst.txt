.. index:: pair: class; Poco::Util::Timer
.. _doxid-class_poco_1_1_util_1_1_timer:

class Poco::Util::Timer
=======================

.. toctree::
	:hidden:

Overview
~~~~~~~~

A :ref:`Timer <doxid-class_poco_1_1_util_1_1_timer>` allows to schedule tasks (:ref:`TimerTask <doxid-class_poco_1_1_util_1_1_timer_task>` objects) for future execution in a background thread. :ref:`More...<details-class_poco_1_1_util_1_1_timer>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <Timer.h>
	
	class Timer: protected :ref:`Poco::Runnable<doxid-class_poco_1_1_runnable>`
	{
	public:
		// construction
	
		:ref:`Timer<doxid-class_poco_1_1_util_1_1_timer_1ae64d267b757047ab35ed6848018f6932>`();
		:ref:`Timer<doxid-class_poco_1_1_util_1_1_timer_1ae853ff389e4f059a2ff1f6fc817aabbb>`(:ref:`Poco::Thread::Priority<doxid-class_poco_1_1_thread_1a4c86ded71a250e740cb3a448f112f1e3>` priority);

		// methods
	
		void
		:ref:`cancel<doxid-class_poco_1_1_util_1_1_timer_1a70e04e3132f594b8fc9fa19587032d46>`(bool wait = false);
	
		void
		:ref:`schedule<doxid-class_poco_1_1_util_1_1_timer_1a48317d645baf9d992e6e1810c106d7ea>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			:ref:`Poco::Timestamp<doxid-class_poco_1_1_timestamp>` time
			);
	
		void
		:ref:`schedule<doxid-class_poco_1_1_util_1_1_timer_1a42411e7d356bd277f2d6b07fd7b18d22>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			:ref:`Poco::Clock<doxid-class_poco_1_1_clock>` clock
			);
	
		void
		:ref:`schedule<doxid-class_poco_1_1_util_1_1_timer_1aa041f9f45e80ad8f23b640870abe435e>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			long delay,
			long interval
			);
	
		void
		:ref:`schedule<doxid-class_poco_1_1_util_1_1_timer_1a88b71b94f7afe1186850a76eafaca3d7>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			:ref:`Poco::Timestamp<doxid-class_poco_1_1_timestamp>` time,
			long interval
			);
	
		void
		:ref:`schedule<doxid-class_poco_1_1_util_1_1_timer_1ac0bbb9561efe687676d82b1c24f5552b>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			:ref:`Poco::Clock<doxid-class_poco_1_1_clock>` clock,
			long interval
			);
	
		void
		:ref:`scheduleAtFixedRate<doxid-class_poco_1_1_util_1_1_timer_1ae6efc192df0be5dc0d601b9ade246b3e>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			long delay,
			long interval
			);
	
		void
		:ref:`scheduleAtFixedRate<doxid-class_poco_1_1_util_1_1_timer_1ab59186c198484ea43f1b793f16515308>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			:ref:`Poco::Timestamp<doxid-class_poco_1_1_timestamp>` time,
			long interval
			);
	
		void
		:ref:`scheduleAtFixedRate<doxid-class_poco_1_1_util_1_1_timer_1afb9de0c28698ab48166a3cc822189425>`(
			:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
			:ref:`Poco::Clock<doxid-class_poco_1_1_clock>` clock,
			long interval
			);

	protected:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_util_1_1_timer_1a4c199f4f0772d8d9f5283aa7d55a4ab7>`();
	
		static
		void
		:target:`validateTask<doxid-class_poco_1_1_util_1_1_timer_1a8876c5040b38956a321c6cf2d49b772d>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>`& pTask);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// methods
	
		virtual
		void
		:ref:`run<doxid-class_poco_1_1_runnable_1ad89816e81207bf5f1e52d5df860d11d4>`() = 0;

.. _details-class_poco_1_1_util_1_1_timer:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A :ref:`Timer <doxid-class_poco_1_1_util_1_1_timer>` allows to schedule tasks (:ref:`TimerTask <doxid-class_poco_1_1_util_1_1_timer_task>` objects) for future execution in a background thread.

Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals.

The :ref:`Timer <doxid-class_poco_1_1_util_1_1_timer>` object creates a thread that executes all scheduled tasks sequentially. Therefore, tasks should complete their work as quickly as possible, otherwise subsequent tasks may be delayed.

:ref:`Timer <doxid-class_poco_1_1_util_1_1_timer>` is save for multithreaded use - multiple threads can schedule new tasks simultaneously.

Acknowledgement: The interface of this class has been inspired by the java.util.Timer class from Java 1.3.

Construction
------------

.. index:: pair: function; Timer
.. _doxid-class_poco_1_1_util_1_1_timer_1ae64d267b757047ab35ed6848018f6932:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Timer()

Creates the :ref:`Timer <doxid-class_poco_1_1_util_1_1_timer>`.

.. index:: pair: function; Timer
.. _doxid-class_poco_1_1_util_1_1_timer_1ae853ff389e4f059a2ff1f6fc817aabbb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Timer(:ref:`Poco::Thread::Priority<doxid-class_poco_1_1_thread_1a4c86ded71a250e740cb3a448f112f1e3>` priority)

Creates the :ref:`Timer <doxid-class_poco_1_1_util_1_1_timer>`, using a timer thread with the given priority.

Methods
-------

.. index:: pair: function; cancel
.. _doxid-class_poco_1_1_util_1_1_timer_1a70e04e3132f594b8fc9fa19587032d46:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	cancel(bool wait = false)

Cancels all pending tasks.

If a task is currently running, it is allowed to finish.

:ref:`Task <doxid-class_poco_1_1_task>` cancellation is done asynchronously. If wait is false, :ref:`cancel() <doxid-class_poco_1_1_util_1_1_timer_1a70e04e3132f594b8fc9fa19587032d46>` returns immediately and the task queue will be purged as soon as the currently running task finishes. If wait is true, waits until the queue has been purged.

.. index:: pair: function; schedule
.. _doxid-class_poco_1_1_util_1_1_timer_1a48317d645baf9d992e6e1810c106d7ea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	schedule(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		:ref:`Poco::Timestamp<doxid-class_poco_1_1_timestamp>` time
		)

Schedules a task for execution at the specified time.

If the time lies in the past, the task is executed immediately.

Note: the relative time the task will be executed won't change if the system's time changes. If the given time is 10 seconds in the future at the point :ref:`schedule() <doxid-class_poco_1_1_util_1_1_timer_1a48317d645baf9d992e6e1810c106d7ea>` is called, the task will be executed 10 seconds later, even if the system time changes in between.

.. index:: pair: function; schedule
.. _doxid-class_poco_1_1_util_1_1_timer_1a42411e7d356bd277f2d6b07fd7b18d22:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	schedule(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		:ref:`Poco::Clock<doxid-class_poco_1_1_clock>` clock
		)

Schedules a task for execution at the specified time.

If the time lies in the past, the task is executed immediately.

.. index:: pair: function; schedule
.. _doxid-class_poco_1_1_util_1_1_timer_1aa041f9f45e80ad8f23b640870abe435e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	schedule(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		long delay,
		long interval
		)

Schedules a task for periodic execution.

The task is first executed after the given delay. Subsequently, the task is executed periodically with the given interval in milliseconds between invocations.

.. index:: pair: function; schedule
.. _doxid-class_poco_1_1_util_1_1_timer_1a88b71b94f7afe1186850a76eafaca3d7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	schedule(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		:ref:`Poco::Timestamp<doxid-class_poco_1_1_timestamp>` time,
		long interval
		)

Schedules a task for periodic execution.

The task is first executed at the given time. Subsequently, the task is executed periodically with the given interval in milliseconds between invocations.

Note: the relative time the task will be executed won't change if the system's time changes. If the given time is 10 seconds in the future at the point :ref:`schedule() <doxid-class_poco_1_1_util_1_1_timer_1a48317d645baf9d992e6e1810c106d7ea>` is called, the task will be executed 10 seconds later, even if the system time changes in between.

.. index:: pair: function; schedule
.. _doxid-class_poco_1_1_util_1_1_timer_1ac0bbb9561efe687676d82b1c24f5552b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	schedule(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		:ref:`Poco::Clock<doxid-class_poco_1_1_clock>` clock,
		long interval
		)

Schedules a task for periodic execution.

The task is first executed at the given time. Subsequently, the task is executed periodically with the given interval in milliseconds between invocations.

.. index:: pair: function; scheduleAtFixedRate
.. _doxid-class_poco_1_1_util_1_1_timer_1ae6efc192df0be5dc0d601b9ade246b3e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	scheduleAtFixedRate(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		long delay,
		long interval
		)

Schedules a task for periodic execution at a fixed rate.

The task is first executed after the given delay. Subsequently, the task is executed periodically every number of milliseconds specified by interval.

If task execution takes longer than the given interval, further executions are delayed.

.. index:: pair: function; scheduleAtFixedRate
.. _doxid-class_poco_1_1_util_1_1_timer_1ab59186c198484ea43f1b793f16515308:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	scheduleAtFixedRate(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		:ref:`Poco::Timestamp<doxid-class_poco_1_1_timestamp>` time,
		long interval
		)

Schedules a task for periodic execution at a fixed rate.

The task is first executed at the given time. Subsequently, the task is executed periodically every number of milliseconds specified by interval.

If task execution takes longer than the given interval, further executions are delayed.

Note: the relative time the task will be executed won't change if the system's time changes. If the given time is 10 seconds in the future at the point :ref:`scheduleAtFixedRate() <doxid-class_poco_1_1_util_1_1_timer_1ae6efc192df0be5dc0d601b9ade246b3e>` is called, the task will be executed 10 seconds later, even if the system time changes in between.

.. index:: pair: function; scheduleAtFixedRate
.. _doxid-class_poco_1_1_util_1_1_timer_1afb9de0c28698ab48166a3cc822189425:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void
	scheduleAtFixedRate(
		:ref:`TimerTask::Ptr<doxid-class_poco_1_1_util_1_1_timer_task_1ab7798d264e2788719dfe35f1b2d08d81>` pTask,
		:ref:`Poco::Clock<doxid-class_poco_1_1_clock>` clock,
		long interval
		)

Schedules a task for periodic execution at a fixed rate.

The task is first executed at the given time. Subsequently, the task is executed periodically every number of milliseconds specified by interval.

If task execution takes longer than the given interval, further executions are delayed.

.. index:: pair: function; run
.. _doxid-class_poco_1_1_util_1_1_timer_1a4c199f4f0772d8d9f5283aa7d55a4ab7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	run()

Do whatever the thread needs to do.

Must be overridden by subclasses.

