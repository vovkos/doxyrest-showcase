.. index:: pair: class; Poco::XML::AbstractNode
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node:

class Poco::XML::AbstractNode
=============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`AbstractNode <doxid-class_poco_1_1_x_m_l_1_1_abstract_node>` provides a basic implementation of the :ref:`Node <doxid-class_poco_1_1_x_m_l_1_1_node>` interface for all types of nodes that do not contain other nodes. :ref:`More...<details-class_poco_1_1_x_m_l_1_1_abstract_node>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <AbstractNode.h>
	
	class AbstractNode: public :ref:`Poco::XML::Node<doxid-class_poco_1_1_x_m_l_1_1_node>`
	{
	public:
		// methods
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`nodeName<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a19a18ccbfab094d220e02a0a7b05c5f1>`() const;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`getNodeValue<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2320e9f0b215213181d14bb484a09c1d>`() const;
	
		virtual
		void
		:ref:`setNodeValue<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a587111866fb3740df9b7cd107361e495>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& value);
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`parentNode<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a203d3b4e7ce6d2f9e2ee2386be3f95ac>`() const;
	
		virtual
		:ref:`NodeList<doxid-class_poco_1_1_x_m_l_1_1_node_list>`*
		:ref:`childNodes<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a7e01215e23ce0c12d56f1afb77bd82c3>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`firstChild<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9fee77a773c533a396b0384085c0722c>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`lastChild<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1aea04bf40f777005bdaba137aed6f6cb2>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`previousSibling<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a6693236833c9cdeb5884e7ce15d58a70>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`nextSibling<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ad569fe4d7a341ea7617d7e7156a9bf6a>`() const;
	
		virtual
		:ref:`NamedNodeMap<doxid-class_poco_1_1_x_m_l_1_1_named_node_map>`*
		:ref:`attributes<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2c9ff31b1dc989863b7b64b54aa30c16>`() const;
	
		virtual
		:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`*
		:ref:`ownerDocument<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a469359e106fb6f11367b069b1ad75006>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`insertBefore<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a4ad07523bd87abe3ac8b891f2fa5b9fc>`(
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild,
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* refChild
			);
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`replaceChild<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9fa35c607eb2b2623da69e2581949ece>`(
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild,
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* oldChild
			);
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`removeChild<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a03c71325d537534055a8769c48adb5b9>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* oldChild);
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`appendChild<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a1bd2fbc449c9a9c27e70142d71e5a422>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild);
	
		virtual
		bool
		:ref:`hasChildNodes<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1abe8a1ce283a59333a1c272cafe68dbe5>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`cloneNode<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a8bea57f25563d16844f2909da083ceda>`(bool deep) const;
	
		virtual
		void
		:ref:`normalize<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a0fbcc44acbff9b146285d325af4f6d18>`();
	
		virtual
		bool
		:ref:`isSupported<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a77f735650ea63ab77fd4632a25153a78>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& feature,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& version
			) const;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`namespaceURI<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a14e4ccc1ac9a1d51617317a00c1ec3f3>`() const;
	
		virtual
		:ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`
		:ref:`prefix<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2d2cee48a32387cc72147c57bbf284e8>`() const;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`localName<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ab164294e80c668bad3b437ead7ea00aa>`() const;
	
		virtual
		bool
		:ref:`hasAttributes<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1afa550d469075a7f3e4070eebf5035ba9>`() const;
	
		virtual
		void
		:ref:`addEventListener<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9db60a2af8990e7479f403949ecc3493>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& type,
			:ref:`EventListener<doxid-class_poco_1_1_x_m_l_1_1_event_listener>`* listener,
			bool useCapture
			);
	
		virtual
		void
		:ref:`removeEventListener<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1aecc0015c3cb9e7e4c654275a3c3567a8>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& type,
			:ref:`EventListener<doxid-class_poco_1_1_x_m_l_1_1_event_listener>`* listener,
			bool useCapture
			);
	
		virtual
		bool
		:ref:`dispatchEvent<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a17557f0910d07b6824dfcb6bd0729d37>`(:ref:`Event<doxid-class_poco_1_1_x_m_l_1_1_event>`* evt);
	
		virtual
		:ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`
		:ref:`innerText<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a7b807abfb8d5fae1e32002b1fcafe292>`() const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`getNodeByPath<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a7d3947b6a01240b9d9c0e764bf5a6378>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& path) const;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`getNodeByPathNS<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2ac0c0b11ffe22285e6d6b459fcbed7f>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& path,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`NSMap<doxid-class_poco_1_1_x_m_l_1_1_node_1a2815ffa9bf91f10808179e39a45a73b4>`& nsMap
			) const;
	
		virtual
		void
		:ref:`autoRelease<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ae938ba6d8db654a02faff6ffb607a943>`();

	protected:
		// fields
	
		static :ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>` :target:`EMPTY_STRING<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a32822bd5442ba401f73a277f416cc10c>`;

		// construction
	
		:target:`AbstractNode<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a44cddb4b6bfa3725fa32ebcf284e830e>`(:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`* pOwnerDocument);
	
		:target:`AbstractNode<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a96bcbe807545303d49a73fac214aba8c>`(
			:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`* pOwnerDocument,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` AbstractNode& node
			);

		// methods
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:target:`copyNode<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ae0a8579dd6ecfed5ff9c3f3daec40d90>`(
			bool deep,
			:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`* pOwnerDocument
			) const = 0;
	
		virtual
		bool
		:target:`events<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a20e1e1da5ed86f9b43e01430f500ac6f>`() const;
	
		virtual
		bool
		:target:`eventsSuspended<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a5b900cb156496cbf88717b60756de818>`() const;
	
		void
		:target:`captureEvent<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a70f7c1b4f6eb8e1c0a3f073f6bb72f9b>`(:ref:`Event<doxid-class_poco_1_1_x_m_l_1_1_event>`* evt);
	
		void
		:target:`bubbleEvent<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9494bdd8ab2ea0c3907291a542d1337c>`(:ref:`Event<doxid-class_poco_1_1_x_m_l_1_1_event>`* evt);
	
		void
		:target:`dispatchSubtreeModified<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a13837c6558eb22a879d42fcc4e9a0484>`();
	
		void
		:target:`dispatchNodeInserted<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ac7c66d353f439d67f38f309f6b86f2c8>`();
	
		void
		:target:`dispatchNodeRemoved<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a68203f711725a2529ba6a7e27d8ff898>`();
	
		virtual
		void
		:target:`dispatchNodeRemovedFromDocument<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a65d3d134b925788010d26b20e15230e9>`();
	
		virtual
		void
		:target:`dispatchNodeInsertedIntoDocument<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ac99f7a8c9eae5a7b202cf7ca4615e716>`();
	
		void
		:target:`dispatchAttrModified<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ab68c921a7cc9e537aad6e03b7b22cc8c>`(
			:ref:`Attr<doxid-class_poco_1_1_x_m_l_1_1_attr>`* pAttr,
			:ref:`MutationEvent::AttrChangeType<doxid-class_poco_1_1_x_m_l_1_1_mutation_event_1ac47ad8e04f44a21d76f2859da5b302c9>` changeType,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& prevValue,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& newValue
			);
	
		void
		:target:`dispatchCharacterDataModified<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ac032ead6276c609d722aff18abecf56d>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& prevValue,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& newValue
			);
	
		void
		:target:`setOwnerDocument<doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2f9a23d820edff95f06d5337a17792f0>`(:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`* pOwnerDocument);
	};

	// direct descendants

	class :ref:`AbstractContainerNode<doxid-class_poco_1_1_x_m_l_1_1_abstract_container_node>`;
	class :ref:`Attr<doxid-class_poco_1_1_x_m_l_1_1_attr>`;
	class :ref:`CharacterData<doxid-class_poco_1_1_x_m_l_1_1_character_data>`;
	class :ref:`EntityReference<doxid-class_poco_1_1_x_m_l_1_1_entity_reference>`;
	class :ref:`Notation<doxid-class_poco_1_1_x_m_l_1_1_notation>`;
	class :ref:`ProcessingInstruction<doxid-class_poco_1_1_x_m_l_1_1_processing_instruction>`;

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		typedef :ref:`Poco::XML::NamespaceSupport<doxid-class_poco_1_1_x_m_l_1_1_namespace_support>` :ref:`NSMap<doxid-class_poco_1_1_x_m_l_1_1_node_1a2815ffa9bf91f10808179e39a45a73b4>`;

		// enums
	
		enum
		{
		    :ref:`ELEMENT_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a5b4b9080ef8e87a5045d87fba6a75c71>`                = 1,
		    :ref:`ATTRIBUTE_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62ab527c31e6176280ebec5640f3871f1c7>`,
		    :ref:`TEXT_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62afa7c7a18abfa62c770887481f08bc7ed>`,
		    :ref:`CDATA_SECTION_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a13d9c451e861e5b39b7782674b91dbba>`,
		    :ref:`ENTITY_REFERENCE_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62aadc1cd84b6f0409432e733d11a61c49b>`,
		    :ref:`ENTITY_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62ab04b85a64716ceaa4d51a23125bfc290>`,
		    :ref:`PROCESSING_INSTRUCTION_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62ad95fca1e5b8f12c9354376565c06bd2b>`,
		    :ref:`COMMENT_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a0de725c9df1121adc76c6b4b78048dd1>`,
		    :ref:`DOCUMENT_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a370f3a35dffebdfea68f23e5d1ebc9cb>`,
		    :ref:`DOCUMENT_TYPE_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a75c909edfdad89af6f6be2abe77d40f1>`,
		    :ref:`DOCUMENT_FRAGMENT_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a228f952f9f1cff5d28bdf62f1477c9f0>`,
		    :ref:`NOTATION_NODE<doxid-class_poco_1_1_x_m_l_1_1_node_1a32d960060c0e1e16773d06ad14b2ee62a00773890f6dc37f69a93b83d39209d86>`,
		};

		// methods
	
		void
		:ref:`duplicate<doxid-class_poco_1_1_x_m_l_1_1_d_o_m_object_1a492091c0d6748efda278df55b5b2311b>`() const;
	
		void
		:ref:`release<doxid-class_poco_1_1_x_m_l_1_1_d_o_m_object_1a59fcc225a5bcf0fcf7e49d06ecba249a>`() const;
	
		virtual
		void
		:ref:`autoRelease<doxid-class_poco_1_1_x_m_l_1_1_d_o_m_object_1a39f0ede64e7f87d462b79dd53d844c6c>`() = 0;
	
		virtual
		void
		:ref:`addEventListener<doxid-class_poco_1_1_x_m_l_1_1_event_target_1aed316ca12b247dfd31d052b186422695>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& type,
			:ref:`EventListener<doxid-class_poco_1_1_x_m_l_1_1_event_listener>`* listener,
			bool useCapture
			) = 0;
	
		virtual
		void
		:ref:`removeEventListener<doxid-class_poco_1_1_x_m_l_1_1_event_target_1adc6bca1251e799e38f0d152c58ae38ef>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& type,
			:ref:`EventListener<doxid-class_poco_1_1_x_m_l_1_1_event_listener>`* listener,
			bool useCapture
			) = 0;
	
		virtual
		bool
		:ref:`dispatchEvent<doxid-class_poco_1_1_x_m_l_1_1_event_target_1a69cdde398020d2a08d2b0b969fe9ad73>`(:ref:`Event<doxid-class_poco_1_1_x_m_l_1_1_event>`* evt) = 0;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`nodeName<doxid-class_poco_1_1_x_m_l_1_1_node_1afe41b9b2a81c5c8fcb7a05fed118b2c1>`() const = 0;
	
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`nodeValue<doxid-class_poco_1_1_x_m_l_1_1_node_1a474b8b53000fae0e2db78da47762c161>`() const;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`getNodeValue<doxid-class_poco_1_1_x_m_l_1_1_node_1a150740c9a922d383e173c1a64f3a2a05>`() const = 0;
	
		virtual
		void
		:ref:`setNodeValue<doxid-class_poco_1_1_x_m_l_1_1_node_1a713a6455bafed955dbe42853d338d5f3>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& value) = 0;
	
		virtual
		unsigned short
		:ref:`nodeType<doxid-class_poco_1_1_x_m_l_1_1_node_1ac001e1819b1eb928ca1ae6f6f90e1159>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`parentNode<doxid-class_poco_1_1_x_m_l_1_1_node_1a0707453450b575d6df379c44d1abdb30>`() const = 0;
	
		virtual
		:ref:`NodeList<doxid-class_poco_1_1_x_m_l_1_1_node_list>`*
		:ref:`childNodes<doxid-class_poco_1_1_x_m_l_1_1_node_1a4d282264c5778f7566499340fee330e4>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`firstChild<doxid-class_poco_1_1_x_m_l_1_1_node_1a9258a226b0ad962387aaf21cc4c516b0>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`lastChild<doxid-class_poco_1_1_x_m_l_1_1_node_1a9a07a3b535bdb935fcc5b3c8cbd81e55>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`previousSibling<doxid-class_poco_1_1_x_m_l_1_1_node_1a0634905c906a96d6314422ebd2c793d4>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`nextSibling<doxid-class_poco_1_1_x_m_l_1_1_node_1ac76340e69ae650c1f3c45f119a3d34dc>`() const = 0;
	
		virtual
		:ref:`NamedNodeMap<doxid-class_poco_1_1_x_m_l_1_1_named_node_map>`*
		:ref:`attributes<doxid-class_poco_1_1_x_m_l_1_1_node_1aec3394aea7bd471986fc6e967659bfa0>`() const = 0;
	
		virtual
		:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`*
		:ref:`ownerDocument<doxid-class_poco_1_1_x_m_l_1_1_node_1a1522e6d5786ff24c4c4986a2713e0a35>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`insertBefore<doxid-class_poco_1_1_x_m_l_1_1_node_1a1a4133eeaf09ba8171d672f63bdffa9f>`(
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild,
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* refChild
			) = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`replaceChild<doxid-class_poco_1_1_x_m_l_1_1_node_1a4326e04cb2664c0d67fc9e09b99cdd53>`(
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild,
			:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* oldChild
			) = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`removeChild<doxid-class_poco_1_1_x_m_l_1_1_node_1a21b44b66ce48ca314061a30386fe853d>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* oldChild) = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`appendChild<doxid-class_poco_1_1_x_m_l_1_1_node_1a2e28b02eecaf472ff0071bd15fae456b>`(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild) = 0;
	
		virtual
		bool
		:ref:`hasChildNodes<doxid-class_poco_1_1_x_m_l_1_1_node_1af716c1395e96eaaae6e11a9625fc033d>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`cloneNode<doxid-class_poco_1_1_x_m_l_1_1_node_1a19755cabf7c258b02ca6a77cbc1b9644>`(bool deep) const = 0;
	
		virtual
		void
		:ref:`normalize<doxid-class_poco_1_1_x_m_l_1_1_node_1ac525fd79ed7beb885e77aeab3ca78206>`() = 0;
	
		virtual
		bool
		:ref:`isSupported<doxid-class_poco_1_1_x_m_l_1_1_node_1a3c3533c41e505e7206394353b946bef9>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& feature,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& version
			) const = 0;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`namespaceURI<doxid-class_poco_1_1_x_m_l_1_1_node_1a37c21fe48c5c1182e8ccebc64a333df4>`() const = 0;
	
		virtual
		:ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`
		:ref:`prefix<doxid-class_poco_1_1_x_m_l_1_1_node_1a915538dcfeb2452e663d5104b5f9f127>`() const = 0;
	
		virtual
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
		:ref:`localName<doxid-class_poco_1_1_x_m_l_1_1_node_1a8a2f7100a551d0255d1cbe45c6ad5c19>`() const = 0;
	
		virtual
		bool
		:ref:`hasAttributes<doxid-class_poco_1_1_x_m_l_1_1_node_1a0fa84661e504d460b4b64959f73fa191>`() const = 0;
	
		virtual
		:ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`
		:ref:`innerText<doxid-class_poco_1_1_x_m_l_1_1_node_1ac4ba8b4a41470232f41efa78ee8e3754>`() const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`getNodeByPath<doxid-class_poco_1_1_x_m_l_1_1_node_1adb003087b290d656baa56f750f82b441>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& path) const = 0;
	
		virtual
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
		:ref:`getNodeByPathNS<doxid-class_poco_1_1_x_m_l_1_1_node_1a2ab2b32e70b3d6633bb60e60b85f10d7>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& path,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`NSMap<doxid-class_poco_1_1_x_m_l_1_1_node_1a2815ffa9bf91f10808179e39a45a73b4>`& nsMap
			) const = 0;

.. _details-class_poco_1_1_x_m_l_1_1_abstract_node:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`AbstractNode <doxid-class_poco_1_1_x_m_l_1_1_abstract_node>` provides a basic implementation of the :ref:`Node <doxid-class_poco_1_1_x_m_l_1_1_node>` interface for all types of nodes that do not contain other nodes.

Methods
-------

.. index:: pair: function; nodeName
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a19a18ccbfab094d220e02a0a7b05c5f1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
	nodeName() const

Returns the name of this node, depending on its type.

.. index:: pair: function; getNodeValue
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2320e9f0b215213181d14bb484a09c1d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
	getNodeValue() const

Returns the value of this node, depending on its type.

.. index:: pair: function; setNodeValue
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a587111866fb3740df9b7cd107361e495:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	setNodeValue(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& value)

Sets the value of this node.

Throws an exception if the node is read-only.

.. index:: pair: function; parentNode
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a203d3b4e7ce6d2f9e2ee2386be3f95ac:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	parentNode() const

The parent of this node.

All nodes, except :ref:`Attr <doxid-class_poco_1_1_x_m_l_1_1_attr>`, :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>`, :ref:`DocumentFragment <doxid-class_poco_1_1_x_m_l_1_1_document_fragment>`, :ref:`Entity <doxid-class_poco_1_1_x_m_l_1_1_entity>`, and :ref:`Notation <doxid-class_poco_1_1_x_m_l_1_1_notation>` may have a parent. However, if a node has just been created and not yet added to the tree, or if it has been removed from the tree, this is null.

.. index:: pair: function; childNodes
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a7e01215e23ce0c12d56f1afb77bd82c3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`NodeList<doxid-class_poco_1_1_x_m_l_1_1_node_list>`*
	childNodes() const

Returns a :ref:`NodeList <doxid-class_poco_1_1_x_m_l_1_1_node_list>` containing all children of this node.

The returned :ref:`NodeList <doxid-class_poco_1_1_x_m_l_1_1_node_list>` must be released with a call to :ref:`release() <doxid-class_poco_1_1_x_m_l_1_1_d_o_m_object_1a59fcc225a5bcf0fcf7e49d06ecba249a>` when no longer needed.

.. index:: pair: function; firstChild
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9fee77a773c533a396b0384085c0722c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	firstChild() const

Returns the first child of this node.

If there is no such node, this returns null.

.. index:: pair: function; lastChild
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1aea04bf40f777005bdaba137aed6f6cb2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	lastChild() const

Returns the last child of this node.

If there is no such node, this returns null.

.. index:: pair: function; previousSibling
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a6693236833c9cdeb5884e7ce15d58a70:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	previousSibling() const

Returns the node immediately preceding this node.

If there is no such node, this returns null.

.. index:: pair: function; nextSibling
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ad569fe4d7a341ea7617d7e7156a9bf6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	nextSibling() const

Returns the node immediately following this node.

If there is no such node, this returns null.

.. index:: pair: function; attributes
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2c9ff31b1dc989863b7b64b54aa30c16:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`NamedNodeMap<doxid-class_poco_1_1_x_m_l_1_1_named_node_map>`*
	attributes() const

Returns a :ref:`NamedNodeMap <doxid-class_poco_1_1_x_m_l_1_1_named_node_map>` containing the attributes of this node (if it is an :ref:`Element <doxid-class_poco_1_1_x_m_l_1_1_element>`) or null otherwise.

The returned :ref:`NamedNodeMap <doxid-class_poco_1_1_x_m_l_1_1_named_node_map>` must be released with a call to :ref:`release() <doxid-class_poco_1_1_x_m_l_1_1_d_o_m_object_1a59fcc225a5bcf0fcf7e49d06ecba249a>` when no longer needed.

.. index:: pair: function; ownerDocument
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a469359e106fb6f11367b069b1ad75006:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Document<doxid-class_poco_1_1_x_m_l_1_1_document>`*
	ownerDocument() const

Returns the :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` object associated with this node.

This is also the :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` object used to create new nodes. When this node is a :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>`, this is null.

.. index:: pair: function; insertBefore
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a4ad07523bd87abe3ac8b891f2fa5b9fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	insertBefore(
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild,
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* refChild
		)

Inserts the node newChild before the existing child node refChild.

If refChild is null, insert newChild at the end of the list of children. If newChild is a :ref:`DocumentFragment <doxid-class_poco_1_1_x_m_l_1_1_document_fragment>` object, all of its children are inserted in the same order, before refChild. If the newChild is already in the tree, it is first removed.

.. index:: pair: function; replaceChild
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9fa35c607eb2b2623da69e2581949ece:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	replaceChild(
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild,
		:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* oldChild
		)

Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node.

If newChild is a :ref:`DocumentFragment <doxid-class_poco_1_1_x_m_l_1_1_document_fragment>` object, oldChild is replaced by all of the :ref:`DocumentFragment <doxid-class_poco_1_1_x_m_l_1_1_document_fragment>` children, which are inserted in the same order. If the newChild is already in the tree, it is first removed.

.. index:: pair: function; removeChild
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a03c71325d537534055a8769c48adb5b9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	removeChild(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* oldChild)

Removes the child node indicated by oldChild from the list of children and returns it.

.. index:: pair: function; appendChild
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a1bd2fbc449c9a9c27e70142d71e5a422:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	appendChild(:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`* newChild)

Appends the node newChild to the end of the list of children of this node.

If newChild is already in the tree, it is first removed.

.. index:: pair: function; hasChildNodes
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1abe8a1ce283a59333a1c272cafe68dbe5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	hasChildNodes() const

This is a convenience method to allow easy determination of whether a node has any children.

Returns true if the node has any children, false otherwise.

.. index:: pair: function; cloneNode
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a8bea57f25563d16844f2909da083ceda:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	cloneNode(bool deep) const

Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.

The duplicate node has no parent; (parentNode is null.). Cloning an :ref:`Element <doxid-class_poco_1_1_x_m_l_1_1_element>` copies all attributes and their values, including those generated by the :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` processor to represent defaulted attributes, but this method does not copy any text it contains unless it is a deep clone, since the text is contained in a child :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` node. Cloning an Attribute directly, as opposed to be cloned as part of an :ref:`Element <doxid-class_poco_1_1_x_m_l_1_1_element>` cloning operation, returns a specified attribute (specified is true). Cloning any other type of node simply returns a copy of this node. Note that cloning an immutable subtree results in a mutable copy, but the children of an :ref:`EntityReference <doxid-class_poco_1_1_x_m_l_1_1_entity_reference>` clone are readonly. In addition, clones of unspecified :ref:`Attr <doxid-class_poco_1_1_x_m_l_1_1_attr>` nodes are specified. And, cloning :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>`, :ref:`DocumentType <doxid-class_poco_1_1_x_m_l_1_1_document_type>`, :ref:`Entity <doxid-class_poco_1_1_x_m_l_1_1_entity>`, and :ref:`Notation <doxid-class_poco_1_1_x_m_l_1_1_notation>` nodes is implementation dependent.

.. index:: pair: function; normalize
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a0fbcc44acbff9b146285d325af4f6d18:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	normalize()

Puts all :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` nodes in the full depth of the sub-tree underneath this :ref:`Node <doxid-class_poco_1_1_x_m_l_1_1_node>`, including attribute nodes, into a "normal" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` nodes, i.e., there are neither adjacent :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` nodes nor empty :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` nodes.

This can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, and is useful when operations (such as XPointer lookups) that depend on a particular document tree structure are to be used.

Note: In cases where the document contains CDATASections, the normalize operation alone may not be sufficient, since XPointers do not differentiate between :ref:`Text <doxid-class_poco_1_1_x_m_l_1_1_text>` nodes and :ref:`CDATASection <doxid-class_poco_1_1_x_m_l_1_1_c_d_a_t_a_section>` nodes.

.. index:: pair: function; isSupported
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a77f735650ea63ab77fd4632a25153a78:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	isSupported(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& feature,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& version
		) const

Tests whether the DOM implementation implements a specific feature and that feature is supported by this node.

.. index:: pair: function; namespaceURI
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a14e4ccc1ac9a1d51617317a00c1ec3f3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
	namespaceURI() const

Returns the namespace :ref:`URI <doxid-class_poco_1_1_u_r_i>` of the node.

This is not a computed value that is the result of a namespace lookup based on an examination of the namespace declarations in scope. It is merely the namespace :ref:`URI <doxid-class_poco_1_1_u_r_i>` given at creation time.

For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE and nodes created with a DOM Level 1 method, such as createElement from the :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` interface, this is always the empty string.

.. index:: pair: function; prefix
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2d2cee48a32387cc72147c57bbf284e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`
	prefix() const

Returns the namespace prefix from the qualified name of the node.

.. index:: pair: function; localName
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ab164294e80c668bad3b437ead7ea00aa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`&
	localName() const

Returns the local name of the node.

.. index:: pair: function; hasAttributes
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1afa550d469075a7f3e4070eebf5035ba9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	hasAttributes() const

Returns whether this node (if it is an element) has any attributes.

.. index:: pair: function; addEventListener
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a9db60a2af8990e7479f403949ecc3493:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	addEventListener(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& type,
		:ref:`EventListener<doxid-class_poco_1_1_x_m_l_1_1_event_listener>`* listener,
		bool useCapture
		)

This method allows the registration of event listeners on the event target.

If an :ref:`EventListener <doxid-class_poco_1_1_x_m_l_1_1_event_listener>` is added to an :ref:`EventTarget <doxid-class_poco_1_1_x_m_l_1_1_event_target>` while it is processing an event, it will not be triggered by the current actions but may be triggered during a later stage of event flow, such as the bubbling phase. If multiple identical EventListeners are registered on the same :ref:`EventTarget <doxid-class_poco_1_1_x_m_l_1_1_event_target>` with the same parameters the duplicate instances are discarded. They do not cause the :ref:`EventListener <doxid-class_poco_1_1_x_m_l_1_1_event_listener>` to be called twice and since they are discarded they do not need to be removed with the removeEventListener method.

.. index:: pair: function; removeEventListener
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1aecc0015c3cb9e7e4c654275a3c3567a8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	removeEventListener(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& type,
		:ref:`EventListener<doxid-class_poco_1_1_x_m_l_1_1_event_listener>`* listener,
		bool useCapture
		)

This method allows the removal of event listeners from the event target.

If an :ref:`EventListener <doxid-class_poco_1_1_x_m_l_1_1_event_listener>` is removed from an :ref:`EventTarget <doxid-class_poco_1_1_x_m_l_1_1_event_target>` while it is processing an event, it will not be triggered by the current actions. EventListeners can never be invoked after being removed. Calling removeEventListener with arguments which do not identify any currently registered :ref:`EventListener <doxid-class_poco_1_1_x_m_l_1_1_event_listener>` on the :ref:`EventTarget <doxid-class_poco_1_1_x_m_l_1_1_event_target>` has no effect.

.. index:: pair: function; dispatchEvent
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a17557f0910d07b6824dfcb6bd0729d37:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	bool
	dispatchEvent(:ref:`Event<doxid-class_poco_1_1_x_m_l_1_1_event>`* evt)

This method allows the dispatch of events into the implementations event model.

Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation. The target of the event is the :ref:`EventTarget <doxid-class_poco_1_1_x_m_l_1_1_event_target>` on which dispatchEvent is called.

.. index:: pair: function; innerText
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a7b807abfb8d5fae1e32002b1fcafe292:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`
	innerText() const

Returns a string containing the concatenated values of the node and all its child nodes.

This method is not part of the W3C :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` Object Model.

.. index:: pair: function; getNodeByPath
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a7d3947b6a01240b9d9c0e764bf5a6378:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	getNodeByPath(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& path) const

Searches a node (element or attribute) based on a simplified XPath expression.

Only simple XPath expressions are supported. These are the slash notation for specifying paths to elements, and the square bracket expression for finding elements by their index, by attribute value, or finding attributes by names.

The slash at the beginning is optional, the evaluation always starts at this element. A double-slash at the beginning recursively searches the entire subtree for the first element.

Examples:

.. ref-code-block:: cpp

	elem1/elem2/elem3
	/elem1/elem2/elem3
	/elem1/elem2[1]
	/elem1/elem2[@attr1]
	/elem1/elem2[@attr1='value']
	//elem2[@attr1='value']
	//[@attr1='value']

This method is an extension to the W3C :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` Object Model.

.. index:: pair: function; getNodeByPathNS
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1a2ac0c0b11ffe22285e6d6b459fcbed7f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`Node<doxid-class_poco_1_1_x_m_l_1_1_node>`*
	getNodeByPathNS(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& path,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`NSMap<doxid-class_poco_1_1_x_m_l_1_1_node_1a2815ffa9bf91f10808179e39a45a73b4>`& nsMap
		) const

Searches a node (element or attribute) based on a simplified XPath expression.

The given NSMap must contain mappings from namespace prefixes to namespace URIs for all namespace prefixes used in the path expression.

Only simple XPath expressions are supported. These are the slash notation for specifying paths to elements, and the square bracket expression for finding elements by their index, by attribute value, or finding attributes by names.

The slash at the beginning is optional, the evaluation always starts at this element. A double-slash at the beginning recursively searches the entire subtree for the first element.

Examples:

.. ref-code-block:: cpp

	/ns1:elem1/ns2:elem2/ns2:elem3
	/ns1:elem1/ns2:elem2[1]
	/ns1:elem1/ns2:elem2[@attr1]
	/ns1:elem1/ns2:elem2[@attr1='value']
	//ns2:elem2[@ns1:attr1='value']
	//[@ns1:attr1='value']

This method is an extension to the W3C :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` Object Model.

.. index:: pair: function; autoRelease
.. _doxid-class_poco_1_1_x_m_l_1_1_abstract_node_1ae938ba6d8db654a02faff6ffb607a943:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	autoRelease()

Adds the object to an appropriate :ref:`AutoReleasePool <doxid-class_poco_1_1_auto_release_pool>`, which is usually the :ref:`AutoReleasePool <doxid-class_poco_1_1_auto_release_pool>` managed by the :ref:`Document <doxid-class_poco_1_1_x_m_l_1_1_document>` to which this object belongs.

