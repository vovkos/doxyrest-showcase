.. index:: pair: class; Poco::XML::EntityResolver
.. _doxid-class_poco_1_1_x_m_l_1_1_entity_resolver:

class Poco::XML::EntityResolver
===============================

.. toctree::
	:hidden:

Overview
~~~~~~~~

If a SAX application needs to implement customized handling for external entities, it must implement this interface and register an instance with the SAX driver using the setEntityResolver method. :ref:`More...<details-class_poco_1_1_x_m_l_1_1_entity_resolver>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <EntityResolver.h>
	
	class EntityResolver
	{
	public:
		// methods
	
		virtual
		:ref:`InputSource<doxid-class_poco_1_1_x_m_l_1_1_input_source>`*
		:ref:`resolveEntity<doxid-class_poco_1_1_x_m_l_1_1_entity_resolver_1a5664cf889522c95786f8999ffd9d51e5>`(
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`* publicId,
			:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& systemId
			) = 0;
	
		virtual
		void
		:ref:`releaseInputSource<doxid-class_poco_1_1_x_m_l_1_1_entity_resolver_1ab0ebc2597b449d0c7e8b7c69c9f31744>`(:ref:`InputSource<doxid-class_poco_1_1_x_m_l_1_1_input_source>`* pSource) = 0;
	};

	// direct descendants

	class :ref:`DefaultHandler<doxid-class_poco_1_1_x_m_l_1_1_default_handler>`;
	class :ref:`EntityResolverImpl<doxid-class_poco_1_1_x_m_l_1_1_entity_resolver_impl>`;
	class :ref:`XMLFilterImpl<doxid-class_poco_1_1_x_m_l_1_1_x_m_l_filter_impl>`;
.. _details-class_poco_1_1_x_m_l_1_1_entity_resolver:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

If a SAX application needs to implement customized handling for external entities, it must implement this interface and register an instance with the SAX driver using the setEntityResolver method.

The :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` reader will then allow the application to intercept any external entities (including the external DTD subset and external parameter entities, if any) before including them.

Many SAX applications will not need to implement this interface, but it will be especially useful for applications that build :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` documents from databases or other specialised input sources, or for applications that use :ref:`URI <doxid-class_poco_1_1_u_r_i>` types other than URLs.

The application can also use this interface to redirect system identifiers to local URIs or to look up replacements in a catalog (possibly by using the public identifier).

Methods
-------

.. index:: pair: function; resolveEntity
.. _doxid-class_poco_1_1_x_m_l_1_1_entity_resolver_1a5664cf889522c95786f8999ffd9d51e5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	:ref:`InputSource<doxid-class_poco_1_1_x_m_l_1_1_input_source>`*
	resolveEntity(
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`* publicId,
		:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` :ref:`XMLString<doxid-namespace_poco_1_1_x_m_l_1a288dd5005eea5f995c0169e0688593ae>`& systemId
		) = 0

Allow the application to resolve external entities.

The parser will call this method before opening any external entity except the top-level document entity. Such entities include the external DTD subset and external parameter entities referenced within the DTD (in either case, only if the parser reads external parameter entities), and external general entities referenced within the document element (if the parser reads external general entities). The application may request that the parser locate the entity itself, that it use an alternative :ref:`URI <doxid-class_poco_1_1_u_r_i>`, or that it use data provided by the application (as a character or byte input stream).

Application writers can use this method to redirect external system identifiers to secure and/or local URIs, to look up public identifiers in a catalogue, or to read an entity from a database or other input source (including, for example, a dialog box). Neither :ref:`XML <doxid-namespace_poco_1_1_x_m_l>` nor SAX specifies a preferred policy for using public or system IDs to resolve resources. However, SAX specifies how to interpret any :ref:`InputSource <doxid-class_poco_1_1_x_m_l_1_1_input_source>` returned by this method, and that if none is returned, then the system ID will be dereferenced as a URL.

If the system identifier is a URL, the SAX parser must resolve it fully before reporting it to the application.

Note that publicId maybe null, therefore we pass a pointer rather than a reference.

.. index:: pair: function; releaseInputSource
.. _doxid-class_poco_1_1_x_m_l_1_1_entity_resolver_1ab0ebc2597b449d0c7e8b7c69c9f31744:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual
	void
	releaseInputSource(:ref:`InputSource<doxid-class_poco_1_1_x_m_l_1_1_input_source>`* pSource) = 0

This is a non-standard extension to SAX! Called by the parser when the input source returned by ResolveEntity is no longer needed.

Should free any resources used by the input source.

