.. index:: pair: struct; Poco::Util::Units::Internal::Convert3
.. _doxid-struct_poco_1_1_util_1_1_units_1_1_internal_1_1_convert3:

template struct Poco::Util::Units::Internal::Convert3
=====================================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Converts T1 to T2. :ref:`More...<details-struct_poco_1_1_util_1_1_units_1_1_internal_1_1_convert3>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <Units.h>
	
	template <
		typename T1,
		typename T2
		>
	struct Convert3
	{
		// methods
	
		template <typename V>
		static
		V
		:ref:`fn<doxid-struct_poco_1_1_util_1_1_units_1_1_internal_1_1_convert3_1ae6b79b88b0e49a30af4d394044e959b6>`(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` V& v);
	};
.. _details-struct_poco_1_1_util_1_1_units_1_1_internal_1_1_convert3:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Converts T1 to T2.

Stage 3 - performed after Stage 1 and Stage 2. The reason we perform :ref:`Convert <doxid-struct_poco_1_1_util_1_1_units_1_1_internal_1_1_convert>` in stages is so that the compiler can resolve templates in the order we want it to.

Methods
-------

.. index:: pair: function; fn
.. _doxid-struct_poco_1_1_util_1_1_units_1_1_internal_1_1_convert3_1ae6b79b88b0e49a30af4d394044e959b6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename V>
	static
	V
	fn(:ref:`const<doxid-zconf_8h_1a2c212835823e3c54a8ab6d95c652660e>` V& v)

The default implementation assumes that the two quantities are in compatible :ref:`Units <doxid-namespace_poco_1_1_util_1_1_units_1_1_units>` up to some scaling factor.

Find the scaling factor and apply it.

