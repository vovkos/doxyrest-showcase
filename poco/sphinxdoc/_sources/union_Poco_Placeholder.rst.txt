.. index:: pair: union; Poco::Placeholder
.. _doxid-union_poco_1_1_placeholder:

template union Poco::Placeholder
================================

.. toctree::
	:hidden:

	struct_Poco_Placeholder_Size.rst

Overview
~~~~~~~~

ValueHolder union (used by :ref:`Poco::Any <doxid-class_poco_1_1_any>` and :ref:`Poco::Dynamic::Var <doxid-class_poco_1_1_dynamic_1_1_var>` for small object optimization, when enabled). :ref:`More...<details-union_poco_1_1_placeholder>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <Any.h>
	
	template <
		typename PlaceholderT,
		unsigned int SizeV = POCO_SMALL_OBJECT_SIZE
		>
	union Placeholder
	{
		// structs
	
		struct :ref:`Size<doxid-struct_poco_1_1_placeholder_1_1_size>`;

		// methods
	
		void
		:target:`erase<doxid-union_poco_1_1_placeholder_1ac84619c55c3385cf7c0dc84464b3cd43>`();
	
		bool
		:target:`isLocal<doxid-union_poco_1_1_placeholder_1aa5bbabc2b5e268a65f59a57222b5b468>`() const;
	
		void
		:target:`setLocal<doxid-union_poco_1_1_placeholder_1ae19edc66c55a8b3fe59e8e1d45df51d6>`(bool local) const;
	
		PlaceholderT*
		:target:`content<doxid-union_poco_1_1_placeholder_1aa29a09ca3519f3785002222d8c215017>`() const;
	};
.. _details-union_poco_1_1_placeholder:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

ValueHolder union (used by :ref:`Poco::Any <doxid-class_poco_1_1_any>` and :ref:`Poco::Dynamic::Var <doxid-class_poco_1_1_dynamic_1_1_var>` for small object optimization, when enabled).

If Holder<Type> fits into POCO_SMALL_OBJECT_SIZE bytes of storage, it will be placement-new-allocated into the local buffer (i.e. there will be no heap-allocation). The local buffer size is one byte larger - [POCO_SMALL_OBJECT_SIZE + 1], additional byte value indicating where the object was allocated (0 => heap, 1 => local).

